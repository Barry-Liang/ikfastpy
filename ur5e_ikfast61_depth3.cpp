/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2018-10-08 16:07:41.468340
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[0]);
x11=IKsin(j[4]);
x12=((1.0)*x5);
x13=((0.1)*x6);
x14=((0.1)*x0);
x15=((0.1)*x10);
x16=((1.0)*x6);
x17=((1.0)*x10);
x18=((1.0)*x0);
x19=((0.392)*x0);
x20=((0.1)*x4);
x21=((0.425)*x1);
x22=((1.0)*x9);
x23=((0.1)*x5);
x24=((0.392)*x10);
x25=(x10*x9);
x26=(x2*x3);
x27=(x1*x2);
x28=(x3*x4);
x29=(x1*x4);
x30=(x18*x28);
x31=(x17*x28);
x32=(x26+x29);
x33=((((-1.0)*x28))+(((1.0)*x27)));
x34=(x32*x5);
x35=(x33*x6);
x36=((((-1.0)*x30))+((x0*x27)));
x37=((((-1.0)*x31))+((x10*x27)));
x38=(x18*(((((-1.0)*x26))+(((-1.0)*x29)))));
x39=(x17*(((((-1.0)*x26))+(((-1.0)*x29)))));
x40=(x36*x5);
x41=(x37*x5);
x42=(((x6*(((((-1.0)*x26))+(((-1.0)*x29))))))+((x33*x5)));
x43=(x40+((x38*x6)));
x44=(x41+((x39*x6)));
x45=(((x38*x5))+((x6*(((((-1.0)*x18*x27))+x30)))));
x46=(((x6*(((((-1.0)*x17*x27))+x31))))+((x39*x5)));
x47=(x43*x9);
eerot[0]=(((x7*((x47+((x10*x11))))))+((x45*x8)));
eerot[1]=(((x45*x7))+((x8*(((((-1.0)*x11*x17))+(((-1.0)*x22*x43)))))));
eerot[2]=(((x11*(((((-1.0)*x12*x36))+(((-1.0)*x16*x38))))))+x25);
eetrans[0]=(((x19*x28))+(((-1.0)*x0*x21))+((x11*(((((-1.0)*x13*x38))+(((-1.0)*x23*x36))))))+(((-1.0)*x19*x27))+(((0.134)*x10))+((x5*((((x14*x29))+((x14*x26))))))+((x6*((((x14*x27))+(((-1.0)*x14*x28))))))+((x15*x9)));
eerot[3]=(((x46*x8))+((x7*(((((-1.0)*x0*x11))+((x44*x9)))))));
eerot[4]=(((x46*x7))+((x8*(((((-1.0)*x22*x44))+((x11*x18)))))));
eerot[5]=((((-1.0)*x18*x9))+((x11*(((((-1.0)*x12*x37))+(((-1.0)*x16*x39)))))));
eetrans[1]=((((-0.134)*x0))+(((-1.0)*x24*x27))+(((-1.0)*x14*x9))+(((-1.0)*x10*x21))+((x5*((((x15*x26))+((x15*x29))))))+((x24*x28))+((x11*(((((-1.0)*x13*x39))+(((-1.0)*x23*x37))))))+((x6*(((((-1.0)*x15*x28))+((x15*x27)))))));
eerot[6]=(((x7*x9*((x35+x34))))+((x42*x8)));
eerot[7]=(((x42*x7))+((x8*x9*(((((-1.0)*x35))+(((-1.0)*x34)))))));
eerot[8]=(x11*(((((-1.0)*x12*x32))+(((-1.0)*x16*x33)))));
eetrans[2]=((0.163)+((x5*(((((-0.1)*x27))+((x20*x3))))))+(((-0.392)*x26))+(((-0.392)*x29))+(((-0.425)*x3))+((x6*((((x1*x20))+(((0.1)*x26))))))+((x11*(((((-1.0)*x13*x33))+(((-1.0)*x23*x32)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=(px+(((-0.1)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=(py+(((-0.1)*r12)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.163)+(((-0.1)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x48=((1.0)*px);
IkReal x49=((1.0)*pz);
IkReal x50=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x50))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x49)));
rxp0_2=((((-1.0)*r10*x48))+((py*r00)));
rxp1_0=((((-1.0)*r21*x50))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x49)));
rxp1_2=((((-1.0)*r11*x48))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x50)));
rxp2_1=((((-1.0)*r02*x49))+((px*r22)));
rxp2_2=((((-1.0)*r12*x48))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x51=((0.2)*npx);
IkReal x52=((0.2)*npy);
IkReal x53=((0.1)*r22);
IkReal x54=((0.1)*r21);
IkReal x55=((-0.1)*r20);
IkReal x56=((-1.0)*r20);
IkReal x57=((-1.0)*rxp0_2);
IkReal x58=((-0.1)*r21);
IkReal x59=((-1.0)*r21);
IkReal x60=((-1.0)*rxp1_2);
IkReal x61=((-1.0)*npx);
IkReal x62=((-1.0)*r22);
IkReal x63=((-1.0)*npz);
matrixinvcoeffs[0]=x55;
matrixinvcoeffs[1]=x51;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x56;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x57;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x55;
matrixinvcoeffs[19]=x51;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x56;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x57;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x58;
matrixinvcoeffs[33]=x52;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x59;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x60;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x58;
matrixinvcoeffs[51]=x52;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x59;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x60;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x62;
matrixinvcoeffs[76]=x53;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x63;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x53;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x60;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x58;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x60;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x54;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x56;
matrixinvcoeffs[133]=x61;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.1)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x56;
matrixinvcoeffs[151]=x61;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x55;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x62;
matrixinvcoeffs[165]=x63;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x53;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x62;
matrixinvcoeffs[183]=x63;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.1)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x59;
matrixinvcoeffs[204]=x54;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x60;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x54;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x61;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x55;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x56;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x55;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x57;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x64=pz*pz;
IkReal x65=pp*pp;
IkReal x66=((0.2)*pz);
IkReal x67=(pp*r21);
IkReal x68=(gclwh13_10*rxp1_2);
IkReal x69=((0.00134)*r22);
IkReal x70=(npx*pz);
IkReal x71=((0.001)*r21);
IkReal x72=(pp*r20);
IkReal x73=(npy*pz);
IkReal x74=((4.0)*gclwh12_11);
IkReal x75=(gclwh10_11*r22);
IkReal x76=((0.00784)*r21);
IkReal x77=(pp*r22);
IkReal x78=(gclwh15_9*r20);
IkReal x79=(gclwh15_1*r20);
IkReal x80=(gclwh12_8*r21);
IkReal x81=((0.01)*r22);
IkReal x82=((0.2)*rxp2_2);
IkReal x83=(gclwh4_3*pp);
IkReal x84=(npz*pz);
IkReal x85=((2.0)*gclwh11_10);
IkReal x86=((0.01)*r21);
IkReal x87=(gclwh2_0*pz);
IkReal x88=(gclwh14_2*pz);
IkReal x89=(gclwh14_11*rxp0_2);
IkReal x90=((0.4)*rxp2_2);
IkReal x91=((0.00784)*r22);
IkReal x92=((1.0)*pz);
IkReal x93=((2.0)*gclwh4_11);
IkReal x94=((0.02)*r21);
IkReal x95=((0.1568)*rxp0_2);
IkReal x96=((0.0066)*rxp1_2);
IkReal x97=(gclwh8_2*r20);
IkReal x98=((0.0066)*rxp2_2);
IkReal x99=((0.01634)*r20);
IkReal x100=((9.045e-5)*r20);
IkReal x101=(gclwh14_8*r20);
IkReal x102=((0.02)*r22);
IkReal x103=((2.0)*gclwh9_10);
IkReal x104=(gclwh12_3*rxp1_2);
IkReal x105=(gclwh13_1*r21);
IkReal x106=((4.0)*gclwh14_11);
IkReal x107=((0.00268)*r20);
IkReal x108=(gclwh10_12*r22);
IkReal x109=((2.0)*gclwh13_10);
IkReal x110=((0.268)*gclwh14_14);
IkReal x111=(gclwh14_3*rxp0_2);
IkReal x112=((0.02)*rxp0_2);
IkReal x113=(gclwh12_14*r21);
IkReal x114=((2.0)*pp);
IkReal x115=((4.0)*gclwh11_10);
IkReal x116=(gclwh8_11*r20);
IkReal x117=((0.0132)*rxp2_2);
IkReal x118=((0.0132)*rxp0_2);
IkReal x119=((0.00817)*r22);
IkReal x120=(gclwh5_1*rxp2_2);
IkReal x121=((0.0268)*rxp2_2);
IkReal x122=(gclwh9_10*r20);
IkReal x123=(gclwh4_2*pz);
IkReal x124=(gclwh14_11*r20);
IkReal x125=((0.2)*rxp1_2);
IkReal x126=(gclwh5_0*rxp2_2);
IkReal x127=((0.1634)*rxp1_2);
IkReal x128=(gclwh13_15*r21);
IkReal x129=((4.0)*gclwh8_11);
IkReal x130=((0.00134)*r20);
IkReal x131=(gclwh3_3*r21);
IkReal x132=(gclwh5_1*r22);
IkReal x133=((0.0268)*rxp1_2);
IkReal x134=(gclwh7_13*r21);
IkReal x135=((2.0)*gclwh7_10);
IkReal x136=((0.0066)*rxp0_2);
IkReal x137=(gclwh13_9*rxp1_2);
IkReal x138=((0.00033)*r21);
IkReal x139=(gclwh2_1*r21);
IkReal x140=(gclwh7_0*pz);
IkReal x141=((0.536)*gclwh14_14);
IkReal x142=(gclwh6_11*rxp1_2);
IkReal x143=((0.17)*rxp2_2);
IkReal x144=((0.0536)*rxp1_2);
IkReal x145=(gclwh10_12*rxp2_2);
IkReal x146=((0.3268)*rxp1_2);
IkReal x147=((4.0)*gclwh9_10);
IkReal x148=((0.8)*rxp2_2);
IkReal x149=((0.04)*r22);
IkReal x150=((0.01634)*r21);
IkReal x151=((0.01)*r20);
IkReal x152=((4.0)*gclwh7_10);
IkReal x153=((0.1568)*rxp1_2);
IkReal x154=((0.2)*rxp0_2);
IkReal x155=((4.0)*gclwh4_11);
IkReal x156=((0.04)*r21);
IkReal x157=(gclwh10_2*r22);
IkReal x158=((0.2)*pp);
IkReal x159=(gclwh13_9*r21);
IkReal x160=((0.17)*rxp0_2);
IkReal x161=((0.268)*gclwh4_14);
IkReal x162=(gclwh12_8*rxp1_2);
IkReal x163=((0.8)*rxp0_2);
IkReal x164=((2.0)*gclwh6_11);
IkReal x165=(gclwh6_12*r21);
IkReal x166=(gclwh1_3*r20);
IkReal x167=((0.02)*rxp2_2);
IkReal x168=((0.0268)*rxp0_2);
IkReal x169=(gclwh8_2*rxp0_2);
IkReal x170=((0.1634)*rxp0_2);
IkReal x171=((2.0)*gclwh12_11);
IkReal x172=(gclwh10_2*rxp2_2);
IkReal x173=((0.1072)*rxp1_2);
IkReal x174=((2.0)*gclwh5_10);
IkReal x175=(gclwh11_0*r22);
IkReal x176=((0.268)*gclwh13_15);
IkReal x177=(gclwh10_2*pz);
IkReal x178=((0.268)*gclwh15_15);
IkReal x179=(gclwh9_0*pz);
IkReal x180=(gclwh4_3*r22);
IkReal x181=((2.0)*gclwh8_11);
IkReal x182=((2.0)*gclwh15_10);
IkReal x183=((0.268)*gclwh5_15);
IkReal x184=(gclwh4_14*rxp2_2);
IkReal x185=(gclwh4_8*r22);
IkReal x186=((0.00268)*r22);
IkReal x187=(gclwh4_3*rxp2_2);
IkReal x188=(gclwh12_3*r21);
IkReal x189=(gclwh9_0*r20);
IkReal x190=((0.00817)*r20);
IkReal x191=((0.3268)*rxp0_2);
IkReal x192=((4.0)*gclwh6_11);
IkReal x193=(gclwh12_11*rxp1_2);
IkReal x194=(gclwh11_0*pz);
IkReal x195=(gclwh5_9*r22);
IkReal x196=(gclwh5_0*pz);
IkReal x197=((0.4)*rxp0_2);
IkReal x198=((0.0132)*rxp1_2);
IkReal x199=((0.00784)*r20);
IkReal x200=((0.1568)*rxp2_2);
IkReal x201=((0.1634)*rxp2_2);
IkReal x202=((0.00675445)*r20);
IkReal x203=((0.536)*gclwh12_14);
IkReal x204=(gclwh15_1*rxp0_2);
IkReal x205=(gclwh13_0*pz);
IkReal x206=(gclwh9_13*r20);
IkReal x207=(gclwh11_13*r22);
IkReal x208=((0.1072)*rxp0_2);
IkReal x209=((0.00066)*r21);
IkReal x210=((0.536)*gclwh4_14);
IkReal x211=(gclwh5_15*rxp2_2);
IkReal x212=((0.00134)*r21);
IkReal x213=(gclwh8_12*r20);
IkReal x214=(gclwh13_1*rxp1_2);
IkReal x215=(gclwh6_2*pz);
IkReal x216=((2.0)*gclwh14_11);
IkReal x217=((0.0536)*rxp0_2);
IkReal x218=((0.268)*gclwh12_14);
IkReal x219=(gclwh12_2*pz);
IkReal x220=(gclwh14_14*x168);
IkReal x221=(gclwh6_5*x212);
IkReal x222=(gclwh4_14*x121);
IkReal x223=(gclwh10_5*x69);
IkReal x224=(gclwh8_5*x130);
IkReal x225=(gclwh12_14*x133);
IkReal x226=((0.02)*x162);
IkReal x227=(gclwh12_11*x125);
IkReal x228=(gclwh4_8*x167);
IkReal x229=(gclwh4_11*x82);
IkReal x230=(gclwh6_11*x86);
IkReal x231=((0.01)*x116);
IkReal x232=((0.01)*x75);
IkReal x233=((0.2)*x89);
IkReal x234=(gclwh14_8*x112);
IkReal x235=((0.02)*x137);
IkReal x236=(gclwh11_10*x81);
IkReal x237=(gclwh15_10*x154);
IkReal x238=((0.01)*x122);
IkReal x239=(gclwh5_9*x167);
IkReal x240=(gclwh7_10*x86);
IkReal x241=(gclwh5_10*x82);
IkReal x242=(gclwh15_9*x112);
IkReal x243=((0.2)*x68);
IkReal x244=(gclwh15_15*x168);
IkReal x245=(gclwh7_7*x212);
IkReal x246=(gclwh13_15*x133);
IkReal x247=(gclwh9_7*x130);
IkReal x248=(gclwh11_7*x69);
IkReal x249=(gclwh5_15*x121);
IkReal x250=(gclwh8_5*x168);
IkReal x251=(gclwh10_5*x121);
IkReal x252=(gclwh14_14*x130);
IkReal x253=((0.00134)*x113);
IkReal x254=(gclwh4_14*x69);
IkReal x255=(gclwh6_5*x133);
IkReal x256=(gclwh12_11*x86);
IkReal x257=(gclwh10_11*x82);
IkReal x258=((0.001)*x185);
IkReal x259=(gclwh4_11*x81);
IkReal x260=(gclwh8_11*x154);
IkReal x261=(gclwh12_8*x71);
IkReal x262=((0.001)*x101);
IkReal x263=(gclwh6_11*x125);
IkReal x264=((0.01)*x124);
IkReal x265=((0.001)*x78);
IkReal x266=(gclwh11_10*x82);
IkReal x267=(gclwh13_10*x86);
IkReal x268=(gclwh5_10*x81);
IkReal x269=(gclwh9_10*x154);
IkReal x270=((0.001)*x195);
IkReal x271=(gclwh13_9*x71);
IkReal x272=(gclwh7_10*x125);
IkReal x273=(gclwh15_10*x151);
IkReal x274=(gclwh5_15*x69);
IkReal x275=((0.00134)*x128);
IkReal x276=(gclwh7_7*x133);
IkReal x277=(gclwh11_7*x121);
IkReal x278=(gclwh9_7*x168);
IkReal x279=(gclwh15_15*x130);
IkReal x280=((0.4)*x89);
IkReal x281=((0.02)*x75);
IkReal x282=((0.02)*x116);
IkReal x283=(gclwh14_14*x217);
IkReal x284=(gclwh12_14*x144);
IkReal x285=((0.0536)*x184);
IkReal x286=(gclwh4_11*x90);
IkReal x287=(gclwh6_11*x94);
IkReal x288=((0.4)*x193);
IkReal x289=(gclwh13_15*x144);
IkReal x290=((0.0536)*x211);
IkReal x291=(gclwh15_15*x217);
IkReal x292=(gclwh11_10*x102);
IkReal x293=(gclwh15_10*x197);
IkReal x294=((0.02)*x122);
IkReal x295=((0.4)*x68);
IkReal x296=(gclwh7_10*x94);
IkReal x297=(gclwh5_10*x90);
IkReal x298=((0.02)*x124);
IkReal x299=((0.4)*x142);
IkReal x300=(gclwh14_14*x107);
IkReal x301=((0.00268)*x113);
IkReal x302=(gclwh4_14*x186);
IkReal x303=(gclwh4_11*x102);
IkReal x304=(gclwh12_11*x94);
IkReal x305=(gclwh10_11*x90);
IkReal x306=(gclwh8_11*x197);
IkReal x307=(gclwh15_9*x70);
IkReal x308=((2.0)*x64);
IkReal x309=((1.0)*x65);
IkReal x310=((0.134)*gclwh6_5*x67);
IkReal x311=((0.268)*gclwh10_5*x84);
IkReal x312=((0.268)*gclwh8_5*x70);
IkReal x313=((0.268)*gclwh6_5*x73);
IkReal x314=((0.134)*gclwh8_5*x72);
IkReal x315=((0.134)*gclwh10_5*x77);
IkReal x316=(gclwh14_2*rxp0_2*x66);
IkReal x317=((2.0)*gclwh10_11*x84);
IkReal x318=(x181*x70);
IkReal x319=(x177*x77);
IkReal x320=(x177*x81);
IkReal x321=(x104*x158);
IkReal x322=(gclwh8_2*pz*x72);
IkReal x323=(x82*x83);
IkReal x324=((0.01)*pz*x97);
IkReal x325=(gclwh12_2*rxp1_2*x66);
IkReal x326=(x111*x158);
IkReal x327=(gclwh4_2*rxp2_2*x66);
IkReal x328=(x164*x73);
IkReal x329=(x215*x86);
IkReal x330=(gclwh13_1*pp*x125);
IkReal x331=(x194*x77);
IkReal x332=(gclwh5_1*pp*x82);
IkReal x333=(x135*x73);
IkReal x334=(gclwh15_0*rxp0_2*x66);
IkReal x335=(x194*x81);
IkReal x336=(x151*x179);
IkReal x337=(x179*x72);
IkReal x338=(gclwh15_1*pp*x154);
IkReal x339=(x84*x85);
IkReal x340=(x103*x70);
IkReal x341=(x126*x66);
IkReal x342=(gclwh13_0*rxp1_2*x66);
IkReal x343=(x140*x86);
IkReal x344=((0.268)*gclwh9_7*x70);
IkReal x345=((0.134)*gclwh7_7*x67);
IkReal x346=((0.268)*gclwh11_7*x84);
IkReal x347=((0.134)*gclwh11_7*x77);
IkReal x348=((0.268)*gclwh7_7*x73);
IkReal x349=((0.134)*gclwh9_7*x72);
IkReal x350=(x218*x73);
IkReal x351=((0.134)*gclwh14_14*x72);
IkReal x352=(x161*x84);
IkReal x353=((0.134)*gclwh12_14*x67);
IkReal x354=(x110*x70);
IkReal x355=((0.134)*gclwh4_14*x77);
IkReal x356=(x72*x88);
IkReal x357=(x151*x88);
IkReal x358=((0.1)*gclwh4_8*x77);
IkReal x359=(x188*x65);
IkReal x360=(gclwh1_2*pz*x151);
IkReal x361=(gclwh3_2*pz*x86);
IkReal x362=((0.1)*gclwh12_8*x67);
IkReal x363=(x131*x65);
IkReal x364=(x166*x65);
IkReal x365=(gclwh6_2*rxp1_2*x66);
IkReal x366=(x216*x70);
IkReal x367=(x180*x65);
IkReal x368=(gclwh14_8*npx*x66);
IkReal x369=(x84*x93);
IkReal x370=(gclwh4_8*npz*x66);
IkReal x371=(gclwh12_8*npy*x66);
IkReal x372=(x172*x66);
IkReal x373=(x123*x81);
IkReal x374=(x171*x73);
IkReal x375=(x169*x66);
IkReal x376=((0.1)*gclwh14_8*x72);
IkReal x377=(x219*x86);
IkReal x378=(x205*x86);
IkReal x379=(gclwh0_0*pz*x151);
IkReal x380=(gclwh11_0*rxp2_2*x66);
IkReal x381=(x86*x87);
IkReal x382=(gclwh13_9*npy*x66);
IkReal x383=(x65*x79);
IkReal x384=(x196*x77);
IkReal x385=(x196*x81);
IkReal x386=(x205*x67);
IkReal x387=(gclwh9_0*rxp0_2*x66);
IkReal x388=((0.1)*gclwh15_9*x72);
IkReal x389=(x182*x70);
IkReal x390=(x139*x65);
IkReal x391=(gclwh5_9*npz*x66);
IkReal x392=(gclwh0_1*r20*x65);
IkReal x393=(gclwh7_0*rxp1_2*x66);
IkReal x394=((0.1)*gclwh5_9*x77);
IkReal x395=(gclwh15_9*npx*x66);
IkReal x396=((0.1)*gclwh13_9*x67);
IkReal x397=(x174*x84);
IkReal x398=(gclwh15_0*pz*x151);
IkReal x399=(x109*x73);
IkReal x400=((0.134)*gclwh13_15*x67);
IkReal x401=(x178*x70);
IkReal x402=((0.134)*gclwh5_15*x77);
IkReal x403=(x183*x84);
IkReal x404=((0.134)*gclwh15_15*x72);
IkReal x405=(x176*x73);
IkReal x406=(x181*x72);
IkReal x407=(x114*x75);
IkReal x408=(x192*x73);
IkReal x409=(x129*x70);
IkReal x410=(x164*x67);
IkReal x411=((4.0)*gclwh10_11*x84);
IkReal x412=(x77*x85);
IkReal x413=(x152*x73);
IkReal x414=(x103*x72);
IkReal x415=(x135*x67);
IkReal x416=(x147*x70);
IkReal x417=(x115*x84);
IkReal x418=(x216*x72);
IkReal x419=(x73*x74);
IkReal x420=(x155*x84);
IkReal x421=(x210*x84);
IkReal x422=(x110*x72);
IkReal x423=(x203*x73);
IkReal x424=(x218*x67);
IkReal x425=(x141*x70);
IkReal x426=(x161*x77);
IkReal x427=(x77*x93);
IkReal x428=(x171*x67);
IkReal x429=(x106*x70);
IkReal x430=(gclwh6_2*npy*x308);
IkReal x431=(gclwh6_2*x67*x92);
IkReal x432=(gclwh10_2*npz*x308);
IkReal x433=(gclwh8_2*npx*x308);
IkReal x434=(gclwh7_0*npy*x308);
IkReal x435=(gclwh9_0*npx*x308);
IkReal x436=(gclwh11_0*npz*x308);
IkReal x437=(gclwh7_0*x67*x92);
IkReal x438=(gclwh12_2*npy*x308);
IkReal x439=(gclwh3_2*npy*x308);
IkReal x440=(gclwh1_2*npx*x308);
IkReal x441=(gclwh14_3*x114*x70);
IkReal x442=(gclwh4_2*npz*x308);
IkReal x443=((2.0)*x83*x84);
IkReal x444=(gclwh12_2*x67*x92);
IkReal x445=(gclwh1_2*x72*x92);
IkReal x446=(gclwh3_3*x114*x73);
IkReal x447=(gclwh4_2*x77*x92);
IkReal x448=(gclwh1_3*x114*x70);
IkReal x449=(gclwh3_2*x67*x92);
IkReal x450=(gclwh12_3*x114*x73);
IkReal x451=(gclwh14_2*npx*x308);
IkReal x452=(gclwh14_3*r20*x309);
IkReal x453=(gclwh0_0*npx*x308);
IkReal x454=(gclwh2_0*npy*x308);
IkReal x455=(gclwh5_1*x114*x84);
IkReal x456=(gclwh13_1*x114*x73);
IkReal x457=(gclwh15_0*npx*x308);
IkReal x458=(gclwh2_1*x114*x73);
IkReal x459=(gclwh0_1*x114*x70);
IkReal x460=(gclwh5_0*npz*x308);
IkReal x461=(gclwh13_0*npy*x308);
IkReal x462=(gclwh0_0*x72*x92);
IkReal x463=(gclwh15_0*x72*x92);
IkReal x464=((1.0)*x67*x87);
IkReal x465=(x105*x309);
IkReal x466=(x132*x309);
IkReal x467=(gclwh15_1*x114*x70);
IkReal x468=(x222+x225);
IkReal x469=(x285+x284);
IkReal x470=(x246+x249);
IkReal x471=(x277+x278);
IkReal x472=(x250+x251);
IkReal x473=(x290+x289);
IkReal x474=(x328+x232+x233+x231);
IkReal x475=(x333+x238+x236+x237);
IkReal x476=(x374+x369+x264+x263);
IkReal x477=(x397+x399+x272+x273);
IkReal x478=(x279+x403+x405+x404);
IkReal x479=(x311+x310+x312+x221);
IkReal x480=(x346+x344+x345+x245);
IkReal x481=(x300+x423+x422+x421);
IkReal x482=(x351+x350+x352+x252);
IkReal x483=(x366+x259+x256+x257+x260);
IkReal x484=(x389+x267+x266+x269+x268);
IkReal x485=(x339+x340+x243+x241+x240);
IkReal x486=(x318+x317+x229+x227+x230);
IkReal x487=(x315+x314+x313+x223+x224);
IkReal x488=(x298+x299+x418+x419+x420);
IkReal x489=(x274+x275+x401+x400+x402);
IkReal x490=(x353+x355+x354+x254+x253);
IkReal x491=(x302+x301+x426+x425+x424);
IkReal x492=(x347+x348+x349+x247+x248);
IkReal x493=(x288+x287+x286+x409+x410+x411);
IkReal x494=(x295+x296+x297+x416+x417+x415);
IkReal x495=(x282+x281+x280+x407+x406+x408);
IkReal x496=(x292+x293+x294+x412+x413+x414);
IkReal x497=(x306+x304+x305+x303+x429+x428+x427);
IkReal x498=(x338+x342+x343+x341+x242+x435+x436+x437);
IkReal x499=(x325+x326+x327+x329+x234+x431+x432+x433);
IkReal x500=(x324+x320+x321+x322+x323+x319+x316+x228+x226+x430);
IkReal x501=(x332+x331+x330+x337+x336+x335+x334+x239+x235+x434);
IkReal x502=(x395+x394+x396+x393+x398+x270+x271+x458+x459+x463+x462+x461+x460+x467+x466+x465+x464);
IkReal x503=(x357+x356+x359+x358+x368+x360+x361+x362+x363+x364+x365+x367+x258+x261+x438+x439+x441+x440+x442+x66);
IkReal x504=(x377+x376+x375+x373+x372+x371+x370+x262+x449+x448+x445+x444+x447+x446+x443+x452+x450+x451);
IkReal x505=(x386+x387+x384+x385+x382+x383+x380+x381+x388+x379+x378+x391+x390+x392+x265+x456+x457+x454+x455+x453+x66);
op[0]=((((0.817)*gclwh6_12*x67))+(((-1.0)*x487))+(((1.634)*gclwh8_12*x70))+(((0.00817)*x165))+(((-1.634)*gclwh6_12*x73))+(((-1.0)*gclwh12_8*x127))+(((-0.817)*gclwh10_12*x77))+x468+x479+((gclwh14_8*x170))+(((-1.0)*gclwh4_8*x201))+(((-1.0)*gclwh8_12*x190))+(((-0.00817)*x108))+(((-0.817)*gclwh8_12*x72))+(((-1.0)*x220))+(((1.634)*gclwh10_12*x84)));
op[1]=((((-0.135089)*x187))+(((-1.0)*x499))+(((-1.0)*x486))+(((-1.0)*gclwh6_11*x67))+x474+x500+((gclwh8_11*x72))+((pp*x75))+(((0.135089)*x111))+(((-0.135089)*x104)));
op[2]=((-0.210112)+(((-1.0)*x493))+x495);
op[3]=((((0.784)*gclwh8_2*x72))+(((-1.0)*gclwh6_2*x76))+(((-1.0)*gclwh12_2*x153))+(((0.00784)*x97))+(((-1.568)*gclwh10_2*x84))+(((-1.0)*gclwh14_8*x160))+(((-1.0)*x469))+(((-0.784)*gclwh6_2*x67))+((gclwh4_8*x143))+x283+(((1.568)*gclwh6_2*x73))+(((-1.568)*gclwh8_2*x70))+(((0.784)*gclwh10_2*x77))+((gclwh14_2*x95))+((gclwh10_2*x91))+(((-1.0)*gclwh4_2*x200))+(((0.17)*x162)));
op[4]=((((-1.0)*gclwh14_8*x136))+(((-0.033)*gclwh8_12*x72))+(((0.066)*gclwh8_12*x70))+(((0.033)*gclwh6_12*x67))+(((-1.0)*x487))+(((-0.033)*gclwh10_12*x77))+(((0.066)*gclwh10_12*x84))+(((-1.0)*x468))+(((-0.00033)*x213))+x220+((gclwh6_12*x138))+((gclwh12_8*x96))+x479+(((-0.00033)*x108))+(((-0.066)*gclwh6_12*x73))+((gclwh4_8*x98)));
op[5]=((((-1.0)*x499))+(((-0.001809)*x104))+(((-1.0)*x474))+(((0.001809)*x111))+x486+x500+(((-1.0)*pp*x75))+((gclwh6_11*x67))+(((-0.001809)*x187))+(((-1.0)*gclwh8_11*x72)));
op[6]=((((-1.0)*x498))+(((0.135089)*x204))+((gclwh7_10*x67))+(((-1.0)*x475))+(((-0.135089)*x214))+(((-1.0)*gclwh11_10*x77))+x485+x501+(((-1.0)*gclwh9_10*x72))+(((-0.135089)*x120)));
op[7]=((((0.00817)*x134))+(((-1.634)*gclwh7_13*x73))+(((-1.0)*x492))+(((-1.0)*gclwh5_9*x201))+(((-1.0)*gclwh11_13*x119))+(((-0.817)*gclwh11_13*x77))+((gclwh15_9*x170))+(((-1.0)*gclwh9_13*x190))+x480+x470+(((-1.0)*gclwh13_9*x127))+(((-1.0)*x244))+(((1.634)*gclwh11_13*x84))+(((0.817)*gclwh7_13*x67))+(((1.634)*gclwh9_13*x70))+(((-0.817)*gclwh9_13*x72)));
op[8]=((((-1.0)*gclwh5_9*x143))+(((-0.784)*gclwh7_0*x67))+(((-1.0)*gclwh7_0*x76))+(((-1.568)*gclwh11_0*x84))+(((1.568)*gclwh7_0*x73))+(((0.00784)*x189))+(((-1.0)*x291))+((gclwh15_0*x95))+((gclwh15_9*x160))+(((-1.0)*gclwh13_0*x153))+(((-1.568)*gclwh9_0*x70))+x473+(((0.784)*gclwh9_0*x72))+((gclwh11_0*x91))+(((-0.1568)*x126))+(((-0.17)*x137))+(((0.784)*gclwh11_0*x77)));
op[9]=((-0.210112)+(((-1.0)*x494))+x496);
op[10]=((((-0.001809)*x214))+(((-1.0)*x498))+((gclwh11_10*x77))+(((-1.0)*x485))+(((-1.0)*gclwh7_10*x67))+(((-0.001809)*x120))+(((0.001809)*x204))+x475+x501+((gclwh9_10*x72)));
op[11]=((((-0.00033)*x207))+(((-0.00033)*x206))+(((0.00033)*x134))+(((-1.0)*x492))+(((-0.066)*gclwh7_13*x73))+(((-1.0)*x470))+((gclwh13_9*x96))+(((-0.033)*gclwh9_13*x72))+x244+x480+((gclwh5_9*x98))+(((0.066)*gclwh11_13*x84))+(((0.033)*gclwh7_13*x67))+(((-0.033)*gclwh11_13*x77))+(((-1.0)*gclwh15_9*x136))+(((0.066)*gclwh9_13*x70)));
op[12]=((((-1.634)*gclwh14_8*x70))+(((1.634)*gclwh4_8*x84))+(((-0.817)*gclwh12_8*x67))+(((-1.0)*x482))+(((-1.0)*gclwh6_12*x127))+(((0.817)*gclwh14_8*x72))+(((-1.0)*gclwh4_8*x119))+(((-0.817)*gclwh4_8*x77))+(((0.1634)*x145))+x490+x472+(((-0.00817)*x80))+((gclwh8_12*x170))+(((1.634)*gclwh12_8*x73))+(((0.00817)*x101))+(((-1.0)*x255)));
op[13]=((-0.685445)+(((0.00675445)*x166))+(((1.35089)*gclwh3_3*x73))+(((-1.0)*gclwh12_11*x67))+(((1.35089)*gclwh1_3*x70))+(((-0.665445)*gclwh4_3*x77))+(((-1.0)*x483))+(((0.665445)*gclwh14_3*x72))+(((-1.0)*x504))+(((0.00675445)*x131))+(((-1.35089)*gclwh14_3*x70))+(((-0.685445)*gclwh3_3*x67))+(((-0.665445)*gclwh12_3*x67))+(((-0.00675445)*x180))+(((-0.00675445)*x188))+x476+(((-0.685445)*gclwh1_3*x72))+((gclwh14_11*x72))+(((1.35089)*gclwh4_3*x84))+(((1.35089)*gclwh12_3*x73))+x503+((gclwh14_3*x202))+(((-1.0)*gclwh4_11*x77)));
op[14]=((-0.089834)+(((-1.0)*x497))+x488);
op[15]=((((-1.0)*gclwh4_2*x91))+((gclwh1_2*x199))+(((-1.0)*gclwh8_2*x95))+(((1.568)*gclwh12_2*x73))+(((0.85)*gclwh4_8*x77))+(((-1.0)*x491))+((gclwh3_2*x76))+(((1.7)*gclwh14_8*x70))+(((-0.784)*gclwh3_2*x67))+(((0.0085)*x185))+(((1.568)*gclwh3_2*x73))+(((-1.7)*gclwh4_8*x84))+(((-0.1568)*x172))+(((-1.568)*gclwh14_2*x70))+(((-0.0085)*x101))+x481+(((-0.784)*gclwh4_2*x77))+(((-0.784)*gclwh1_2*x72))+(((-1.7)*gclwh12_8*x73))+(((-0.784)*gclwh12_2*x67))+(((-1.0)*gclwh12_2*x76))+(((0.784)*gclwh14_2*x72))+((gclwh6_2*x153))+(((0.0085)*x80))+((gclwh14_2*x199))+(((0.85)*gclwh12_8*x67))+(((1.568)*gclwh1_2*x70))+(((1.568)*gclwh4_2*x84))+(((-0.85)*gclwh14_8*x72)));
op[16]=(((gclwh8_12*x136))+(((0.066)*gclwh14_8*x70))+(((-1.0)*x490))+(((-0.066)*gclwh4_8*x84))+(((-0.066)*gclwh12_8*x73))+((gclwh10_12*x98))+(((-0.033)*gclwh14_8*x72))+(((0.033)*gclwh12_8*x67))+x482+x472+(((0.00033)*x185))+(((-0.00033)*x101))+(((0.033)*gclwh4_8*x77))+(((0.00033)*x80))+(((-1.0)*gclwh6_12*x96))+(((-1.0)*x255)));
op[17]=((0.019045)+(((0.01809)*gclwh12_3*x73))+((gclwh1_3*x100))+(((-0.019045)*gclwh3_3*x67))+(((0.01809)*gclwh4_3*x84))+(((-1.0)*x504))+(((-0.01809)*gclwh14_3*x70))+(((-0.019045)*gclwh1_3*x72))+((gclwh14_3*x100))+(((-1.0)*x476))+(((0.01809)*gclwh3_3*x73))+(((-0.000955)*gclwh14_3*x72))+(((0.000955)*gclwh12_3*x67))+(((9.045e-5)*x131))+x483+(((-9.045e-5)*x188))+(((-9.045e-5)*x180))+x503+(((0.01809)*gclwh1_3*x70))+(((0.000955)*gclwh4_3*x77))+((gclwh12_11*x67))+(((-1.0)*gclwh14_11*x72))+((gclwh4_11*x77)));
op[18]=((0.685445)+(((0.665445)*gclwh13_1*x67))+(((-1.0)*x484))+((gclwh0_1*x202))+(((-0.00675445)*x79))+(((1.35089)*gclwh2_1*x73))+(((-1.0)*x502))+(((0.00675445)*x139))+(((0.00675445)*x132))+(((-0.685445)*gclwh2_1*x67))+(((0.665445)*gclwh5_1*x77))+(((-0.685445)*gclwh0_1*x72))+(((1.35089)*gclwh0_1*x70))+(((-1.0)*gclwh5_10*x77))+(((0.00675445)*x105))+x477+(((-1.35089)*gclwh13_1*x73))+x505+(((-1.0)*gclwh13_10*x67))+((gclwh15_10*x72))+(((-0.665445)*gclwh15_1*x72))+(((1.35089)*gclwh15_1*x70))+(((-1.35089)*gclwh5_1*x84)));
op[19]=((((-0.817)*gclwh15_9*x72))+(((0.00817)*x159))+((gclwh7_13*x127))+(((-1.0)*x489))+(((0.817)*gclwh13_9*x67))+((gclwh5_9*x119))+(((-1.0)*x471))+(((-1.0)*gclwh9_13*x170))+(((-1.634)*gclwh13_9*x73))+x276+x478+(((-1.0)*gclwh11_13*x201))+(((1.634)*x307))+(((-1.634)*gclwh5_9*x84))+(((0.817)*gclwh5_9*x77))+(((-0.00817)*x78)));
op[20]=((((-0.85)*gclwh15_9*x72))+(((-1.7)*gclwh13_9*x73))+(((-1.7)*gclwh5_9*x84))+(((-0.784)*gclwh15_0*x72))+(((0.784)*gclwh5_0*x77))+(((1.568)*gclwh0_0*x70))+(((1.7)*x307))+(((0.0085)*x195))+(((-1.568)*gclwh13_0*x73))+((gclwh5_0*x91))+(((-1.0)*x183*x77))+(((0.0085)*x159))+(((-0.536)*gclwh15_15*x70))+(((-1.568)*gclwh5_0*x84))+(((0.784)*gclwh13_0*x67))+((gclwh2_0*x76))+(((-1.0)*gclwh15_0*x199))+((gclwh13_0*x76))+(((-0.0085)*x78))+(((0.85)*gclwh13_9*x67))+(((-1.0)*gclwh7_0*x153))+(((1.568)*gclwh15_0*x70))+((gclwh11_0*x200))+((x178*x72))+(((-0.784)*gclwh2_0*x67))+(((1.568)*gclwh2_0*x73))+(((0.536)*gclwh13_15*x73))+(((0.536)*gclwh5_15*x84))+(((0.85)*gclwh5_9*x77))+((gclwh0_0*x199))+(((-0.00268)*x128))+(((-0.784)*gclwh0_0*x72))+((gclwh9_0*x95))+(((-1.0)*gclwh5_15*x186))+(((-1.0)*x176*x67))+((gclwh15_15*x107)));
op[21]=((-0.089834)+(((-4.0)*gclwh5_10*x84))+((x174*x77))+((gclwh9_10*x197))+(((-0.4)*gclwh7_10*rxp1_2))+((gclwh5_10*x102))+(((-4.0)*gclwh13_10*x73))+(((-1.0)*x182*x72))+((gclwh11_10*x90))+(((4.0)*gclwh15_10*x70))+(((-0.02)*gclwh15_10*r20))+((x109*x67))+((gclwh13_10*x94)));
op[22]=((-0.019045)+((gclwh0_1*x100))+((gclwh13_10*x67))+(((-9.045e-5)*x79))+(((-1.0)*x502))+(((-0.019045)*gclwh0_1*x72))+(((-0.000955)*gclwh5_1*x77))+(((9.045e-5)*x105))+(((0.01809)*gclwh0_1*x70))+(((-1.0)*x477))+((gclwh5_10*x77))+(((0.000955)*gclwh15_1*x72))+(((9.045e-5)*x132))+(((9.045e-5)*x139))+(((-0.01809)*gclwh13_1*x73))+x484+(((-0.01809)*gclwh5_1*x84))+x505+(((0.01809)*gclwh2_1*x73))+(((0.01809)*gclwh15_1*x70))+(((-0.000955)*gclwh13_1*x67))+(((-0.019045)*gclwh2_1*x67))+(((-1.0)*gclwh15_10*x72)));
op[23]=((((-0.00033)*x195))+(((0.066)*gclwh5_9*x84))+(((0.033)*gclwh15_9*x72))+(((-1.0)*x471))+(((-1.0)*x478))+(((-0.033)*gclwh5_9*x77))+(((0.00033)*x78))+(((-0.066)*x307))+x276+(((-1.0)*gclwh11_13*x98))+x489+(((0.066)*gclwh13_9*x73))+(((-1.0)*gclwh9_13*x136))+((gclwh7_13*x96))+(((-0.033)*gclwh13_9*x67))+(((-1.0)*gclwh13_9*x138)));
op[24]=((-0.437912)+(((-1.0)*x493))+x495);
op[25]=((((-1.0)*gclwh12_2*x146))+(((0.01634)*x97))+(((-0.3268)*gclwh4_2*rxp2_2))+(((-1.0)*gclwh6_2*x150))+(((-1.634)*gclwh6_2*x67))+(((-1.0)*x469))+(((-3.268)*gclwh10_2*x84))+(((1.634)*gclwh8_2*x72))+x283+(((0.01634)*x157))+(((1.634)*gclwh10_2*x77))+(((3.268)*gclwh6_2*x73))+((gclwh14_2*x191))+(((-3.268)*gclwh8_2*x70)));
op[26]=((((-3.136)*gclwh8_12*x70))+(((3.136)*gclwh6_12*x73))+(((1.568)*gclwh8_12*x72))+(((-0.01568)*x165))+((gclwh14_14*x208))+(((0.01568)*x108))+(((-1.568)*gclwh6_12*x67))+(((-1.0)*gclwh12_14*x173))+(((0.01568)*x213))+(((-3.136)*gclwh10_12*x84))+(((-0.1072)*x184))+(((1.568)*gclwh10_12*x77)));
op[27]=((((-0.8)*x89))+(((-0.04)*x75))+(((-1.0)*x129*x72))+(((-0.04)*x116))+(((-4.0)*pp*x75))+(((8.0)*gclwh8_11*x70))+(((0.8)*x193))+((x192*x67))+(((8.0)*gclwh10_11*x84))+((gclwh4_11*x148))+(((-8.0)*gclwh6_11*x73))+((gclwh6_11*x156)));
op[28]=((-0.017688)+(((-1.0)*x495))+x493);
op[29]=((((-1.0)*gclwh6_2*x209))+(((-1.0)*gclwh12_2*x198))+(((0.066)*gclwh8_2*x72))+(((-1.0)*gclwh4_2*x117))+(((0.00066)*x157))+((gclwh14_2*x118))+(((-0.132)*gclwh8_2*x70))+(((0.132)*gclwh6_2*x73))+(((-0.132)*gclwh10_2*x84))+x469+(((0.00066)*x97))+(((0.066)*gclwh10_2*x77))+(((-1.0)*x283))+(((-0.066)*gclwh6_2*x67)));
op[30]=((((3.268)*gclwh7_0*x73))+(((-0.3268)*x126))+(((-1.634)*gclwh7_0*x67))+(((1.634)*gclwh11_0*x77))+(((-1.0)*x291))+(((-3.268)*gclwh11_0*x84))+((gclwh15_0*x191))+(((-3.268)*gclwh9_0*x70))+(((0.01634)*x175))+x473+(((-1.0)*gclwh7_0*x150))+(((-1.0)*gclwh13_0*x146))+(((1.634)*gclwh9_0*x72))+((gclwh9_0*x99)));
op[31]=((-0.437912)+(((-1.0)*x494))+x496);
op[32]=((((-1.0)*x152*x67))+(((-1.0)*gclwh5_10*x148))+((gclwh11_10*x149))+((gclwh15_10*x163))+((x115*x77))+(((-0.8)*x68))+(((-8.0)*gclwh9_10*x70))+(((8.0)*gclwh7_10*x73))+(((0.04)*x122))+(((-1.0)*gclwh7_10*x156))+(((-8.0)*gclwh11_10*x84))+((x147*x72)));
op[33]=((((-3.136)*gclwh9_13*x70))+(((-0.01568)*x134))+((gclwh15_15*x208))+(((3.136)*gclwh7_13*x73))+(((-3.136)*gclwh11_13*x84))+(((1.568)*gclwh11_13*x77))+(((0.01568)*x207))+(((0.01568)*x206))+(((-1.568)*gclwh7_13*x67))+(((-1.0)*gclwh13_15*x173))+(((-0.1072)*x211))+(((1.568)*gclwh9_13*x72)));
op[34]=((((0.00066)*x189))+(((-1.0)*x473))+(((0.066)*gclwh11_0*x77))+((gclwh15_0*x118))+(((0.066)*gclwh9_0*x72))+(((0.00066)*x175))+(((-1.0)*gclwh5_0*x117))+(((-0.132)*gclwh9_0*x70))+(((-0.066)*gclwh7_0*x67))+x291+(((-1.0)*gclwh13_0*x198))+(((0.132)*gclwh7_0*x73))+(((-1.0)*gclwh7_0*x209))+(((-0.132)*gclwh11_0*x84)));
op[35]=((-0.017688)+(((-1.0)*x496))+x494);
op[36]=((1.299066)+(((-1.0)*x497))+x488);
op[37]=((((3.268)*gclwh12_2*x73))+(((-1.0)*x491))+(((-1.0)*gclwh12_2*x150))+(((3.268)*gclwh3_2*x73))+(((3.268)*gclwh1_2*x70))+(((-0.3268)*x172))+(((-0.3268)*x169))+((gclwh1_2*x99))+(((-1.634)*gclwh3_2*x67))+(((-3.268)*gclwh14_2*x70))+x481+(((-1.634)*gclwh4_2*x77))+((gclwh14_2*x99))+(((-1.634)*gclwh1_2*x72))+(((-0.01634)*gclwh4_2*r22))+(((3.268)*gclwh4_2*x84))+((gclwh3_2*x150))+(((1.634)*gclwh14_2*x72))+(((-1.634)*gclwh12_2*x67))+((gclwh6_2*x146)));
op[38]=((((0.3136)*gclwh6_12*rxp1_2))+(((-0.00536)*gclwh4_14*r22))+(((-0.3136)*x145))+(((-0.3136)*gclwh8_12*rxp0_2))+((x141*x72))+(((-1.072)*gclwh14_14*x70))+(((-0.00536)*x113))+(((-1.0)*x210*x77))+(((1.072)*gclwh4_14*x84))+(((0.00536)*gclwh14_14*r20))+(((1.072)*gclwh12_14*x73))+(((-1.0)*x203*x67)));
op[39]=((-0.03602)+((gclwh10_11*x148))+(((-0.8)*x142))+(((-0.04)*x124))+(((-8.0)*gclwh12_11*x73))+((x67*x74))+(((-8.0)*gclwh4_11*x84))+(((-1.0)*x106*x72))+(((8.0)*gclwh14_11*x70))+((gclwh12_11*x156))+((x155*x77))+((gclwh4_11*x149))+((gclwh8_11*x163)));
op[40]=((0.033734)+(((-1.0)*x488))+x497);
IkReal x506=pz*pz;
IkReal x507=pp*pp;
IkReal x508=((0.2)*pz);
IkReal x509=(pp*r21);
IkReal x510=((0.2)*rxp1_2);
IkReal x511=((0.00134)*r22);
IkReal x512=((0.066)*pz);
IkReal x513=(gclwh14_8*npx);
IkReal x514=((0.001)*r21);
IkReal x515=(pp*r20);
IkReal x516=(gclwh13_10*r21);
IkReal x517=(gclwh5_0*r22);
IkReal x518=((0.0132)*rxp2_2);
IkReal x519=((2.0)*pz);
IkReal x520=(gclwh7_10*npy);
IkReal x521=((0.02)*r22);
IkReal x522=((0.00784)*r21);
IkReal x523=(gclwh15_9*r20);
IkReal x524=(gclwh15_1*r20);
IkReal x525=(gclwh12_8*r21);
IkReal x526=((0.01)*r22);
IkReal x527=(gclwh6_12*npy);
IkReal x528=((0.2)*rxp2_2);
IkReal x529=(gclwh4_3*pp);
IkReal x530=(npz*pz);
IkReal x531=(gclwh2_0*pz);
IkReal x532=((0.01)*r21);
IkReal x533=(gclwh14_2*pz);
IkReal x534=((0.2)*rxp0_2);
IkReal x535=(gclwh8_2*pz);
IkReal x536=((0.00784)*r22);
IkReal x537=((1.0)*pz);
IkReal x538=(gclwh9_13*rxp0_2);
IkReal x539=(npx*pz);
IkReal x540=((0.1568)*rxp0_2);
IkReal x541=(npy*pz);
IkReal x542=((0.784)*pp);
IkReal x543=((0.0066)*rxp1_2);
IkReal x544=((0.536)*gclwh15_15);
IkReal x545=(pp*r22);
IkReal x546=((0.0066)*rxp2_2);
IkReal x547=((0.536)*gclwh5_15);
IkReal x548=(gclwh12_8*npy);
IkReal x549=((9.045e-5)*r20);
IkReal x550=(gclwh14_8*r20);
IkReal x551=(gclwh4_2*pz);
IkReal x552=(gclwh12_3*rxp1_2);
IkReal x553=(gclwh13_1*r21);
IkReal x554=((0.0132)*rxp1_2);
IkReal x555=(gclwh15_15*r20);
IkReal x556=((0.268)*gclwh14_14);
IkReal x557=((0.135089)*rxp0_2);
IkReal x558=((0.02)*rxp0_2);
IkReal x559=(gclwh12_14*r21);
IkReal x560=((0.00066)*r21);
IkReal x561=(gclwh5_1*pp);
IkReal x562=(gclwh8_11*r20);
IkReal x563=((0.02)*r21);
IkReal x564=((0.00817)*r22);
IkReal x565=(gclwh7_0*rxp1_2);
IkReal x566=((0.001809)*rxp2_2);
IkReal x567=(gclwh4_14*rxp2_2);
IkReal x568=((4.0)*gclwh15_10);
IkReal x569=((0.00066)*r20);
IkReal x570=(gclwh9_10*rxp0_2);
IkReal x571=(gclwh14_11*r20);
IkReal x572=((0.00033)*r22);
IkReal x573=((0.1634)*rxp1_2);
IkReal x574=(gclwh13_15*r21);
IkReal x575=((0.00134)*r20);
IkReal x576=(gclwh3_3*r21);
IkReal x577=(gclwh5_1*r22);
IkReal x578=(gclwh7_13*r21);
IkReal x579=(gclwh13_9*rxp1_2);
IkReal x580=((0.00033)*r21);
IkReal x581=(gclwh7_0*pz);
IkReal x582=(gclwh14_8*rxp0_2);
IkReal x583=((0.17)*rxp2_2);
IkReal x584=((0.0536)*rxp1_2);
IkReal x585=((0.1634)*rxp2_2);
IkReal x586=((0.1568)*rxp2_2);
IkReal x587=((0.01)*r20);
IkReal x588=((0.01634)*r21);
IkReal x589=(gclwh7_10*rxp1_2);
IkReal x590=(gclwh12_3*pp);
IkReal x591=(gclwh13_9*r21);
IkReal x592=((0.268)*gclwh4_14);
IkReal x593=(gclwh12_8*rxp1_2);
IkReal x594=((0.4)*rxp2_2);
IkReal x595=((0.0132)*rxp0_2);
IkReal x596=((0.00784)*r20);
IkReal x597=(gclwh1_3*r20);
IkReal x598=(gclwh14_3*pp);
IkReal x599=((0.02)*rxp2_2);
IkReal x600=((0.0268)*rxp0_2);
IkReal x601=(gclwh15_9*rxp0_2);
IkReal x602=((0.1568)*rxp1_2);
IkReal x603=((0.0268)*rxp1_2);
IkReal x604=((0.536)*gclwh13_15);
IkReal x605=(gclwh2_1*r21);
IkReal x606=((0.02)*r20);
IkReal x607=((0.4)*rxp1_2);
IkReal x608=((0.01634)*r20);
IkReal x609=((0.268)*gclwh13_15);
IkReal x610=(gclwh10_2*pz);
IkReal x611=(gclwh15_0*pz);
IkReal x612=((0.268)*gclwh15_15);
IkReal x613=(gclwh5_15*r22);
IkReal x614=(gclwh8_12*rxp0_2);
IkReal x615=(gclwh9_0*pz);
IkReal x616=(gclwh4_3*r22);
IkReal x617=((0.268)*gclwh5_15);
IkReal x618=((0.0268)*rxp2_2);
IkReal x619=(gclwh4_8*r22);
IkReal x620=((1.634)*pz);
IkReal x621=((4.0)*gclwh5_10);
IkReal x622=(npx*pp);
IkReal x623=((4.0)*gclwh13_10);
IkReal x624=(gclwh12_3*r21);
IkReal x625=(gclwh4_2*r22);
IkReal x626=((0.00817)*r20);
IkReal x627=((1.568)*npx);
IkReal x628=(gclwh0_1*r20);
IkReal x629=(npy*pp);
IkReal x630=(gclwh13_9*npy);
IkReal x631=(gclwh11_0*pz);
IkReal x632=(gclwh5_9*r22);
IkReal x633=((0.4)*rxp0_2);
IkReal x634=((0.135089)*rxp2_2);
IkReal x635=(gclwh13_0*pz);
IkReal x636=(gclwh14_3*r20);
IkReal x637=((0.00033)*r20);
IkReal x638=((0.00134)*r21);
IkReal x639=(gclwh13_1*rxp1_2);
IkReal x640=(gclwh6_2*pz);
IkReal x641=((0.0536)*rxp0_2);
IkReal x642=((0.001809)*rxp0_2);
IkReal x643=((0.268)*gclwh12_14);
IkReal x644=(gclwh12_2*pz);
IkReal x645=((0.00268)*x613);
IkReal x646=((0.00268)*x574);
IkReal x647=((0.00268)*x555);
IkReal x648=((0.4)*x589);
IkReal x649=(gclwh15_10*x606);
IkReal x650=((0.4)*x570);
IkReal x651=(gclwh5_10*x521);
IkReal x652=(gclwh11_10*x594);
IkReal x653=((0.02)*x516);
IkReal x654=((0.0268)*x567);
IkReal x655=(gclwh6_5*x638);
IkReal x656=(gclwh12_14*x603);
IkReal x657=(gclwh14_14*x600);
IkReal x658=(gclwh10_5*x511);
IkReal x659=(gclwh8_5*x575);
IkReal x660=((0.01)*x562);
IkReal x661=((0.02)*x593);
IkReal x662=(gclwh10_11*x526);
IkReal x663=(gclwh14_11*x534);
IkReal x664=(gclwh4_8*x599);
IkReal x665=(gclwh14_8*x558);
IkReal x666=(gclwh12_11*x510);
IkReal x667=(gclwh4_11*x528);
IkReal x668=(gclwh6_11*x532);
IkReal x669=((0.02)*x579);
IkReal x670=(gclwh7_10*x532);
IkReal x671=(gclwh5_10*x528);
IkReal x672=(gclwh5_9*x599);
IkReal x673=(gclwh13_10*x510);
IkReal x674=(gclwh11_10*x526);
IkReal x675=(gclwh15_10*x534);
IkReal x676=(gclwh9_10*x587);
IkReal x677=(gclwh15_9*x558);
IkReal x678=(gclwh13_15*x603);
IkReal x679=(gclwh5_15*x618);
IkReal x680=(gclwh7_7*x638);
IkReal x681=(gclwh15_15*x600);
IkReal x682=(gclwh9_7*x575);
IkReal x683=(gclwh11_7*x511);
IkReal x684=((0.00268)*x559);
IkReal x685=((0.00268)*gclwh4_14*r22);
IkReal x686=((0.00268)*gclwh14_14*r20);
IkReal x687=((0.00134)*x559);
IkReal x688=(gclwh8_5*x600);
IkReal x689=(gclwh10_5*x618);
IkReal x690=(gclwh4_14*x511);
IkReal x691=(gclwh6_5*x603);
IkReal x692=(gclwh14_14*x575);
IkReal x693=((0.001)*x619);
IkReal x694=(gclwh6_11*x510);
IkReal x695=((0.01)*x571);
IkReal x696=(gclwh12_8*x514);
IkReal x697=(gclwh12_11*x532);
IkReal x698=(gclwh10_11*x528);
IkReal x699=((0.001)*x550);
IkReal x700=(gclwh4_11*x526);
IkReal x701=(gclwh8_11*x534);
IkReal x702=((0.001)*x523);
IkReal x703=(gclwh7_10*x510);
IkReal x704=(gclwh15_10*x587);
IkReal x705=((0.001)*x632);
IkReal x706=(gclwh11_10*x528);
IkReal x707=(gclwh13_9*x514);
IkReal x708=((0.01)*x516);
IkReal x709=(gclwh5_10*x526);
IkReal x710=(gclwh9_10*x534);
IkReal x711=((0.00134)*x555);
IkReal x712=(gclwh7_7*x603);
IkReal x713=(gclwh11_7*x618);
IkReal x714=(gclwh5_15*x511);
IkReal x715=((0.00134)*x574);
IkReal x716=(gclwh9_7*x600);
IkReal x717=(gclwh15_9*x539);
IkReal x718=((2.0)*x506);
IkReal x719=((1.0)*x507);
IkReal x720=(x509*x609);
IkReal x721=(x545*x617);
IkReal x722=(x539*x544);
IkReal x723=(x515*x612);
IkReal x724=(x530*x547);
IkReal x725=(x541*x604);
IkReal x726=((2.0)*gclwh15_10*x515);
IkReal x727=(x530*x621);
IkReal x728=(x541*x623);
IkReal x729=((2.0)*gclwh13_10*x509);
IkReal x730=(x539*x568);
IkReal x731=((2.0)*gclwh5_10*x545);
IkReal x732=((0.134)*gclwh6_5*x509);
IkReal x733=((0.268)*gclwh10_5*x530);
IkReal x734=((0.268)*gclwh8_5*x539);
IkReal x735=((0.268)*gclwh6_5*x541);
IkReal x736=((0.134)*gclwh8_5*x515);
IkReal x737=((0.134)*gclwh10_5*x545);
IkReal x738=(gclwh14_2*rxp0_2*x508);
IkReal x739=(gclwh6_11*npy*x519);
IkReal x740=(x545*x610);
IkReal x741=(x526*x610);
IkReal x742=(x510*x590);
IkReal x743=(x515*x535);
IkReal x744=(x528*x529);
IkReal x745=(x535*x587);
IkReal x746=(gclwh12_2*rxp1_2*x508);
IkReal x747=(x534*x598);
IkReal x748=(gclwh4_2*rxp2_2*x508);
IkReal x749=(gclwh10_11*npz*x519);
IkReal x750=(x532*x640);
IkReal x751=(gclwh8_11*npx*x519);
IkReal x752=(gclwh11_10*npz*x519);
IkReal x753=(gclwh9_10*npx*x519);
IkReal x754=(gclwh13_1*pp*x510);
IkReal x755=(x545*x631);
IkReal x756=(x528*x561);
IkReal x757=(gclwh15_0*rxp0_2*x508);
IkReal x758=(x526*x631);
IkReal x759=(x587*x615);
IkReal x760=(x515*x615);
IkReal x761=(gclwh15_1*pp*x534);
IkReal x762=(gclwh5_0*rxp2_2*x508);
IkReal x763=(gclwh13_0*rxp1_2*x508);
IkReal x764=(x532*x581);
IkReal x765=(x519*x520);
IkReal x766=((0.268)*gclwh9_7*x539);
IkReal x767=((0.134)*gclwh7_7*x509);
IkReal x768=((0.268)*gclwh11_7*x530);
IkReal x769=((0.134)*gclwh11_7*x545);
IkReal x770=((0.268)*gclwh7_7*x541);
IkReal x771=((0.134)*gclwh9_7*x515);
IkReal x772=(x509*x643);
IkReal x773=((0.536)*gclwh14_14*x539);
IkReal x774=(x545*x592);
IkReal x775=((0.536)*gclwh4_14*x530);
IkReal x776=(x515*x556);
IkReal x777=((0.536)*gclwh12_14*x541);
IkReal x778=((0.134)*gclwh12_14*x509);
IkReal x779=(x539*x556);
IkReal x780=((0.134)*gclwh4_14*x545);
IkReal x781=(x541*x643);
IkReal x782=((0.134)*gclwh14_14*x515);
IkReal x783=(x530*x592);
IkReal x784=(x515*x533);
IkReal x785=(x533*x587);
IkReal x786=((0.1)*gclwh4_8*x545);
IkReal x787=(x507*x624);
IkReal x788=(gclwh1_2*pz*x587);
IkReal x789=(gclwh3_2*pz*x532);
IkReal x790=(gclwh4_11*npz*x519);
IkReal x791=((0.1)*gclwh12_8*x509);
IkReal x792=(x507*x576);
IkReal x793=(x507*x597);
IkReal x794=(gclwh6_2*rxp1_2*x508);
IkReal x795=(x507*x616);
IkReal x796=(gclwh12_11*npy*x519);
IkReal x797=(x508*x513);
IkReal x798=(gclwh4_8*npz*x508);
IkReal x799=(gclwh14_11*npx*x519);
IkReal x800=(x508*x548);
IkReal x801=(gclwh10_2*rxp2_2*x508);
IkReal x802=(x526*x551);
IkReal x803=(gclwh8_2*rxp0_2*x508);
IkReal x804=((0.1)*gclwh14_8*x515);
IkReal x805=(x532*x644);
IkReal x806=(x532*x635);
IkReal x807=(gclwh0_0*pz*x587);
IkReal x808=(gclwh11_0*rxp2_2*x508);
IkReal x809=(x531*x532);
IkReal x810=(x508*x630);
IkReal x811=(x507*x524);
IkReal x812=(pp*pz*x517);
IkReal x813=((0.01)*pz*x517);
IkReal x814=(x509*x635);
IkReal x815=(gclwh9_0*rxp0_2*x508);
IkReal x816=((0.1)*gclwh15_9*x515);
IkReal x817=(x507*x605);
IkReal x818=(gclwh5_10*npz*x519);
IkReal x819=(gclwh13_10*npy*x519);
IkReal x820=(gclwh5_9*npz*x508);
IkReal x821=(x507*x628);
IkReal x822=(x508*x565);
IkReal x823=((0.1)*gclwh5_9*x545);
IkReal x824=(gclwh15_9*npx*x508);
IkReal x825=((0.1)*gclwh13_9*x509);
IkReal x826=(gclwh15_10*npx*x519);
IkReal x827=(x587*x611);
IkReal x828=(x530*x617);
IkReal x829=((0.134)*gclwh15_15*x515);
IkReal x830=(x541*x609);
IkReal x831=((0.134)*gclwh13_15*x509);
IkReal x832=(x539*x612);
IkReal x833=((0.134)*gclwh5_15*x545);
IkReal x834=(gclwh6_2*npy*x718);
IkReal x835=(gclwh6_2*x509*x537);
IkReal x836=(gclwh10_2*npz*x718);
IkReal x837=(gclwh8_2*npx*x718);
IkReal x838=(gclwh7_0*npy*x718);
IkReal x839=(gclwh9_0*npx*x718);
IkReal x840=(gclwh11_0*npz*x718);
IkReal x841=(gclwh7_0*x509*x537);
IkReal x842=(gclwh12_2*npy*x718);
IkReal x843=(gclwh3_2*npy*x718);
IkReal x844=(gclwh1_2*npx*x718);
IkReal x845=(npx*x519*x598);
IkReal x846=(gclwh4_2*npz*x718);
IkReal x847=(npz*x519*x529);
IkReal x848=(gclwh12_2*x509*x537);
IkReal x849=(gclwh1_2*x515*x537);
IkReal x850=(gclwh3_3*x519*x629);
IkReal x851=(gclwh4_2*x537*x545);
IkReal x852=(gclwh1_3*x519*x622);
IkReal x853=(gclwh3_2*x509*x537);
IkReal x854=(npy*x519*x590);
IkReal x855=(gclwh14_2*npx*x718);
IkReal x856=(x636*x719);
IkReal x857=(gclwh0_0*npx*x718);
IkReal x858=(gclwh2_0*npy*x718);
IkReal x859=(npz*x519*x561);
IkReal x860=(gclwh13_1*x519*x629);
IkReal x861=(gclwh15_0*npx*x718);
IkReal x862=(gclwh2_1*x519*x629);
IkReal x863=(gclwh0_1*x519*x622);
IkReal x864=(gclwh5_0*npz*x718);
IkReal x865=(gclwh13_0*npy*x718);
IkReal x866=(gclwh0_0*x515*x537);
IkReal x867=(gclwh15_0*x515*x537);
IkReal x868=((1.0)*x509*x531);
IkReal x869=(x553*x719);
IkReal x870=(x577*x719);
IkReal x871=(gclwh15_1*x519*x622);
IkReal x872=(x689+x688);
IkReal x873=(x678+x679);
IkReal x874=(x713+x716);
IkReal x875=(x654+x656);
IkReal x876=(x660+x663+x662+x739);
IkReal x877=(x676+x674+x675+x765);
IkReal x878=(x703+x704+x818+x819);
IkReal x879=(x694+x695+x790+x796);
IkReal x880=(x647+x723+x724+x725);
IkReal x881=(x711+x829+x828+x830);
IkReal x882=(x655+x734+x733+x732);
IkReal x883=(x686+x777+x776+x775);
IkReal x884=(x692+x782+x783+x781);
IkReal x885=(x680+x768+x766+x767);
IkReal x886=(x697+x698+x700+x701+x799);
IkReal x887=(x710+x708+x709+x706+x826);
IkReal x888=(x673+x670+x671+x753+x752);
IkReal x889=(x668+x667+x666+x751+x749);
IkReal x890=(x649+x648+x726+x727+x728);
IkReal x891=(x685+x684+x773+x772+x774);
IkReal x892=(x658+x659+x737+x736+x735);
IkReal x893=(x715+x714+x831+x832+x833);
IkReal x894=(x683+x682+x771+x770+x769);
IkReal x895=(x687+x690+x779+x778+x780);
IkReal x896=(x646+x645+x720+x721+x722);
IkReal x897=(x650+x651+x652+x653+x731+x730+x729);
IkReal x898=(x677+x764+x761+x762+x763+x839+x841+x840);
IkReal x899=(x665+x750+x746+x747+x748+x835+x836+x837);
IkReal x900=(x669+x672+x755+x754+x757+x756+x759+x758+x760+x838);
IkReal x901=(x661+x664+x738+x744+x745+x742+x743+x740+x741+x834);
IkReal x902=(x707+x705+x869+x868+x867+x866+x865+x864+x863+x862+x870+x871+x823+x822+x827+x825+x824);
IkReal x903=(x508+x696+x693+x791+x793+x792+x795+x794+x797+x786+x787+x784+x785+x788+x789+x843+x842+x845+x844+x846);
IkReal x904=(x699+x798+x852+x853+x850+x851+x856+x854+x855+x847+x849+x848+x805+x804+x801+x800+x803+x802);
IkReal x905=(x508+x702+x857+x858+x859+x861+x860+x816+x817+x814+x815+x812+x813+x810+x811+x821+x820+x809+x808+x807+x806);
op[41]=((((-1.0)*gclwh10_2*x518))+((gclwh1_2*x569))+((gclwh3_2*x560))+(((0.132)*gclwh1_2*x539))+((gclwh14_2*x569))+(((-1.0)*gclwh12_2*x560))+(((-0.132)*npx*x533))+(((-0.066)*gclwh12_2*x509))+(((0.132)*gclwh3_2*x541))+(((-1.0)*x883))+(((0.132)*gclwh12_2*x541))+(((-0.066)*gclwh3_2*x509))+(((-0.066)*gclwh4_2*x545))+((gclwh6_2*x554))+(((-0.066)*gclwh1_2*x515))+(((0.132)*gclwh4_2*x530))+(((-1.0)*gclwh8_2*x595))+x891+(((-0.00066)*x625))+(((0.066)*gclwh14_2*x515)));
op[42]=((((0.3268)*gclwh11_0*rxp2_2))+(((0.3268)*gclwh9_0*rxp0_2))+(((-3.268)*gclwh5_0*x530))+(((1.634)*gclwh13_0*x509))+((gclwh13_0*x588))+(((-1.0)*x896))+(((3.268)*gclwh15_0*x539))+((gclwh2_0*x588))+(((3.268)*npy*x531))+(((-3.268)*gclwh13_0*x541))+(((-1.634)*gclwh15_0*x515))+(((3.268)*gclwh0_0*x539))+(((-1.634)*gclwh2_0*x509))+x880+(((-1.634)*gclwh0_0*x515))+(((1.634)*pp*x517))+(((0.01634)*x517))+(((-0.3268)*x565))+(((-1.0)*gclwh15_0*x608))+((gclwh0_0*x608)));
op[43]=((1.299066)+(((-1.0)*x890))+x897);
op[44]=((0.03602)+(((-0.8)*x589))+(((0.04)*x516))+((x509*x623))+((x545*x621))+(((0.04)*gclwh5_10*r22))+(((0.8)*gclwh11_10*rxp2_2))+(((0.8)*x570))+(((-8.0)*gclwh5_10*x530))+(((8.0)*gclwh15_10*x539))+(((-8.0)*gclwh13_10*x541))+(((-1.0)*x515*x568))+(((-0.04)*gclwh15_10*r20)));
op[45]=((((-0.00536)*x555))+(((-1.072)*gclwh5_15*x530))+(((1.072)*gclwh15_15*x539))+(((-1.072)*gclwh13_15*x541))+(((0.3136)*x538))+(((0.00536)*x613))+(((-1.0)*x515*x544))+(((0.3136)*gclwh11_13*rxp2_2))+(((0.00536)*x574))+((x509*x604))+(((-0.3136)*gclwh7_13*rxp1_2))+((x545*x547)));
op[46]=(((gclwh9_0*x595))+(((-0.066)*gclwh0_0*x515))+(((-1.0)*gclwh7_0*x554))+(((-0.066)*gclwh15_0*x515))+(((0.066)*pp*x517))+(((0.066)*gclwh13_0*x509))+(((-0.132)*gclwh5_0*x530))+((gclwh0_0*x569))+(((-1.0)*x880))+((gclwh11_0*x518))+(((-0.066)*gclwh2_0*x509))+((gclwh13_0*x560))+((gclwh2_0*x560))+(((0.132)*npy*x531))+(((0.132)*gclwh15_0*x539))+(((-0.132)*gclwh13_0*x541))+x896+(((0.132)*gclwh0_0*x539))+(((-1.0)*gclwh15_0*x569))+(((0.00066)*x517)));
op[47]=((0.033734)+(((-1.0)*x897))+x890);
op[48]=((((-1.0)*gclwh12_8*x573))+(((0.1634)*x582))+(((0.817)*gclwh8_12*x515))+((gclwh8_12*x626))+(((-1.0)*x892))+(((0.817)*gclwh10_12*x545))+((x527*x620))+(((-0.00817)*gclwh6_12*r21))+((gclwh10_12*x564))+x657+(((-1.634)*gclwh8_12*x539))+(((-0.817)*gclwh6_12*x509))+(((-1.634)*gclwh10_12*x530))+x882+(((-1.0)*gclwh4_8*x585))+(((-1.0)*x875)));
op[49]=((((-1.0)*gclwh8_11*x515))+(((-1.0)*x899))+(((-1.0)*gclwh4_3*x634))+(((-1.0)*gclwh10_11*x545))+((gclwh14_3*x557))+(((-0.135089)*x552))+((gclwh6_11*x509))+x889+x901+(((-1.0)*x876)));
op[50]=((0.210112)+((gclwh12_11*x607))+(((2.0)*gclwh6_11*x509))+(((-0.02)*x562))+(((-4.0)*gclwh6_11*x541))+(((-2.0)*gclwh10_11*x545))+(((4.0)*gclwh8_11*x539))+((gclwh6_11*x563))+(((-2.0)*gclwh8_11*x515))+((gclwh4_11*x594))+(((4.0)*gclwh10_11*x530))+(((-1.0)*gclwh10_11*x521))+(((-1.0)*gclwh14_11*x633)));
op[51]=((((-1.0)*gclwh14_14*x641))+(((0.0536)*x567))+((gclwh4_8*x583))+(((-1.568)*gclwh6_2*x541))+((gclwh12_14*x584))+(((-1.0)*gclwh10_2*x536))+(((-0.784)*gclwh8_2*x515))+(((1.568)*gclwh10_2*x530))+(((0.784)*gclwh6_2*x509))+((gclwh6_2*x522))+((gclwh12_2*x602))+(((-1.0)*gclwh10_2*r22*x542))+(((-1.0)*gclwh14_2*x540))+(((-1.0)*gclwh8_2*x596))+(((0.17)*x593))+((gclwh4_2*x586))+((x535*x627))+(((-0.17)*x582)));
op[52]=(((gclwh12_8*x543))+(((-0.033)*gclwh6_12*x509))+((gclwh8_12*x637))+(((-1.0)*x892))+(((-1.0)*x657))+(((-0.0066)*x582))+(((0.033)*gclwh10_12*x545))+(((0.033)*gclwh8_12*x515))+((x512*x527))+((gclwh10_12*x572))+x875+x882+(((-1.0)*gclwh6_12*x580))+(((-1.0)*gclwh10_12*npz*x512))+(((-1.0)*gclwh8_12*npx*x512))+((gclwh4_8*x546)));
op[53]=((((-1.0)*gclwh4_3*x566))+(((-1.0)*gclwh6_11*x509))+(((-1.0)*x899))+((gclwh8_11*x515))+(((-1.0)*x889))+((gclwh14_3*x642))+x876+((gclwh10_11*x545))+x901+(((-0.001809)*x552)));
op[54]=((((-1.0)*x898))+(((-1.0)*x888))+(((-0.135089)*x639))+(((-1.0)*gclwh7_10*x509))+((gclwh11_10*x545))+((gclwh9_10*x515))+(((-1.0)*gclwh5_1*x634))+x877+((gclwh15_1*x557))+x900);
op[55]=(((gclwh11_13*x564))+(((-1.0)*gclwh5_9*x585))+(((0.817)*gclwh9_13*x515))+(((-1.0)*x894))+(((0.1634)*x601))+(((1.634)*gclwh7_13*x541))+((gclwh9_13*x626))+(((-0.00817)*x578))+(((-1.634)*gclwh11_13*x530))+(((0.817)*gclwh11_13*x545))+x681+(((-1.0)*gclwh13_9*x573))+x885+(((-1.634)*gclwh9_13*x539))+(((-0.817)*gclwh7_13*x509))+(((-1.0)*x873)));
op[56]=(((gclwh5_0*x586))+(((-1.0)*gclwh5_9*x583))+(((-1.0)*gclwh15_0*x540))+(((-1.0)*gclwh9_0*x596))+((gclwh15_15*x641))+(((1.568)*gclwh9_0*x539))+(((-1.568)*gclwh7_0*x541))+(((0.784)*gclwh7_0*x509))+(((-0.0536)*gclwh5_15*rxp2_2))+(((-1.0)*gclwh11_0*r22*x542))+((gclwh7_0*x522))+(((-0.784)*gclwh9_0*x515))+(((0.17)*x601))+((gclwh13_0*x602))+(((-1.0)*gclwh11_0*x536))+(((-0.17)*x579))+(((1.568)*gclwh11_0*x530))+(((-1.0)*gclwh13_15*x584)));
op[57]=((0.210112)+(((-1.0)*gclwh9_10*x606))+((gclwh7_10*x563))+(((-4.0)*pz*x520))+(((4.0)*gclwh11_10*x530))+(((2.0)*gclwh7_10*x509))+((gclwh5_10*x594))+(((-1.0)*gclwh11_10*x521))+(((-2.0)*gclwh9_10*x515))+((gclwh13_10*x607))+(((-1.0)*gclwh15_10*x633))+(((4.0)*gclwh9_10*x539))+(((-2.0)*gclwh11_10*x545)));
op[58]=((((-1.0)*gclwh9_10*x515))+((gclwh15_1*x642))+((gclwh7_10*x509))+(((-1.0)*x898))+(((-1.0)*gclwh5_1*x566))+(((-1.0)*gclwh11_10*x545))+x888+x900+(((-0.001809)*x639))+(((-1.0)*x877)));
op[59]=((((-0.0066)*x601))+((gclwh7_13*npy*x512))+(((-1.0)*x681))+(((-1.0)*gclwh9_13*npx*x512))+(((0.033)*gclwh9_13*x515))+(((-1.0)*x894))+((gclwh13_9*x543))+(((-0.00033)*x578))+((gclwh9_13*x637))+(((0.033)*gclwh11_13*x545))+((gclwh11_13*x572))+x873+x885+(((-0.033)*gclwh7_13*x509))+((gclwh5_9*x546))+(((-1.0)*gclwh11_13*npz*x512)));
op[60]=((((-1.0)*gclwh10_12*x585))+(((-0.1634)*x614))+(((0.817)*gclwh14_8*x515))+((gclwh6_12*x573))+(((1.634)*gclwh12_8*x541))+(((-0.00817)*x525))+(((-1.0)*x513*x620))+(((-1.0)*x895))+(((-0.817)*gclwh4_8*x545))+(((1.634)*gclwh4_8*x530))+(((0.00817)*x550))+(((-1.0)*gclwh4_8*x564))+(((-1.0)*x691))+x872+x884+(((-0.817)*gclwh12_8*x509)));
op[61]=((0.685445)+(((-0.665445)*gclwh12_3*x509))+(((0.665445)*gclwh14_3*x515))+(((-0.00675445)*x624))+(((-1.35089)*gclwh14_3*x539))+(((-1.0)*x904))+(((-0.00675445)*x616))+(((0.00675445)*x636))+(((0.00675445)*x576))+(((0.00675445)*x597))+(((1.35089)*gclwh4_3*x530))+(((-0.685445)*gclwh1_3*x515))+(((1.35089)*gclwh1_3*x539))+(((1.35089)*gclwh3_3*x541))+((gclwh4_11*x545))+((gclwh12_11*x509))+(((1.35089)*gclwh12_3*x541))+(((-0.665445)*r22*x529))+x886+x903+(((-0.685445)*gclwh3_3*x509))+(((-1.0)*gclwh14_11*x515))+(((-1.0)*x879)));
op[62]=((0.089834)+((gclwh10_11*x594))+(((-1.0)*gclwh6_11*x607))+(((-4.0)*gclwh12_11*x541))+((gclwh8_11*x633))+(((-0.02)*x571))+((gclwh12_11*x563))+(((-2.0)*gclwh14_11*x515))+(((2.0)*gclwh4_11*x545))+((gclwh4_11*x521))+(((4.0)*gclwh14_11*x539))+(((-4.0)*gclwh4_11*x530))+(((2.0)*gclwh12_11*x509)));
op[63]=((((-1.7)*gclwh12_8*x541))+(((0.85)*gclwh4_8*x545))+(((-1.568)*gclwh4_2*x530))+(((-1.568)*gclwh3_2*x541))+(((0.784)*gclwh3_2*x509))+(((0.784)*gclwh1_2*x515))+(((-0.784)*gclwh14_2*x515))+(((-1.568)*gclwh12_2*x541))+(((-1.0)*gclwh14_2*x596))+(((-1.0)*gclwh6_2*x602))+(((-1.0)*gclwh1_2*x596))+(((-1.0)*gclwh3_2*x522))+(((-1.0)*x883))+(((0.0085)*x619))+(((-0.85)*gclwh14_8*x515))+(((0.85)*gclwh12_8*x509))+(((1.7)*pz*x513))+((gclwh12_2*x522))+((gclwh10_2*x586))+(((0.0085)*x525))+((x533*x627))+((gclwh8_2*x540))+x891+(((-0.0085)*x550))+(((-1.7)*gclwh4_8*x530))+((gclwh4_2*x536))+(((-1.568)*gclwh1_2*x539))+((x542*x625))+(((0.784)*gclwh12_2*x509)));
op[64]=((((-0.033)*gclwh14_8*x515))+(((0.033)*gclwh4_8*x545))+(((0.00033)*x525))+((gclwh4_8*x572))+(((-1.0)*x884))+(((0.033)*gclwh12_8*x509))+((x512*x513))+(((-1.0)*x691))+(((-1.0)*x512*x548))+(((-1.0)*gclwh4_8*npz*x512))+x872+x895+(((-0.00033)*x550))+(((-1.0)*gclwh10_12*x546))+((gclwh6_12*x543))+(((-0.0066)*x614)));
op[65]=((-0.019045)+(((-1.0)*gclwh12_11*x509))+(((0.000955)*r22*x529))+(((-0.01809)*gclwh14_3*x539))+(((-1.0)*x904))+(((0.01809)*gclwh1_3*x539))+(((-1.0)*x886))+(((-1.0)*gclwh4_11*x545))+(((0.01809)*gclwh12_3*x541))+(((-9.045e-5)*x616))+((gclwh14_3*x549))+(((9.045e-5)*x576))+(((0.01809)*gclwh4_3*x530))+((gclwh14_11*x515))+(((-9.045e-5)*x624))+(((-0.019045)*gclwh3_3*x509))+x879+x903+(((-0.019045)*gclwh1_3*x515))+(((0.01809)*gclwh3_3*x541))+((gclwh1_3*x549))+(((-0.000955)*gclwh14_3*x515))+(((0.000955)*gclwh12_3*x509)));
op[66]=((-0.685445)+(((0.00675445)*x553))+(((0.00675445)*x605))+(((1.35089)*gclwh15_1*x539))+(((-1.0)*x902))+(((0.665445)*gclwh13_1*x509))+(((0.00675445)*x628))+(((0.00675445)*x577))+((gclwh5_10*x545))+(((1.35089)*gclwh2_1*x541))+(((-0.665445)*gclwh15_1*x515))+(((-1.35089)*gclwh13_1*x541))+(((-0.685445)*gclwh0_1*x515))+(((1.35089)*gclwh0_1*x539))+(((-0.685445)*gclwh2_1*x509))+(((0.665445)*gclwh5_1*x545))+x887+((gclwh13_10*x509))+(((-0.00675445)*x524))+x905+(((-1.35089)*gclwh5_1*x530))+(((-1.0)*gclwh15_10*x515))+(((-1.0)*x878)));
op[67]=((((0.1634)*x538))+((gclwh5_9*x564))+(((0.817)*gclwh5_9*x545))+(((-1.634)*gclwh13_9*x541))+(((-1.634)*gclwh5_9*x530))+(((-0.00817)*x523))+(((-1.0)*x881))+((gclwh11_13*x585))+(((-0.817)*gclwh15_9*x515))+(((1.634)*x717))+(((-1.0)*gclwh7_13*x573))+x712+x893+(((0.00817)*x591))+(((0.817)*gclwh13_9*x509))+(((-1.0)*x874)));
op[68]=((((0.85)*gclwh5_9*x545))+(((0.85)*gclwh13_9*x509))+(((1.568)*gclwh5_0*x530))+(((0.784)*gclwh0_0*x515))+(((-0.784)*gclwh13_0*x509))+(((-1.568)*npy*x531))+(((-1.0)*gclwh11_0*x586))+(((-1.0)*gclwh2_0*x522))+(((-1.568)*gclwh0_0*x539))+(((-1.0)*x880))+(((-1.0)*gclwh0_0*x596))+(((0.0085)*x591))+(((-1.0)*x517*x542))+(((-1.568)*gclwh15_0*x539))+(((-0.85)*gclwh15_9*x515))+(((0.784)*gclwh2_0*x509))+(((-1.0)*gclwh9_0*x540))+((gclwh15_0*x596))+(((-0.0085)*x523))+(((0.1568)*x565))+x896+(((1.568)*gclwh13_0*x541))+(((0.784)*gclwh15_0*x515))+(((0.0085)*x632))+(((-1.7)*gclwh5_9*x530))+(((-1.0)*gclwh13_0*x522))+(((-0.00784)*x517))+(((1.7)*x717))+(((-1.7)*gclwh13_9*x541)));
op[69]=((0.089834)+(((-1.0)*x897))+x890);
op[70]=((0.019045)+((gclwh0_1*x549))+(((0.01809)*gclwh0_1*x539))+(((0.01809)*gclwh2_1*x541))+(((-0.019045)*gclwh0_1*x515))+(((-1.0)*x902))+(((0.000955)*gclwh15_1*x515))+(((-1.0)*gclwh5_10*x545))+(((9.045e-5)*x605))+(((-0.01809)*gclwh5_1*x530))+(((-1.0)*x887))+(((-0.000955)*gclwh13_1*x509))+((gclwh15_10*x515))+(((9.045e-5)*x577))+(((-0.01809)*gclwh13_1*x541))+(((0.01809)*gclwh15_1*x539))+x878+(((-1.0)*gclwh13_10*x509))+(((-0.019045)*gclwh2_1*x509))+(((-9.045e-5)*x524))+x905+(((9.045e-5)*x553))+(((-0.000955)*gclwh5_1*x545)));
op[71]=((((-0.033)*gclwh5_9*x545))+(((0.0066)*x538))+(((-0.033)*gclwh13_9*x509))+(((0.00033)*x523))+(((-1.0)*x893))+(((-1.0)*gclwh5_9*x572))+(((-1.0)*gclwh7_13*x543))+(((-1.0)*gclwh13_9*x580))+(((-1.0)*gclwh15_9*npx*x512))+(((0.033)*gclwh15_9*x515))+((gclwh11_13*x546))+x712+x881+((x512*x630))+((gclwh5_9*npz*x512))+(((-1.0)*x874)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x906=htj1*htj1;
CheckValue<IkReal> x907=IKPowWithIntegerCheck(((1.0)+x906),-1);
if(!x907.valid){
continue;
}
cj1array[numsolutions]=((x907.value)*(((1.0)+(((-1.0)*x906)))));
CheckValue<IkReal> x908=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x908.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x908.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x909=htj2*htj2;
CheckValue<IkReal> x910=IKPowWithIntegerCheck(((1.0)+x909),-1);
if(!x910.valid){
continue;
}
cj2array[numsolutions]=((x910.value)*(((1.0)+(((-1.0)*x909)))));
CheckValue<IkReal> x911=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x911.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x911.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x912=htj3*htj3;
CheckValue<IkReal> x913=IKPowWithIntegerCheck(((1.0)+x912),-1);
if(!x913.valid){
continue;
}
cj3array[numsolutions]=((x913.value)*(((1.0)+(((-1.0)*x912)))));
CheckValue<IkReal> x914=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x914.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x914.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x915=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x915);
rxp1_0=(pz*r11);
rxp1_1=(r01*x915);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x916=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x916);
rxp1_0=(pz*r11);
rxp1_1=(r01*x916);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x917=IKPowWithIntegerCheck(r22,-1);
if(!x917.valid){
continue;
}
CheckValue<IkReal> x918=IKPowWithIntegerCheck(sj3,-1);
if(!x918.valid){
continue;
}
sj4array[0]=((x917.value)*(x918.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x919=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x919);
rxp1_0=(pz*r11);
rxp1_1=(r01*x919);
IkReal x920=((16.0)*sj4);
IkReal x921=(cj1*cj2);
IkReal x922=((4.0)*sj3);
IkReal x923=((8.0)*sj4);
IkReal x924=((4.0)*cj4);
IkReal x925=(sj1*sj2);
IkReal x926=((4.0)*sj4);
IkReal x927=(cj3*r02);
IkReal x928=((16.0)*sj3);
IkReal x929=((8.0)*sj3);
IkReal x930=((12.0)*cj4);
IkReal x931=((12.0)*sj4);
IkReal x932=(cj3*r12);
IkReal x933=(r11*x922);
IkReal x934=(r01*x922);
IkReal x935=(r01*x925);
IkReal x936=(cj3*cj4*r01);
IkReal x937=(cj3*cj4*r11);
IkReal x938=(cj3*r10*x924);
IkReal x939=(x931*x932);
IkReal x940=(cj3*r00*x924);
IkReal x941=(x927*x931);
IkReal x942=(r00*x925*x926);
IkReal x943=(r02*x925*x930);
IkReal x944=(r00*x921*x926);
IkReal x945=(r02*x921*x930);
IkReal x946=(r10*x925*x926);
IkReal x947=(r12*x921*x930);
IkReal x948=(r12*x925*x930);
IkReal x949=(r10*x921*x926);
IkReal x950=(x933+x944);
IkReal x951=(x934+x946);
IkReal x952=(x938+x942);
IkReal x953=(x939+x945);
IkReal x954=(x949+x940);
IkReal x955=(x948+x941);
j5eval[0]=((IKabs(((((-1.0)*r10*x929))+(((-8.0)*x937))+((r01*x921*x923))+(((-1.0)*x923*x935)))))+(((0.5)*(IKabs(((((-1.0)*x953))+(((-1.0)*x952))+x950+x943)))))+(((0.5)*(IKabs(((((-1.0)*r12*x924*x925))+(((-1.0)*x926*x927))+((r12*x921*x924))+(((-1.0)*x954))+x951)))))+(((0.5)*(IKabs(((((-1.0)*r10*x928))+(((-1.0)*x920*x935))+((r01*x920*x921))+(((-16.0)*x937)))))))+(((0.5)*(IKabs((((r11*x920*x925))+(((-16.0)*x936))+(((-1.0)*r00*x928))+(((-1.0)*r11*x920*x921)))))))+(IKabs(((((-1.0)*r11*x921*x923))+(((-8.0)*x936))+((r11*x923*x925))+(((-1.0)*r00*x929)))))+(((0.5)*(IKabs(((((-1.0)*x953))+(((-1.0)*x950))+x952+x943)))))+(((0.5)*(IKabs(((((-1.0)*x955))+(((-1.0)*x951))+x954+x947)))))+(((0.5)*(IKabs((((r02*x924*x925))+(((-1.0)*x926*x932))+(((-1.0)*x952))+x950+(((-1.0)*r02*x921*x924)))))))+(((0.5)*(IKabs(((((-1.0)*x954))+(((-1.0)*x955))+x951+x947))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x956=(r10*sj3);
IkReal x957=(r01*sj4);
IkReal x958=(cj1*cj2);
IkReal x959=(cj3*cj4);
IkReal x960=(sj1*sj2);
IkReal x961=(cj4*r02);
IkReal x962=((4.0)*r11*sj3);
IkReal x963=(cj3*r12*sj4);
IkReal x964=((4.0)*r00*sj4);
IkReal x965=((4.0)*r10*x959);
IkReal x966=((12.0)*x963);
IkReal x967=((4.0)*x963);
IkReal x968=(x958*x964);
IkReal x969=(x960*x964);
IkReal x970=((12.0)*x960*x961);
IkReal x971=((12.0)*x958*x961);
IkReal x972=((4.0)*x960*x961);
IkReal x973=((4.0)*x958*x961);
IkReal x974=(x962+x968);
IkReal x975=(x965+x969);
IkReal x976=(x973+x967);
IkReal x977=(x971+x966);
IkReal x978=((((8.0)*x957*x958))+(((-8.0)*x956))+(((-8.0)*x957*x960))+(((-8.0)*r11*x959)));
op[0]=(x972+x974+(((-1.0)*x975))+(((-1.0)*x976)));
op[1]=x978;
op[2]=(x970+x974+(((-1.0)*x975))+(((-1.0)*x977)));
op[3]=((((16.0)*x957*x958))+(((-16.0)*r11*x959))+(((-16.0)*x957*x960))+(((-16.0)*x956)));
op[4]=(x970+x975+(((-1.0)*x974))+(((-1.0)*x977)));
op[5]=x978;
op[6]=(x972+x975+(((-1.0)*x974))+(((-1.0)*x976)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x979=(cj1*cj2);
IkReal x980=((4.0)*cj4);
IkReal x981=(sj1*sj2);
IkReal x982=((4.0)*sj4);
IkReal x983=(r00*sj3);
IkReal x984=(cj3*r02);
IkReal x985=((4.0)*r01*sj3);
IkReal x986=((16.0)*r11*sj4);
IkReal x987=(cj3*cj4*r01);
IkReal x988=((12.0)*cj4*r12);
IkReal x989=((8.0)*r11*sj4);
IkReal x990=(cj3*r00*x980);
IkReal x991=((12.0)*sj4*x984);
IkReal x992=(x982*x984);
IkReal x993=(r10*x979*x982);
IkReal x994=(r10*x981*x982);
IkReal x995=(x979*x988);
IkReal x996=(x981*x988);
IkReal x997=(r12*x979*x980);
IkReal x998=(r12*x980*x981);
IkReal x999=(x994+x985);
IkReal x1000=(x993+x990);
IkReal x1001=(x992+x998);
IkReal x1002=(x991+x996);
IkReal x1003=(((x981*x989))+(((-8.0)*x983))+(((-8.0)*x987))+(((-1.0)*x979*x989)));
j5evalpoly[0]=(((x1003*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x1002))+(((-1.0)*x1000))+x995+x999))))+x1000+(((-1.0)*x1001))+(((htj5*htj5*htj5)*((((x981*x986))+(((-16.0)*x983))+(((-16.0)*x987))+(((-1.0)*x979*x986))))))+(((-1.0)*x999))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x1001))+(((-1.0)*x1000))+x997+x999))))+(((htj5*htj5)*((x1000+(((-1.0)*x1002))+(((-1.0)*x999))+x995))))+((htj5*x1003))+x997);
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1004=(cj5*sj4);
IkReal x1005=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x1005))+((r00*x1004))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1004))+((r11*x1005))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1005))+((r00*x1004))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x1004))+((r11*x1005))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x1005))+((r00*x1004))+((cj4*r02))), ((((-1.0)*r10*x1004))+((r11*x1005))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1006=IKcos(j0);
IkReal x1007=IKsin(j0);
IkReal x1008=(r02*sj4);
IkReal x1009=((0.1)*sj5);
IkReal x1010=(sj1*sj2);
IkReal x1011=(cj5*r11);
IkReal x1012=((1.0)*sj3);
IkReal x1013=(r12*sj4);
IkReal x1014=((1.0)*cj3);
IkReal x1015=(cj1*cj2);
IkReal x1016=(r11*sj5);
IkReal x1017=(cj3*cj4);
IkReal x1018=(cj5*r01);
IkReal x1019=(r01*sj5);
IkReal x1020=((0.425)*cj1);
IkReal x1021=(cj2*sj1);
IkReal x1022=(r00*sj5);
IkReal x1023=(cj1*sj2);
IkReal x1024=(r10*sj5);
IkReal x1025=((1.0)*cj4);
IkReal x1026=((0.392)*x1007);
IkReal x1027=(cj4*cj5*r00);
IkReal x1028=(cj4*cj5*r10);
IkReal x1029=((0.392)*x1006);
IkReal x1030=((1.0)*x1006);
IkReal x1031=((1.0)*cj5*sj4);
evalcond[0]=(x1007+((sj4*x1019))+(((-1.0)*r02*x1025))+(((-1.0)*r00*x1031)));
evalcond[1]=((((-1.0)*r12*x1025))+(((-1.0)*r10*x1031))+(((-1.0)*x1030))+((sj4*x1016)));
evalcond[2]=(((x1010*x1029))+(((0.134)*x1007))+(((-1.0)*px))+(((-1.0)*x1015*x1029))+(((-1.0)*r00*x1009))+(((-1.0)*x1006*x1020))+(((-0.1)*x1018)));
evalcond[3]=(((x1010*x1026))+(((-1.0)*r10*x1009))+(((-1.0)*py))+(((-1.0)*x1015*x1026))+(((-0.134)*x1006))+(((-1.0)*x1007*x1020))+(((-0.1)*x1011)));
evalcond[4]=(((cj3*x1018))+(((-1.0)*x1008*x1012))+(((-1.0)*cj4*x1012*x1019))+((x1006*x1023))+((x1006*x1021))+((sj3*x1027))+((cj3*x1022)));
evalcond[5]=(((cj3*x1008))+((x1017*x1019))+(((-1.0)*x1010*x1030))+(((-1.0)*x1014*x1027))+((x1006*x1015))+((sj3*x1018))+((sj3*x1022)));
evalcond[6]=((((-1.0)*x1012*x1013))+((cj3*x1011))+(((-1.0)*cj4*x1012*x1016))+((x1007*x1023))+((x1007*x1021))+((sj3*x1028))+((cj3*x1024)));
evalcond[7]=(((x1016*x1017))+((cj3*x1013))+(((-1.0)*x1014*x1028))+(((-1.0)*x1007*x1010))+((sj3*x1011))+((x1007*x1015))+((sj3*x1024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1032=IKPowWithIntegerCheck(cj3,-1);
if(!x1032.valid){
continue;
}
CheckValue<IkReal> x1033=IKPowWithIntegerCheck(r22,-1);
if(!x1033.valid){
continue;
}
sj4array[0]=((-1.0)*(x1032.value)*(x1033.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1034=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1034);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1034);
IkReal x1035=((16.0)*sj4);
IkReal x1036=(cj1*cj2);
IkReal x1037=((4.0)*sj3);
IkReal x1038=((8.0)*sj4);
IkReal x1039=((4.0)*cj4);
IkReal x1040=(sj1*sj2);
IkReal x1041=((4.0)*sj4);
IkReal x1042=(cj3*r02);
IkReal x1043=((16.0)*sj3);
IkReal x1044=((8.0)*sj3);
IkReal x1045=((12.0)*cj4);
IkReal x1046=((12.0)*sj4);
IkReal x1047=(cj3*r12);
IkReal x1048=(r11*x1037);
IkReal x1049=(r01*x1037);
IkReal x1050=(r01*x1040);
IkReal x1051=(cj3*cj4*r01);
IkReal x1052=(cj3*cj4*r11);
IkReal x1053=(cj3*r10*x1039);
IkReal x1054=(x1046*x1047);
IkReal x1055=(cj3*r00*x1039);
IkReal x1056=(x1042*x1046);
IkReal x1057=(r00*x1040*x1041);
IkReal x1058=(r02*x1040*x1045);
IkReal x1059=(r00*x1036*x1041);
IkReal x1060=(r02*x1036*x1045);
IkReal x1061=(r10*x1040*x1041);
IkReal x1062=(r12*x1036*x1045);
IkReal x1063=(r12*x1040*x1045);
IkReal x1064=(r10*x1036*x1041);
IkReal x1065=(x1059+x1048);
IkReal x1066=(x1049+x1061);
IkReal x1067=(x1053+x1057);
IkReal x1068=(x1054+x1060);
IkReal x1069=(x1055+x1064);
IkReal x1070=(x1056+x1063);
j5eval[0]=((IKabs(((((-1.0)*r00*x1044))+(((-1.0)*r11*x1036*x1038))+(((-8.0)*x1051))+((r11*x1038*x1040)))))+(((0.5)*(IKabs(((((-1.0)*r00*x1043))+(((-1.0)*r11*x1035*x1036))+(((-16.0)*x1051))+((r11*x1035*x1040)))))))+(((0.5)*(IKabs((x1066+((r12*x1036*x1039))+(((-1.0)*x1041*x1042))+(((-1.0)*r12*x1039*x1040))+(((-1.0)*x1069)))))))+(((0.5)*(IKabs((x1065+(((-1.0)*r02*x1036*x1039))+(((-1.0)*x1041*x1047))+(((-1.0)*x1067))+((r02*x1039*x1040)))))))+(IKabs(((((-8.0)*x1052))+(((-1.0)*r10*x1044))+(((-1.0)*x1038*x1050))+((r01*x1036*x1038)))))+(((0.5)*(IKabs((x1058+x1065+(((-1.0)*x1068))+(((-1.0)*x1067)))))))+(((0.5)*(IKabs((x1069+x1062+(((-1.0)*x1066))+(((-1.0)*x1070)))))))+(((0.5)*(IKabs(((((-1.0)*r10*x1043))+(((-16.0)*x1052))+((r01*x1035*x1036))+(((-1.0)*x1035*x1050)))))))+(((0.5)*(IKabs((x1058+x1067+(((-1.0)*x1068))+(((-1.0)*x1065)))))))+(((0.5)*(IKabs((x1062+x1066+(((-1.0)*x1069))+(((-1.0)*x1070))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1071=(r10*sj3);
IkReal x1072=(r01*sj4);
IkReal x1073=(cj1*cj2);
IkReal x1074=(cj3*cj4);
IkReal x1075=(sj1*sj2);
IkReal x1076=(cj4*r02);
IkReal x1077=((4.0)*r11*sj3);
IkReal x1078=(cj3*r12*sj4);
IkReal x1079=((4.0)*r00*sj4);
IkReal x1080=((4.0)*r10*x1074);
IkReal x1081=((12.0)*x1078);
IkReal x1082=((4.0)*x1078);
IkReal x1083=(x1073*x1079);
IkReal x1084=(x1075*x1079);
IkReal x1085=((12.0)*x1075*x1076);
IkReal x1086=((12.0)*x1073*x1076);
IkReal x1087=((4.0)*x1075*x1076);
IkReal x1088=((4.0)*x1073*x1076);
IkReal x1089=(x1077+x1083);
IkReal x1090=(x1084+x1080);
IkReal x1091=(x1082+x1088);
IkReal x1092=(x1086+x1081);
IkReal x1093=((((-8.0)*x1071))+(((-8.0)*x1072*x1075))+(((8.0)*x1072*x1073))+(((-8.0)*r11*x1074)));
op[0]=(x1087+x1089+(((-1.0)*x1091))+(((-1.0)*x1090)));
op[1]=x1093;
op[2]=(x1085+x1089+(((-1.0)*x1090))+(((-1.0)*x1092)));
op[3]=((((-16.0)*x1072*x1075))+(((16.0)*x1072*x1073))+(((-16.0)*r11*x1074))+(((-16.0)*x1071)));
op[4]=(x1090+x1085+(((-1.0)*x1092))+(((-1.0)*x1089)));
op[5]=x1093;
op[6]=(x1090+x1087+(((-1.0)*x1091))+(((-1.0)*x1089)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1094=(cj1*cj2);
IkReal x1095=((4.0)*cj4);
IkReal x1096=(sj1*sj2);
IkReal x1097=((4.0)*sj4);
IkReal x1098=(r00*sj3);
IkReal x1099=(cj3*r02);
IkReal x1100=((4.0)*r01*sj3);
IkReal x1101=((16.0)*r11*sj4);
IkReal x1102=(cj3*cj4*r01);
IkReal x1103=((12.0)*cj4*r12);
IkReal x1104=((8.0)*r11*sj4);
IkReal x1105=(cj3*r00*x1095);
IkReal x1106=((12.0)*sj4*x1099);
IkReal x1107=(x1097*x1099);
IkReal x1108=(r10*x1094*x1097);
IkReal x1109=(r10*x1096*x1097);
IkReal x1110=(x1094*x1103);
IkReal x1111=(x1096*x1103);
IkReal x1112=(r12*x1094*x1095);
IkReal x1113=(r12*x1095*x1096);
IkReal x1114=(x1100+x1109);
IkReal x1115=(x1105+x1108);
IkReal x1116=(x1107+x1113);
IkReal x1117=(x1106+x1111);
IkReal x1118=((((-8.0)*x1098))+(((-1.0)*x1094*x1104))+((x1096*x1104))+(((-8.0)*x1102)));
j5evalpoly[0]=(x1112+x1115+(((htj5*htj5*htj5*htj5)*((x1110+x1114+(((-1.0)*x1117))+(((-1.0)*x1115))))))+(((htj5*htj5*htj5)*(((((-16.0)*x1102))+(((-16.0)*x1098))+(((-1.0)*x1094*x1101))+((x1096*x1101))))))+((x1118*(htj5*htj5*htj5*htj5*htj5)))+(((-1.0)*x1116))+(((-1.0)*x1114))+(((htj5*htj5)*((x1110+x1115+(((-1.0)*x1117))+(((-1.0)*x1114))))))+((htj5*x1118))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1112+x1114+(((-1.0)*x1116))+(((-1.0)*x1115)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1119=(cj5*sj4);
IkReal x1120=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x1120))+((r00*x1119))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1119))+((r11*x1120))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1120))+((r00*x1119))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x1119))+((r11*x1120))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x1120))+((r00*x1119))+((cj4*r02))), ((((-1.0)*r10*x1119))+((r11*x1120))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1121=IKcos(j0);
IkReal x1122=IKsin(j0);
IkReal x1123=(r02*sj4);
IkReal x1124=((0.1)*sj5);
IkReal x1125=(sj1*sj2);
IkReal x1126=(cj5*r11);
IkReal x1127=((1.0)*sj3);
IkReal x1128=(r12*sj4);
IkReal x1129=((1.0)*cj3);
IkReal x1130=(cj1*cj2);
IkReal x1131=(r11*sj5);
IkReal x1132=(cj3*cj4);
IkReal x1133=(cj5*r01);
IkReal x1134=(r01*sj5);
IkReal x1135=((0.425)*cj1);
IkReal x1136=(cj2*sj1);
IkReal x1137=(r00*sj5);
IkReal x1138=(cj1*sj2);
IkReal x1139=(r10*sj5);
IkReal x1140=((1.0)*cj4);
IkReal x1141=((0.392)*x1122);
IkReal x1142=(cj4*cj5*r00);
IkReal x1143=(cj4*cj5*r10);
IkReal x1144=((0.392)*x1121);
IkReal x1145=((1.0)*x1121);
IkReal x1146=((1.0)*cj5*sj4);
evalcond[0]=(x1122+(((-1.0)*r00*x1146))+((sj4*x1134))+(((-1.0)*r02*x1140)));
evalcond[1]=(((sj4*x1131))+(((-1.0)*x1145))+(((-1.0)*r10*x1146))+(((-1.0)*r12*x1140)));
evalcond[2]=(((x1125*x1144))+(((0.134)*x1122))+(((-0.1)*x1133))+(((-1.0)*x1121*x1135))+(((-1.0)*px))+(((-1.0)*x1130*x1144))+(((-1.0)*r00*x1124)));
evalcond[3]=((((-0.1)*x1126))+((x1125*x1141))+(((-1.0)*x1122*x1135))+(((-1.0)*r10*x1124))+(((-1.0)*py))+(((-0.134)*x1121))+(((-1.0)*x1130*x1141)));
evalcond[4]=(((cj3*x1133))+((cj3*x1137))+((x1121*x1138))+((x1121*x1136))+(((-1.0)*x1123*x1127))+((sj3*x1142))+(((-1.0)*cj4*x1127*x1134)));
evalcond[5]=(((x1121*x1130))+(((-1.0)*x1129*x1142))+(((-1.0)*x1125*x1145))+((sj3*x1137))+((sj3*x1133))+((cj3*x1123))+((x1132*x1134)));
evalcond[6]=(((cj3*x1139))+(((-1.0)*x1127*x1128))+((sj3*x1143))+(((-1.0)*cj4*x1127*x1131))+((x1122*x1138))+((x1122*x1136))+((cj3*x1126)));
evalcond[7]=(((x1131*x1132))+(((-1.0)*x1129*x1143))+(((-1.0)*x1122*x1125))+((sj3*x1126))+((sj3*x1139))+((x1122*x1130))+((cj3*x1128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1147=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1147);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1147);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1148=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1148);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1148);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1149=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1149);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1149);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1150=IKPowWithIntegerCheck(r22,-1);
if(!x1150.valid){
continue;
}
sj4array[0]=((-1.0)*(x1150.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1151=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1151);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1151);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1153 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1153.valid){
continue;
}
IkReal x1152=x1153.value;
j5array[0]=((-1.0)*x1152);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1152)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1154=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1154)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1154)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1154))))+IKsqr((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1154))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1154))), (((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1154))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1155=IKcos(j0);
IkReal x1156=IKsin(j0);
IkReal x1157=((0.1)*sj5);
IkReal x1158=(cj5*r11);
IkReal x1159=(cj5*r01);
IkReal x1160=(sj4*sj5);
IkReal x1161=(cj2*sj1);
IkReal x1162=(cj1*x1156);
IkReal x1163=(cj1*x1155);
IkReal x1164=((1.0)*cj5*sj4);
evalcond[0]=(x1156+((r01*x1160))+(((-1.0)*r00*x1164)));
evalcond[1]=((((-1.0)*r10*x1164))+(((-1.0)*x1155))+((r11*x1160)));
evalcond[2]=(((sj2*x1163))+((r00*sj5))+x1159+((x1155*x1161)));
evalcond[3]=(((sj2*x1162))+x1158+((r10*sj5))+((x1156*x1161)));
evalcond[4]=((((-0.425)*x1163))+(((0.134)*x1156))+(((-1.0)*r00*x1157))+(((-1.0)*px))+(((-0.1)*x1159)));
evalcond[5]=((((-0.425)*x1162))+(((-0.134)*x1155))+(((-1.0)*py))+(((-0.1)*x1158))+(((-1.0)*r10*x1157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1165=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1165);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1165);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1166=IKPowWithIntegerCheck(r22,-1);
if(!x1166.valid){
continue;
}
sj4array[0]=((x1166.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1167=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1167);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1167);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1169 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1169.valid){
continue;
}
IkReal x1168=x1169.value;
j5array[0]=((-1.0)*x1168);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1168)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1170=((1.0)*sj4);
if( IKabs(((((-1.0)*r01*sj5*x1170))+((cj5*r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1170))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj5*x1170))+((cj5*r00*sj4))))+IKsqr(((((-1.0)*cj5*r10*x1170))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*sj5*x1170))+((cj5*r00*sj4))), ((((-1.0)*cj5*r10*x1170))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1171=IKcos(j0);
IkReal x1172=IKsin(j0);
IkReal x1173=((0.1)*sj5);
IkReal x1174=(cj5*r11);
IkReal x1175=(sj4*sj5);
IkReal x1176=(cj2*sj1);
IkReal x1177=((1.0)*sj5);
IkReal x1178=((1.0)*cj5);
IkReal x1179=(cj1*x1172);
IkReal x1180=(cj1*x1171);
evalcond[0]=((((-1.0)*r00*sj4*x1178))+x1172+((r01*x1175)));
evalcond[1]=((((-1.0)*r10*sj4*x1178))+((r11*x1175))+(((-1.0)*x1171)));
evalcond[2]=(((sj2*x1180))+(((-1.0)*r01*x1178))+(((-1.0)*r00*x1177))+((x1171*x1176)));
evalcond[3]=(((x1172*x1176))+(((-1.0)*r10*x1177))+((sj2*x1179))+(((-1.0)*x1174)));
evalcond[4]=((((-0.1)*cj5*r01))+(((-1.0)*px))+(((-0.425)*x1180))+(((-1.0)*r00*x1173))+(((0.134)*x1172)));
evalcond[5]=((((-0.425)*x1179))+(((-1.0)*py))+(((-0.134)*x1171))+(((-1.0)*r10*x1173))+(((-0.1)*x1174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1181=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1181);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1181);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1182=IKPowWithIntegerCheck(r22,-1);
if(!x1182.valid){
continue;
}
sj4array[0]=((x1182.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1183=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1183);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1183);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1185 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1185.valid){
continue;
}
IkReal x1184=x1185.value;
j5array[0]=((-1.0)*x1184);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1184)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1186=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1186)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1186))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1186))))+IKsqr(((((-1.0)*cj5*r10*x1186))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1186))), ((((-1.0)*cj5*r10*x1186))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1187=IKcos(j0);
IkReal x1188=IKsin(j0);
IkReal x1189=((0.1)*sj5);
IkReal x1190=(cj5*r11);
IkReal x1191=(cj5*r01);
IkReal x1192=(sj4*sj5);
IkReal x1193=(cj1*cj2);
IkReal x1194=((0.425)*cj1);
IkReal x1195=(sj1*sj2);
IkReal x1196=((0.392)*x1187);
IkReal x1197=((1.0)*x1187);
IkReal x1198=((1.0)*cj5*sj4);
IkReal x1199=(x1188*x1195);
evalcond[0]=((((-1.0)*r00*x1198))+x1188+((r01*x1192)));
evalcond[1]=((((-1.0)*r10*x1198))+(((-1.0)*x1197))+((r11*x1192)));
evalcond[2]=(((r00*sj5))+x1191+((x1187*x1193))+(((-1.0)*x1195*x1197)));
evalcond[3]=(x1190+((r10*sj5))+((x1188*x1193))+(((-1.0)*x1199)));
evalcond[4]=((((0.134)*x1188))+(((-1.0)*x1193*x1196))+((x1195*x1196))+(((-0.1)*x1191))+(((-1.0)*px))+(((-1.0)*x1187*x1194))+(((-1.0)*r00*x1189)));
evalcond[5]=((((-1.0)*x1188*x1194))+(((-0.1)*x1190))+(((-1.0)*r10*x1189))+(((-1.0)*py))+(((-0.134)*x1187))+(((0.392)*x1199))+(((-0.392)*x1188*x1193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1200=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1200);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1200);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1201=IKPowWithIntegerCheck(r22,-1);
if(!x1201.valid){
continue;
}
sj4array[0]=((-1.0)*(x1201.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1202=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1202);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1202);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1204 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1204.valid){
continue;
}
IkReal x1203=x1204.value;
j5array[0]=((-1.0)*x1203);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1203)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1205=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1205)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1205)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1205))))+IKsqr((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1205))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1205))), (((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1205))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1206=IKcos(j0);
IkReal x1207=IKsin(j0);
IkReal x1208=((0.1)*sj5);
IkReal x1209=(cj5*r11);
IkReal x1210=(sj4*sj5);
IkReal x1211=(cj1*cj2);
IkReal x1212=((1.0)*sj5);
IkReal x1213=(sj1*sj2);
IkReal x1214=((1.0)*cj5);
IkReal x1215=((0.425)*cj1);
IkReal x1216=((0.392)*x1206);
IkReal x1217=((1.0)*x1206);
IkReal x1218=(x1207*x1213);
evalcond[0]=(x1207+((r01*x1210))+(((-1.0)*r00*sj4*x1214)));
evalcond[1]=(((r11*x1210))+(((-1.0)*x1217))+(((-1.0)*r10*sj4*x1214)));
evalcond[2]=((((-1.0)*r00*x1212))+((x1206*x1211))+(((-1.0)*r01*x1214))+(((-1.0)*x1213*x1217)));
evalcond[3]=(((x1207*x1211))+(((-1.0)*x1209))+(((-1.0)*r10*x1212))+(((-1.0)*x1218)));
evalcond[4]=(((x1213*x1216))+(((-1.0)*x1206*x1215))+(((-0.1)*cj5*r01))+(((-1.0)*px))+(((-1.0)*r00*x1208))+(((0.134)*x1207))+(((-1.0)*x1211*x1216)));
evalcond[5]=((((-1.0)*x1207*x1215))+(((-0.1)*x1209))+(((-1.0)*r10*x1208))+(((-1.0)*py))+(((-0.392)*x1207*x1211))+(((-0.134)*x1206))+(((0.392)*x1218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1219=IKPowWithIntegerCheck(r22,-1);
if(!x1219.valid){
continue;
}
CheckValue<IkReal> x1220=IKPowWithIntegerCheck(sj3,-1);
if(!x1220.valid){
continue;
}
sj4array[0]=((x1219.value)*(x1220.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1221=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1221);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1221);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(IKabs(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1)))))))+(IKabs(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1222=((4.0)*r01);
IkReal x1223=((16.0)*r00);
IkReal x1224=(cj3*sj2);
IkReal x1225=((8.0)*r00);
IkReal x1226=(cj2*cj3);
IkReal x1227=(cj4*r01);
IkReal x1228=((16.0)*cj1);
IkReal x1229=((8.0)*sj1);
IkReal x1230=((16.0)*sj1);
IkReal x1231=((8.0)*cj1);
IkReal x1232=(cj2*sj3);
IkReal x1233=(sj2*sj3);
IkReal x1234=(sj1*x1232);
IkReal x1235=((4.0)*cj4*r00);
IkReal x1236=(cj1*x1233);
IkReal x1237=(((sj1*x1233*x1235))+((sj1*x1222*x1224))+((x1222*x1234))+((x1222*x1236)));
IkReal x1238=(((cj1*x1224*x1235))+((cj1*x1232*x1235))+((cj1*x1222*x1226))+((sj1*x1226*x1235)));
IkReal x1239=(x1237+(((-1.0)*x1238)));
IkReal x1240=(((cj1*x1225*x1226))+(((-1.0)*x1225*x1234))+(((-1.0)*x1225*x1236))+(((-1.0)*x1227*x1231*x1232))+(((-1.0)*x1226*x1227*x1229))+((x1227*x1229*x1233))+(((-1.0)*x1224*x1227*x1231))+(((-1.0)*sj1*x1224*x1225)));
IkReal x1241=(x1238+(((-1.0)*x1237)));
op[0]=x1239;
op[1]=x1240;
op[2]=x1239;
op[3]=((((-1.0)*x1223*x1236))+(((-1.0)*x1223*x1234))+(((-1.0)*x1226*x1227*x1230))+((cj1*x1223*x1226))+((x1227*x1230*x1233))+(((-1.0)*x1224*x1227*x1228))+(((-1.0)*sj1*x1223*x1224))+(((-1.0)*x1227*x1228*x1232)));
op[4]=x1241;
op[5]=x1240;
op[6]=x1241;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+((htj5*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))))))+(((4.0)*cj1*cj2*cj4*r10*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1242=((1.0)*sj4);
if( IKabs(((((-1.0)*r01*sj5*x1242))+((cj5*r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1242)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj5*x1242))+((cj5*r00*sj4))))+IKsqr((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1242))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*sj5*x1242))+((cj5*r00*sj4))), (((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1242))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1243=IKcos(j0);
IkReal x1244=IKsin(j0);
IkReal x1245=((0.1)*sj5);
IkReal x1246=(cj5*r11);
IkReal x1247=((1.0)*cj3);
IkReal x1248=(r11*sj5);
IkReal x1249=(cj5*r01);
IkReal x1250=(cj1*cj2);
IkReal x1251=(r01*sj5);
IkReal x1252=(cj3*cj4);
IkReal x1253=(r00*sj5);
IkReal x1254=(r10*sj5);
IkReal x1255=(cj4*cj5*r00);
IkReal x1256=(cj4*cj5*r10);
IkReal x1257=((1.0)*cj4*sj3);
IkReal x1258=(cj1*x1244);
IkReal x1259=(cj1*x1243);
IkReal x1260=(sj1*x1243);
IkReal x1261=((1.0)*cj5*sj4);
IkReal x1262=(sj1*sj2*x1244);
evalcond[0]=(x1244+((sj4*x1251))+(((-1.0)*r00*x1261)));
evalcond[1]=((((-1.0)*r10*x1261))+(((-1.0)*x1243))+((sj4*x1248)));
evalcond[2]=(((cj3*x1253))+((cj2*x1260))+(((-1.0)*x1251*x1257))+((sj3*x1255))+((cj3*x1249))+((sj2*x1259)));
evalcond[3]=(((cj2*sj1*x1244))+((cj3*x1254))+(((-1.0)*x1248*x1257))+((sj3*x1256))+((cj3*x1246))+((sj2*x1258)));
evalcond[4]=(((x1243*x1250))+((sj3*x1249))+(((-1.0)*x1247*x1255))+((x1251*x1252))+(((-1.0)*sj2*x1260))+((sj3*x1253)));
evalcond[5]=(((sj3*x1246))+(((-1.0)*x1247*x1256))+(((-1.0)*x1262))+((sj3*x1254))+((x1248*x1252))+((x1244*x1250)));
evalcond[6]=((((-0.392)*x1243*x1250))+(((-0.1)*x1249))+(((-1.0)*px))+(((-0.425)*x1259))+(((0.134)*x1244))+(((-1.0)*r00*x1245))+(((0.392)*sj2*x1260)));
evalcond[7]=((((0.392)*x1262))+(((-0.1)*x1246))+(((-1.0)*py))+(((-1.0)*r10*x1245))+(((-0.392)*x1244*x1250))+(((-0.134)*x1243))+(((-0.425)*x1258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1263=IKPowWithIntegerCheck(cj3,-1);
if(!x1263.valid){
continue;
}
CheckValue<IkReal> x1264=IKPowWithIntegerCheck(r22,-1);
if(!x1264.valid){
continue;
}
sj4array[0]=((-1.0)*(x1263.value)*(x1264.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1265=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1265);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1265);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(IKabs(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1)))))))+(IKabs(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1266=((4.0)*r01);
IkReal x1267=((16.0)*r00);
IkReal x1268=(cj3*sj2);
IkReal x1269=((8.0)*r00);
IkReal x1270=(cj2*cj3);
IkReal x1271=(cj4*r01);
IkReal x1272=((16.0)*cj1);
IkReal x1273=((8.0)*sj1);
IkReal x1274=((16.0)*sj1);
IkReal x1275=((8.0)*cj1);
IkReal x1276=(cj2*sj3);
IkReal x1277=(sj2*sj3);
IkReal x1278=(sj1*x1276);
IkReal x1279=((4.0)*cj4*r00);
IkReal x1280=(cj1*x1277);
IkReal x1281=(((sj1*x1277*x1279))+((x1266*x1278))+((x1266*x1280))+((sj1*x1266*x1268)));
IkReal x1282=(((cj1*x1268*x1279))+((cj1*x1266*x1270))+((sj1*x1270*x1279))+((cj1*x1276*x1279)));
IkReal x1283=(x1281+(((-1.0)*x1282)));
IkReal x1284=((((-1.0)*x1271*x1275*x1276))+(((-1.0)*x1270*x1271*x1273))+(((-1.0)*sj1*x1268*x1269))+((x1271*x1273*x1277))+(((-1.0)*x1268*x1271*x1275))+(((-1.0)*x1269*x1280))+(((-1.0)*x1269*x1278))+((cj1*x1269*x1270)));
IkReal x1285=(x1282+(((-1.0)*x1281)));
op[0]=x1283;
op[1]=x1284;
op[2]=x1283;
op[3]=((((-1.0)*x1270*x1271*x1274))+((cj1*x1267*x1270))+(((-1.0)*x1267*x1278))+(((-1.0)*x1271*x1272*x1276))+((x1271*x1274*x1277))+(((-1.0)*x1267*x1280))+(((-1.0)*x1268*x1271*x1272))+(((-1.0)*sj1*x1267*x1268)));
op[4]=x1285;
op[5]=x1284;
op[6]=x1285;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+((htj5*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))))))+(((4.0)*cj1*cj2*cj4*r10*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1286=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1286)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1286))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1286))))+IKsqr(((((-1.0)*cj5*r10*x1286))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1286))), ((((-1.0)*cj5*r10*x1286))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1287=IKcos(j0);
IkReal x1288=IKsin(j0);
IkReal x1289=((0.1)*sj5);
IkReal x1290=(cj5*r11);
IkReal x1291=((1.0)*cj3);
IkReal x1292=(r11*sj5);
IkReal x1293=(cj5*r01);
IkReal x1294=(cj1*cj2);
IkReal x1295=(r01*sj5);
IkReal x1296=(cj3*cj4);
IkReal x1297=(r00*sj5);
IkReal x1298=(r10*sj5);
IkReal x1299=(cj4*cj5*r00);
IkReal x1300=(cj4*cj5*r10);
IkReal x1301=((1.0)*cj4*sj3);
IkReal x1302=(cj1*x1288);
IkReal x1303=(cj1*x1287);
IkReal x1304=(sj1*x1287);
IkReal x1305=((1.0)*cj5*sj4);
IkReal x1306=(sj1*sj2*x1288);
evalcond[0]=(x1288+(((-1.0)*r00*x1305))+((sj4*x1295)));
evalcond[1]=((((-1.0)*x1287))+(((-1.0)*r10*x1305))+((sj4*x1292)));
evalcond[2]=(((sj2*x1303))+((cj3*x1293))+((cj3*x1297))+((sj3*x1299))+((cj2*x1304))+(((-1.0)*x1295*x1301)));
evalcond[3]=(((sj2*x1302))+((cj3*x1298))+((cj3*x1290))+((sj3*x1300))+(((-1.0)*x1292*x1301))+((cj2*sj1*x1288)));
evalcond[4]=((((-1.0)*sj2*x1304))+((x1287*x1294))+((sj3*x1293))+((sj3*x1297))+((x1295*x1296))+(((-1.0)*x1291*x1299)));
evalcond[5]=(((sj3*x1290))+((sj3*x1298))+(((-1.0)*x1306))+(((-1.0)*x1291*x1300))+((x1288*x1294))+((x1292*x1296)));
evalcond[6]=((((-0.392)*x1287*x1294))+(((0.392)*sj2*x1304))+(((-1.0)*r00*x1289))+(((-1.0)*px))+(((0.134)*x1288))+(((-0.1)*x1293))+(((-0.425)*x1303)));
evalcond[7]=((((0.392)*x1306))+(((-1.0)*py))+(((-1.0)*r10*x1289))+(((-0.392)*x1288*x1294))+(((-0.1)*x1290))+(((-0.425)*x1302))+(((-0.134)*x1287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1309 = IKatan2WithCheck(IkReal(((-0.1)*r21)),IkReal(((-0.1)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1309.valid){
continue;
}
IkReal x1307=((1.0)*(x1309.value));
if((((((0.01)*(r20*r20)))+(((0.01)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1310=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.01)*(r20*r20)))+(((0.01)*(r21*r21)))))),-1);
if(!x1310.valid){
continue;
}
if( (((-1.0)*(x1310.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1310.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1308=((-1.0)*(IKasin(((-1.0)*(x1310.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))))))));
j5array[0]=((((-1.0)*x1307))+(((-1.0)*x1308)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1307))+(((1.0)*x1308)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1311=cj5*cj5;
IkReal x1312=r21*r21;
IkReal x1313=(sj3*x1311);
IkReal x1314=(((sj3*(r22*r22)))+((sj3*x1312))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((x1313*(r20*r20)))+(((-1.0)*x1312*x1313)));
j4eval[0]=x1314;
j4eval[1]=IKsign(x1314);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1315=cj5*cj5;
IkReal x1316=r21*r21;
IkReal x1317=((1.0)*cj3);
IkReal x1318=(cj3*x1315);
IkReal x1319=(((x1316*x1318))+(((-1.0)*x1317*(r22*r22)))+(((-1.0)*x1315*x1317*(r20*r20)))+(((-1.0)*x1316*x1317))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1319;
j4eval[1]=IKsign(x1319);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1320=cj2*cj2;
IkReal x1321=cj1*cj1;
IkReal x1322=(cj2*x1321);
IkReal x1323=(cj1*sj1*sj2);
IkReal x1324=(x1320*x1321);
j0eval[0]=((-6.36549089425466)+(((12.3585920403546)*x1323))+(((-11.3989837172212)*x1324))+(((-1.0)*x1321))+(((-12.3585920403546)*x1322))+(((5.69949185861059)*x1320))+(((11.3989837172212)*cj2*x1323)));
j0eval[1]=IKsign(((-42905.0)+(((83300.0)*x1323))+(((38416.0)*x1320))+(((-76832.0)*x1324))+(((-83300.0)*x1322))+(((-6740.25)*x1321))+(((76832.0)*cj2*x1323))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1325=((1.0)*cj5);
IkReal x1326=((1.0)*sj5);
IkReal x1327=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x1327;
j0eval[1]=IKsign(x1327);
j0eval[2]=((IKabs(((((-1.0)*r11*x1325))+(((-1.0)*r10*x1326)))))+(IKabs(((((-1.0)*r01*x1325))+(((-1.0)*r00*x1326))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1328=cj5*cj5;
IkReal x1329=r21*r21;
IkReal x1330=(sj1*sj2);
IkReal x1331=(r21*sj5);
IkReal x1332=(cj5*r20);
IkReal x1333=(cj1*cj2);
IkReal x1334=(x1329+(r22*r22)+(((-2.0)*x1331*x1332))+((x1328*(r20*r20)))+(((-1.0)*x1328*x1329)));
j4eval[0]=x1334;
j4eval[1]=IKsign(x1334);
j4eval[2]=((IKabs(((((-1.0)*x1330*x1332))+((x1330*x1331))+(((-1.0)*x1331*x1333))+((x1332*x1333)))))+(IKabs(((((-1.0)*r22*x1333))+((r22*x1330))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((-0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((-0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((-0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1335=IKcos(j0);
IkReal x1336=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.425)*x1335))+(((0.134)*x1336)));
evalcond[1]=((((-0.134)*x1335))+(((-1.0)*py))+(((-0.425)*x1336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1337=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1337;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1337);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1338=cj5*cj5;
IkReal x1339=((1.0)*r21);
IkReal x1340=(cj5*sj5);
IkReal x1341=((1.0)*r20);
IkReal x1342=((((-1.0)*r01*x1340*x1341))+((r01*r21))+(((-1.0)*r00*x1339*x1340))+(((-1.0)*r01*x1338*x1339))+((r00*r20*x1338))+((r02*r22)));
j4eval[0]=x1342;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x1341))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1342);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1343=cj5*cj5;
IkReal x1344=(r21*sj5);
IkReal x1345=(r11*r21);
IkReal x1346=((1.0)*cj5*r20);
IkReal x1347=(x1345+(((-1.0)*cj5*r10*x1344))+((r12*r22))+((r10*r20*x1343))+(((-1.0)*x1343*x1345))+(((-1.0)*r11*sj5*x1346)));
j4eval[0]=x1347;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1344))+(((-1.0)*sj0*x1346))))));
j4eval[2]=IKsign(x1347);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1348=cj5*cj5;
IkReal x1349=(r21*sj5);
IkReal x1350=(r11*r21);
IkReal x1351=((1.0)*cj5*r20);
CheckValue<IkReal> x1352=IKPowWithIntegerCheck(IKsign((x1350+(((-1.0)*cj5*r10*x1349))+((r12*r22))+((r10*r20*x1348))+(((-1.0)*x1348*x1350))+(((-1.0)*r11*sj5*x1351)))),-1);
if(!x1352.valid){
continue;
}
CheckValue<IkReal> x1353 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1349))+(((-1.0)*sj0*x1351)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1353.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1352.value)))+(x1353.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1354=IKsin(j4);
IkReal x1355=IKcos(j4);
IkReal x1356=(r11*sj5);
IkReal x1357=(cj5*r00);
IkReal x1358=(cj5*r10);
IkReal x1359=(r21*sj5);
IkReal x1360=(cj5*r20);
IkReal x1361=(r01*sj5);
IkReal x1362=((1.0)*x1355);
IkReal x1363=((1.0)*x1354);
evalcond[0]=(((x1354*x1359))+(((-1.0)*r22*x1362))+(((-1.0)*x1360*x1363)));
evalcond[1]=(((x1355*x1360))+(((-1.0)*x1359*x1362))+(((-1.0)*r22*x1363)));
evalcond[2]=(sj0+(((-1.0)*r02*x1362))+((x1354*x1361))+(((-1.0)*x1357*x1363)));
evalcond[3]=(((x1355*x1357))+cj0+(((-1.0)*r02*x1363))+(((-1.0)*x1361*x1362)));
evalcond[4]=(((x1355*x1358))+sj0+(((-1.0)*r12*x1363))+(((-1.0)*x1356*x1362)));
evalcond[5]=((((-1.0)*r12*x1362))+((x1354*x1356))+(((-1.0)*cj0))+(((-1.0)*x1358*x1363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1364=cj5*cj5;
IkReal x1365=((1.0)*r21);
IkReal x1366=(cj5*sj5);
IkReal x1367=((1.0)*r20);
CheckValue<IkReal> x1368 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x1367))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1368.valid){
continue;
}
CheckValue<IkReal> x1369=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1364*x1365))+((r01*r21))+(((-1.0)*r01*x1366*x1367))+(((-1.0)*r00*x1365*x1366))+((r00*r20*x1364))+((r02*r22)))),-1);
if(!x1369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1368.value)+(((1.5707963267949)*(x1369.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1370=IKsin(j4);
IkReal x1371=IKcos(j4);
IkReal x1372=(r11*sj5);
IkReal x1373=(cj5*r00);
IkReal x1374=(cj5*r10);
IkReal x1375=(r21*sj5);
IkReal x1376=(cj5*r20);
IkReal x1377=(r01*sj5);
IkReal x1378=((1.0)*x1371);
IkReal x1379=((1.0)*x1370);
evalcond[0]=((((-1.0)*r22*x1378))+((x1370*x1375))+(((-1.0)*x1376*x1379)));
evalcond[1]=((((-1.0)*r22*x1379))+(((-1.0)*x1375*x1378))+((x1371*x1376)));
evalcond[2]=(sj0+(((-1.0)*r02*x1378))+((x1370*x1377))+(((-1.0)*x1373*x1379)));
evalcond[3]=(cj0+(((-1.0)*r02*x1379))+((x1371*x1373))+(((-1.0)*x1377*x1378)));
evalcond[4]=(sj0+(((-1.0)*x1372*x1378))+(((-1.0)*r12*x1379))+((x1371*x1374)));
evalcond[5]=((((-1.0)*x1374*x1379))+(((-1.0)*r12*x1378))+((x1370*x1372))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1380=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1380.valid){
continue;
}
CheckValue<IkReal> x1381 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1380.value)))+(x1381.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1382=IKsin(j4);
IkReal x1383=IKcos(j4);
IkReal x1384=(r11*sj5);
IkReal x1385=(cj5*r00);
IkReal x1386=(cj5*r10);
IkReal x1387=(r21*sj5);
IkReal x1388=(cj5*r20);
IkReal x1389=(r01*sj5);
IkReal x1390=((1.0)*x1383);
IkReal x1391=((1.0)*x1382);
evalcond[0]=((((-1.0)*r22*x1390))+(((-1.0)*x1388*x1391))+((x1382*x1387)));
evalcond[1]=((((-1.0)*r22*x1391))+(((-1.0)*x1387*x1390))+((x1383*x1388)));
evalcond[2]=((((-1.0)*x1385*x1391))+sj0+(((-1.0)*r02*x1390))+((x1382*x1389)));
evalcond[3]=((((-1.0)*r02*x1391))+(((-1.0)*x1389*x1390))+cj0+((x1383*x1385)));
evalcond[4]=((((-1.0)*r12*x1391))+(((-1.0)*x1384*x1390))+sj0+((x1383*x1386)));
evalcond[5]=((((-1.0)*r12*x1390))+(((-1.0)*x1386*x1391))+(((-1.0)*cj0))+((x1382*x1384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((-0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((-0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((-0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1392=IKcos(j0);
IkReal x1393=IKsin(j0);
evalcond[0]=((((-0.425)*x1392))+(((0.134)*x1393))+(((-1.0)*px)));
evalcond[1]=((((-0.425)*x1393))+(((-1.0)*py))+(((-0.134)*x1392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1394=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1394;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1394);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1395=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1395;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1395);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1396=cj5*cj5;
IkReal x1397=((1.0)*r21);
IkReal x1398=(cj5*r20);
IkReal x1399=((((-1.0)*r01*sj5*x1398))+(((-1.0)*cj5*r00*sj5*x1397))+((r01*r21))+(((-1.0)*r01*x1396*x1397))+((r02*r22))+((r00*r20*x1396)));
j4eval[0]=x1399;
j4eval[1]=IKsign(x1399);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*sj5*x1397))+((sj0*x1398))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1400=cj5*cj5;
IkReal x1401=((1.0)*r21);
IkReal x1402=(cj5*r20);
CheckValue<IkReal> x1403 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x1401))+((sj0*x1402)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1403.valid){
continue;
}
CheckValue<IkReal> x1404=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1400*x1401))+((r01*r21))+((r00*r20*x1400))+((r02*r22))+(((-1.0)*cj5*r00*sj5*x1401))+(((-1.0)*r01*sj5*x1402)))),-1);
if(!x1404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1403.value)+(((1.5707963267949)*(x1404.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1405=IKsin(j4);
IkReal x1406=IKcos(j4);
IkReal x1407=((1.0)*cj0);
IkReal x1408=(cj5*r00);
IkReal x1409=(r11*sj5);
IkReal x1410=(cj5*r10);
IkReal x1411=(r21*sj5);
IkReal x1412=(cj5*r20);
IkReal x1413=(r01*sj5);
IkReal x1414=((1.0)*x1406);
IkReal x1415=((1.0)*x1405);
evalcond[0]=((((-1.0)*x1412*x1415))+(((-1.0)*r22*x1414))+((x1405*x1411)));
evalcond[1]=((((-1.0)*r22*x1415))+(((-1.0)*x1411*x1414))+((x1406*x1412)));
evalcond[2]=(sj0+(((-1.0)*r02*x1414))+((x1405*x1413))+(((-1.0)*x1408*x1415)));
evalcond[3]=((((-1.0)*x1407))+((x1405*x1409))+(((-1.0)*x1410*x1415))+(((-1.0)*r12*x1414)));
evalcond[4]=((((-1.0)*x1413*x1414))+(((-1.0)*r02*x1415))+(((-1.0)*x1407))+((x1406*x1408)));
evalcond[5]=((((-1.0)*sj0))+((x1406*x1410))+(((-1.0)*r12*x1415))+(((-1.0)*x1409*x1414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1416=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1416.valid){
continue;
}
CheckValue<IkReal> x1417 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1416.value)))+(x1417.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1418=IKsin(j4);
IkReal x1419=IKcos(j4);
IkReal x1420=((1.0)*cj0);
IkReal x1421=(cj5*r00);
IkReal x1422=(r11*sj5);
IkReal x1423=(cj5*r10);
IkReal x1424=(r21*sj5);
IkReal x1425=(cj5*r20);
IkReal x1426=(r01*sj5);
IkReal x1427=((1.0)*x1419);
IkReal x1428=((1.0)*x1418);
evalcond[0]=((((-1.0)*x1425*x1428))+((x1418*x1424))+(((-1.0)*r22*x1427)));
evalcond[1]=((((-1.0)*x1424*x1427))+((x1419*x1425))+(((-1.0)*r22*x1428)));
evalcond[2]=((((-1.0)*x1421*x1428))+sj0+((x1418*x1426))+(((-1.0)*r02*x1427)));
evalcond[3]=((((-1.0)*x1423*x1428))+(((-1.0)*r12*x1427))+((x1418*x1422))+(((-1.0)*x1420)));
evalcond[4]=((((-1.0)*x1426*x1427))+((x1419*x1421))+(((-1.0)*r02*x1428))+(((-1.0)*x1420)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x1428))+(((-1.0)*x1422*x1427))+((x1419*x1423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1429=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1429.valid){
continue;
}
CheckValue<IkReal> x1430 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1429.value)))+(x1430.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1431=IKsin(j4);
IkReal x1432=IKcos(j4);
IkReal x1433=((1.0)*cj0);
IkReal x1434=(cj5*r00);
IkReal x1435=(r11*sj5);
IkReal x1436=(cj5*r10);
IkReal x1437=(r21*sj5);
IkReal x1438=(cj5*r20);
IkReal x1439=(r01*sj5);
IkReal x1440=((1.0)*x1432);
IkReal x1441=((1.0)*x1431);
evalcond[0]=((((-1.0)*r22*x1440))+(((-1.0)*x1438*x1441))+((x1431*x1437)));
evalcond[1]=(((x1432*x1438))+(((-1.0)*r22*x1441))+(((-1.0)*x1437*x1440)));
evalcond[2]=(sj0+(((-1.0)*x1434*x1441))+(((-1.0)*r02*x1440))+((x1431*x1439)));
evalcond[3]=((((-1.0)*r12*x1440))+(((-1.0)*x1433))+(((-1.0)*x1436*x1441))+((x1431*x1435)));
evalcond[4]=(((x1432*x1434))+(((-1.0)*x1439*x1440))+(((-1.0)*x1433))+(((-1.0)*r02*x1441)));
evalcond[5]=(((x1432*x1436))+(((-1.0)*sj0))+(((-1.0)*r12*x1441))+(((-1.0)*x1435*x1440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((7.46268656716418)*px))+IKsqr(((-7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((7.46268656716418)*px), ((-7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.134)*(IKsin(j0)))));
evalcond[1]=((((-0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1442=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1442;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1442);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1443=cj5*cj5;
IkReal x1444=((1.0)*r21);
IkReal x1445=(cj5*sj5);
IkReal x1446=((1.0)*r20);
IkReal x1447=(((r00*r20*x1443))+(((-1.0)*r01*x1445*x1446))+(((-1.0)*r01*x1443*x1444))+(((-1.0)*r00*x1444*x1445))+((r01*r21))+((r02*r22)));
j4eval[0]=x1447;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1446)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1447);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1448=cj5*cj5;
IkReal x1449=(r21*sj5);
IkReal x1450=(r11*r21);
IkReal x1451=((1.0)*cj5*r20);
IkReal x1452=((((-1.0)*r11*sj5*x1451))+((r12*r22))+(((-1.0)*x1448*x1450))+x1450+(((-1.0)*cj5*r10*x1449))+((r10*r20*x1448)));
j4eval[0]=x1452;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1451))+((sj0*x1449))))));
j4eval[2]=IKsign(x1452);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1453=cj5*cj5;
IkReal x1454=(r21*sj5);
IkReal x1455=(r11*r21);
IkReal x1456=((1.0)*cj5*r20);
CheckValue<IkReal> x1457=IKPowWithIntegerCheck(IKsign((((r10*r20*x1453))+(((-1.0)*r11*sj5*x1456))+(((-1.0)*cj5*r10*x1454))+((r12*r22))+x1455+(((-1.0)*x1453*x1455)))),-1);
if(!x1457.valid){
continue;
}
CheckValue<IkReal> x1458 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1456))+((sj0*x1454)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1457.value)))+(x1458.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1459=IKsin(j4);
IkReal x1460=IKcos(j4);
IkReal x1461=(r11*sj5);
IkReal x1462=(cj5*r00);
IkReal x1463=(cj5*r10);
IkReal x1464=(r21*sj5);
IkReal x1465=(cj5*r20);
IkReal x1466=(r01*sj5);
IkReal x1467=((1.0)*x1460);
IkReal x1468=((1.0)*x1459);
evalcond[0]=(((x1459*x1464))+(((-1.0)*r22*x1467))+(((-1.0)*x1465*x1468)));
evalcond[1]=((((-1.0)*r22*x1468))+(((-1.0)*x1464*x1467))+((x1460*x1465)));
evalcond[2]=(sj0+(((-1.0)*r02*x1467))+((x1459*x1466))+(((-1.0)*x1462*x1468)));
evalcond[3]=((((-1.0)*r02*x1468))+cj0+(((-1.0)*x1466*x1467))+((x1460*x1462)));
evalcond[4]=(sj0+((x1460*x1463))+(((-1.0)*x1461*x1467))+(((-1.0)*r12*x1468)));
evalcond[5]=(((x1459*x1461))+(((-1.0)*x1463*x1468))+(((-1.0)*r12*x1467))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1469=cj5*cj5;
IkReal x1470=((1.0)*r21);
IkReal x1471=(cj5*sj5);
IkReal x1472=((1.0)*r20);
CheckValue<IkReal> x1473 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1472)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1473.valid){
continue;
}
CheckValue<IkReal> x1474=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1471*x1472))+((r01*r21))+((r00*r20*x1469))+(((-1.0)*r00*x1470*x1471))+((r02*r22))+(((-1.0)*r01*x1469*x1470)))),-1);
if(!x1474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1473.value)+(((1.5707963267949)*(x1474.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1475=IKsin(j4);
IkReal x1476=IKcos(j4);
IkReal x1477=(r11*sj5);
IkReal x1478=(cj5*r00);
IkReal x1479=(cj5*r10);
IkReal x1480=(r21*sj5);
IkReal x1481=(cj5*r20);
IkReal x1482=(r01*sj5);
IkReal x1483=((1.0)*x1476);
IkReal x1484=((1.0)*x1475);
evalcond[0]=((((-1.0)*x1481*x1484))+(((-1.0)*r22*x1483))+((x1475*x1480)));
evalcond[1]=(((x1476*x1481))+(((-1.0)*x1480*x1483))+(((-1.0)*r22*x1484)));
evalcond[2]=(sj0+(((-1.0)*r02*x1483))+((x1475*x1482))+(((-1.0)*x1478*x1484)));
evalcond[3]=((((-1.0)*x1482*x1483))+cj0+(((-1.0)*r02*x1484))+((x1476*x1478)));
evalcond[4]=(sj0+(((-1.0)*r12*x1484))+((x1476*x1479))+(((-1.0)*x1477*x1483)));
evalcond[5]=((((-1.0)*x1479*x1484))+(((-1.0)*r12*x1483))+((x1475*x1477))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1485=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1485.valid){
continue;
}
CheckValue<IkReal> x1486 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1485.value)))+(x1486.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1487=IKsin(j4);
IkReal x1488=IKcos(j4);
IkReal x1489=(r11*sj5);
IkReal x1490=(cj5*r00);
IkReal x1491=(cj5*r10);
IkReal x1492=(r21*sj5);
IkReal x1493=(cj5*r20);
IkReal x1494=(r01*sj5);
IkReal x1495=((1.0)*x1488);
IkReal x1496=((1.0)*x1487);
evalcond[0]=(((x1487*x1492))+(((-1.0)*x1493*x1496))+(((-1.0)*r22*x1495)));
evalcond[1]=((((-1.0)*x1492*x1495))+(((-1.0)*r22*x1496))+((x1488*x1493)));
evalcond[2]=(sj0+((x1487*x1494))+(((-1.0)*r02*x1495))+(((-1.0)*x1490*x1496)));
evalcond[3]=((((-1.0)*x1494*x1495))+cj0+(((-1.0)*r02*x1496))+((x1488*x1490)));
evalcond[4]=((((-1.0)*r12*x1496))+sj0+((x1488*x1491))+(((-1.0)*x1489*x1495)));
evalcond[5]=((((-1.0)*r12*x1495))+((x1487*x1489))+(((-1.0)*x1491*x1496))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((7.46268656716418)*px))+IKsqr(((-7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((7.46268656716418)*px), ((-7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.134)*(IKsin(j0)))));
evalcond[1]=((((-0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1497=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1497;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1497);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1498=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1498;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1498);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1499=cj5*cj5;
IkReal x1500=((1.0)*r21);
IkReal x1501=(cj5*r20);
IkReal x1502=(((r01*r21))+(((-1.0)*r01*x1499*x1500))+((r00*r20*x1499))+(((-1.0)*r01*sj5*x1501))+((r02*r22))+(((-1.0)*cj5*r00*sj5*x1500)));
j4eval[0]=x1502;
j4eval[1]=IKsign(x1502);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*sj5*x1500))+((sj0*x1501))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1503=cj5*cj5;
IkReal x1504=((1.0)*r21);
IkReal x1505=(cj5*r20);
CheckValue<IkReal> x1506=IKPowWithIntegerCheck(IKsign((((r01*r21))+((r00*r20*x1503))+(((-1.0)*r01*sj5*x1505))+((r02*r22))+(((-1.0)*cj5*r00*sj5*x1504))+(((-1.0)*r01*x1503*x1504)))),-1);
if(!x1506.valid){
continue;
}
CheckValue<IkReal> x1507 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x1504))+((sj0*x1505)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1506.value)))+(x1507.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1508=IKsin(j4);
IkReal x1509=IKcos(j4);
IkReal x1510=((1.0)*cj0);
IkReal x1511=(cj5*r00);
IkReal x1512=(r11*sj5);
IkReal x1513=(cj5*r10);
IkReal x1514=(r21*sj5);
IkReal x1515=(cj5*r20);
IkReal x1516=(r01*sj5);
IkReal x1517=((1.0)*x1509);
IkReal x1518=((1.0)*x1508);
evalcond[0]=((((-1.0)*x1515*x1518))+((x1508*x1514))+(((-1.0)*r22*x1517)));
evalcond[1]=(((x1509*x1515))+(((-1.0)*r22*x1518))+(((-1.0)*x1514*x1517)));
evalcond[2]=(((x1508*x1516))+sj0+(((-1.0)*r02*x1517))+(((-1.0)*x1511*x1518)));
evalcond[3]=(((x1508*x1512))+(((-1.0)*x1510))+(((-1.0)*x1513*x1518))+(((-1.0)*r12*x1517)));
evalcond[4]=(((x1509*x1511))+(((-1.0)*x1516*x1517))+(((-1.0)*x1510))+(((-1.0)*r02*x1518)));
evalcond[5]=(((x1509*x1513))+(((-1.0)*sj0))+(((-1.0)*x1512*x1517))+(((-1.0)*r12*x1518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1519=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1519.valid){
continue;
}
CheckValue<IkReal> x1520 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1519.value)))+(x1520.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1521=IKsin(j4);
IkReal x1522=IKcos(j4);
IkReal x1523=((1.0)*cj0);
IkReal x1524=(cj5*r00);
IkReal x1525=(r11*sj5);
IkReal x1526=(cj5*r10);
IkReal x1527=(r21*sj5);
IkReal x1528=(cj5*r20);
IkReal x1529=(r01*sj5);
IkReal x1530=((1.0)*x1522);
IkReal x1531=((1.0)*x1521);
evalcond[0]=((((-1.0)*r22*x1530))+((x1521*x1527))+(((-1.0)*x1528*x1531)));
evalcond[1]=(((x1522*x1528))+(((-1.0)*r22*x1531))+(((-1.0)*x1527*x1530)));
evalcond[2]=((((-1.0)*x1524*x1531))+sj0+(((-1.0)*r02*x1530))+((x1521*x1529)));
evalcond[3]=((((-1.0)*r12*x1530))+(((-1.0)*x1523))+((x1521*x1525))+(((-1.0)*x1526*x1531)));
evalcond[4]=((((-1.0)*x1529*x1530))+((x1522*x1524))+(((-1.0)*x1523))+(((-1.0)*r02*x1531)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x1531))+(((-1.0)*x1525*x1530))+((x1522*x1526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1532=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1532.valid){
continue;
}
CheckValue<IkReal> x1533 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1532.value)))+(x1533.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1534=IKsin(j4);
IkReal x1535=IKcos(j4);
IkReal x1536=((1.0)*cj0);
IkReal x1537=(cj5*r00);
IkReal x1538=(r11*sj5);
IkReal x1539=(cj5*r10);
IkReal x1540=(r21*sj5);
IkReal x1541=(cj5*r20);
IkReal x1542=(r01*sj5);
IkReal x1543=((1.0)*x1535);
IkReal x1544=((1.0)*x1534);
evalcond[0]=((((-1.0)*r22*x1543))+((x1534*x1540))+(((-1.0)*x1541*x1544)));
evalcond[1]=((((-1.0)*x1540*x1543))+(((-1.0)*r22*x1544))+((x1535*x1541)));
evalcond[2]=((((-1.0)*r02*x1543))+sj0+((x1534*x1542))+(((-1.0)*x1537*x1544)));
evalcond[3]=((((-1.0)*x1536))+(((-1.0)*x1539*x1544))+((x1534*x1538))+(((-1.0)*r12*x1543)));
evalcond[4]=((((-1.0)*r02*x1544))+(((-1.0)*x1536))+((x1535*x1537))+(((-1.0)*x1542*x1543)));
evalcond[5]=((((-1.0)*sj0))+((x1535*x1539))+(((-1.0)*r12*x1544))+(((-1.0)*x1538*x1543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((-0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.67478761815078)*px))+(((2.14018460980658)*py))), ((((-0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1545=IKsin(j0);
IkReal x1546=IKcos(j0);
evalcond[0]=((((0.425)*x1546))+(((0.134)*x1545))+(((-1.0)*px)));
evalcond[1]=((((0.425)*x1545))+(((-0.134)*x1546))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1547=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1547;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1547);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1548=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1548;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1548);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1549=cj5*cj5;
IkReal x1550=((1.0)*r21);
IkReal x1551=(cj5*r20);
IkReal x1552=((((-1.0)*r01*sj5*x1551))+(((-1.0)*cj5*r00*sj5*x1550))+((r01*r21))+(((-1.0)*r01*x1549*x1550))+((r00*r20*x1549))+((r02*r22)));
j4eval[0]=x1552;
j4eval[1]=IKsign(x1552);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*sj5*x1550))+((sj0*x1551))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1553=cj5*cj5;
IkReal x1554=((1.0)*r21);
IkReal x1555=(cj5*r20);
CheckValue<IkReal> x1556 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x1554))+((sj0*x1555)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1556.valid){
continue;
}
CheckValue<IkReal> x1557=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x1555))+(((-1.0)*cj5*r00*sj5*x1554))+(((-1.0)*r01*x1553*x1554))+((r01*r21))+((r00*r20*x1553))+((r02*r22)))),-1);
if(!x1557.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1556.value)+(((1.5707963267949)*(x1557.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1558=IKsin(j4);
IkReal x1559=IKcos(j4);
IkReal x1560=((1.0)*cj0);
IkReal x1561=(cj5*r00);
IkReal x1562=(r11*sj5);
IkReal x1563=(cj5*r10);
IkReal x1564=(r21*sj5);
IkReal x1565=(cj5*r20);
IkReal x1566=(r01*sj5);
IkReal x1567=((1.0)*x1559);
IkReal x1568=((1.0)*x1558);
evalcond[0]=((((-1.0)*x1565*x1568))+(((-1.0)*r22*x1567))+((x1558*x1564)));
evalcond[1]=((((-1.0)*r22*x1568))+(((-1.0)*x1564*x1567))+((x1559*x1565)));
evalcond[2]=(sj0+(((-1.0)*r02*x1567))+(((-1.0)*x1561*x1568))+((x1558*x1566)));
evalcond[3]=((((-1.0)*x1563*x1568))+(((-1.0)*r12*x1567))+(((-1.0)*x1560))+((x1558*x1562)));
evalcond[4]=((((-1.0)*r02*x1568))+(((-1.0)*x1566*x1567))+((x1559*x1561))+(((-1.0)*x1560)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1562*x1567))+(((-1.0)*r12*x1568))+((x1559*x1563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1569=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1569.valid){
continue;
}
CheckValue<IkReal> x1570 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1569.value)))+(x1570.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1571=IKsin(j4);
IkReal x1572=IKcos(j4);
IkReal x1573=((1.0)*cj0);
IkReal x1574=(cj5*r00);
IkReal x1575=(r11*sj5);
IkReal x1576=(cj5*r10);
IkReal x1577=(r21*sj5);
IkReal x1578=(cj5*r20);
IkReal x1579=(r01*sj5);
IkReal x1580=((1.0)*x1572);
IkReal x1581=((1.0)*x1571);
evalcond[0]=(((x1571*x1577))+(((-1.0)*x1578*x1581))+(((-1.0)*r22*x1580)));
evalcond[1]=(((x1572*x1578))+(((-1.0)*x1577*x1580))+(((-1.0)*r22*x1581)));
evalcond[2]=(((x1571*x1579))+sj0+(((-1.0)*r02*x1580))+(((-1.0)*x1574*x1581)));
evalcond[3]=(((x1571*x1575))+(((-1.0)*x1573))+(((-1.0)*x1576*x1581))+(((-1.0)*r12*x1580)));
evalcond[4]=(((x1572*x1574))+(((-1.0)*r02*x1581))+(((-1.0)*x1579*x1580))+(((-1.0)*x1573)));
evalcond[5]=((((-1.0)*sj0))+((x1572*x1576))+(((-1.0)*r12*x1581))+(((-1.0)*x1575*x1580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1582=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1582.valid){
continue;
}
CheckValue<IkReal> x1583 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1582.value)))+(x1583.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1584=IKsin(j4);
IkReal x1585=IKcos(j4);
IkReal x1586=((1.0)*cj0);
IkReal x1587=(cj5*r00);
IkReal x1588=(r11*sj5);
IkReal x1589=(cj5*r10);
IkReal x1590=(r21*sj5);
IkReal x1591=(cj5*r20);
IkReal x1592=(r01*sj5);
IkReal x1593=((1.0)*x1585);
IkReal x1594=((1.0)*x1584);
evalcond[0]=(((x1584*x1590))+(((-1.0)*x1591*x1594))+(((-1.0)*r22*x1593)));
evalcond[1]=((((-1.0)*r22*x1594))+(((-1.0)*x1590*x1593))+((x1585*x1591)));
evalcond[2]=(sj0+((x1584*x1592))+(((-1.0)*r02*x1593))+(((-1.0)*x1587*x1594)));
evalcond[3]=((((-1.0)*x1586))+((x1584*x1588))+(((-1.0)*x1589*x1594))+(((-1.0)*r12*x1593)));
evalcond[4]=((((-1.0)*x1586))+(((-1.0)*x1592*x1593))+(((-1.0)*r02*x1594))+((x1585*x1587)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1588*x1593))+((x1585*x1589))+(((-1.0)*r12*x1594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((-0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.67478761815078)*px))+(((2.14018460980658)*py))), ((((-0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1595=IKsin(j0);
IkReal x1596=IKcos(j0);
evalcond[0]=((((0.425)*x1596))+(((-1.0)*px))+(((0.134)*x1595)));
evalcond[1]=((((0.425)*x1595))+(((-0.134)*x1596))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1597=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1597;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1597);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1598=cj5*cj5;
IkReal x1599=((1.0)*r21);
IkReal x1600=(cj5*sj5);
IkReal x1601=((1.0)*r20);
IkReal x1602=(((r01*r21))+(((-1.0)*r01*x1600*x1601))+((r00*r20*x1598))+((r02*r22))+(((-1.0)*r00*x1599*x1600))+(((-1.0)*r01*x1598*x1599)));
j4eval[0]=x1602;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1601))))));
j4eval[2]=IKsign(x1602);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1603=cj5*cj5;
IkReal x1604=(r21*sj5);
IkReal x1605=(r11*r21);
IkReal x1606=((1.0)*cj5*r20);
IkReal x1607=((((-1.0)*cj5*r10*x1604))+((r10*r20*x1603))+x1605+(((-1.0)*r11*sj5*x1606))+((r12*r22))+(((-1.0)*x1603*x1605)));
j4eval[0]=x1607;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1606))+((sj0*x1604))))));
j4eval[2]=IKsign(x1607);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1608=cj5*cj5;
IkReal x1609=(r21*sj5);
IkReal x1610=(r11*r21);
IkReal x1611=((1.0)*cj5*r20);
CheckValue<IkReal> x1612=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1608*x1610))+(((-1.0)*cj5*r10*x1609))+((r10*r20*x1608))+x1610+((r12*r22))+(((-1.0)*r11*sj5*x1611)))),-1);
if(!x1612.valid){
continue;
}
CheckValue<IkReal> x1613 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1611))+((sj0*x1609)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1612.value)))+(x1613.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1614=IKsin(j4);
IkReal x1615=IKcos(j4);
IkReal x1616=(r11*sj5);
IkReal x1617=(cj5*r00);
IkReal x1618=(cj5*r10);
IkReal x1619=(r21*sj5);
IkReal x1620=(cj5*r20);
IkReal x1621=(r01*sj5);
IkReal x1622=((1.0)*x1615);
IkReal x1623=((1.0)*x1614);
evalcond[0]=(((x1614*x1619))+(((-1.0)*r22*x1622))+(((-1.0)*x1620*x1623)));
evalcond[1]=((((-1.0)*x1619*x1622))+((x1615*x1620))+(((-1.0)*r22*x1623)));
evalcond[2]=(sj0+(((-1.0)*x1617*x1623))+((x1614*x1621))+(((-1.0)*r02*x1622)));
evalcond[3]=(cj0+(((-1.0)*r02*x1623))+((x1615*x1617))+(((-1.0)*x1621*x1622)));
evalcond[4]=((((-1.0)*r12*x1623))+sj0+(((-1.0)*x1616*x1622))+((x1615*x1618)));
evalcond[5]=((((-1.0)*r12*x1622))+((x1614*x1616))+(((-1.0)*cj0))+(((-1.0)*x1618*x1623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1624=cj5*cj5;
IkReal x1625=((1.0)*r21);
IkReal x1626=(cj5*sj5);
IkReal x1627=((1.0)*r20);
CheckValue<IkReal> x1628 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x1627))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1628.valid){
continue;
}
CheckValue<IkReal> x1629=IKPowWithIntegerCheck(IKsign((((r00*r20*x1624))+((r01*r21))+((r02*r22))+(((-1.0)*r01*x1624*x1625))+(((-1.0)*r00*x1625*x1626))+(((-1.0)*r01*x1626*x1627)))),-1);
if(!x1629.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1628.value)+(((1.5707963267949)*(x1629.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1630=IKsin(j4);
IkReal x1631=IKcos(j4);
IkReal x1632=(r11*sj5);
IkReal x1633=(cj5*r00);
IkReal x1634=(cj5*r10);
IkReal x1635=(r21*sj5);
IkReal x1636=(cj5*r20);
IkReal x1637=(r01*sj5);
IkReal x1638=((1.0)*x1631);
IkReal x1639=((1.0)*x1630);
evalcond[0]=((((-1.0)*r22*x1638))+(((-1.0)*x1636*x1639))+((x1630*x1635)));
evalcond[1]=((((-1.0)*x1635*x1638))+(((-1.0)*r22*x1639))+((x1631*x1636)));
evalcond[2]=(sj0+(((-1.0)*x1633*x1639))+((x1630*x1637))+(((-1.0)*r02*x1638)));
evalcond[3]=(cj0+(((-1.0)*x1637*x1638))+((x1631*x1633))+(((-1.0)*r02*x1639)));
evalcond[4]=(sj0+(((-1.0)*r12*x1639))+(((-1.0)*x1632*x1638))+((x1631*x1634)));
evalcond[5]=((((-1.0)*x1634*x1639))+(((-1.0)*r12*x1638))+((x1630*x1632))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1640=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1640.valid){
continue;
}
CheckValue<IkReal> x1641 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1640.value)))+(x1641.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1642=IKsin(j4);
IkReal x1643=IKcos(j4);
IkReal x1644=(r11*sj5);
IkReal x1645=(cj5*r00);
IkReal x1646=(cj5*r10);
IkReal x1647=(r21*sj5);
IkReal x1648=(cj5*r20);
IkReal x1649=(r01*sj5);
IkReal x1650=((1.0)*x1643);
IkReal x1651=((1.0)*x1642);
evalcond[0]=((((-1.0)*r22*x1650))+((x1642*x1647))+(((-1.0)*x1648*x1651)));
evalcond[1]=((((-1.0)*r22*x1651))+(((-1.0)*x1647*x1650))+((x1643*x1648)));
evalcond[2]=(sj0+(((-1.0)*x1645*x1651))+((x1642*x1649))+(((-1.0)*r02*x1650)));
evalcond[3]=(cj0+(((-1.0)*x1649*x1650))+(((-1.0)*r02*x1651))+((x1643*x1645)));
evalcond[4]=((((-1.0)*x1644*x1650))+sj0+(((-1.0)*r12*x1651))+((x1643*x1646)));
evalcond[5]=((((-1.0)*x1646*x1651))+(((-1.0)*r12*x1650))+((x1642*x1644))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((7.46268656716418)*px))+IKsqr(((-7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((7.46268656716418)*px), ((-7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.134)*(IKsin(j0)))));
evalcond[1]=((((-0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1652=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1652;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1652);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1653=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1653;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1653);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1654=cj5*cj5;
IkReal x1655=((1.0)*r21);
IkReal x1656=(cj5*r20);
IkReal x1657=((((-1.0)*cj5*r00*sj5*x1655))+(((-1.0)*r01*x1654*x1655))+((r01*r21))+((r00*r20*x1654))+(((-1.0)*r01*sj5*x1656))+((r02*r22)));
j4eval[0]=x1657;
j4eval[1]=IKsign(x1657);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1656))+(((-1.0)*sj0*sj5*x1655))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1658=cj5*cj5;
IkReal x1659=((1.0)*r21);
IkReal x1660=(cj5*r20);
CheckValue<IkReal> x1661 = IKatan2WithCheck(IkReal((((sj0*x1660))+(((-1.0)*sj0*sj5*x1659)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1661.valid){
continue;
}
CheckValue<IkReal> x1662=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r00*sj5*x1659))+((r01*r21))+(((-1.0)*r01*sj5*x1660))+((r00*r20*x1658))+(((-1.0)*r01*x1658*x1659))+((r02*r22)))),-1);
if(!x1662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1661.value)+(((1.5707963267949)*(x1662.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1663=IKsin(j4);
IkReal x1664=IKcos(j4);
IkReal x1665=((1.0)*cj0);
IkReal x1666=(cj5*r00);
IkReal x1667=(r11*sj5);
IkReal x1668=(cj5*r10);
IkReal x1669=(r21*sj5);
IkReal x1670=(cj5*r20);
IkReal x1671=(r01*sj5);
IkReal x1672=((1.0)*x1664);
IkReal x1673=((1.0)*x1663);
evalcond[0]=((((-1.0)*x1670*x1673))+((x1663*x1669))+(((-1.0)*r22*x1672)));
evalcond[1]=((((-1.0)*x1669*x1672))+(((-1.0)*r22*x1673))+((x1664*x1670)));
evalcond[2]=(sj0+(((-1.0)*r02*x1672))+(((-1.0)*x1666*x1673))+((x1663*x1671)));
evalcond[3]=((((-1.0)*x1668*x1673))+(((-1.0)*r12*x1672))+(((-1.0)*x1665))+((x1663*x1667)));
evalcond[4]=((((-1.0)*r02*x1673))+(((-1.0)*x1671*x1672))+(((-1.0)*x1665))+((x1664*x1666)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1667*x1672))+(((-1.0)*r12*x1673))+((x1664*x1668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1674=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1674.valid){
continue;
}
CheckValue<IkReal> x1675 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1674.value)))+(x1675.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1676=IKsin(j4);
IkReal x1677=IKcos(j4);
IkReal x1678=((1.0)*cj0);
IkReal x1679=(cj5*r00);
IkReal x1680=(r11*sj5);
IkReal x1681=(cj5*r10);
IkReal x1682=(r21*sj5);
IkReal x1683=(cj5*r20);
IkReal x1684=(r01*sj5);
IkReal x1685=((1.0)*x1677);
IkReal x1686=((1.0)*x1676);
evalcond[0]=((((-1.0)*x1683*x1686))+((x1676*x1682))+(((-1.0)*r22*x1685)));
evalcond[1]=(((x1677*x1683))+(((-1.0)*x1682*x1685))+(((-1.0)*r22*x1686)));
evalcond[2]=(sj0+((x1676*x1684))+(((-1.0)*x1679*x1686))+(((-1.0)*r02*x1685)));
evalcond[3]=((((-1.0)*r12*x1685))+(((-1.0)*x1681*x1686))+((x1676*x1680))+(((-1.0)*x1678)));
evalcond[4]=((((-1.0)*r02*x1686))+(((-1.0)*x1678))+((x1677*x1679))+(((-1.0)*x1684*x1685)));
evalcond[5]=((((-1.0)*r12*x1686))+(((-1.0)*sj0))+((x1677*x1681))+(((-1.0)*x1680*x1685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1687=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1687.valid){
continue;
}
CheckValue<IkReal> x1688 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1687.value)))+(x1688.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1689=IKsin(j4);
IkReal x1690=IKcos(j4);
IkReal x1691=((1.0)*cj0);
IkReal x1692=(cj5*r00);
IkReal x1693=(r11*sj5);
IkReal x1694=(cj5*r10);
IkReal x1695=(r21*sj5);
IkReal x1696=(cj5*r20);
IkReal x1697=(r01*sj5);
IkReal x1698=((1.0)*x1690);
IkReal x1699=((1.0)*x1689);
evalcond[0]=((((-1.0)*x1696*x1699))+((x1689*x1695))+(((-1.0)*r22*x1698)));
evalcond[1]=(((x1690*x1696))+(((-1.0)*r22*x1699))+(((-1.0)*x1695*x1698)));
evalcond[2]=((((-1.0)*x1692*x1699))+sj0+((x1689*x1697))+(((-1.0)*r02*x1698)));
evalcond[3]=((((-1.0)*x1691))+(((-1.0)*r12*x1698))+(((-1.0)*x1694*x1699))+((x1689*x1693)));
evalcond[4]=(((x1690*x1692))+(((-1.0)*x1691))+(((-1.0)*x1697*x1698))+(((-1.0)*r02*x1699)));
evalcond[5]=((((-1.0)*sj0))+((x1690*x1694))+(((-1.0)*r12*x1699))+(((-1.0)*x1693*x1698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((7.46268656716418)*px))+IKsqr(((-7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((7.46268656716418)*px), ((-7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.134)*(IKsin(j0)))));
evalcond[1]=((((-0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1700=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1700;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1700);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1701=cj5*cj5;
IkReal x1702=((1.0)*r21);
IkReal x1703=(cj5*sj5);
IkReal x1704=((1.0)*r20);
IkReal x1705=((((-1.0)*r01*x1703*x1704))+(((-1.0)*r01*x1701*x1702))+((r01*r21))+((r00*r20*x1701))+(((-1.0)*r00*x1702*x1703))+((r02*r22)));
j4eval[0]=x1705;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1704))))));
j4eval[2]=IKsign(x1705);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1706=cj5*cj5;
IkReal x1707=(r21*sj5);
IkReal x1708=(r11*r21);
IkReal x1709=((1.0)*cj5*r20);
IkReal x1710=(x1708+((r12*r22))+(((-1.0)*r11*sj5*x1709))+((r10*r20*x1706))+(((-1.0)*x1706*x1708))+(((-1.0)*cj5*r10*x1707)));
j4eval[0]=x1710;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1709))+((sj0*x1707))))));
j4eval[2]=IKsign(x1710);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1711=cj5*cj5;
IkReal x1712=(r21*sj5);
IkReal x1713=(r11*r21);
IkReal x1714=((1.0)*cj5*r20);
CheckValue<IkReal> x1715=IKPowWithIntegerCheck(IKsign((x1713+(((-1.0)*r11*sj5*x1714))+((r10*r20*x1711))+((r12*r22))+(((-1.0)*x1711*x1713))+(((-1.0)*cj5*r10*x1712)))),-1);
if(!x1715.valid){
continue;
}
CheckValue<IkReal> x1716 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1714))+((sj0*x1712)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1715.value)))+(x1716.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1717=IKsin(j4);
IkReal x1718=IKcos(j4);
IkReal x1719=(r11*sj5);
IkReal x1720=(cj5*r00);
IkReal x1721=(cj5*r10);
IkReal x1722=(r21*sj5);
IkReal x1723=(cj5*r20);
IkReal x1724=(r01*sj5);
IkReal x1725=((1.0)*x1718);
IkReal x1726=((1.0)*x1717);
evalcond[0]=((((-1.0)*r22*x1725))+((x1717*x1722))+(((-1.0)*x1723*x1726)));
evalcond[1]=((((-1.0)*r22*x1726))+(((-1.0)*x1722*x1725))+((x1718*x1723)));
evalcond[2]=(sj0+(((-1.0)*x1720*x1726))+((x1717*x1724))+(((-1.0)*r02*x1725)));
evalcond[3]=(cj0+((x1718*x1720))+(((-1.0)*x1724*x1725))+(((-1.0)*r02*x1726)));
evalcond[4]=(sj0+(((-1.0)*r12*x1726))+((x1718*x1721))+(((-1.0)*x1719*x1725)));
evalcond[5]=((((-1.0)*r12*x1725))+(((-1.0)*cj0))+(((-1.0)*x1721*x1726))+((x1717*x1719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1727=cj5*cj5;
IkReal x1728=((1.0)*r21);
IkReal x1729=(cj5*sj5);
IkReal x1730=((1.0)*r20);
CheckValue<IkReal> x1731 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1730)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1731.valid){
continue;
}
CheckValue<IkReal> x1732=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1727*x1728))+(((-1.0)*r01*x1729*x1730))+(((-1.0)*r00*x1728*x1729))+((r01*r21))+((r02*r22))+((r00*r20*x1727)))),-1);
if(!x1732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1731.value)+(((1.5707963267949)*(x1732.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1733=IKsin(j4);
IkReal x1734=IKcos(j4);
IkReal x1735=(r11*sj5);
IkReal x1736=(cj5*r00);
IkReal x1737=(cj5*r10);
IkReal x1738=(r21*sj5);
IkReal x1739=(cj5*r20);
IkReal x1740=(r01*sj5);
IkReal x1741=((1.0)*x1734);
IkReal x1742=((1.0)*x1733);
evalcond[0]=((((-1.0)*r22*x1741))+(((-1.0)*x1739*x1742))+((x1733*x1738)));
evalcond[1]=((((-1.0)*x1738*x1741))+(((-1.0)*r22*x1742))+((x1734*x1739)));
evalcond[2]=(sj0+(((-1.0)*x1736*x1742))+((x1733*x1740))+(((-1.0)*r02*x1741)));
evalcond[3]=(cj0+(((-1.0)*x1740*x1741))+((x1734*x1736))+(((-1.0)*r02*x1742)));
evalcond[4]=((((-1.0)*r12*x1742))+sj0+(((-1.0)*x1735*x1741))+((x1734*x1737)));
evalcond[5]=((((-1.0)*r12*x1741))+(((-1.0)*x1737*x1742))+((x1733*x1735))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1743=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1743.valid){
continue;
}
CheckValue<IkReal> x1744 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1743.value)))+(x1744.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1745=IKsin(j4);
IkReal x1746=IKcos(j4);
IkReal x1747=(r11*sj5);
IkReal x1748=(cj5*r00);
IkReal x1749=(cj5*r10);
IkReal x1750=(r21*sj5);
IkReal x1751=(cj5*r20);
IkReal x1752=(r01*sj5);
IkReal x1753=((1.0)*x1746);
IkReal x1754=((1.0)*x1745);
evalcond[0]=((((-1.0)*r22*x1753))+((x1745*x1750))+(((-1.0)*x1751*x1754)));
evalcond[1]=((((-1.0)*r22*x1754))+((x1746*x1751))+(((-1.0)*x1750*x1753)));
evalcond[2]=((((-1.0)*x1748*x1754))+sj0+((x1745*x1752))+(((-1.0)*r02*x1753)));
evalcond[3]=(cj0+((x1746*x1748))+(((-1.0)*x1752*x1753))+(((-1.0)*r02*x1754)));
evalcond[4]=(sj0+(((-1.0)*r12*x1754))+((x1746*x1749))+(((-1.0)*x1747*x1753)));
evalcond[5]=((((-1.0)*r12*x1753))+((x1745*x1747))+(((-1.0)*x1749*x1754))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1755=(sj1*sj2);
IkReal x1756=(r00*sj5);
IkReal x1757=(cj1*cj2);
IkReal x1758=(cj5*r01);
IkReal x1759=((212.5)*cj1);
IkReal x1760=((500.0)*px);
CheckValue<IkReal> x1761=IKPowWithIntegerCheck(((((-67.0)*x1755))+(((67.0)*x1757))),-1);
if(!x1761.valid){
continue;
}
CheckValue<IkReal> x1762=IKPowWithIntegerCheck((x1757+(((-1.0)*x1755))),-1);
if(!x1762.valid){
continue;
}
if( IKabs(((x1761.value)*(((((146.0)*x1755*x1756))+(((146.0)*x1755*x1758))+(((-1.0)*x1756*x1759))+(((-1.0)*x1758*x1759))+(((-1.0)*x1755*x1760))+((x1757*x1760))+(((-146.0)*x1756*x1757))+(((-146.0)*x1757*x1758)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1762.value)*(((((-1.0)*x1758))+(((-1.0)*x1756)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1761.value)*(((((146.0)*x1755*x1756))+(((146.0)*x1755*x1758))+(((-1.0)*x1756*x1759))+(((-1.0)*x1758*x1759))+(((-1.0)*x1755*x1760))+((x1757*x1760))+(((-146.0)*x1756*x1757))+(((-146.0)*x1757*x1758))))))+IKsqr(((x1762.value)*(((((-1.0)*x1758))+(((-1.0)*x1756))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1761.value)*(((((146.0)*x1755*x1756))+(((146.0)*x1755*x1758))+(((-1.0)*x1756*x1759))+(((-1.0)*x1758*x1759))+(((-1.0)*x1755*x1760))+((x1757*x1760))+(((-146.0)*x1756*x1757))+(((-146.0)*x1757*x1758))))), ((x1762.value)*(((((-1.0)*x1758))+(((-1.0)*x1756))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1763=IKcos(j0);
IkReal x1764=IKsin(j0);
IkReal x1765=((0.1)*sj5);
IkReal x1766=(cj5*r11);
IkReal x1767=(cj5*r01);
IkReal x1768=(cj1*cj2);
IkReal x1769=((0.425)*cj1);
IkReal x1770=(sj1*sj2);
IkReal x1771=((0.392)*x1763);
IkReal x1772=(x1764*x1770);
evalcond[0]=(((r00*sj5))+(((-1.0)*x1763*x1770))+x1767+((x1763*x1768)));
evalcond[1]=((((-1.0)*x1772))+((r10*sj5))+x1766+((x1764*x1768)));
evalcond[2]=((((-1.0)*r00*x1765))+((x1770*x1771))+(((-1.0)*x1763*x1769))+(((-0.1)*x1767))+(((0.134)*x1764))+(((-1.0)*px))+(((-1.0)*x1768*x1771)));
evalcond[3]=((((-0.392)*x1764*x1768))+(((-0.1)*x1766))+(((-1.0)*py))+(((0.392)*x1772))+(((-1.0)*x1764*x1769))+(((-0.134)*x1763))+(((-1.0)*r10*x1765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1773=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1773;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1773);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1774=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1774;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1774);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1775=((1.0)*cj5);
IkReal x1776=((((-1.0)*r21*x1775))+(((-1.0)*r20*sj5)));
j4eval[0]=x1776;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1775))+(((-1.0)*r10*sj0*x1775))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x1776);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1777=((-1.0)*r20);
IkReal x1779 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1779)==0){
continue;
}
IkReal x1778=pow(x1779,-0.5);
CheckValue<IkReal> x1780 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1777),IKFAST_ATAN2_MAGTHRESH);
if(!x1780.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1780.value));
IkReal gconst79=(r21*x1778);
IkReal gconst80=(x1777*x1778);
CheckValue<IkReal> x1781 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1781.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1781.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1782=((-1.0)*r20);
IkReal x1783=x1778;
CheckValue<IkReal> x1785 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1782),IKFAST_ATAN2_MAGTHRESH);
if(!x1785.valid){
continue;
}
IkReal x1784=((-1.0)*(x1785.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1784;
IkReal gconst78=x1784;
IkReal gconst79=(r21*x1783);
IkReal gconst80=(x1782*x1783);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1786=((-1.0)*r20);
IkReal x1787=x1778;
CheckValue<IkReal> x1789 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1786),IKFAST_ATAN2_MAGTHRESH);
if(!x1789.valid){
continue;
}
IkReal x1788=((-1.0)*(x1789.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1788;
IkReal gconst78=x1788;
IkReal gconst79=(r21*x1787);
IkReal gconst80=(x1786*x1787);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1790=((-1.0)*r20);
IkReal x1791=x1778;
CheckValue<IkReal> x1793 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1790),IKFAST_ATAN2_MAGTHRESH);
if(!x1793.valid){
continue;
}
IkReal x1792=((-1.0)*(x1793.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1792;
IkReal gconst78=x1792;
IkReal gconst79=(r21*x1791);
IkReal gconst80=(x1790*x1791);
IkReal x1794=r22*r22;
CheckValue<IkReal> x1797=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1794))),-1);
if(!x1797.valid){
continue;
}
IkReal x1795=x1797.value;
IkReal x1796=(x1794+((x1795*(r20*r20*r20*r20)))+((x1795*(r21*r21*r21*r21)))+(((2.0)*x1795*(r20*r20)*(r21*r21))));
j4eval[0]=x1796;
j4eval[1]=IKsign(x1796);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1798=(sj1*sj2);
IkReal x1799=(gconst80*r20);
IkReal x1800=(gconst79*r21);
IkReal x1801=(cj1*cj2);
CheckValue<IkReal> x1802=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x1800*x1800)+(((-2.0)*x1799*x1800))+(x1799*x1799))),-1);
if(!x1802.valid){
continue;
}
CheckValue<IkReal> x1803 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1801))+((r22*x1798)))),IkReal(((((-1.0)*x1800*x1801))+((x1799*x1801))+((x1798*x1800))+(((-1.0)*x1798*x1799)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1802.value)))+(x1803.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1804=IKsin(j4);
IkReal x1805=IKcos(j4);
IkReal x1806=(gconst79*r01);
IkReal x1807=(cj2*sj1);
IkReal x1808=(gconst79*r21);
IkReal x1809=(gconst79*r11);
IkReal x1810=(cj1*sj2);
IkReal x1811=((1.0)*x1805);
IkReal x1812=(gconst80*x1805);
IkReal x1813=((1.0)*x1804);
IkReal x1814=(gconst80*x1813);
evalcond[0]=(((x1804*x1808))+(((-1.0)*r20*x1814))+(((-1.0)*r22*x1811)));
evalcond[1]=(sj0+(((-1.0)*r02*x1811))+(((-1.0)*r00*x1814))+((x1804*x1806)));
evalcond[2]=((((-1.0)*r10*x1814))+(((-1.0)*r12*x1811))+((x1804*x1809))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x1808*x1811))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x1812))+(((-1.0)*r22*x1813)));
evalcond[4]=(((cj0*x1810))+((cj0*x1807))+(((-1.0)*r02*x1813))+(((-1.0)*x1806*x1811))+((r00*x1812)));
evalcond[5]=(((sj0*x1807))+(((-1.0)*x1809*x1811))+(((-1.0)*r12*x1813))+((sj0*x1810))+((r10*x1812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1815=IKPowWithIntegerCheck(IKsign((((gconst79*r00))+((gconst80*r01)))),-1);
if(!x1815.valid){
continue;
}
CheckValue<IkReal> x1816 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*gconst80*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1815.value)))+(x1816.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1817=IKsin(j4);
IkReal x1818=IKcos(j4);
IkReal x1819=(gconst79*r01);
IkReal x1820=(cj2*sj1);
IkReal x1821=(gconst79*r21);
IkReal x1822=(gconst79*r11);
IkReal x1823=(cj1*sj2);
IkReal x1824=((1.0)*x1818);
IkReal x1825=(gconst80*x1818);
IkReal x1826=((1.0)*x1817);
IkReal x1827=(gconst80*x1826);
evalcond[0]=((((-1.0)*r22*x1824))+((x1817*x1821))+(((-1.0)*r20*x1827)));
evalcond[1]=(sj0+((x1817*x1819))+(((-1.0)*r00*x1827))+(((-1.0)*r02*x1824)));
evalcond[2]=((((-1.0)*r12*x1824))+((x1817*x1822))+(((-1.0)*cj0))+(((-1.0)*r10*x1827)));
evalcond[3]=((((-1.0)*x1821*x1824))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x1826))+((r20*x1825)));
evalcond[4]=(((cj0*x1823))+((cj0*x1820))+((r00*x1825))+(((-1.0)*x1819*x1824))+(((-1.0)*r02*x1826)));
evalcond[5]=(((r10*x1825))+(((-1.0)*r12*x1826))+(((-1.0)*x1822*x1824))+((sj0*x1823))+((sj0*x1820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1828=IKPowWithIntegerCheck(IKsign((((gconst80*r11))+((gconst79*r10)))),-1);
if(!x1828.valid){
continue;
}
CheckValue<IkReal> x1829 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*gconst80*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1829.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1828.value)))+(x1829.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1830=IKsin(j4);
IkReal x1831=IKcos(j4);
IkReal x1832=(gconst79*r01);
IkReal x1833=(cj2*sj1);
IkReal x1834=(gconst79*r21);
IkReal x1835=(gconst79*r11);
IkReal x1836=(cj1*sj2);
IkReal x1837=((1.0)*x1831);
IkReal x1838=(gconst80*x1831);
IkReal x1839=((1.0)*x1830);
IkReal x1840=(gconst80*x1839);
evalcond[0]=(((x1830*x1834))+(((-1.0)*r20*x1840))+(((-1.0)*r22*x1837)));
evalcond[1]=(sj0+(((-1.0)*r00*x1840))+((x1830*x1832))+(((-1.0)*r02*x1837)));
evalcond[2]=((((-1.0)*r10*x1840))+((x1830*x1835))+(((-1.0)*r12*x1837))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x1834*x1837))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x1838))+(((-1.0)*r22*x1839)));
evalcond[4]=((((-1.0)*x1832*x1837))+((cj0*x1833))+((cj0*x1836))+(((-1.0)*r02*x1839))+((r00*x1838)));
evalcond[5]=(((r10*x1838))+((sj0*x1833))+((sj0*x1836))+(((-1.0)*x1835*x1837))+(((-1.0)*r12*x1839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1841=((-1.0)*r21);
IkReal x1843 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1843)==0){
continue;
}
IkReal x1842=pow(x1843,-0.5);
CheckValue<IkReal> x1844 = IKatan2WithCheck(IkReal(x1841),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1844.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1844.value))));
IkReal gconst82=(x1841*x1842);
IkReal gconst83=((1.0)*r20*x1842);
CheckValue<IkReal> x1845 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1845.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1845.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1846=((-1.0)*r21);
CheckValue<IkReal> x1849 = IKatan2WithCheck(IkReal(x1846),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1849.valid){
continue;
}
IkReal x1847=((1.0)*(x1849.value));
IkReal x1848=x1842;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1847)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1847)));
IkReal gconst82=(x1846*x1848);
IkReal gconst83=((1.0)*r20*x1848);
IkReal x1850=r22*r22;
IkReal x1851=((1.0)*x1850);
CheckValue<IkReal> x1855=IKPowWithIntegerCheck(((-1.0)+x1850),-1);
if(!x1855.valid){
continue;
}
IkReal x1852=x1855.value;
if((((1.0)+(((-1.0)*x1851)))) < -0.00001)
continue;
IkReal x1853=IKsqrt(((1.0)+(((-1.0)*x1851))));
IkReal x1854=(sj0*x1852*x1853);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x1851*x1854))+x1854))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1856=((-1.0)*r21);
CheckValue<IkReal> x1859 = IKatan2WithCheck(IkReal(x1856),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1859.valid){
continue;
}
IkReal x1857=((1.0)*(x1859.value));
IkReal x1858=x1842;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1857)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1857)));
IkReal gconst82=(x1856*x1858);
IkReal gconst83=((1.0)*r20*x1858);
IkReal x1860=r22*r22;
IkReal x1861=((1.0)*x1860);
CheckValue<IkReal> x1865=IKPowWithIntegerCheck(((-1.0)+x1860),-1);
if(!x1865.valid){
continue;
}
IkReal x1862=x1865.value;
if((((1.0)+(((-1.0)*x1861)))) < -0.00001)
continue;
IkReal x1863=IKsqrt(((1.0)+(((-1.0)*x1861))));
IkReal x1864=(cj0*x1862*x1863);
j4eval[0]=((IKabs((x1864+(((-1.0)*x1861*x1864)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1866=((-1.0)*r21);
CheckValue<IkReal> x1869 = IKatan2WithCheck(IkReal(x1866),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1869.valid){
continue;
}
IkReal x1867=((1.0)*(x1869.value));
IkReal x1868=x1842;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1867)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1867)));
IkReal gconst82=(x1866*x1868);
IkReal gconst83=((1.0)*r20*x1868);
IkReal x1870=r22*r22;
IkReal x1871=(cj0*r02);
IkReal x1872=(r12*sj0);
CheckValue<IkReal> x1876=IKPowWithIntegerCheck(((-1.0)+x1870),-1);
if(!x1876.valid){
continue;
}
IkReal x1873=x1876.value;
if((((1.0)+(((-1.0)*x1870)))) < -0.00001)
continue;
IkReal x1874=IKsqrt(((1.0)+(((-1.0)*x1870))));
IkReal x1875=((1.0)*r22*x1873*x1874);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x1872*x1875))+(((-1.0)*x1871*x1875)))))+(IKabs((x1872+x1871))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1877=((1.0)*gconst83);
CheckValue<IkReal> x1878 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x1877))+(((-1.0)*r10*sj0*x1877))+((gconst82*r11*sj0))+((cj0*gconst82*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1878.valid){
continue;
}
CheckValue<IkReal> x1879=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*r21*x1877)))),-1);
if(!x1879.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1878.value)+(((1.5707963267949)*(x1879.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1880=IKsin(j4);
IkReal x1881=IKcos(j4);
IkReal x1882=(cj2*sj1);
IkReal x1883=(gconst82*r11);
IkReal x1884=(cj1*sj2);
IkReal x1885=((1.0)*x1881);
IkReal x1886=(gconst83*x1881);
IkReal x1887=(gconst82*x1880);
IkReal x1888=((1.0)*x1880);
evalcond[0]=(((r21*x1887))+(((-1.0)*r22*x1885))+(((-1.0)*gconst83*r20*x1888)));
evalcond[1]=((((-1.0)*gconst83*r00*x1888))+sj0+(((-1.0)*r02*x1885))+((r01*x1887)));
evalcond[2]=(((x1880*x1883))+(((-1.0)*r12*x1885))+(((-1.0)*gconst83*r10*x1888))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x1886))+(((-1.0)*r22*x1888))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1885)));
evalcond[4]=((((-1.0)*r02*x1888))+((r00*x1886))+(((-1.0)*gconst82*r01*x1885))+((cj0*x1884))+((cj0*x1882)));
evalcond[5]=((((-1.0)*x1883*x1885))+(((-1.0)*r12*x1888))+((r10*x1886))+((sj0*x1884))+((sj0*x1882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1889 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*gconst83*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1889.valid){
continue;
}
CheckValue<IkReal> x1890=IKPowWithIntegerCheck(IKsign((((gconst83*r01))+((gconst82*r00)))),-1);
if(!x1890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1889.value)+(((1.5707963267949)*(x1890.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1891=IKsin(j4);
IkReal x1892=IKcos(j4);
IkReal x1893=(cj2*sj1);
IkReal x1894=(gconst82*r11);
IkReal x1895=(cj1*sj2);
IkReal x1896=((1.0)*x1892);
IkReal x1897=(gconst83*x1892);
IkReal x1898=(gconst82*x1891);
IkReal x1899=((1.0)*x1891);
evalcond[0]=((((-1.0)*r22*x1896))+(((-1.0)*gconst83*r20*x1899))+((r21*x1898)));
evalcond[1]=((((-1.0)*r02*x1896))+sj0+((r01*x1898))+(((-1.0)*gconst83*r00*x1899)));
evalcond[2]=((((-1.0)*r12*x1896))+((x1891*x1894))+(((-1.0)*gconst83*r10*x1899))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst82*r21*x1896))+((r20*x1897))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x1899)));
evalcond[4]=((((-1.0)*r02*x1899))+((r00*x1897))+(((-1.0)*gconst82*r01*x1896))+((cj0*x1895))+((cj0*x1893)));
evalcond[5]=(((r10*x1897))+(((-1.0)*r12*x1899))+(((-1.0)*x1894*x1896))+((sj0*x1893))+((sj0*x1895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1900 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*gconst83*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1900.valid){
continue;
}
CheckValue<IkReal> x1901=IKPowWithIntegerCheck(IKsign((((gconst83*r11))+((gconst82*r10)))),-1);
if(!x1901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1900.value)+(((1.5707963267949)*(x1901.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1902=IKsin(j4);
IkReal x1903=IKcos(j4);
IkReal x1904=(cj2*sj1);
IkReal x1905=(gconst82*r11);
IkReal x1906=(cj1*sj2);
IkReal x1907=((1.0)*x1903);
IkReal x1908=(gconst83*x1903);
IkReal x1909=(gconst82*x1902);
IkReal x1910=((1.0)*x1902);
evalcond[0]=((((-1.0)*r22*x1907))+(((-1.0)*gconst83*r20*x1910))+((r21*x1909)));
evalcond[1]=(sj0+((r01*x1909))+(((-1.0)*gconst83*r00*x1910))+(((-1.0)*r02*x1907)));
evalcond[2]=((((-1.0)*r12*x1907))+(((-1.0)*gconst83*r10*x1910))+((x1902*x1905))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1910))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1907))+((r20*x1908)));
evalcond[4]=((((-1.0)*r02*x1910))+((r00*x1908))+((cj0*x1906))+((cj0*x1904))+(((-1.0)*gconst82*r01*x1907)));
evalcond[5]=((((-1.0)*r12*x1910))+(((-1.0)*x1905*x1907))+((sj0*x1904))+((sj0*x1906))+((r10*x1908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1912 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1912)==0){
continue;
}
IkReal x1911=pow(x1912,-0.5);
CheckValue<IkReal> x1913 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1913.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1913.value));
IkReal gconst85=((-1.0)*r01*x1911);
IkReal gconst86=(r00*x1911);
CheckValue<IkReal> x1914 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1914.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1914.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1917 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1917.valid){
continue;
}
IkReal x1915=((-1.0)*(x1917.value));
IkReal x1916=x1911;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1915;
IkReal gconst84=x1915;
IkReal gconst85=((-1.0)*r01*x1916);
IkReal gconst86=(r00*x1916);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1918=((1.0)*gconst86);
CheckValue<IkReal> x1919 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x1918))+(((-1.0)*r10*sj0*x1918))+((gconst85*r11*sj0))+((cj0*gconst85*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1919.valid){
continue;
}
CheckValue<IkReal> x1920=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r20))+(((-1.0)*r21*x1918)))),-1);
if(!x1920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1919.value)+(((1.5707963267949)*(x1920.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1921=IKsin(j4);
IkReal x1922=IKcos(j4);
IkReal x1923=(gconst85*r21);
IkReal x1924=(cj2*sj1);
IkReal x1925=(gconst86*r00);
IkReal x1926=(gconst86*r10);
IkReal x1927=(gconst85*r11);
IkReal x1928=(gconst85*r01);
IkReal x1929=(gconst86*r20);
IkReal x1930=(cj1*sj2);
IkReal x1931=((1.0)*x1922);
IkReal x1932=((1.0)*x1921);
evalcond[0]=(((x1921*x1923))+(((-1.0)*r22*x1931))+(((-1.0)*x1929*x1932)));
evalcond[1]=(sj0+((x1921*x1928))+(((-1.0)*x1925*x1932))+(((-1.0)*r02*x1931)));
evalcond[2]=(((x1921*x1927))+(((-1.0)*r12*x1931))+(((-1.0)*x1926*x1932))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x1923*x1931))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x1932))+((x1922*x1929)));
evalcond[4]=((((-1.0)*x1928*x1931))+((cj0*x1924))+((cj0*x1930))+((x1922*x1925))+(((-1.0)*r02*x1932)));
evalcond[5]=((((-1.0)*r12*x1932))+((sj0*x1930))+(((-1.0)*x1927*x1931))+((sj0*x1924))+((x1922*x1926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1933=IKPowWithIntegerCheck(IKsign((((gconst86*r11))+((gconst85*r10)))),-1);
if(!x1933.valid){
continue;
}
CheckValue<IkReal> x1934 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst86*r20*sj0))+((gconst85*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1933.value)))+(x1934.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1935=IKsin(j4);
IkReal x1936=IKcos(j4);
IkReal x1937=(gconst85*r21);
IkReal x1938=(cj2*sj1);
IkReal x1939=(gconst86*r00);
IkReal x1940=(gconst86*r10);
IkReal x1941=(gconst85*r11);
IkReal x1942=(gconst85*r01);
IkReal x1943=(gconst86*r20);
IkReal x1944=(cj1*sj2);
IkReal x1945=((1.0)*x1936);
IkReal x1946=((1.0)*x1935);
evalcond[0]=((((-1.0)*r22*x1945))+(((-1.0)*x1943*x1946))+((x1935*x1937)));
evalcond[1]=(sj0+(((-1.0)*r02*x1945))+((x1935*x1942))+(((-1.0)*x1939*x1946)));
evalcond[2]=((((-1.0)*x1940*x1946))+((x1935*x1941))+(((-1.0)*r12*x1945))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x1937*x1945))+(((-1.0)*r22*x1946))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1936*x1943)));
evalcond[4]=(((cj0*x1944))+(((-1.0)*x1942*x1945))+(((-1.0)*r02*x1946))+((x1936*x1939))+((cj0*x1938)));
evalcond[5]=(((x1936*x1940))+((sj0*x1944))+((sj0*x1938))+(((-1.0)*r12*x1946))+(((-1.0)*x1941*x1945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1948 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1948)==0){
continue;
}
IkReal x1947=pow(x1948,-0.5);
CheckValue<IkReal> x1949 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1949.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x1949.value))));
IkReal gconst88=((1.0)*r01*x1947);
IkReal gconst89=((-1.0)*r00*x1947);
CheckValue<IkReal> x1950 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1950.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1950.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1953 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1953.valid){
continue;
}
IkReal x1951=((1.0)*(x1953.value));
IkReal x1952=x1947;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1951)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1951)));
IkReal gconst88=((1.0)*r01*x1952);
IkReal gconst89=((-1.0)*r00*x1952);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x1956 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1956.valid){
continue;
}
IkReal x1954=((1.0)*(x1956.value));
IkReal x1955=x1947;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1954)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1954)));
IkReal gconst88=((1.0)*r01*x1955);
IkReal gconst89=((-1.0)*r00*x1955);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1959 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1959.valid){
continue;
}
IkReal x1957=((1.0)*(x1959.value));
IkReal x1958=x1947;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1957)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1957)));
IkReal gconst88=((1.0)*r01*x1958);
IkReal gconst89=((-1.0)*r00*x1958);
IkReal x1960=r02*r02;
IkReal x1961=(r12*sj0);
IkReal x1962=x1947;
IkReal x1963=(cj0*x1962);
j4eval[0]=((IKabs((((r02*x1961*x1962))+(((-1.0)*x1963))+((x1960*x1963)))))+(IKabs((x1961+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1964=((1.0)*gconst89);
CheckValue<IkReal> x1965=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*r21*x1964)))),-1);
if(!x1965.valid){
continue;
}
CheckValue<IkReal> x1966 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst88*r01))+((gconst88*r11*sj0))+(((-1.0)*cj0*r00*x1964))+(((-1.0)*r10*sj0*x1964)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1965.value)))+(x1966.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1967=IKsin(j4);
IkReal x1968=IKcos(j4);
IkReal x1969=(cj2*sj1);
IkReal x1970=(cj1*sj2);
IkReal x1971=((1.0)*x1968);
IkReal x1972=(gconst89*x1968);
IkReal x1973=((1.0)*x1967);
IkReal x1974=(gconst88*x1967);
IkReal x1975=(gconst89*x1973);
evalcond[0]=((((-1.0)*r22*x1971))+((r21*x1974))+(((-1.0)*r20*x1975)));
evalcond[1]=(sj0+(((-1.0)*r02*x1971))+(((-1.0)*r00*x1975))+((r01*x1974)));
evalcond[2]=(((r11*x1974))+(((-1.0)*r10*x1975))+(((-1.0)*r12*x1971))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x1972))+(((-1.0)*r22*x1973))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst88*r21*x1971)));
evalcond[4]=(((cj0*x1969))+(((-1.0)*r02*x1973))+(((-1.0)*gconst88*r01*x1971))+((r00*x1972))+((cj0*x1970)));
evalcond[5]=(((r10*x1972))+((sj0*x1969))+((sj0*x1970))+(((-1.0)*gconst88*r11*x1971))+(((-1.0)*r12*x1973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1976=IKPowWithIntegerCheck(IKsign((((gconst88*r00))+((gconst89*r01)))),-1);
if(!x1976.valid){
continue;
}
CheckValue<IkReal> x1977 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst89*r20))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1976.value)))+(x1977.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1978=IKsin(j4);
IkReal x1979=IKcos(j4);
IkReal x1980=(cj2*sj1);
IkReal x1981=(cj1*sj2);
IkReal x1982=((1.0)*x1979);
IkReal x1983=(gconst89*x1979);
IkReal x1984=((1.0)*x1978);
IkReal x1985=(gconst88*x1978);
IkReal x1986=(gconst89*x1984);
evalcond[0]=(((r21*x1985))+(((-1.0)*r20*x1986))+(((-1.0)*r22*x1982)));
evalcond[1]=(sj0+(((-1.0)*r02*x1982))+((r01*x1985))+(((-1.0)*r00*x1986)));
evalcond[2]=(((r11*x1985))+(((-1.0)*r10*x1986))+(((-1.0)*r12*x1982))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst88*r21*x1982))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x1984))+((r20*x1983)));
evalcond[4]=((((-1.0)*r02*x1984))+(((-1.0)*gconst88*r01*x1982))+((r00*x1983))+((cj0*x1981))+((cj0*x1980)));
evalcond[5]=(((r10*x1983))+((sj0*x1981))+((sj0*x1980))+(((-1.0)*r12*x1984))+(((-1.0)*gconst88*r11*x1982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1987=IKPowWithIntegerCheck(IKsign((((gconst88*r10))+((gconst89*r11)))),-1);
if(!x1987.valid){
continue;
}
CheckValue<IkReal> x1988 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst89*r20*sj0))+((gconst88*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1987.value)))+(x1988.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1989=IKsin(j4);
IkReal x1990=IKcos(j4);
IkReal x1991=(cj2*sj1);
IkReal x1992=(cj1*sj2);
IkReal x1993=((1.0)*x1990);
IkReal x1994=(gconst89*x1990);
IkReal x1995=((1.0)*x1989);
IkReal x1996=(gconst88*x1989);
IkReal x1997=(gconst89*x1995);
evalcond[0]=(((r21*x1996))+(((-1.0)*r22*x1993))+(((-1.0)*r20*x1997)));
evalcond[1]=(sj0+(((-1.0)*r00*x1997))+(((-1.0)*r02*x1993))+((r01*x1996)));
evalcond[2]=((((-1.0)*r10*x1997))+((r11*x1996))+(((-1.0)*r12*x1993))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x1994))+(((-1.0)*gconst88*r21*x1993))+(((-1.0)*r22*x1995)));
evalcond[4]=(((cj0*x1992))+((cj0*x1991))+(((-1.0)*r02*x1995))+((r00*x1994))+(((-1.0)*gconst88*r01*x1993)));
evalcond[5]=(((sj0*x1992))+((sj0*x1991))+(((-1.0)*gconst88*r11*x1993))+((r10*x1994))+(((-1.0)*r12*x1995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1998=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1998;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x1998);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1999=((1.0)*cj5);
IkReal x2000=((((-1.0)*r21*x1999))+(((-1.0)*r20*sj5)));
j4eval[0]=x2000;
j4eval[1]=((IKabs(((((-1.0)*r10*x1999))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2000);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2001=cj5*cj5;
IkReal x2002=r01*r01;
IkReal x2003=(cj5*r00);
IkReal x2004=(r01*sj5);
IkReal x2005=(x2002+(((-1.0)*x2001*x2002))+(((-2.0)*x2003*x2004))+((x2001*(r00*r00)))+(r02*r02));
j4eval[0]=x2005;
j4eval[1]=((IKabs(r02))+(IKabs((x2003+(((-1.0)*x2004))))));
j4eval[2]=IKsign(x2005);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2006=cj5*cj5;
IkReal x2007=r01*r01;
IkReal x2008=(r01*sj5);
IkReal x2009=(cj5*r00);
CheckValue<IkReal> x2010 = IKatan2WithCheck(IkReal((x2009+(((-1.0)*x2008)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2010.valid){
continue;
}
CheckValue<IkReal> x2011=IKPowWithIntegerCheck(IKsign((x2007+(((-1.0)*x2006*x2007))+(((-2.0)*x2008*x2009))+((x2006*(r00*r00)))+(r02*r02))),-1);
if(!x2011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2010.value)+(((1.5707963267949)*(x2011.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2012=IKsin(j4);
IkReal x2013=IKcos(j4);
IkReal x2014=(cj5*r10);
IkReal x2015=(r01*sj5);
IkReal x2016=(cj5*r00);
IkReal x2017=(cj5*r20);
IkReal x2018=((1.0)*x2013);
IkReal x2019=((1.0)*x2012);
IkReal x2020=(sj5*x2012);
evalcond[0]=((((-1.0)*x2017*x2019))+((r21*x2020))+(((-1.0)*r22*x2018)));
evalcond[1]=(((r11*x2020))+(((-1.0)*x2014*x2019))+(((-1.0)*r12*x2018)));
evalcond[2]=((((-1.0)*x2015*x2018))+(((-1.0)*r02*x2019))+((x2013*x2016)));
evalcond[3]=((1.0)+(((-1.0)*x2016*x2019))+((x2012*x2015))+(((-1.0)*r02*x2018)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2018))+((cj1*sj2))+(((-1.0)*r12*x2019))+((x2013*x2014)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2018))+((x2013*x2017))+(((-1.0)*r22*x2019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2021=((1.0)*cj5);
CheckValue<IkReal> x2022=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2021))+(((-1.0)*r20*sj5)))),-1);
if(!x2022.valid){
continue;
}
CheckValue<IkReal> x2023 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2021))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2022.value)))+(x2023.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2024=IKsin(j4);
IkReal x2025=IKcos(j4);
IkReal x2026=(cj5*r10);
IkReal x2027=(r01*sj5);
IkReal x2028=(cj5*r00);
IkReal x2029=(cj5*r20);
IkReal x2030=((1.0)*x2025);
IkReal x2031=((1.0)*x2024);
IkReal x2032=(sj5*x2024);
evalcond[0]=(((r21*x2032))+(((-1.0)*r22*x2030))+(((-1.0)*x2029*x2031)));
evalcond[1]=((((-1.0)*r12*x2030))+(((-1.0)*x2026*x2031))+((r11*x2032)));
evalcond[2]=(((x2025*x2028))+(((-1.0)*r02*x2031))+(((-1.0)*x2027*x2030)));
evalcond[3]=((1.0)+((x2024*x2027))+(((-1.0)*r02*x2030))+(((-1.0)*x2028*x2031)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x2031))+(((-1.0)*r11*sj5*x2030))+((cj1*sj2))+((x2025*x2026)));
evalcond[5]=((((-1.0)*r22*x2031))+((x2025*x2029))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2033 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2033.valid){
continue;
}
CheckValue<IkReal> x2034=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2033.value)+(((1.5707963267949)*(x2034.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2035=IKsin(j4);
IkReal x2036=IKcos(j4);
IkReal x2037=(cj5*r10);
IkReal x2038=(r01*sj5);
IkReal x2039=(cj5*r00);
IkReal x2040=(cj5*r20);
IkReal x2041=((1.0)*x2036);
IkReal x2042=((1.0)*x2035);
IkReal x2043=(sj5*x2035);
evalcond[0]=(((r21*x2043))+(((-1.0)*r22*x2041))+(((-1.0)*x2040*x2042)));
evalcond[1]=(((r11*x2043))+(((-1.0)*x2037*x2042))+(((-1.0)*r12*x2041)));
evalcond[2]=((((-1.0)*r02*x2042))+((x2036*x2039))+(((-1.0)*x2038*x2041)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2041))+(((-1.0)*x2039*x2042))+((x2035*x2038)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2041))+((cj1*sj2))+((x2036*x2037))+(((-1.0)*r12*x2042)));
evalcond[5]=((((-1.0)*r22*x2042))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2041))+((x2036*x2040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2044=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2044;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2044);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2045=((1.0)*cj5);
IkReal x2046=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2045)));
j4eval[0]=x2046;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2045))))));
j4eval[2]=IKsign(x2046);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2047=cj5*cj5;
IkReal x2048=r01*r01;
IkReal x2049=(r01*sj5);
IkReal x2050=(cj5*r00);
IkReal x2051=((((-1.0)*x2047*(r00*r00)))+(((2.0)*x2049*x2050))+(((-1.0)*(r02*r02)))+(((-1.0)*x2048))+((x2047*x2048)));
j4eval[0]=x2051;
j4eval[1]=IKsign(x2051);
j4eval[2]=((IKabs(r02))+(IKabs((x2050+(((-1.0)*x2049))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2052=cj5*cj5;
IkReal x2053=r01*r01;
IkReal x2054=(r01*sj5);
IkReal x2055=(cj5*r00);
CheckValue<IkReal> x2056=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2052*(r00*r00)))+((x2052*x2053))+(((2.0)*x2054*x2055))+(((-1.0)*(r02*r02)))+(((-1.0)*x2053)))),-1);
if(!x2056.valid){
continue;
}
CheckValue<IkReal> x2057 = IKatan2WithCheck(IkReal((x2055+(((-1.0)*x2054)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2056.value)))+(x2057.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2058=IKsin(j4);
IkReal x2059=IKcos(j4);
IkReal x2060=(cj5*r10);
IkReal x2061=(r01*sj5);
IkReal x2062=((1.0)*cj2);
IkReal x2063=(cj5*r00);
IkReal x2064=(cj5*r20);
IkReal x2065=((1.0)*x2059);
IkReal x2066=((1.0)*x2058);
IkReal x2067=(sj5*x2058);
evalcond[0]=(((r21*x2067))+(((-1.0)*x2064*x2066))+(((-1.0)*r22*x2065)));
evalcond[1]=((((-1.0)*r12*x2065))+((r11*x2067))+(((-1.0)*x2060*x2066)));
evalcond[2]=((((-1.0)*r02*x2066))+((x2059*x2063))+(((-1.0)*x2061*x2065)));
evalcond[3]=((-1.0)+(((-1.0)*x2063*x2066))+(((-1.0)*r02*x2065))+((x2058*x2061)));
evalcond[4]=((((-1.0)*r22*x2066))+((x2059*x2064))+((sj1*sj2))+(((-1.0)*cj1*x2062))+(((-1.0)*r21*sj5*x2065)));
evalcond[5]=((((-1.0)*r12*x2066))+(((-1.0)*r11*sj5*x2065))+((x2059*x2060))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2068=((1.0)*cj5);
CheckValue<IkReal> x2069 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2068)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2069.valid){
continue;
}
CheckValue<IkReal> x2070=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2068))+(((-1.0)*r10*sj5)))),-1);
if(!x2070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2069.value)+(((1.5707963267949)*(x2070.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2071=IKsin(j4);
IkReal x2072=IKcos(j4);
IkReal x2073=(cj5*r10);
IkReal x2074=(r01*sj5);
IkReal x2075=((1.0)*cj2);
IkReal x2076=(cj5*r00);
IkReal x2077=(cj5*r20);
IkReal x2078=((1.0)*x2072);
IkReal x2079=((1.0)*x2071);
IkReal x2080=(sj5*x2071);
evalcond[0]=((((-1.0)*r22*x2078))+(((-1.0)*x2077*x2079))+((r21*x2080)));
evalcond[1]=((((-1.0)*r12*x2078))+(((-1.0)*x2073*x2079))+((r11*x2080)));
evalcond[2]=((((-1.0)*r02*x2079))+(((-1.0)*x2074*x2078))+((x2072*x2076)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2078))+(((-1.0)*x2076*x2079))+((x2071*x2074)));
evalcond[4]=((((-1.0)*r22*x2079))+((sj1*sj2))+(((-1.0)*r21*sj5*x2078))+(((-1.0)*cj1*x2075))+((x2072*x2077)));
evalcond[5]=((((-1.0)*r12*x2079))+(((-1.0)*r11*sj5*x2078))+(((-1.0)*sj1*x2075))+(((-1.0)*cj1*sj2))+((x2072*x2073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2081=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2081.valid){
continue;
}
CheckValue<IkReal> x2082 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2081.value)))+(x2082.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2083=IKsin(j4);
IkReal x2084=IKcos(j4);
IkReal x2085=(cj5*r10);
IkReal x2086=(r01*sj5);
IkReal x2087=((1.0)*cj2);
IkReal x2088=(cj5*r00);
IkReal x2089=(cj5*r20);
IkReal x2090=((1.0)*x2084);
IkReal x2091=((1.0)*x2083);
IkReal x2092=(sj5*x2083);
evalcond[0]=((((-1.0)*x2089*x2091))+((r21*x2092))+(((-1.0)*r22*x2090)));
evalcond[1]=((((-1.0)*x2085*x2091))+(((-1.0)*r12*x2090))+((r11*x2092)));
evalcond[2]=(((x2084*x2088))+(((-1.0)*x2086*x2090))+(((-1.0)*r02*x2091)));
evalcond[3]=((-1.0)+(((-1.0)*x2088*x2091))+((x2083*x2086))+(((-1.0)*r02*x2090)));
evalcond[4]=((((-1.0)*cj1*x2087))+((x2084*x2089))+(((-1.0)*r21*sj5*x2090))+((sj1*sj2))+(((-1.0)*r22*x2091)));
evalcond[5]=((((-1.0)*sj1*x2087))+(((-1.0)*r11*sj5*x2090))+((x2084*x2085))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2094 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2094)==0){
continue;
}
IkReal x2093=pow(x2094,-0.5);
CheckValue<IkReal> x2095 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2095.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2095.value));
IkReal gconst91=((-1.0)*r11*x2093);
IkReal gconst92=(r10*x2093);
CheckValue<IkReal> x2096 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2096.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2096.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2099 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2099.valid){
continue;
}
IkReal x2097=((-1.0)*(x2099.value));
IkReal x2098=x2093;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2097;
IkReal gconst90=x2097;
IkReal gconst91=((-1.0)*r11*x2098);
IkReal gconst92=(r10*x2098);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2100=((1.0)*gconst92);
CheckValue<IkReal> x2101 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2100))+((gconst91*r11*sj0))+(((-1.0)*cj0*r00*x2100))+((cj0*gconst91*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2101.valid){
continue;
}
CheckValue<IkReal> x2102=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*r21*x2100)))),-1);
if(!x2102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2101.value)+(((1.5707963267949)*(x2102.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2103=IKsin(j4);
IkReal x2104=IKcos(j4);
IkReal x2105=(cj2*sj1);
IkReal x2106=(gconst92*r00);
IkReal x2107=(gconst92*r20);
IkReal x2108=(gconst92*r10);
IkReal x2109=(cj1*sj2);
IkReal x2110=((1.0)*x2104);
IkReal x2111=(gconst91*x2103);
IkReal x2112=((1.0)*x2103);
evalcond[0]=((((-1.0)*x2107*x2112))+((r21*x2111))+(((-1.0)*r22*x2110)));
evalcond[1]=(sj0+((r01*x2111))+(((-1.0)*r02*x2110))+(((-1.0)*x2106*x2112)));
evalcond[2]=((((-1.0)*x2108*x2112))+(((-1.0)*r12*x2110))+(((-1.0)*cj0))+((r11*x2111)));
evalcond[3]=(((x2104*x2107))+(((-1.0)*gconst91*r21*x2110))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2112)));
evalcond[4]=(((cj0*x2109))+((cj0*x2105))+((x2104*x2106))+(((-1.0)*gconst91*r01*x2110))+(((-1.0)*r02*x2112)));
evalcond[5]=((((-1.0)*gconst91*r11*x2110))+((x2104*x2108))+(((-1.0)*r12*x2112))+((sj0*x2109))+((sj0*x2105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2113 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst91*r21))+(((-1.0)*cj0*gconst92*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2113.valid){
continue;
}
CheckValue<IkReal> x2114=IKPowWithIntegerCheck(IKsign((((gconst91*r00))+((gconst92*r01)))),-1);
if(!x2114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2113.value)+(((1.5707963267949)*(x2114.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2115=IKsin(j4);
IkReal x2116=IKcos(j4);
IkReal x2117=(cj2*sj1);
IkReal x2118=(gconst92*r00);
IkReal x2119=(gconst92*r20);
IkReal x2120=(gconst92*r10);
IkReal x2121=(cj1*sj2);
IkReal x2122=((1.0)*x2116);
IkReal x2123=(gconst91*x2115);
IkReal x2124=((1.0)*x2115);
evalcond[0]=((((-1.0)*x2119*x2124))+(((-1.0)*r22*x2122))+((r21*x2123)));
evalcond[1]=(sj0+(((-1.0)*x2118*x2124))+(((-1.0)*r02*x2122))+((r01*x2123)));
evalcond[2]=((((-1.0)*x2120*x2124))+((r11*x2123))+(((-1.0)*r12*x2122))+(((-1.0)*cj0)));
evalcond[3]=(((x2116*x2119))+(((-1.0)*r22*x2124))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2122)));
evalcond[4]=(((x2116*x2118))+(((-1.0)*gconst91*r01*x2122))+((cj0*x2117))+(((-1.0)*r02*x2124))+((cj0*x2121)));
evalcond[5]=(((sj0*x2117))+(((-1.0)*gconst91*r11*x2122))+((sj0*x2121))+(((-1.0)*r12*x2124))+((x2116*x2120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2126 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2126)==0){
continue;
}
IkReal x2125=pow(x2126,-0.5);
CheckValue<IkReal> x2127 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2127.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2127.value))));
IkReal gconst94=((1.0)*r11*x2125);
IkReal gconst95=((-1.0)*r10*x2125);
CheckValue<IkReal> x2128 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2128.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2128.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2131 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2131.valid){
continue;
}
IkReal x2129=((1.0)*(x2131.value));
IkReal x2130=x2125;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2129)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2129)));
IkReal gconst94=((1.0)*r11*x2130);
IkReal gconst95=((-1.0)*r10*x2130);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2134 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2134.valid){
continue;
}
IkReal x2132=((1.0)*(x2134.value));
IkReal x2133=x2125;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2132)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2132)));
IkReal gconst94=((1.0)*r11*x2133);
IkReal gconst95=((-1.0)*r10*x2133);
IkReal x2135=r12*r12;
IkReal x2136=(cj0*r02);
IkReal x2137=x2125;
IkReal x2138=(sj0*x2137);
j4eval[0]=((IKabs((x2136+((r12*sj0)))))+(IKabs((((r12*x2136*x2137))+((x2135*x2138))+(((-1.0)*x2138))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2141 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2141.valid){
continue;
}
IkReal x2139=((1.0)*(x2141.value));
IkReal x2140=x2125;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2139)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2139)));
IkReal gconst94=((1.0)*r11*x2140);
IkReal gconst95=((-1.0)*r10*x2140);
IkReal x2142=r12*r12;
IkReal x2143=(sj1*sj2);
IkReal x2144=((1.0)*cj1*cj2);
CheckValue<IkReal> x2148=IKPowWithIntegerCheck(((-1.0)+x2142),-1);
if(!x2148.valid){
continue;
}
IkReal x2145=x2148.value;
if((((1.0)+(((-1.0)*x2142)))) < -0.00001)
continue;
IkReal x2146=IKsqrt(((1.0)+(((-1.0)*x2142))));
IkReal x2147=(r12*r22*x2145*x2146);
j4eval[0]=((IKabs(((((-1.0)*x2144*x2147))+((x2143*x2147)))))+(IKabs(((((-1.0)*r22*x2144))+((r22*x2143))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2149=(gconst94*r21);
IkReal x2150=(cj1*cj2);
IkReal x2151=(sj1*sj2);
IkReal x2152=(gconst95*r20);
CheckValue<IkReal> x2153=IKPowWithIntegerCheck(IKsign(((x2149*x2149)+(x2152*x2152)+(r22*r22)+(((-2.0)*x2149*x2152)))),-1);
if(!x2153.valid){
continue;
}
CheckValue<IkReal> x2154 = IKatan2WithCheck(IkReal((((r22*x2151))+(((-1.0)*r22*x2150)))),IkReal((((x2149*x2151))+((x2150*x2152))+(((-1.0)*x2151*x2152))+(((-1.0)*x2149*x2150)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2153.value)))+(x2154.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2155=IKsin(j4);
IkReal x2156=IKcos(j4);
IkReal x2157=(cj2*sj1);
IkReal x2158=(gconst94*r11);
IkReal x2159=(gconst95*r10);
IkReal x2160=(gconst94*r21);
IkReal x2161=(gconst94*r01);
IkReal x2162=(cj1*sj2);
IkReal x2163=((1.0)*x2156);
IkReal x2164=((1.0)*x2155);
IkReal x2165=(gconst95*x2156);
evalcond[0]=((((-1.0)*gconst95*r20*x2164))+((x2155*x2160))+(((-1.0)*r22*x2163)));
evalcond[1]=(sj0+(((-1.0)*gconst95*r00*x2164))+((x2155*x2161))+(((-1.0)*r02*x2163)));
evalcond[2]=(((x2155*x2158))+(((-1.0)*x2159*x2164))+(((-1.0)*r12*x2163))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x2160*x2163))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x2165))+(((-1.0)*r22*x2164)));
evalcond[4]=(((r00*x2165))+((cj0*x2162))+(((-1.0)*x2161*x2163))+((cj0*x2157))+(((-1.0)*r02*x2164)));
evalcond[5]=(((sj0*x2162))+((x2156*x2159))+(((-1.0)*x2158*x2163))+((sj0*x2157))+(((-1.0)*r12*x2164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2166=((1.0)*gconst95);
CheckValue<IkReal> x2167 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2166))+((gconst94*r11*sj0))+(((-1.0)*cj0*r00*x2166))+((cj0*gconst94*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2167.valid){
continue;
}
CheckValue<IkReal> x2168=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2166))+(((-1.0)*gconst94*r20)))),-1);
if(!x2168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2167.value)+(((1.5707963267949)*(x2168.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2169=IKsin(j4);
IkReal x2170=IKcos(j4);
IkReal x2171=(cj2*sj1);
IkReal x2172=(gconst94*r11);
IkReal x2173=(gconst95*r10);
IkReal x2174=(gconst94*r21);
IkReal x2175=(gconst94*r01);
IkReal x2176=(cj1*sj2);
IkReal x2177=((1.0)*x2170);
IkReal x2178=((1.0)*x2169);
IkReal x2179=(gconst95*x2170);
evalcond[0]=((((-1.0)*gconst95*r20*x2178))+((x2169*x2174))+(((-1.0)*r22*x2177)));
evalcond[1]=(sj0+(((-1.0)*gconst95*r00*x2178))+(((-1.0)*r02*x2177))+((x2169*x2175)));
evalcond[2]=((((-1.0)*x2173*x2178))+((x2169*x2172))+(((-1.0)*r12*x2177))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x2174*x2177))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x2179))+(((-1.0)*r22*x2178)));
evalcond[4]=(((r00*x2179))+((cj0*x2171))+((cj0*x2176))+(((-1.0)*r02*x2178))+(((-1.0)*x2175*x2177)));
evalcond[5]=(((x2170*x2173))+(((-1.0)*x2172*x2177))+(((-1.0)*r12*x2178))+((sj0*x2176))+((sj0*x2171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2180 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst95*r20))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2180.valid){
continue;
}
CheckValue<IkReal> x2181=IKPowWithIntegerCheck(IKsign((((gconst95*r01))+((gconst94*r00)))),-1);
if(!x2181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2180.value)+(((1.5707963267949)*(x2181.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2182=IKsin(j4);
IkReal x2183=IKcos(j4);
IkReal x2184=(cj2*sj1);
IkReal x2185=(gconst94*r11);
IkReal x2186=(gconst95*r10);
IkReal x2187=(gconst94*r21);
IkReal x2188=(gconst94*r01);
IkReal x2189=(cj1*sj2);
IkReal x2190=((1.0)*x2183);
IkReal x2191=((1.0)*x2182);
IkReal x2192=(gconst95*x2183);
evalcond[0]=((((-1.0)*gconst95*r20*x2191))+((x2182*x2187))+(((-1.0)*r22*x2190)));
evalcond[1]=(sj0+((x2182*x2188))+(((-1.0)*r02*x2190))+(((-1.0)*gconst95*r00*x2191)));
evalcond[2]=((((-1.0)*x2186*x2191))+((x2182*x2185))+(((-1.0)*r12*x2190))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x2187*x2190))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x2192))+(((-1.0)*r22*x2191)));
evalcond[4]=((((-1.0)*x2188*x2190))+((cj0*x2184))+((cj0*x2189))+(((-1.0)*r02*x2191))+((r00*x2192)));
evalcond[5]=(((x2183*x2186))+((sj0*x2184))+((sj0*x2189))+(((-1.0)*x2185*x2190))+(((-1.0)*r12*x2191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2193=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2193;
j4eval[1]=IKsign(x2193);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2194=((1.0)*cj5);
IkReal x2195=((((-1.0)*r21*x2194))+(((-1.0)*r20*sj5)));
j4eval[0]=x2195;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2194))))));
j4eval[2]=IKsign(x2195);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2196=cj5*cj5;
IkReal x2197=r11*r11;
IkReal x2198=(cj5*r10);
IkReal x2199=(r11*sj5);
IkReal x2200=(((x2196*x2197))+(((-1.0)*x2196*(r10*r10)))+(((2.0)*x2198*x2199))+(((-1.0)*x2197))+(((-1.0)*(r12*r12))));
j4eval[0]=x2200;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2199))+x2198))));
j4eval[2]=IKsign(x2200);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2201=cj5*cj5;
IkReal x2202=r11*r11;
IkReal x2203=(cj5*r10);
IkReal x2204=(r11*sj5);
CheckValue<IkReal> x2205 = IKatan2WithCheck(IkReal(((((-1.0)*x2204))+x2203)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2205.valid){
continue;
}
CheckValue<IkReal> x2206=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2202))+(((-1.0)*x2201*(r10*r10)))+((x2201*x2202))+(((-1.0)*(r12*r12)))+(((2.0)*x2203*x2204)))),-1);
if(!x2206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2205.value)+(((1.5707963267949)*(x2206.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2207=IKsin(j4);
IkReal x2208=IKcos(j4);
IkReal x2209=(cj5*r10);
IkReal x2210=(r01*sj5);
IkReal x2211=(cj5*r00);
IkReal x2212=(cj5*r20);
IkReal x2213=((1.0)*x2208);
IkReal x2214=((1.0)*x2207);
IkReal x2215=(sj5*x2207);
evalcond[0]=((((-1.0)*r22*x2213))+((r21*x2215))+(((-1.0)*x2212*x2214)));
evalcond[1]=(((x2207*x2210))+(((-1.0)*x2211*x2214))+(((-1.0)*r02*x2213)));
evalcond[2]=((((-1.0)*r12*x2214))+(((-1.0)*r11*sj5*x2213))+((x2208*x2209)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2213))+((r11*x2215))+(((-1.0)*x2209*x2214)));
evalcond[4]=((((-1.0)*x2210*x2213))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2214))+((x2208*x2211)));
evalcond[5]=((((-1.0)*r22*x2214))+(((-1.0)*r21*sj5*x2213))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2208*x2212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2216=((1.0)*cj5);
CheckValue<IkReal> x2217 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2216)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2217.valid){
continue;
}
CheckValue<IkReal> x2218=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2216))+(((-1.0)*r20*sj5)))),-1);
if(!x2218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2217.value)+(((1.5707963267949)*(x2218.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2219=IKsin(j4);
IkReal x2220=IKcos(j4);
IkReal x2221=(cj5*r10);
IkReal x2222=(r01*sj5);
IkReal x2223=(cj5*r00);
IkReal x2224=(cj5*r20);
IkReal x2225=((1.0)*x2220);
IkReal x2226=((1.0)*x2219);
IkReal x2227=(sj5*x2219);
evalcond[0]=((((-1.0)*x2224*x2226))+((r21*x2227))+(((-1.0)*r22*x2225)));
evalcond[1]=((((-1.0)*r02*x2225))+(((-1.0)*x2223*x2226))+((x2219*x2222)));
evalcond[2]=((((-1.0)*r11*sj5*x2225))+(((-1.0)*r12*x2226))+((x2220*x2221)));
evalcond[3]=((-1.0)+(((-1.0)*x2221*x2226))+(((-1.0)*r12*x2225))+((r11*x2227)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2222*x2225))+((cj1*sj2))+(((-1.0)*r02*x2226))+((x2220*x2223)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2225))+(((-1.0)*r22*x2226))+((x2220*x2224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2228 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2228.valid){
continue;
}
CheckValue<IkReal> x2229=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2228.value)+(((1.5707963267949)*(x2229.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2230=IKsin(j4);
IkReal x2231=IKcos(j4);
IkReal x2232=(cj5*r10);
IkReal x2233=(r01*sj5);
IkReal x2234=(cj5*r00);
IkReal x2235=(cj5*r20);
IkReal x2236=((1.0)*x2231);
IkReal x2237=((1.0)*x2230);
IkReal x2238=(sj5*x2230);
evalcond[0]=((((-1.0)*x2235*x2237))+((r21*x2238))+(((-1.0)*r22*x2236)));
evalcond[1]=((((-1.0)*x2234*x2237))+(((-1.0)*r02*x2236))+((x2230*x2233)));
evalcond[2]=((((-1.0)*r11*sj5*x2236))+(((-1.0)*r12*x2237))+((x2231*x2232)));
evalcond[3]=((-1.0)+(((-1.0)*x2232*x2237))+(((-1.0)*r12*x2236))+((r11*x2238)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2237))+((x2231*x2234))+(((-1.0)*x2233*x2236)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2236))+(((-1.0)*r22*x2237))+((x2231*x2235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2239=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2239;
j4eval[1]=IKsign(x2239);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2240=((1.0)*cj5);
IkReal x2241=((((-1.0)*r01*x2240))+(((-1.0)*r00*sj5)));
j4eval[0]=x2241;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2240)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2241);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2242=cj5*cj5;
IkReal x2243=r11*r11;
IkReal x2244=(r11*sj5);
IkReal x2245=(cj5*r10);
IkReal x2246=((r12*r12)+x2243+((x2242*(r10*r10)))+(((-1.0)*x2242*x2243))+(((-2.0)*x2244*x2245)));
j4eval[0]=x2246;
j4eval[1]=IKsign(x2246);
j4eval[2]=((IKabs(r12))+(IKabs((x2245+(((-1.0)*x2244))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2247=cj5*cj5;
IkReal x2248=r11*r11;
IkReal x2249=(cj5*r10);
IkReal x2250=(r11*sj5);
CheckValue<IkReal> x2251 = IKatan2WithCheck(IkReal((x2249+(((-1.0)*x2250)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2251.valid){
continue;
}
CheckValue<IkReal> x2252=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2248+((x2247*(r10*r10)))+(((-1.0)*x2247*x2248))+(((-2.0)*x2249*x2250)))),-1);
if(!x2252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2251.value)+(((1.5707963267949)*(x2252.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2253=IKsin(j4);
IkReal x2254=IKcos(j4);
IkReal x2255=(cj5*r10);
IkReal x2256=(r01*sj5);
IkReal x2257=((1.0)*cj2);
IkReal x2258=(cj5*r00);
IkReal x2259=(cj5*r20);
IkReal x2260=((1.0)*x2254);
IkReal x2261=((1.0)*x2253);
IkReal x2262=(sj5*x2253);
evalcond[0]=(((r21*x2262))+(((-1.0)*x2259*x2261))+(((-1.0)*r22*x2260)));
evalcond[1]=(((x2253*x2256))+(((-1.0)*x2258*x2261))+(((-1.0)*r02*x2260)));
evalcond[2]=(((x2254*x2255))+(((-1.0)*r11*sj5*x2260))+(((-1.0)*r12*x2261)));
evalcond[3]=((1.0)+(((-1.0)*x2255*x2261))+((r11*x2262))+(((-1.0)*r12*x2260)));
evalcond[4]=(((x2254*x2259))+((sj1*sj2))+(((-1.0)*r22*x2261))+(((-1.0)*cj1*x2257))+(((-1.0)*r21*sj5*x2260)));
evalcond[5]=((((-1.0)*x2256*x2260))+(((-1.0)*sj1*x2257))+((x2254*x2258))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2263=((1.0)*cj5);
CheckValue<IkReal> x2264 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2263)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2264.valid){
continue;
}
CheckValue<IkReal> x2265=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2263)))),-1);
if(!x2265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2264.value)+(((1.5707963267949)*(x2265.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2266=IKsin(j4);
IkReal x2267=IKcos(j4);
IkReal x2268=(cj5*r10);
IkReal x2269=(r01*sj5);
IkReal x2270=((1.0)*cj2);
IkReal x2271=(cj5*r00);
IkReal x2272=(cj5*r20);
IkReal x2273=((1.0)*x2267);
IkReal x2274=((1.0)*x2266);
IkReal x2275=(sj5*x2266);
evalcond[0]=(((r21*x2275))+(((-1.0)*r22*x2273))+(((-1.0)*x2272*x2274)));
evalcond[1]=((((-1.0)*r02*x2273))+((x2266*x2269))+(((-1.0)*x2271*x2274)));
evalcond[2]=(((x2267*x2268))+(((-1.0)*r11*sj5*x2273))+(((-1.0)*r12*x2274)));
evalcond[3]=((1.0)+((r11*x2275))+(((-1.0)*x2268*x2274))+(((-1.0)*r12*x2273)));
evalcond[4]=((((-1.0)*cj1*x2270))+((sj1*sj2))+(((-1.0)*r22*x2274))+((x2267*x2272))+(((-1.0)*r21*sj5*x2273)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2270))+(((-1.0)*x2269*x2273))+(((-1.0)*r02*x2274))+((x2267*x2271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2276=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2276.valid){
continue;
}
CheckValue<IkReal> x2277 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2276.value)))+(x2277.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2278=IKsin(j4);
IkReal x2279=IKcos(j4);
IkReal x2280=(cj5*r10);
IkReal x2281=(r01*sj5);
IkReal x2282=((1.0)*cj2);
IkReal x2283=(cj5*r00);
IkReal x2284=(cj5*r20);
IkReal x2285=((1.0)*x2279);
IkReal x2286=((1.0)*x2278);
IkReal x2287=(sj5*x2278);
evalcond[0]=((((-1.0)*x2284*x2286))+((r21*x2287))+(((-1.0)*r22*x2285)));
evalcond[1]=((((-1.0)*r02*x2285))+((x2278*x2281))+(((-1.0)*x2283*x2286)));
evalcond[2]=((((-1.0)*r12*x2286))+(((-1.0)*r11*sj5*x2285))+((x2279*x2280)));
evalcond[3]=((1.0)+(((-1.0)*x2280*x2286))+((r11*x2287))+(((-1.0)*r12*x2285)));
evalcond[4]=((((-1.0)*r21*sj5*x2285))+((sj1*sj2))+((x2279*x2284))+(((-1.0)*cj1*x2282))+(((-1.0)*r22*x2286)));
evalcond[5]=((((-1.0)*r02*x2286))+(((-1.0)*sj1*x2282))+(((-1.0)*cj1*sj2))+(((-1.0)*x2281*x2285))+((x2279*x2283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2288=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2288);
rxp0_2=(py*r00);
rxp1_0=(r21*x2288);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2289=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2289);
rxp0_2=(py*r00);
rxp1_0=(r21*x2289);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2290=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2290);
rxp0_2=(py*r00);
rxp1_0=(r21*x2290);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2293=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x2293.valid){
continue;
}
IkReal x2291=x2293.value;
IkReal x2292=((1.0)*cj0*x2291);
cj4array[0]=((((-1.0)*cj2*sj1*x2292))+(((-1.0)*cj1*sj2*x2292)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2294=IKsin(j4);
IkReal x2295=IKcos(j4);
IkReal x2296=(r21*sj5);
IkReal x2297=((1.0)*x2295);
IkReal x2298=((1.0)*cj5*x2294);
evalcond[0]=((-1.0)*r12*x2294);
evalcond[1]=((((-1.0)*r12*x2297))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x2298))+((x2294*x2296)));
evalcond[3]=((((-1.0)*r00*x2298))+((r01*sj5*x2294)));
evalcond[4]=(((cj5*r20*x2295))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2296*x2297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2300=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2300.valid){
continue;
}
IkReal x2299=x2300.value;
cj4array[0]=((((-1.0)*sj1*sj2*x2299))+((cj1*cj2*x2299)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2301=IKsin(j4);
IkReal x2302=IKcos(j4);
IkReal x2303=(cj5*r00);
IkReal x2304=((1.0)*x2301);
IkReal x2305=(sj5*x2301);
IkReal x2306=((1.0)*x2302);
evalcond[0]=((-1.0)*r12*x2301);
evalcond[1]=((((-1.0)*cj0))+(((-1.0)*r12*x2306)));
evalcond[2]=((((-1.0)*cj5*r20*x2304))+((r21*x2305)));
evalcond[3]=((((-1.0)*x2303*x2304))+((r01*x2305)));
evalcond[4]=((((-1.0)*r01*sj5*x2306))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+((x2302*x2303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2307=IKPowWithIntegerCheck(r12,-1);
if(!x2307.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x2307.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2308=IKsin(j4);
IkReal x2309=IKcos(j4);
IkReal x2310=(cj5*r00);
IkReal x2311=(cj5*r20);
IkReal x2312=(r21*sj5);
IkReal x2313=(r01*sj5);
IkReal x2314=((1.0)*x2308);
IkReal x2315=((1.0)*x2309);
evalcond[0]=((-1.0)*r12*x2308);
evalcond[1]=((((-1.0)*x2311*x2314))+((x2308*x2312)));
evalcond[2]=(((x2308*x2313))+(((-1.0)*x2310*x2314)));
evalcond[3]=((((-1.0)*x2312*x2315))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2309*x2311)));
evalcond[4]=(((x2309*x2310))+(((-1.0)*x2313*x2315))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2316=((1.0)*cj5);
CheckValue<IkReal> x2317 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x2316))+(((-1.0)*cj0*r00*x2316)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2317.valid){
continue;
}
CheckValue<IkReal> x2318=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2316))+(((-1.0)*r20*sj5)))),-1);
if(!x2318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2317.value)+(((1.5707963267949)*(x2318.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2319=IKsin(j4);
IkReal x2320=IKcos(j4);
IkReal x2321=(cj5*r10);
IkReal x2322=(cj2*sj1);
IkReal x2323=(r01*sj5);
IkReal x2324=(cj5*r00);
IkReal x2325=(cj5*r20);
IkReal x2326=(cj1*sj2);
IkReal x2327=((1.0)*x2320);
IkReal x2328=((1.0)*x2319);
IkReal x2329=(sj5*x2319);
evalcond[0]=((((-1.0)*r22*x2327))+((r21*x2329))+(((-1.0)*x2325*x2328)));
evalcond[1]=((((-1.0)*x2324*x2328))+sj0+((x2319*x2323))+(((-1.0)*r02*x2327)));
evalcond[2]=((((-1.0)*x2321*x2328))+((r11*x2329))+(((-1.0)*r12*x2327))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2328))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2320*x2325))+(((-1.0)*r21*sj5*x2327)));
evalcond[4]=(((cj0*x2326))+((cj0*x2322))+(((-1.0)*x2323*x2327))+((x2320*x2324))+(((-1.0)*r02*x2328)));
evalcond[5]=((((-1.0)*r11*sj5*x2327))+((sj0*x2322))+((sj0*x2326))+(((-1.0)*r12*x2328))+((x2320*x2321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2330=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2330.valid){
continue;
}
CheckValue<IkReal> x2331 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2330.value)))+(x2331.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2332=IKsin(j4);
IkReal x2333=IKcos(j4);
IkReal x2334=(cj5*r10);
IkReal x2335=(cj2*sj1);
IkReal x2336=(r01*sj5);
IkReal x2337=(cj5*r00);
IkReal x2338=(cj5*r20);
IkReal x2339=(cj1*sj2);
IkReal x2340=((1.0)*x2333);
IkReal x2341=((1.0)*x2332);
IkReal x2342=(sj5*x2332);
evalcond[0]=((((-1.0)*r22*x2340))+((r21*x2342))+(((-1.0)*x2338*x2341)));
evalcond[1]=((((-1.0)*x2337*x2341))+sj0+((x2332*x2336))+(((-1.0)*r02*x2340)));
evalcond[2]=((((-1.0)*x2334*x2341))+((r11*x2342))+(((-1.0)*r12*x2340))+(((-1.0)*cj0)));
evalcond[3]=(((x2333*x2338))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2341))+(((-1.0)*r21*sj5*x2340)));
evalcond[4]=(((x2333*x2337))+(((-1.0)*x2336*x2340))+(((-1.0)*r02*x2341))+((cj0*x2335))+((cj0*x2339)));
evalcond[5]=(((x2333*x2334))+((sj0*x2335))+((sj0*x2339))+(((-1.0)*r11*sj5*x2340))+(((-1.0)*r12*x2341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2343=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2343.valid){
continue;
}
CheckValue<IkReal> x2344 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2343.value)))+(x2344.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2345=IKsin(j4);
IkReal x2346=IKcos(j4);
IkReal x2347=(cj5*r10);
IkReal x2348=(cj2*sj1);
IkReal x2349=(r01*sj5);
IkReal x2350=(cj5*r00);
IkReal x2351=(cj5*r20);
IkReal x2352=(cj1*sj2);
IkReal x2353=((1.0)*x2346);
IkReal x2354=((1.0)*x2345);
IkReal x2355=(sj5*x2345);
evalcond[0]=((((-1.0)*r22*x2353))+(((-1.0)*x2351*x2354))+((r21*x2355)));
evalcond[1]=(sj0+((x2345*x2349))+(((-1.0)*x2350*x2354))+(((-1.0)*r02*x2353)));
evalcond[2]=((((-1.0)*x2347*x2354))+((r11*x2355))+(((-1.0)*r12*x2353))+(((-1.0)*cj0)));
evalcond[3]=(((x2346*x2351))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2354))+(((-1.0)*r21*sj5*x2353)));
evalcond[4]=(((x2346*x2350))+((cj0*x2352))+(((-1.0)*r02*x2354))+((cj0*x2348))+(((-1.0)*x2349*x2353)));
evalcond[5]=(((sj0*x2348))+((sj0*x2352))+((x2346*x2347))+(((-1.0)*r11*sj5*x2353))+(((-1.0)*r12*x2354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2356=cj5*cj5;
IkReal x2357=r21*r21;
IkReal x2358=(sj1*sj2);
IkReal x2359=(r21*sj5);
IkReal x2360=(cj1*cj2);
IkReal x2361=(cj5*r20);
CheckValue<IkReal> x2362=IKPowWithIntegerCheck(IKsign((((x2356*(r20*r20)))+(r22*r22)+x2357+(((-1.0)*x2356*x2357))+(((-2.0)*x2359*x2361)))),-1);
if(!x2362.valid){
continue;
}
CheckValue<IkReal> x2363 = IKatan2WithCheck(IkReal((((r22*x2358))+(((-1.0)*r22*x2360)))),IkReal(((((-1.0)*x2359*x2360))+((x2358*x2359))+((x2360*x2361))+(((-1.0)*x2358*x2361)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2362.value)))+(x2363.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2364=IKsin(j4);
IkReal x2365=IKcos(j4);
IkReal x2366=(r21*sj5);
IkReal x2367=(cj5*r20);
IkReal x2368=((1.0)*x2365);
IkReal x2369=((1.0)*x2364);
evalcond[0]=(((x2364*x2366))+(((-1.0)*r22*x2368))+(((-1.0)*x2367*x2369)));
evalcond[1]=(((x2365*x2367))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2369))+(((-1.0)*x2366*x2368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2370=(cj5*sj4);
IkReal x2371=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x2371))+((r00*x2370))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x2370))+((r11*x2371))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x2371))+((r00*x2370))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x2370))+((r11*x2371))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x2371))+((r00*x2370))+((cj4*r02))), ((((-1.0)*r10*x2370))+((r11*x2371))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2372=IKcos(j0);
IkReal x2373=IKsin(j0);
IkReal x2374=(cj4*cj5);
IkReal x2375=((0.1)*sj5);
IkReal x2376=(cj5*r11);
IkReal x2377=(cj5*r01);
IkReal x2378=(r11*sj5);
IkReal x2379=(cj1*cj2);
IkReal x2380=((1.0)*sj4);
IkReal x2381=((1.0)*cj4);
IkReal x2382=(r01*sj5);
IkReal x2383=(cj1*x2373);
IkReal x2384=(cj1*x2372);
IkReal x2385=(sj1*x2372);
IkReal x2386=(sj1*sj2*x2373);
evalcond[0]=((((-1.0)*cj5*r00*x2380))+(((-1.0)*r02*x2381))+((sj4*x2382))+x2373);
evalcond[1]=((((-1.0)*r12*x2381))+(((-1.0)*x2372))+(((-1.0)*cj5*r10*x2380))+((sj4*x2378)));
evalcond[2]=(((x2372*x2379))+((r00*sj5))+x2377+(((-1.0)*sj2*x2385)));
evalcond[3]=(((x2373*x2379))+((r10*sj5))+x2376+(((-1.0)*x2386)));
evalcond[4]=((((-1.0)*x2381*x2382))+(((-1.0)*r02*x2380))+((sj2*x2384))+((cj2*x2385))+((r00*x2374)));
evalcond[5]=((((-1.0)*r12*x2380))+(((-1.0)*x2378*x2381))+((r10*x2374))+((cj2*sj1*x2373))+((sj2*x2383)));
evalcond[6]=((((-0.425)*x2384))+(((-1.0)*r00*x2375))+(((-0.1)*x2377))+(((-1.0)*px))+(((0.392)*sj2*x2385))+(((-0.392)*x2372*x2379))+(((0.134)*x2373)));
evalcond[7]=((((-1.0)*r10*x2375))+(((-0.425)*x2383))+(((-0.1)*x2376))+(((0.392)*x2386))+(((-1.0)*py))+(((-0.392)*x2373*x2379))+(((-0.134)*x2372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2387=((1.0)*cj5);
IkReal x2388=((1.0)*sj5);
CheckValue<IkReal> x2389=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x2389.valid){
continue;
}
CheckValue<IkReal> x2390 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2388))+(((-1.0)*r11*x2387)))),IkReal(((((-1.0)*r01*x2387))+(((-1.0)*r00*x2388)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2390.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2389.value)))+(x2390.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2391=IKcos(j0);
IkReal x2392=IKsin(j0);
IkReal x2393=((0.1)*sj5);
IkReal x2394=(cj5*r11);
IkReal x2395=(cj5*r01);
IkReal x2396=(cj1*cj2);
IkReal x2397=((0.425)*cj1);
IkReal x2398=(sj1*sj2);
IkReal x2399=((0.392)*x2391);
IkReal x2400=(x2392*x2398);
evalcond[0]=(((r00*sj5))+(((-1.0)*x2391*x2398))+x2395+((x2391*x2396)));
evalcond[1]=(((x2392*x2396))+(((-1.0)*x2400))+((r10*sj5))+x2394);
evalcond[2]=((((-1.0)*r00*x2393))+(((-1.0)*x2396*x2399))+(((-0.1)*x2395))+((x2398*x2399))+(((-1.0)*px))+(((-1.0)*x2391*x2397))+(((0.134)*x2392)));
evalcond[3]=((((-0.134)*x2391))+(((-1.0)*r10*x2393))+(((-0.1)*x2394))+(((-0.392)*x2392*x2396))+(((-1.0)*py))+(((0.392)*x2400))+(((-1.0)*x2392*x2397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2401=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2401;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x2401);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2402=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2402;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2402);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2403=((1.0)*cj5);
IkReal x2404=((((-1.0)*r21*x2403))+(((-1.0)*r20*sj5)));
j4eval[0]=x2404;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x2403))+(((-1.0)*cj0*r00*x2403))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x2404);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2405=((-1.0)*r20);
IkReal x2407 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2407)==0){
continue;
}
IkReal x2406=pow(x2407,-0.5);
CheckValue<IkReal> x2408 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2405),IKFAST_ATAN2_MAGTHRESH);
if(!x2408.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2408.value));
IkReal gconst79=(r21*x2406);
IkReal gconst80=(x2405*x2406);
CheckValue<IkReal> x2409 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2409.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2409.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2410=((-1.0)*r20);
IkReal x2411=x2406;
CheckValue<IkReal> x2413 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2410),IKFAST_ATAN2_MAGTHRESH);
if(!x2413.valid){
continue;
}
IkReal x2412=((-1.0)*(x2413.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2412;
IkReal gconst78=x2412;
IkReal gconst79=(r21*x2411);
IkReal gconst80=(x2410*x2411);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2414=((-1.0)*r20);
IkReal x2415=x2406;
CheckValue<IkReal> x2417 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2414),IKFAST_ATAN2_MAGTHRESH);
if(!x2417.valid){
continue;
}
IkReal x2416=((-1.0)*(x2417.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2416;
IkReal gconst78=x2416;
IkReal gconst79=(r21*x2415);
IkReal gconst80=(x2414*x2415);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2418=((-1.0)*r20);
IkReal x2419=x2406;
CheckValue<IkReal> x2421 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2418),IKFAST_ATAN2_MAGTHRESH);
if(!x2421.valid){
continue;
}
IkReal x2420=((-1.0)*(x2421.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2420;
IkReal gconst78=x2420;
IkReal gconst79=(r21*x2419);
IkReal gconst80=(x2418*x2419);
IkReal x2422=r22*r22;
CheckValue<IkReal> x2425=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2422))),-1);
if(!x2425.valid){
continue;
}
IkReal x2423=x2425.value;
IkReal x2424=(x2422+(((2.0)*x2423*(r20*r20)*(r21*r21)))+((x2423*(r20*r20*r20*r20)))+((x2423*(r21*r21*r21*r21))));
j4eval[0]=x2424;
j4eval[1]=IKsign(x2424);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2426=(sj1*sj2);
IkReal x2427=(gconst80*r20);
IkReal x2428=(gconst79*r21);
IkReal x2429=(cj1*cj2);
CheckValue<IkReal> x2430 = IKatan2WithCheck(IkReal((((r22*x2426))+(((-1.0)*r22*x2429)))),IkReal((((x2426*x2428))+((x2427*x2429))+(((-1.0)*x2426*x2427))+(((-1.0)*x2428*x2429)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2430.valid){
continue;
}
CheckValue<IkReal> x2431=IKPowWithIntegerCheck(IKsign(((x2428*x2428)+(r22*r22)+(((-2.0)*x2427*x2428))+(x2427*x2427))),-1);
if(!x2431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2430.value)+(((1.5707963267949)*(x2431.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2432=IKsin(j4);
IkReal x2433=IKcos(j4);
IkReal x2434=(gconst79*r01);
IkReal x2435=(cj2*sj1);
IkReal x2436=(gconst79*r21);
IkReal x2437=(gconst79*r11);
IkReal x2438=(cj1*sj2);
IkReal x2439=((1.0)*x2433);
IkReal x2440=(gconst80*x2433);
IkReal x2441=((1.0)*x2432);
IkReal x2442=(gconst80*x2441);
evalcond[0]=((((-1.0)*r22*x2439))+(((-1.0)*r20*x2442))+((x2432*x2436)));
evalcond[1]=(sj0+((x2432*x2434))+(((-1.0)*r02*x2439))+(((-1.0)*r00*x2442)));
evalcond[2]=((((-1.0)*r10*x2442))+((x2432*x2437))+(((-1.0)*r12*x2439))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2436*x2439))+(((-1.0)*r22*x2441))+((r20*x2440)));
evalcond[4]=(((cj0*x2435))+((cj0*x2438))+(((-1.0)*x2434*x2439))+((r00*x2440))+(((-1.0)*r02*x2441)));
evalcond[5]=(((r10*x2440))+(((-1.0)*r12*x2441))+(((-1.0)*x2437*x2439))+((sj0*x2435))+((sj0*x2438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2443=IKPowWithIntegerCheck(IKsign((((gconst79*r00))+((gconst80*r01)))),-1);
if(!x2443.valid){
continue;
}
CheckValue<IkReal> x2444 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*gconst80*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2443.value)))+(x2444.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2445=IKsin(j4);
IkReal x2446=IKcos(j4);
IkReal x2447=(gconst79*r01);
IkReal x2448=(cj2*sj1);
IkReal x2449=(gconst79*r21);
IkReal x2450=(gconst79*r11);
IkReal x2451=(cj1*sj2);
IkReal x2452=((1.0)*x2446);
IkReal x2453=(gconst80*x2446);
IkReal x2454=((1.0)*x2445);
IkReal x2455=(gconst80*x2454);
evalcond[0]=((((-1.0)*r20*x2455))+(((-1.0)*r22*x2452))+((x2445*x2449)));
evalcond[1]=(sj0+((x2445*x2447))+(((-1.0)*r02*x2452))+(((-1.0)*r00*x2455)));
evalcond[2]=((((-1.0)*r10*x2455))+(((-1.0)*r12*x2452))+((x2445*x2450))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2449*x2452))+(((-1.0)*r22*x2454))+((r20*x2453)));
evalcond[4]=(((r00*x2453))+((cj0*x2451))+((cj0*x2448))+(((-1.0)*x2447*x2452))+(((-1.0)*r02*x2454)));
evalcond[5]=((((-1.0)*x2450*x2452))+((sj0*x2451))+((sj0*x2448))+((r10*x2453))+(((-1.0)*r12*x2454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2456=IKPowWithIntegerCheck(IKsign((((gconst80*r11))+((gconst79*r10)))),-1);
if(!x2456.valid){
continue;
}
CheckValue<IkReal> x2457 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*gconst80*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2456.value)))+(x2457.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2458=IKsin(j4);
IkReal x2459=IKcos(j4);
IkReal x2460=(gconst79*r01);
IkReal x2461=(cj2*sj1);
IkReal x2462=(gconst79*r21);
IkReal x2463=(gconst79*r11);
IkReal x2464=(cj1*sj2);
IkReal x2465=((1.0)*x2459);
IkReal x2466=(gconst80*x2459);
IkReal x2467=((1.0)*x2458);
IkReal x2468=(gconst80*x2467);
evalcond[0]=(((x2458*x2462))+(((-1.0)*r22*x2465))+(((-1.0)*r20*x2468)));
evalcond[1]=(((x2458*x2460))+sj0+(((-1.0)*r00*x2468))+(((-1.0)*r02*x2465)));
evalcond[2]=(((x2458*x2463))+(((-1.0)*r12*x2465))+(((-1.0)*r10*x2468))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2467))+((r20*x2466))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2462*x2465)));
evalcond[4]=((((-1.0)*x2460*x2465))+(((-1.0)*r02*x2467))+((cj0*x2464))+((cj0*x2461))+((r00*x2466)));
evalcond[5]=((((-1.0)*r12*x2467))+(((-1.0)*x2463*x2465))+((sj0*x2464))+((sj0*x2461))+((r10*x2466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2469=((-1.0)*r21);
IkReal x2471 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2471)==0){
continue;
}
IkReal x2470=pow(x2471,-0.5);
CheckValue<IkReal> x2472 = IKatan2WithCheck(IkReal(x2469),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2472.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2472.value))));
IkReal gconst82=(x2469*x2470);
IkReal gconst83=((1.0)*r20*x2470);
CheckValue<IkReal> x2473 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2473.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2473.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2474=((-1.0)*r21);
CheckValue<IkReal> x2477 = IKatan2WithCheck(IkReal(x2474),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2477.valid){
continue;
}
IkReal x2475=((1.0)*(x2477.value));
IkReal x2476=x2470;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2475)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2475)));
IkReal gconst82=(x2474*x2476);
IkReal gconst83=((1.0)*r20*x2476);
IkReal x2478=r22*r22;
IkReal x2479=((1.0)*x2478);
CheckValue<IkReal> x2483=IKPowWithIntegerCheck(((-1.0)+x2478),-1);
if(!x2483.valid){
continue;
}
IkReal x2480=x2483.value;
if((((1.0)+(((-1.0)*x2479)))) < -0.00001)
continue;
IkReal x2481=IKsqrt(((1.0)+(((-1.0)*x2479))));
IkReal x2482=(sj0*x2480*x2481);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2482+(((-1.0)*x2479*x2482))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2484=((-1.0)*r21);
CheckValue<IkReal> x2487 = IKatan2WithCheck(IkReal(x2484),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2487.valid){
continue;
}
IkReal x2485=((1.0)*(x2487.value));
IkReal x2486=x2470;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2485)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2485)));
IkReal gconst82=(x2484*x2486);
IkReal gconst83=((1.0)*r20*x2486);
IkReal x2488=r22*r22;
IkReal x2489=((1.0)*x2488);
CheckValue<IkReal> x2493=IKPowWithIntegerCheck(((-1.0)+x2488),-1);
if(!x2493.valid){
continue;
}
IkReal x2490=x2493.value;
if((((1.0)+(((-1.0)*x2489)))) < -0.00001)
continue;
IkReal x2491=IKsqrt(((1.0)+(((-1.0)*x2489))));
IkReal x2492=(cj0*x2490*x2491);
j4eval[0]=((IKabs((x2492+(((-1.0)*x2489*x2492)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2494=((-1.0)*r21);
CheckValue<IkReal> x2497 = IKatan2WithCheck(IkReal(x2494),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2497.valid){
continue;
}
IkReal x2495=((1.0)*(x2497.value));
IkReal x2496=x2470;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2495)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2495)));
IkReal gconst82=(x2494*x2496);
IkReal gconst83=((1.0)*r20*x2496);
IkReal x2498=r22*r22;
IkReal x2499=(cj0*r02);
IkReal x2500=(r12*sj0);
CheckValue<IkReal> x2504=IKPowWithIntegerCheck(((-1.0)+x2498),-1);
if(!x2504.valid){
continue;
}
IkReal x2501=x2504.value;
if((((1.0)+(((-1.0)*x2498)))) < -0.00001)
continue;
IkReal x2502=IKsqrt(((1.0)+(((-1.0)*x2498))));
IkReal x2503=((1.0)*r22*x2501*x2502);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x2500*x2503))+(((-1.0)*x2499*x2503)))))+(IKabs((x2500+x2499))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2505=((1.0)*gconst83);
CheckValue<IkReal> x2506=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*r21*x2505)))),-1);
if(!x2506.valid){
continue;
}
CheckValue<IkReal> x2507 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2505))+((gconst82*r11*sj0))+(((-1.0)*cj0*r00*x2505))+((cj0*gconst82*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2506.value)))+(x2507.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2508=IKsin(j4);
IkReal x2509=IKcos(j4);
IkReal x2510=(cj2*sj1);
IkReal x2511=(gconst82*r11);
IkReal x2512=(cj1*sj2);
IkReal x2513=((1.0)*x2509);
IkReal x2514=(gconst83*x2509);
IkReal x2515=(gconst82*x2508);
IkReal x2516=((1.0)*x2508);
evalcond[0]=((((-1.0)*gconst83*r20*x2516))+(((-1.0)*r22*x2513))+((r21*x2515)));
evalcond[1]=(sj0+(((-1.0)*gconst83*r00*x2516))+((r01*x2515))+(((-1.0)*r02*x2513)));
evalcond[2]=((((-1.0)*gconst83*r10*x2516))+(((-1.0)*r12*x2513))+((x2508*x2511))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst82*r21*x2513))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2516))+((r20*x2514)));
evalcond[4]=(((cj0*x2510))+((cj0*x2512))+(((-1.0)*gconst82*r01*x2513))+((r00*x2514))+(((-1.0)*r02*x2516)));
evalcond[5]=(((r10*x2514))+((sj0*x2510))+((sj0*x2512))+(((-1.0)*r12*x2516))+(((-1.0)*x2511*x2513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2517 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*gconst83*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2517.valid){
continue;
}
CheckValue<IkReal> x2518=IKPowWithIntegerCheck(IKsign((((gconst83*r01))+((gconst82*r00)))),-1);
if(!x2518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2517.value)+(((1.5707963267949)*(x2518.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2519=IKsin(j4);
IkReal x2520=IKcos(j4);
IkReal x2521=(cj2*sj1);
IkReal x2522=(gconst82*r11);
IkReal x2523=(cj1*sj2);
IkReal x2524=((1.0)*x2520);
IkReal x2525=(gconst83*x2520);
IkReal x2526=(gconst82*x2519);
IkReal x2527=((1.0)*x2519);
evalcond[0]=((((-1.0)*gconst83*r20*x2527))+((r21*x2526))+(((-1.0)*r22*x2524)));
evalcond[1]=(sj0+(((-1.0)*gconst83*r00*x2527))+((r01*x2526))+(((-1.0)*r02*x2524)));
evalcond[2]=((((-1.0)*gconst83*r10*x2527))+(((-1.0)*r12*x2524))+((x2519*x2522))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2524))+((r20*x2525))+(((-1.0)*r22*x2527)));
evalcond[4]=(((r00*x2525))+(((-1.0)*r02*x2527))+((cj0*x2523))+((cj0*x2521))+(((-1.0)*gconst82*r01*x2524)));
evalcond[5]=((((-1.0)*r12*x2527))+(((-1.0)*x2522*x2524))+((sj0*x2523))+((sj0*x2521))+((r10*x2525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2528 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*gconst83*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2528.valid){
continue;
}
CheckValue<IkReal> x2529=IKPowWithIntegerCheck(IKsign((((gconst83*r11))+((gconst82*r10)))),-1);
if(!x2529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2528.value)+(((1.5707963267949)*(x2529.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2530=IKsin(j4);
IkReal x2531=IKcos(j4);
IkReal x2532=(cj2*sj1);
IkReal x2533=(gconst82*r11);
IkReal x2534=(cj1*sj2);
IkReal x2535=((1.0)*x2531);
IkReal x2536=(gconst83*x2531);
IkReal x2537=(gconst82*x2530);
IkReal x2538=((1.0)*x2530);
evalcond[0]=((((-1.0)*gconst83*r20*x2538))+((r21*x2537))+(((-1.0)*r22*x2535)));
evalcond[1]=(((r01*x2537))+sj0+(((-1.0)*r02*x2535))+(((-1.0)*gconst83*r00*x2538)));
evalcond[2]=(((x2530*x2533))+(((-1.0)*gconst83*r10*x2538))+(((-1.0)*r12*x2535))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst82*r21*x2535))+((r20*x2536))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2538)));
evalcond[4]=((((-1.0)*r02*x2538))+((cj0*x2534))+((cj0*x2532))+(((-1.0)*gconst82*r01*x2535))+((r00*x2536)));
evalcond[5]=((((-1.0)*x2533*x2535))+((sj0*x2532))+((sj0*x2534))+((r10*x2536))+(((-1.0)*r12*x2538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2540 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2540)==0){
continue;
}
IkReal x2539=pow(x2540,-0.5);
CheckValue<IkReal> x2541 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2541.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2541.value));
IkReal gconst85=((-1.0)*r01*x2539);
IkReal gconst86=(r00*x2539);
CheckValue<IkReal> x2542 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2542.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2542.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2545 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2545.valid){
continue;
}
IkReal x2543=((-1.0)*(x2545.value));
IkReal x2544=x2539;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2543;
IkReal gconst84=x2543;
IkReal gconst85=((-1.0)*r01*x2544);
IkReal gconst86=(r00*x2544);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2546=((1.0)*gconst86);
CheckValue<IkReal> x2547=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r20))+(((-1.0)*r21*x2546)))),-1);
if(!x2547.valid){
continue;
}
CheckValue<IkReal> x2548 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst85*r11*sj0))+((cj0*gconst85*r01))+(((-1.0)*cj0*r00*x2546))+(((-1.0)*r10*sj0*x2546)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2547.value)))+(x2548.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2549=IKsin(j4);
IkReal x2550=IKcos(j4);
IkReal x2551=(gconst85*r21);
IkReal x2552=(cj2*sj1);
IkReal x2553=(gconst86*r00);
IkReal x2554=(gconst86*r10);
IkReal x2555=(gconst85*r11);
IkReal x2556=(gconst85*r01);
IkReal x2557=(gconst86*r20);
IkReal x2558=(cj1*sj2);
IkReal x2559=((1.0)*x2550);
IkReal x2560=((1.0)*x2549);
evalcond[0]=((((-1.0)*x2557*x2560))+((x2549*x2551))+(((-1.0)*r22*x2559)));
evalcond[1]=(sj0+((x2549*x2556))+(((-1.0)*r02*x2559))+(((-1.0)*x2553*x2560)));
evalcond[2]=((((-1.0)*r12*x2559))+((x2549*x2555))+(((-1.0)*x2554*x2560))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2560))+((x2550*x2557))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2551*x2559)));
evalcond[4]=((((-1.0)*x2556*x2559))+((x2550*x2553))+(((-1.0)*r02*x2560))+((cj0*x2552))+((cj0*x2558)));
evalcond[5]=(((x2550*x2554))+(((-1.0)*x2555*x2559))+((sj0*x2552))+((sj0*x2558))+(((-1.0)*r12*x2560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2561=IKPowWithIntegerCheck(IKsign((((gconst86*r11))+((gconst85*r10)))),-1);
if(!x2561.valid){
continue;
}
CheckValue<IkReal> x2562 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst86*r20*sj0))+((gconst85*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2561.value)))+(x2562.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2563=IKsin(j4);
IkReal x2564=IKcos(j4);
IkReal x2565=(gconst85*r21);
IkReal x2566=(cj2*sj1);
IkReal x2567=(gconst86*r00);
IkReal x2568=(gconst86*r10);
IkReal x2569=(gconst85*r11);
IkReal x2570=(gconst85*r01);
IkReal x2571=(gconst86*r20);
IkReal x2572=(cj1*sj2);
IkReal x2573=((1.0)*x2564);
IkReal x2574=((1.0)*x2563);
evalcond[0]=((((-1.0)*x2571*x2574))+((x2563*x2565))+(((-1.0)*r22*x2573)));
evalcond[1]=(sj0+(((-1.0)*x2567*x2574))+((x2563*x2570))+(((-1.0)*r02*x2573)));
evalcond[2]=((((-1.0)*r12*x2573))+(((-1.0)*x2568*x2574))+((x2563*x2569))+(((-1.0)*cj0)));
evalcond[3]=(((x2564*x2571))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2574))+(((-1.0)*x2565*x2573)));
evalcond[4]=(((cj0*x2566))+(((-1.0)*x2570*x2573))+(((-1.0)*r02*x2574))+((cj0*x2572))+((x2564*x2567)));
evalcond[5]=((((-1.0)*x2569*x2573))+(((-1.0)*r12*x2574))+((sj0*x2572))+((sj0*x2566))+((x2564*x2568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2576 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2576)==0){
continue;
}
IkReal x2575=pow(x2576,-0.5);
CheckValue<IkReal> x2577 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2577.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2577.value))));
IkReal gconst88=((1.0)*r01*x2575);
IkReal gconst89=((-1.0)*r00*x2575);
CheckValue<IkReal> x2578 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2578.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2578.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2581 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2581.valid){
continue;
}
IkReal x2579=((1.0)*(x2581.value));
IkReal x2580=x2575;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2579)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2579)));
IkReal gconst88=((1.0)*r01*x2580);
IkReal gconst89=((-1.0)*r00*x2580);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x2584 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2584.valid){
continue;
}
IkReal x2582=((1.0)*(x2584.value));
IkReal x2583=x2575;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2582)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2582)));
IkReal gconst88=((1.0)*r01*x2583);
IkReal gconst89=((-1.0)*r00*x2583);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2587 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2587.valid){
continue;
}
IkReal x2585=((1.0)*(x2587.value));
IkReal x2586=x2575;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2585)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2585)));
IkReal gconst88=((1.0)*r01*x2586);
IkReal gconst89=((-1.0)*r00*x2586);
IkReal x2588=r02*r02;
IkReal x2589=(r12*sj0);
IkReal x2590=x2575;
IkReal x2591=(cj0*x2590);
j4eval[0]=((IKabs(((((-1.0)*x2591))+((x2588*x2591))+((r02*x2589*x2590)))))+(IKabs((x2589+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2592=((1.0)*gconst89);
CheckValue<IkReal> x2593 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst88*r01))+(((-1.0)*cj0*r00*x2592))+(((-1.0)*r10*sj0*x2592))+((gconst88*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2593.valid){
continue;
}
CheckValue<IkReal> x2594=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2592))+(((-1.0)*gconst88*r20)))),-1);
if(!x2594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2593.value)+(((1.5707963267949)*(x2594.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2595=IKsin(j4);
IkReal x2596=IKcos(j4);
IkReal x2597=(cj2*sj1);
IkReal x2598=(cj1*sj2);
IkReal x2599=((1.0)*x2596);
IkReal x2600=(gconst89*x2596);
IkReal x2601=((1.0)*x2595);
IkReal x2602=(gconst88*x2595);
IkReal x2603=(gconst89*x2601);
evalcond[0]=((((-1.0)*r22*x2599))+((r21*x2602))+(((-1.0)*r20*x2603)));
evalcond[1]=(sj0+(((-1.0)*r02*x2599))+((r01*x2602))+(((-1.0)*r00*x2603)));
evalcond[2]=((((-1.0)*r10*x2603))+(((-1.0)*r12*x2599))+((r11*x2602))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x2600))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2601))+(((-1.0)*gconst88*r21*x2599)));
evalcond[4]=((((-1.0)*gconst88*r01*x2599))+((cj0*x2598))+((cj0*x2597))+(((-1.0)*r02*x2601))+((r00*x2600)));
evalcond[5]=((((-1.0)*r12*x2601))+((r10*x2600))+(((-1.0)*gconst88*r11*x2599))+((sj0*x2597))+((sj0*x2598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2604=IKPowWithIntegerCheck(IKsign((((gconst88*r00))+((gconst89*r01)))),-1);
if(!x2604.valid){
continue;
}
CheckValue<IkReal> x2605 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst89*r20))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2604.value)))+(x2605.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2606=IKsin(j4);
IkReal x2607=IKcos(j4);
IkReal x2608=(cj2*sj1);
IkReal x2609=(cj1*sj2);
IkReal x2610=((1.0)*x2607);
IkReal x2611=(gconst89*x2607);
IkReal x2612=((1.0)*x2606);
IkReal x2613=(gconst88*x2606);
IkReal x2614=(gconst89*x2612);
evalcond[0]=((((-1.0)*r22*x2610))+(((-1.0)*r20*x2614))+((r21*x2613)));
evalcond[1]=((((-1.0)*r00*x2614))+((r01*x2613))+sj0+(((-1.0)*r02*x2610)));
evalcond[2]=((((-1.0)*r12*x2610))+((r11*x2613))+(((-1.0)*r10*x2614))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x2611))+(((-1.0)*gconst88*r21*x2610))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2612)));
evalcond[4]=(((r00*x2611))+(((-1.0)*gconst88*r01*x2610))+((cj0*x2609))+((cj0*x2608))+(((-1.0)*r02*x2612)));
evalcond[5]=((((-1.0)*gconst88*r11*x2610))+(((-1.0)*r12*x2612))+((sj0*x2609))+((sj0*x2608))+((r10*x2611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2615=IKPowWithIntegerCheck(IKsign((((gconst88*r10))+((gconst89*r11)))),-1);
if(!x2615.valid){
continue;
}
CheckValue<IkReal> x2616 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst89*r20*sj0))+((gconst88*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2616.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2615.value)))+(x2616.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2617=IKsin(j4);
IkReal x2618=IKcos(j4);
IkReal x2619=(cj2*sj1);
IkReal x2620=(cj1*sj2);
IkReal x2621=((1.0)*x2618);
IkReal x2622=(gconst89*x2618);
IkReal x2623=((1.0)*x2617);
IkReal x2624=(gconst88*x2617);
IkReal x2625=(gconst89*x2623);
evalcond[0]=((((-1.0)*r22*x2621))+((r21*x2624))+(((-1.0)*r20*x2625)));
evalcond[1]=(((r01*x2624))+(((-1.0)*r00*x2625))+sj0+(((-1.0)*r02*x2621)));
evalcond[2]=((((-1.0)*r12*x2621))+(((-1.0)*r10*x2625))+((r11*x2624))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x2622))+(((-1.0)*gconst88*r21*x2621))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2623)));
evalcond[4]=(((r00*x2622))+(((-1.0)*r02*x2623))+((cj0*x2620))+((cj0*x2619))+(((-1.0)*gconst88*r01*x2621)));
evalcond[5]=((((-1.0)*gconst88*r11*x2621))+(((-1.0)*r12*x2623))+((r10*x2622))+((sj0*x2620))+((sj0*x2619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2626=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2626;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2626);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2627=((1.0)*cj5);
IkReal x2628=((((-1.0)*r21*x2627))+(((-1.0)*r20*sj5)));
j4eval[0]=x2628;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x2627)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2628);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2629=cj5*cj5;
IkReal x2630=r01*r01;
IkReal x2631=(cj5*r00);
IkReal x2632=(r01*sj5);
IkReal x2633=((((-1.0)*x2629*x2630))+((x2629*(r00*r00)))+(((-2.0)*x2631*x2632))+(r02*r02)+x2630);
j4eval[0]=x2633;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x2632))+x2631))));
j4eval[2]=IKsign(x2633);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2634=cj5*cj5;
IkReal x2635=r01*r01;
IkReal x2636=(r01*sj5);
IkReal x2637=(cj5*r00);
CheckValue<IkReal> x2638=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2634*x2635))+((x2634*(r00*r00)))+(r02*r02)+(((-2.0)*x2636*x2637))+x2635)),-1);
if(!x2638.valid){
continue;
}
CheckValue<IkReal> x2639 = IKatan2WithCheck(IkReal(((((-1.0)*x2636))+x2637)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2638.value)))+(x2639.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2640=IKsin(j4);
IkReal x2641=IKcos(j4);
IkReal x2642=(cj5*r10);
IkReal x2643=(r01*sj5);
IkReal x2644=(cj5*r00);
IkReal x2645=(cj5*r20);
IkReal x2646=((1.0)*x2641);
IkReal x2647=((1.0)*x2640);
IkReal x2648=(sj5*x2640);
evalcond[0]=((((-1.0)*r22*x2646))+((r21*x2648))+(((-1.0)*x2645*x2647)));
evalcond[1]=(((r11*x2648))+(((-1.0)*r12*x2646))+(((-1.0)*x2642*x2647)));
evalcond[2]=((((-1.0)*r02*x2647))+(((-1.0)*x2643*x2646))+((x2641*x2644)));
evalcond[3]=((1.0)+(((-1.0)*x2644*x2647))+(((-1.0)*r02*x2646))+((x2640*x2643)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2646))+(((-1.0)*r12*x2647))+((cj1*sj2))+((x2641*x2642)));
evalcond[5]=((((-1.0)*r22*x2647))+(((-1.0)*r21*sj5*x2646))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2641*x2645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2649=((1.0)*cj5);
CheckValue<IkReal> x2650 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x2649)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2650.valid){
continue;
}
CheckValue<IkReal> x2651=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2649))+(((-1.0)*r20*sj5)))),-1);
if(!x2651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2650.value)+(((1.5707963267949)*(x2651.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2652=IKsin(j4);
IkReal x2653=IKcos(j4);
IkReal x2654=(cj5*r10);
IkReal x2655=(r01*sj5);
IkReal x2656=(cj5*r00);
IkReal x2657=(cj5*r20);
IkReal x2658=((1.0)*x2653);
IkReal x2659=((1.0)*x2652);
IkReal x2660=(sj5*x2652);
evalcond[0]=((((-1.0)*r22*x2658))+((r21*x2660))+(((-1.0)*x2657*x2659)));
evalcond[1]=((((-1.0)*r12*x2658))+(((-1.0)*x2654*x2659))+((r11*x2660)));
evalcond[2]=((((-1.0)*r02*x2659))+((x2653*x2656))+(((-1.0)*x2655*x2658)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2658))+((x2652*x2655))+(((-1.0)*x2656*x2659)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2658))+(((-1.0)*r12*x2659))+((cj1*sj2))+((x2653*x2654)));
evalcond[5]=((((-1.0)*r22*x2659))+(((-1.0)*r21*sj5*x2658))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2653*x2657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2661 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2661.valid){
continue;
}
CheckValue<IkReal> x2662=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2661.value)+(((1.5707963267949)*(x2662.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2663=IKsin(j4);
IkReal x2664=IKcos(j4);
IkReal x2665=(cj5*r10);
IkReal x2666=(r01*sj5);
IkReal x2667=(cj5*r00);
IkReal x2668=(cj5*r20);
IkReal x2669=((1.0)*x2664);
IkReal x2670=((1.0)*x2663);
IkReal x2671=(sj5*x2663);
evalcond[0]=(((r21*x2671))+(((-1.0)*r22*x2669))+(((-1.0)*x2668*x2670)));
evalcond[1]=((((-1.0)*r12*x2669))+(((-1.0)*x2665*x2670))+((r11*x2671)));
evalcond[2]=(((x2664*x2667))+(((-1.0)*r02*x2670))+(((-1.0)*x2666*x2669)));
evalcond[3]=((1.0)+((x2663*x2666))+(((-1.0)*r02*x2669))+(((-1.0)*x2667*x2670)));
evalcond[4]=((((-1.0)*r12*x2670))+((cj2*sj1))+((cj1*sj2))+((x2664*x2665))+(((-1.0)*r11*sj5*x2669)));
evalcond[5]=((((-1.0)*r21*sj5*x2669))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2664*x2668))+(((-1.0)*r22*x2670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2672=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2672;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2672);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2673=((1.0)*cj5);
IkReal x2674=((((-1.0)*r11*x2673))+(((-1.0)*r10*sj5)));
j4eval[0]=x2674;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2673)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2674);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2675=cj5*cj5;
IkReal x2676=r01*r01;
IkReal x2677=(r01*sj5);
IkReal x2678=(cj5*r00);
IkReal x2679=((((-1.0)*x2676))+(((-1.0)*x2675*(r00*r00)))+(((2.0)*x2677*x2678))+(((-1.0)*(r02*r02)))+((x2675*x2676)));
j4eval[0]=x2679;
j4eval[1]=IKsign(x2679);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2677))+x2678))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2680=cj5*cj5;
IkReal x2681=r01*r01;
IkReal x2682=(r01*sj5);
IkReal x2683=(cj5*r00);
CheckValue<IkReal> x2684=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2680*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x2681))+(((2.0)*x2682*x2683))+((x2680*x2681)))),-1);
if(!x2684.valid){
continue;
}
CheckValue<IkReal> x2685 = IKatan2WithCheck(IkReal(((((-1.0)*x2682))+x2683)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2684.value)))+(x2685.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2686=IKsin(j4);
IkReal x2687=IKcos(j4);
IkReal x2688=(cj5*r10);
IkReal x2689=(r01*sj5);
IkReal x2690=((1.0)*cj2);
IkReal x2691=(cj5*r00);
IkReal x2692=(cj5*r20);
IkReal x2693=((1.0)*x2687);
IkReal x2694=((1.0)*x2686);
IkReal x2695=(sj5*x2686);
evalcond[0]=((((-1.0)*x2692*x2694))+(((-1.0)*r22*x2693))+((r21*x2695)));
evalcond[1]=((((-1.0)*x2688*x2694))+(((-1.0)*r12*x2693))+((r11*x2695)));
evalcond[2]=((((-1.0)*r02*x2694))+((x2687*x2691))+(((-1.0)*x2689*x2693)));
evalcond[3]=((-1.0)+(((-1.0)*x2691*x2694))+(((-1.0)*r02*x2693))+((x2686*x2689)));
evalcond[4]=((((-1.0)*cj1*x2690))+((sj1*sj2))+((x2687*x2692))+(((-1.0)*r21*sj5*x2693))+(((-1.0)*r22*x2694)));
evalcond[5]=((((-1.0)*sj1*x2690))+(((-1.0)*r11*sj5*x2693))+((x2687*x2688))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2696=((1.0)*cj5);
CheckValue<IkReal> x2697=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2696)))),-1);
if(!x2697.valid){
continue;
}
CheckValue<IkReal> x2698 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2696)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2697.value)))+(x2698.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2699=IKsin(j4);
IkReal x2700=IKcos(j4);
IkReal x2701=(cj5*r10);
IkReal x2702=(r01*sj5);
IkReal x2703=((1.0)*cj2);
IkReal x2704=(cj5*r00);
IkReal x2705=(cj5*r20);
IkReal x2706=((1.0)*x2700);
IkReal x2707=((1.0)*x2699);
IkReal x2708=(sj5*x2699);
evalcond[0]=((((-1.0)*r22*x2706))+(((-1.0)*x2705*x2707))+((r21*x2708)));
evalcond[1]=(((r11*x2708))+(((-1.0)*r12*x2706))+(((-1.0)*x2701*x2707)));
evalcond[2]=((((-1.0)*x2702*x2706))+(((-1.0)*r02*x2707))+((x2700*x2704)));
evalcond[3]=((-1.0)+((x2699*x2702))+(((-1.0)*r02*x2706))+(((-1.0)*x2704*x2707)));
evalcond[4]=((((-1.0)*r22*x2707))+((sj1*sj2))+(((-1.0)*cj1*x2703))+((x2700*x2705))+(((-1.0)*r21*sj5*x2706)));
evalcond[5]=((((-1.0)*r11*sj5*x2706))+(((-1.0)*r12*x2707))+(((-1.0)*cj1*sj2))+((x2700*x2701))+(((-1.0)*sj1*x2703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2709=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2709.valid){
continue;
}
CheckValue<IkReal> x2710 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2710.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2709.value)))+(x2710.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2711=IKsin(j4);
IkReal x2712=IKcos(j4);
IkReal x2713=(cj5*r10);
IkReal x2714=(r01*sj5);
IkReal x2715=((1.0)*cj2);
IkReal x2716=(cj5*r00);
IkReal x2717=(cj5*r20);
IkReal x2718=((1.0)*x2712);
IkReal x2719=((1.0)*x2711);
IkReal x2720=(sj5*x2711);
evalcond[0]=(((r21*x2720))+(((-1.0)*x2717*x2719))+(((-1.0)*r22*x2718)));
evalcond[1]=((((-1.0)*x2713*x2719))+((r11*x2720))+(((-1.0)*r12*x2718)));
evalcond[2]=(((x2712*x2716))+(((-1.0)*r02*x2719))+(((-1.0)*x2714*x2718)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2718))+((x2711*x2714))+(((-1.0)*x2716*x2719)));
evalcond[4]=(((x2712*x2717))+(((-1.0)*r21*sj5*x2718))+((sj1*sj2))+(((-1.0)*r22*x2719))+(((-1.0)*cj1*x2715)));
evalcond[5]=(((x2712*x2713))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2718))+(((-1.0)*sj1*x2715))+(((-1.0)*r12*x2719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2722 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2722)==0){
continue;
}
IkReal x2721=pow(x2722,-0.5);
CheckValue<IkReal> x2723 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2723.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2723.value));
IkReal gconst91=((-1.0)*r11*x2721);
IkReal gconst92=(r10*x2721);
CheckValue<IkReal> x2724 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2724.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2724.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2727 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2727.valid){
continue;
}
IkReal x2725=((-1.0)*(x2727.value));
IkReal x2726=x2721;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2725;
IkReal gconst90=x2725;
IkReal gconst91=((-1.0)*r11*x2726);
IkReal gconst92=(r10*x2726);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2728=((1.0)*gconst92);
CheckValue<IkReal> x2729=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2728))+(((-1.0)*gconst91*r20)))),-1);
if(!x2729.valid){
continue;
}
CheckValue<IkReal> x2730 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2728))+(((-1.0)*cj0*r00*x2728))+((gconst91*r11*sj0))+((cj0*gconst91*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2729.value)))+(x2730.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2731=IKsin(j4);
IkReal x2732=IKcos(j4);
IkReal x2733=(cj2*sj1);
IkReal x2734=(gconst92*r00);
IkReal x2735=(gconst92*r20);
IkReal x2736=(gconst92*r10);
IkReal x2737=(cj1*sj2);
IkReal x2738=((1.0)*x2732);
IkReal x2739=(gconst91*x2731);
IkReal x2740=((1.0)*x2731);
evalcond[0]=(((r21*x2739))+(((-1.0)*x2735*x2740))+(((-1.0)*r22*x2738)));
evalcond[1]=(sj0+((r01*x2739))+(((-1.0)*x2734*x2740))+(((-1.0)*r02*x2738)));
evalcond[2]=((((-1.0)*x2736*x2740))+(((-1.0)*r12*x2738))+((r11*x2739))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2732*x2735))+(((-1.0)*gconst91*r21*x2738))+(((-1.0)*r22*x2740)));
evalcond[4]=((((-1.0)*gconst91*r01*x2738))+((x2732*x2734))+((cj0*x2737))+((cj0*x2733))+(((-1.0)*r02*x2740)));
evalcond[5]=((((-1.0)*gconst91*r11*x2738))+((x2732*x2736))+(((-1.0)*r12*x2740))+((sj0*x2737))+((sj0*x2733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2741 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst91*r21))+(((-1.0)*cj0*gconst92*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2741.valid){
continue;
}
CheckValue<IkReal> x2742=IKPowWithIntegerCheck(IKsign((((gconst91*r00))+((gconst92*r01)))),-1);
if(!x2742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2741.value)+(((1.5707963267949)*(x2742.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2743=IKsin(j4);
IkReal x2744=IKcos(j4);
IkReal x2745=(cj2*sj1);
IkReal x2746=(gconst92*r00);
IkReal x2747=(gconst92*r20);
IkReal x2748=(gconst92*r10);
IkReal x2749=(cj1*sj2);
IkReal x2750=((1.0)*x2744);
IkReal x2751=(gconst91*x2743);
IkReal x2752=((1.0)*x2743);
evalcond[0]=((((-1.0)*r22*x2750))+((r21*x2751))+(((-1.0)*x2747*x2752)));
evalcond[1]=(sj0+((r01*x2751))+(((-1.0)*x2746*x2752))+(((-1.0)*r02*x2750)));
evalcond[2]=(((r11*x2751))+(((-1.0)*r12*x2750))+(((-1.0)*x2748*x2752))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x2752))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2744*x2747))+(((-1.0)*gconst91*r21*x2750)));
evalcond[4]=(((cj0*x2745))+((cj0*x2749))+(((-1.0)*gconst91*r01*x2750))+((x2744*x2746))+(((-1.0)*r02*x2752)));
evalcond[5]=((((-1.0)*gconst91*r11*x2750))+((x2744*x2748))+((sj0*x2749))+((sj0*x2745))+(((-1.0)*r12*x2752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2754 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2754)==0){
continue;
}
IkReal x2753=pow(x2754,-0.5);
CheckValue<IkReal> x2755 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2755.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2755.value))));
IkReal gconst94=((1.0)*r11*x2753);
IkReal gconst95=((-1.0)*r10*x2753);
CheckValue<IkReal> x2756 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2756.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2756.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2759 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2759.valid){
continue;
}
IkReal x2757=((1.0)*(x2759.value));
IkReal x2758=x2753;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2757)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2757)));
IkReal gconst94=((1.0)*r11*x2758);
IkReal gconst95=((-1.0)*r10*x2758);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2762 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2762.valid){
continue;
}
IkReal x2760=((1.0)*(x2762.value));
IkReal x2761=x2753;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2760)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2760)));
IkReal gconst94=((1.0)*r11*x2761);
IkReal gconst95=((-1.0)*r10*x2761);
IkReal x2763=r12*r12;
IkReal x2764=(cj0*r02);
IkReal x2765=x2753;
IkReal x2766=(sj0*x2765);
j4eval[0]=((IKabs((x2764+((r12*sj0)))))+(IKabs(((((-1.0)*x2766))+((r12*x2764*x2765))+((x2763*x2766))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2769 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2769.valid){
continue;
}
IkReal x2767=((1.0)*(x2769.value));
IkReal x2768=x2753;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2767)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2767)));
IkReal gconst94=((1.0)*r11*x2768);
IkReal gconst95=((-1.0)*r10*x2768);
IkReal x2770=r12*r12;
IkReal x2771=(sj1*sj2);
IkReal x2772=((1.0)*cj1*cj2);
CheckValue<IkReal> x2776=IKPowWithIntegerCheck(((-1.0)+x2770),-1);
if(!x2776.valid){
continue;
}
IkReal x2773=x2776.value;
if((((1.0)+(((-1.0)*x2770)))) < -0.00001)
continue;
IkReal x2774=IKsqrt(((1.0)+(((-1.0)*x2770))));
IkReal x2775=(r12*r22*x2773*x2774);
j4eval[0]=((IKabs((((r22*x2771))+(((-1.0)*r22*x2772)))))+(IKabs((((x2771*x2775))+(((-1.0)*x2772*x2775))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2777=(gconst94*r21);
IkReal x2778=(cj1*cj2);
IkReal x2779=(sj1*sj2);
IkReal x2780=(gconst95*r20);
CheckValue<IkReal> x2781 = IKatan2WithCheck(IkReal((((r22*x2779))+(((-1.0)*r22*x2778)))),IkReal((((x2778*x2780))+(((-1.0)*x2779*x2780))+(((-1.0)*x2777*x2778))+((x2777*x2779)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2781.valid){
continue;
}
CheckValue<IkReal> x2782=IKPowWithIntegerCheck(IKsign(((x2777*x2777)+(r22*r22)+(x2780*x2780)+(((-2.0)*x2777*x2780)))),-1);
if(!x2782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2781.value)+(((1.5707963267949)*(x2782.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2783=IKsin(j4);
IkReal x2784=IKcos(j4);
IkReal x2785=(cj2*sj1);
IkReal x2786=(gconst94*r11);
IkReal x2787=(gconst95*r10);
IkReal x2788=(gconst94*r21);
IkReal x2789=(gconst94*r01);
IkReal x2790=(cj1*sj2);
IkReal x2791=((1.0)*x2784);
IkReal x2792=((1.0)*x2783);
IkReal x2793=(gconst95*x2784);
evalcond[0]=(((x2783*x2788))+(((-1.0)*gconst95*r20*x2792))+(((-1.0)*r22*x2791)));
evalcond[1]=(sj0+(((-1.0)*gconst95*r00*x2792))+((x2783*x2789))+(((-1.0)*r02*x2791)));
evalcond[2]=((((-1.0)*x2787*x2792))+((x2783*x2786))+(((-1.0)*cj0))+(((-1.0)*r12*x2791)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2792))+(((-1.0)*x2788*x2791))+((r20*x2793)));
evalcond[4]=((((-1.0)*x2789*x2791))+((r00*x2793))+((cj0*x2785))+((cj0*x2790))+(((-1.0)*r02*x2792)));
evalcond[5]=((((-1.0)*x2786*x2791))+((x2784*x2787))+((sj0*x2785))+((sj0*x2790))+(((-1.0)*r12*x2792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2794=((1.0)*gconst95);
CheckValue<IkReal> x2795 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst94*r11*sj0))+(((-1.0)*cj0*r00*x2794))+((cj0*gconst94*r01))+(((-1.0)*r10*sj0*x2794)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2795.valid){
continue;
}
CheckValue<IkReal> x2796=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2794))+(((-1.0)*gconst94*r20)))),-1);
if(!x2796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2795.value)+(((1.5707963267949)*(x2796.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2797=IKsin(j4);
IkReal x2798=IKcos(j4);
IkReal x2799=(cj2*sj1);
IkReal x2800=(gconst94*r11);
IkReal x2801=(gconst95*r10);
IkReal x2802=(gconst94*r21);
IkReal x2803=(gconst94*r01);
IkReal x2804=(cj1*sj2);
IkReal x2805=((1.0)*x2798);
IkReal x2806=((1.0)*x2797);
IkReal x2807=(gconst95*x2798);
evalcond[0]=(((x2797*x2802))+(((-1.0)*gconst95*r20*x2806))+(((-1.0)*r22*x2805)));
evalcond[1]=(sj0+((x2797*x2803))+(((-1.0)*gconst95*r00*x2806))+(((-1.0)*r02*x2805)));
evalcond[2]=(((x2797*x2800))+(((-1.0)*r12*x2805))+(((-1.0)*cj0))+(((-1.0)*x2801*x2806)));
evalcond[3]=(((r20*x2807))+(((-1.0)*cj1*cj2))+(((-1.0)*x2802*x2805))+((sj1*sj2))+(((-1.0)*r22*x2806)));
evalcond[4]=((((-1.0)*x2803*x2805))+((cj0*x2804))+(((-1.0)*r02*x2806))+((cj0*x2799))+((r00*x2807)));
evalcond[5]=((((-1.0)*x2800*x2805))+((x2798*x2801))+(((-1.0)*r12*x2806))+((sj0*x2799))+((sj0*x2804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2808 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst95*r20))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2808.valid){
continue;
}
CheckValue<IkReal> x2809=IKPowWithIntegerCheck(IKsign((((gconst95*r01))+((gconst94*r00)))),-1);
if(!x2809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2808.value)+(((1.5707963267949)*(x2809.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2810=IKsin(j4);
IkReal x2811=IKcos(j4);
IkReal x2812=(cj2*sj1);
IkReal x2813=(gconst94*r11);
IkReal x2814=(gconst95*r10);
IkReal x2815=(gconst94*r21);
IkReal x2816=(gconst94*r01);
IkReal x2817=(cj1*sj2);
IkReal x2818=((1.0)*x2811);
IkReal x2819=((1.0)*x2810);
IkReal x2820=(gconst95*x2811);
evalcond[0]=(((x2810*x2815))+(((-1.0)*r22*x2818))+(((-1.0)*gconst95*r20*x2819)));
evalcond[1]=(((x2810*x2816))+(((-1.0)*r02*x2818))+sj0+(((-1.0)*gconst95*r00*x2819)));
evalcond[2]=((((-1.0)*r12*x2818))+((x2810*x2813))+(((-1.0)*x2814*x2819))+(((-1.0)*cj0)));
evalcond[3]=(((r20*x2820))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2815*x2818))+(((-1.0)*r22*x2819)));
evalcond[4]=((((-1.0)*r02*x2819))+((r00*x2820))+((cj0*x2817))+((cj0*x2812))+(((-1.0)*x2816*x2818)));
evalcond[5]=((((-1.0)*r12*x2819))+(((-1.0)*x2813*x2818))+((sj0*x2817))+((sj0*x2812))+((x2811*x2814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2821=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2821;
j4eval[1]=IKsign(x2821);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2822=((1.0)*cj5);
IkReal x2823=((((-1.0)*r21*x2822))+(((-1.0)*r20*sj5)));
j4eval[0]=x2823;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2822))))));
j4eval[2]=IKsign(x2823);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2824=cj5*cj5;
IkReal x2825=r11*r11;
IkReal x2826=(cj5*r10);
IkReal x2827=(r11*sj5);
IkReal x2828=(((x2824*x2825))+(((-1.0)*x2825))+(((-1.0)*(r12*r12)))+(((-1.0)*x2824*(r10*r10)))+(((2.0)*x2826*x2827)));
j4eval[0]=x2828;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2827))+x2826))));
j4eval[2]=IKsign(x2828);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2829=cj5*cj5;
IkReal x2830=r11*r11;
IkReal x2831=(cj5*r10);
IkReal x2832=(r11*sj5);
CheckValue<IkReal> x2833=IKPowWithIntegerCheck(IKsign((((x2829*x2830))+(((-1.0)*x2830))+(((2.0)*x2831*x2832))+(((-1.0)*x2829*(r10*r10)))+(((-1.0)*(r12*r12))))),-1);
if(!x2833.valid){
continue;
}
CheckValue<IkReal> x2834 = IKatan2WithCheck(IkReal(((((-1.0)*x2832))+x2831)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2834.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2833.value)))+(x2834.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2835=IKsin(j4);
IkReal x2836=IKcos(j4);
IkReal x2837=(cj5*r10);
IkReal x2838=(r01*sj5);
IkReal x2839=(cj5*r00);
IkReal x2840=(cj5*r20);
IkReal x2841=((1.0)*x2836);
IkReal x2842=((1.0)*x2835);
IkReal x2843=(sj5*x2835);
evalcond[0]=(((r21*x2843))+(((-1.0)*x2840*x2842))+(((-1.0)*r22*x2841)));
evalcond[1]=((((-1.0)*x2839*x2842))+(((-1.0)*r02*x2841))+((x2835*x2838)));
evalcond[2]=(((x2836*x2837))+(((-1.0)*r12*x2842))+(((-1.0)*r11*sj5*x2841)));
evalcond[3]=((-1.0)+((r11*x2843))+(((-1.0)*r12*x2841))+(((-1.0)*x2837*x2842)));
evalcond[4]=(((x2836*x2839))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2842))+(((-1.0)*x2838*x2841)));
evalcond[5]=(((x2836*x2840))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2842))+(((-1.0)*r21*sj5*x2841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2844=((1.0)*cj5);
CheckValue<IkReal> x2845=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2844))+(((-1.0)*r20*sj5)))),-1);
if(!x2845.valid){
continue;
}
CheckValue<IkReal> x2846 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2844)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2845.value)))+(x2846.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2847=IKsin(j4);
IkReal x2848=IKcos(j4);
IkReal x2849=(cj5*r10);
IkReal x2850=(r01*sj5);
IkReal x2851=(cj5*r00);
IkReal x2852=(cj5*r20);
IkReal x2853=((1.0)*x2848);
IkReal x2854=((1.0)*x2847);
IkReal x2855=(sj5*x2847);
evalcond[0]=(((r21*x2855))+(((-1.0)*r22*x2853))+(((-1.0)*x2852*x2854)));
evalcond[1]=(((x2847*x2850))+(((-1.0)*x2851*x2854))+(((-1.0)*r02*x2853)));
evalcond[2]=((((-1.0)*r11*sj5*x2853))+(((-1.0)*r12*x2854))+((x2848*x2849)));
evalcond[3]=((-1.0)+((r11*x2855))+(((-1.0)*r12*x2853))+(((-1.0)*x2849*x2854)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2848*x2851))+(((-1.0)*x2850*x2853))+(((-1.0)*r02*x2854)));
evalcond[5]=(((x2848*x2852))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2854))+(((-1.0)*r21*sj5*x2853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2856 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2856.valid){
continue;
}
CheckValue<IkReal> x2857=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2857.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2856.value)+(((1.5707963267949)*(x2857.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2858=IKsin(j4);
IkReal x2859=IKcos(j4);
IkReal x2860=(cj5*r10);
IkReal x2861=(r01*sj5);
IkReal x2862=(cj5*r00);
IkReal x2863=(cj5*r20);
IkReal x2864=((1.0)*x2859);
IkReal x2865=((1.0)*x2858);
IkReal x2866=(sj5*x2858);
evalcond[0]=(((r21*x2866))+(((-1.0)*r22*x2864))+(((-1.0)*x2863*x2865)));
evalcond[1]=((((-1.0)*r02*x2864))+(((-1.0)*x2862*x2865))+((x2858*x2861)));
evalcond[2]=((((-1.0)*r12*x2865))+(((-1.0)*r11*sj5*x2864))+((x2859*x2860)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2864))+(((-1.0)*x2860*x2865))+((r11*x2866)));
evalcond[4]=((((-1.0)*r02*x2865))+((cj2*sj1))+(((-1.0)*x2861*x2864))+((cj1*sj2))+((x2859*x2862)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2865))+(((-1.0)*r21*sj5*x2864))+((x2859*x2863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2867=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2867;
j4eval[1]=IKsign(x2867);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2868=((1.0)*cj5);
IkReal x2869=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2868)));
j4eval[0]=x2869;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2868))))));
j4eval[2]=IKsign(x2869);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2870=cj5*cj5;
IkReal x2871=r11*r11;
IkReal x2872=(r11*sj5);
IkReal x2873=(cj5*r10);
IkReal x2874=((r12*r12)+(((-1.0)*x2870*x2871))+((x2870*(r10*r10)))+(((-2.0)*x2872*x2873))+x2871);
j4eval[0]=x2874;
j4eval[1]=IKsign(x2874);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x2872))+x2873))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2875=cj5*cj5;
IkReal x2876=r11*r11;
IkReal x2877=(cj5*r10);
IkReal x2878=(r11*sj5);
CheckValue<IkReal> x2879 = IKatan2WithCheck(IkReal(((((-1.0)*x2878))+x2877)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2879.valid){
continue;
}
CheckValue<IkReal> x2880=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2875*x2876))+(r12*r12)+((x2875*(r10*r10)))+x2876+(((-2.0)*x2877*x2878)))),-1);
if(!x2880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2879.value)+(((1.5707963267949)*(x2880.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2881=IKsin(j4);
IkReal x2882=IKcos(j4);
IkReal x2883=(cj5*r10);
IkReal x2884=(r01*sj5);
IkReal x2885=((1.0)*cj2);
IkReal x2886=(cj5*r00);
IkReal x2887=(cj5*r20);
IkReal x2888=((1.0)*x2882);
IkReal x2889=((1.0)*x2881);
IkReal x2890=(sj5*x2881);
evalcond[0]=((((-1.0)*r22*x2888))+(((-1.0)*x2887*x2889))+((r21*x2890)));
evalcond[1]=((((-1.0)*r02*x2888))+((x2881*x2884))+(((-1.0)*x2886*x2889)));
evalcond[2]=((((-1.0)*r11*sj5*x2888))+((x2882*x2883))+(((-1.0)*r12*x2889)));
evalcond[3]=((1.0)+(((-1.0)*x2883*x2889))+((r11*x2890))+(((-1.0)*r12*x2888)));
evalcond[4]=((((-1.0)*r22*x2889))+((sj1*sj2))+(((-1.0)*r21*sj5*x2888))+(((-1.0)*cj1*x2885))+((x2882*x2887)));
evalcond[5]=((((-1.0)*r02*x2889))+(((-1.0)*cj1*sj2))+(((-1.0)*x2884*x2888))+(((-1.0)*sj1*x2885))+((x2882*x2886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2891=((1.0)*cj5);
CheckValue<IkReal> x2892 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2891)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2892.valid){
continue;
}
CheckValue<IkReal> x2893=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2891)))),-1);
if(!x2893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2892.value)+(((1.5707963267949)*(x2893.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2894=IKsin(j4);
IkReal x2895=IKcos(j4);
IkReal x2896=(cj5*r10);
IkReal x2897=(r01*sj5);
IkReal x2898=((1.0)*cj2);
IkReal x2899=(cj5*r00);
IkReal x2900=(cj5*r20);
IkReal x2901=((1.0)*x2895);
IkReal x2902=((1.0)*x2894);
IkReal x2903=(sj5*x2894);
evalcond[0]=((((-1.0)*x2900*x2902))+((r21*x2903))+(((-1.0)*r22*x2901)));
evalcond[1]=((((-1.0)*r02*x2901))+((x2894*x2897))+(((-1.0)*x2899*x2902)));
evalcond[2]=(((x2895*x2896))+(((-1.0)*r11*sj5*x2901))+(((-1.0)*r12*x2902)));
evalcond[3]=((1.0)+(((-1.0)*x2896*x2902))+(((-1.0)*r12*x2901))+((r11*x2903)));
evalcond[4]=((((-1.0)*r21*sj5*x2901))+((sj1*sj2))+(((-1.0)*cj1*x2898))+((x2895*x2900))+(((-1.0)*r22*x2902)));
evalcond[5]=((((-1.0)*r02*x2902))+((x2895*x2899))+(((-1.0)*x2897*x2901))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2904=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2904.valid){
continue;
}
CheckValue<IkReal> x2905 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2904.value)))+(x2905.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2906=IKsin(j4);
IkReal x2907=IKcos(j4);
IkReal x2908=(cj5*r10);
IkReal x2909=(r01*sj5);
IkReal x2910=((1.0)*cj2);
IkReal x2911=(cj5*r00);
IkReal x2912=(cj5*r20);
IkReal x2913=((1.0)*x2907);
IkReal x2914=((1.0)*x2906);
IkReal x2915=(sj5*x2906);
evalcond[0]=((((-1.0)*x2912*x2914))+((r21*x2915))+(((-1.0)*r22*x2913)));
evalcond[1]=(((x2906*x2909))+(((-1.0)*x2911*x2914))+(((-1.0)*r02*x2913)));
evalcond[2]=((((-1.0)*r12*x2914))+((x2907*x2908))+(((-1.0)*r11*sj5*x2913)));
evalcond[3]=((1.0)+((r11*x2915))+(((-1.0)*r12*x2913))+(((-1.0)*x2908*x2914)));
evalcond[4]=(((x2907*x2912))+((sj1*sj2))+(((-1.0)*cj1*x2910))+(((-1.0)*r21*sj5*x2913))+(((-1.0)*r22*x2914)));
evalcond[5]=((((-1.0)*sj1*x2910))+((x2907*x2911))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2914))+(((-1.0)*x2909*x2913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2916=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2916);
rxp0_2=(py*r00);
rxp1_0=(r21*x2916);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2917=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2917);
rxp0_2=(py*r00);
rxp1_0=(r21*x2917);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2918=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2918);
rxp0_2=(py*r00);
rxp1_0=(r21*x2918);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2921=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x2921.valid){
continue;
}
IkReal x2919=x2921.value;
IkReal x2920=((1.0)*cj0*x2919);
cj4array[0]=((((-1.0)*cj1*sj2*x2920))+(((-1.0)*cj2*sj1*x2920)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2922=IKsin(j4);
IkReal x2923=IKcos(j4);
IkReal x2924=(r21*sj5);
IkReal x2925=((1.0)*x2923);
IkReal x2926=((1.0)*cj5*x2922);
evalcond[0]=((-1.0)*r12*x2922);
evalcond[1]=((((-1.0)*r12*x2925))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x2926))+((x2922*x2924)));
evalcond[3]=((((-1.0)*r00*x2926))+((r01*sj5*x2922)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2924*x2925))+((cj5*r20*x2923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2928=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2928.valid){
continue;
}
IkReal x2927=x2928.value;
cj4array[0]=((((-1.0)*sj1*sj2*x2927))+((cj1*cj2*x2927)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2929=IKsin(j4);
IkReal x2930=IKcos(j4);
IkReal x2931=(cj5*r00);
IkReal x2932=((1.0)*x2929);
IkReal x2933=(sj5*x2929);
IkReal x2934=((1.0)*x2930);
evalcond[0]=((-1.0)*r12*x2929);
evalcond[1]=((((-1.0)*r12*x2934))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x2933))+(((-1.0)*cj5*r20*x2932)));
evalcond[3]=((((-1.0)*x2931*x2932))+((r01*x2933)));
evalcond[4]=(((cj0*cj2*sj1))+(((-1.0)*r01*sj5*x2934))+((x2930*x2931))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2935=IKPowWithIntegerCheck(r12,-1);
if(!x2935.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x2935.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2936=IKsin(j4);
IkReal x2937=IKcos(j4);
IkReal x2938=(cj5*r00);
IkReal x2939=(cj5*r20);
IkReal x2940=(r21*sj5);
IkReal x2941=(r01*sj5);
IkReal x2942=((1.0)*x2936);
IkReal x2943=((1.0)*x2937);
evalcond[0]=((-1.0)*r12*x2936);
evalcond[1]=((((-1.0)*x2939*x2942))+((x2936*x2940)));
evalcond[2]=(((x2936*x2941))+(((-1.0)*x2938*x2942)));
evalcond[3]=((((-1.0)*x2940*x2943))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2937*x2939)));
evalcond[4]=(((cj0*cj2*sj1))+((x2937*x2938))+((cj0*cj1*sj2))+(((-1.0)*x2941*x2943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2944=((1.0)*cj5);
CheckValue<IkReal> x2945=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2944))+(((-1.0)*r20*sj5)))),-1);
if(!x2945.valid){
continue;
}
CheckValue<IkReal> x2946 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x2944))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x2944)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2945.value)))+(x2946.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2947=IKsin(j4);
IkReal x2948=IKcos(j4);
IkReal x2949=(cj5*r10);
IkReal x2950=(cj2*sj1);
IkReal x2951=(r01*sj5);
IkReal x2952=(cj5*r00);
IkReal x2953=(cj5*r20);
IkReal x2954=(cj1*sj2);
IkReal x2955=((1.0)*x2948);
IkReal x2956=((1.0)*x2947);
IkReal x2957=(sj5*x2947);
evalcond[0]=((((-1.0)*x2953*x2956))+((r21*x2957))+(((-1.0)*r22*x2955)));
evalcond[1]=((((-1.0)*r02*x2955))+sj0+(((-1.0)*x2952*x2956))+((x2947*x2951)));
evalcond[2]=((((-1.0)*x2949*x2956))+(((-1.0)*r12*x2955))+((r11*x2957))+(((-1.0)*cj0)));
evalcond[3]=(((x2948*x2953))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2956))+(((-1.0)*r21*sj5*x2955)));
evalcond[4]=((((-1.0)*r02*x2956))+((x2948*x2952))+((cj0*x2954))+((cj0*x2950))+(((-1.0)*x2951*x2955)));
evalcond[5]=(((sj0*x2954))+((sj0*x2950))+(((-1.0)*r11*sj5*x2955))+(((-1.0)*r12*x2956))+((x2948*x2949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2958=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2958.valid){
continue;
}
CheckValue<IkReal> x2959 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2958.value)))+(x2959.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2960=IKsin(j4);
IkReal x2961=IKcos(j4);
IkReal x2962=(cj5*r10);
IkReal x2963=(cj2*sj1);
IkReal x2964=(r01*sj5);
IkReal x2965=(cj5*r00);
IkReal x2966=(cj5*r20);
IkReal x2967=(cj1*sj2);
IkReal x2968=((1.0)*x2961);
IkReal x2969=((1.0)*x2960);
IkReal x2970=(sj5*x2960);
evalcond[0]=((((-1.0)*r22*x2968))+(((-1.0)*x2966*x2969))+((r21*x2970)));
evalcond[1]=(sj0+(((-1.0)*x2965*x2969))+(((-1.0)*r02*x2968))+((x2960*x2964)));
evalcond[2]=(((r11*x2970))+(((-1.0)*x2962*x2969))+(((-1.0)*cj0))+(((-1.0)*r12*x2968)));
evalcond[3]=((((-1.0)*r21*sj5*x2968))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2961*x2966))+(((-1.0)*r22*x2969)));
evalcond[4]=(((x2961*x2965))+(((-1.0)*r02*x2969))+((cj0*x2963))+((cj0*x2967))+(((-1.0)*x2964*x2968)));
evalcond[5]=(((sj0*x2967))+((sj0*x2963))+(((-1.0)*r11*sj5*x2968))+((x2961*x2962))+(((-1.0)*r12*x2969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2971=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2971.valid){
continue;
}
CheckValue<IkReal> x2972 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2971.value)))+(x2972.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2973=IKsin(j4);
IkReal x2974=IKcos(j4);
IkReal x2975=(cj5*r10);
IkReal x2976=(cj2*sj1);
IkReal x2977=(r01*sj5);
IkReal x2978=(cj5*r00);
IkReal x2979=(cj5*r20);
IkReal x2980=(cj1*sj2);
IkReal x2981=((1.0)*x2974);
IkReal x2982=((1.0)*x2973);
IkReal x2983=(sj5*x2973);
evalcond[0]=((((-1.0)*x2979*x2982))+(((-1.0)*r22*x2981))+((r21*x2983)));
evalcond[1]=(sj0+(((-1.0)*x2978*x2982))+(((-1.0)*r02*x2981))+((x2973*x2977)));
evalcond[2]=(((r11*x2983))+(((-1.0)*r12*x2981))+(((-1.0)*x2975*x2982))+(((-1.0)*cj0)));
evalcond[3]=(((x2974*x2979))+(((-1.0)*r21*sj5*x2981))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2982)));
evalcond[4]=((((-1.0)*x2977*x2981))+((cj0*x2980))+((x2974*x2978))+((cj0*x2976))+(((-1.0)*r02*x2982)));
evalcond[5]=(((x2974*x2975))+(((-1.0)*r12*x2982))+(((-1.0)*r11*sj5*x2981))+((sj0*x2980))+((sj0*x2976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2984=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x2984;
j0eval[1]=IKsign(x2984);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2985=r21*r21;
IkReal x2986=cj5*cj5;
IkReal x2987=(sj1*sj2);
IkReal x2988=(r21*sj5);
IkReal x2989=(cj5*r20);
IkReal x2990=(cj1*cj2);
IkReal x2991=((((2.0)*x2988*x2989))+(((-1.0)*x2985))+(((-1.0)*(r22*r22)))+((x2985*x2986))+(((-1.0)*x2986*(r20*r20))));
j4eval[0]=x2991;
j4eval[1]=((IKabs(((((-1.0)*r22*x2990))+((r22*x2987)))))+(IKabs(((((-1.0)*x2988*x2990))+((x2987*x2988))+(((-1.0)*x2987*x2989))+((x2989*x2990))))));
j4eval[2]=IKsign(x2991);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((-0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((-0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((-0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2992=IKcos(j0);
IkReal x2993=IKsin(j0);
evalcond[0]=((((0.134)*x2993))+(((-1.0)*px))+(((-0.425)*x2992)));
evalcond[1]=((((-1.0)*py))+(((-0.134)*x2992))+(((-0.425)*x2993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2994=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2994;
j4eval[1]=IKsign(x2994);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2995=((1.0)*cj5);
IkReal x2996=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2995)));
j4eval[0]=x2996;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2995))))));
j4eval[2]=IKsign(x2996);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2997=cj5*cj5;
IkReal x2998=((1.0)*r20);
IkReal x2999=(r01*r21);
IkReal x3000=(r21*sj5);
IkReal x3001=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x2997*x2998))+((cj5*r00*x3000))+((x2997*x2999))+(((-1.0)*x2999)));
j4eval[0]=x3001;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3000))+(((-1.0)*cj0*cj5*x2998))))));
j4eval[2]=IKsign(x3001);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3002=cj5*cj5;
IkReal x3003=((1.0)*r20);
IkReal x3004=(r01*r21);
IkReal x3005=(r21*sj5);
CheckValue<IkReal> x3006=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x3004))+(((-1.0)*r02*r22))+((cj5*r00*x3005))+((x3002*x3004))+(((-1.0)*r00*x3002*x3003)))),-1);
if(!x3006.valid){
continue;
}
CheckValue<IkReal> x3007 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3005))+(((-1.0)*cj0*cj5*x3003)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3006.value)))+(x3007.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3008=IKcos(j4);
IkReal x3009=IKsin(j4);
IkReal x3010=(cj5*r00);
IkReal x3011=(cj5*r10);
IkReal x3012=(cj5*r20);
IkReal x3013=((1.0)*x3008);
IkReal x3014=((1.0)*x3009);
IkReal x3015=(sj5*x3008);
IkReal x3016=(sj5*x3009);
evalcond[0]=(((r22*x3009))+((r21*x3015))+(((-1.0)*x3012*x3013)));
evalcond[1]=((((-1.0)*r22*x3013))+((r21*x3016))+(((-1.0)*x3012*x3014)));
evalcond[2]=(((r01*x3015))+cj0+(((-1.0)*x3010*x3013))+((r02*x3009)));
evalcond[3]=(sj0+((r12*x3009))+(((-1.0)*x3011*x3013))+((r11*x3015)));
evalcond[4]=(sj0+((r01*x3016))+(((-1.0)*r02*x3013))+(((-1.0)*x3010*x3014)));
evalcond[5]=((((-1.0)*r12*x3013))+(((-1.0)*x3011*x3014))+((r11*x3016))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3017=((1.0)*cj5);
CheckValue<IkReal> x3018=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3017)))),-1);
if(!x3018.valid){
continue;
}
CheckValue<IkReal> x3019 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3017)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3018.value)))+(x3019.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3020=IKcos(j4);
IkReal x3021=IKsin(j4);
IkReal x3022=(cj5*r00);
IkReal x3023=(cj5*r10);
IkReal x3024=(cj5*r20);
IkReal x3025=((1.0)*x3020);
IkReal x3026=((1.0)*x3021);
IkReal x3027=(sj5*x3020);
IkReal x3028=(sj5*x3021);
evalcond[0]=(((r21*x3027))+((r22*x3021))+(((-1.0)*x3024*x3025)));
evalcond[1]=(((r21*x3028))+(((-1.0)*x3024*x3026))+(((-1.0)*r22*x3025)));
evalcond[2]=(cj0+((r02*x3021))+(((-1.0)*x3022*x3025))+((r01*x3027)));
evalcond[3]=(((r12*x3021))+sj0+((r11*x3027))+(((-1.0)*x3023*x3025)));
evalcond[4]=(sj0+(((-1.0)*x3022*x3026))+((r01*x3028))+(((-1.0)*r02*x3025)));
evalcond[5]=((((-1.0)*r12*x3025))+((r11*x3028))+(((-1.0)*x3023*x3026))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3029 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3029.valid){
continue;
}
CheckValue<IkReal> x3030=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3029.value)+(((1.5707963267949)*(x3030.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3031=IKcos(j4);
IkReal x3032=IKsin(j4);
IkReal x3033=(cj5*r00);
IkReal x3034=(cj5*r10);
IkReal x3035=(cj5*r20);
IkReal x3036=((1.0)*x3031);
IkReal x3037=((1.0)*x3032);
IkReal x3038=(sj5*x3031);
IkReal x3039=(sj5*x3032);
evalcond[0]=((((-1.0)*x3035*x3036))+((r22*x3032))+((r21*x3038)));
evalcond[1]=((((-1.0)*x3035*x3037))+((r21*x3039))+(((-1.0)*r22*x3036)));
evalcond[2]=(((r02*x3032))+cj0+((r01*x3038))+(((-1.0)*x3033*x3036)));
evalcond[3]=(sj0+((r11*x3038))+((r12*x3032))+(((-1.0)*x3034*x3036)));
evalcond[4]=(sj0+((r01*x3039))+(((-1.0)*r02*x3036))+(((-1.0)*x3033*x3037)));
evalcond[5]=(((r11*x3039))+(((-1.0)*r12*x3036))+(((-1.0)*x3034*x3037))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((-0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((-0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((-0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3040=IKcos(j0);
IkReal x3041=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.425)*x3040))+(((0.134)*x3041)));
evalcond[1]=((((-0.134)*x3040))+(((-1.0)*py))+(((-0.425)*x3041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3042=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3042;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3042);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3043=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3043;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3043);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3044=((1.0)*cj5);
IkReal x3045=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3044)));
j4eval[0]=x3045;
j4eval[1]=IKsign(x3045);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3044)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3046=((1.0)*cj5);
CheckValue<IkReal> x3047=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3046)))),-1);
if(!x3047.valid){
continue;
}
CheckValue<IkReal> x3048 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3046)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3047.value)))+(x3048.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3049=IKcos(j4);
IkReal x3050=IKsin(j4);
IkReal x3051=((1.0)*cj0);
IkReal x3052=(cj5*r00);
IkReal x3053=(cj5*r10);
IkReal x3054=(cj5*r20);
IkReal x3055=((1.0)*x3049);
IkReal x3056=((1.0)*x3050);
IkReal x3057=(sj5*x3049);
IkReal x3058=(sj5*x3050);
evalcond[0]=(((r21*x3057))+((r22*x3050))+(((-1.0)*x3054*x3055)));
evalcond[1]=(((r21*x3058))+(((-1.0)*x3054*x3056))+(((-1.0)*r22*x3055)));
evalcond[2]=(sj0+(((-1.0)*x3052*x3056))+((r01*x3058))+(((-1.0)*r02*x3055)));
evalcond[3]=((((-1.0)*x3052*x3055))+((r02*x3050))+((r01*x3057))+(((-1.0)*x3051)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3053*x3055))+((r12*x3050))+((r11*x3057)));
evalcond[5]=((((-1.0)*x3053*x3056))+((r11*x3058))+(((-1.0)*x3051))+(((-1.0)*r12*x3055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3059 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3059.valid){
continue;
}
CheckValue<IkReal> x3060=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3059.value)+(((1.5707963267949)*(x3060.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3061=IKcos(j4);
IkReal x3062=IKsin(j4);
IkReal x3063=((1.0)*cj0);
IkReal x3064=(cj5*r00);
IkReal x3065=(cj5*r10);
IkReal x3066=(cj5*r20);
IkReal x3067=((1.0)*x3061);
IkReal x3068=((1.0)*x3062);
IkReal x3069=(sj5*x3061);
IkReal x3070=(sj5*x3062);
evalcond[0]=(((r22*x3062))+(((-1.0)*x3066*x3067))+((r21*x3069)));
evalcond[1]=((((-1.0)*r22*x3067))+(((-1.0)*x3066*x3068))+((r21*x3070)));
evalcond[2]=(((r01*x3070))+sj0+(((-1.0)*r02*x3067))+(((-1.0)*x3064*x3068)));
evalcond[3]=(((r01*x3069))+(((-1.0)*x3063))+((r02*x3062))+(((-1.0)*x3064*x3067)));
evalcond[4]=((((-1.0)*sj0))+((r11*x3069))+((r12*x3062))+(((-1.0)*x3065*x3067)));
evalcond[5]=((((-1.0)*r12*x3067))+(((-1.0)*x3063))+((r11*x3070))+(((-1.0)*x3065*x3068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3071=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3071.valid){
continue;
}
CheckValue<IkReal> x3072 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3071.value)))+(x3072.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3073=IKcos(j4);
IkReal x3074=IKsin(j4);
IkReal x3075=((1.0)*cj0);
IkReal x3076=(cj5*r00);
IkReal x3077=(cj5*r10);
IkReal x3078=(cj5*r20);
IkReal x3079=((1.0)*x3073);
IkReal x3080=((1.0)*x3074);
IkReal x3081=(sj5*x3073);
IkReal x3082=(sj5*x3074);
evalcond[0]=((((-1.0)*x3078*x3079))+((r22*x3074))+((r21*x3081)));
evalcond[1]=((((-1.0)*r22*x3079))+((r21*x3082))+(((-1.0)*x3078*x3080)));
evalcond[2]=(sj0+(((-1.0)*r02*x3079))+(((-1.0)*x3076*x3080))+((r01*x3082)));
evalcond[3]=((((-1.0)*x3075))+((r01*x3081))+(((-1.0)*x3076*x3079))+((r02*x3074)));
evalcond[4]=((((-1.0)*sj0))+((r11*x3081))+((r12*x3074))+(((-1.0)*x3077*x3079)));
evalcond[5]=(((r11*x3082))+(((-1.0)*x3077*x3080))+(((-1.0)*x3075))+(((-1.0)*r12*x3079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((7.46268656716418)*px))+IKsqr(((-7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((7.46268656716418)*px), ((-7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.134)*(IKsin(j0)))));
evalcond[1]=((((-0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3083=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3083;
j4eval[1]=IKsign(x3083);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3084=((1.0)*cj5);
IkReal x3085=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3084)));
j4eval[0]=x3085;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3084)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3085);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3086=cj5*cj5;
IkReal x3087=((1.0)*r20);
IkReal x3088=(r01*r21);
IkReal x3089=(r21*sj5);
IkReal x3090=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3088))+((cj5*r00*x3089))+(((-1.0)*r00*x3086*x3087))+((x3086*x3088)));
j4eval[0]=x3090;
j4eval[1]=((IKabs((((cj0*x3089))+(((-1.0)*cj0*cj5*x3087)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3090);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3091=cj5*cj5;
IkReal x3092=((1.0)*r20);
IkReal x3093=(r01*r21);
IkReal x3094=(r21*sj5);
CheckValue<IkReal> x3095=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x3091*x3092))+(((-1.0)*r02*r22))+((x3091*x3093))+(((-1.0)*x3093))+((cj5*r00*x3094)))),-1);
if(!x3095.valid){
continue;
}
CheckValue<IkReal> x3096 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3094))+(((-1.0)*cj0*cj5*x3092)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3095.value)))+(x3096.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3097=IKcos(j4);
IkReal x3098=IKsin(j4);
IkReal x3099=(cj5*r00);
IkReal x3100=(cj5*r10);
IkReal x3101=(cj5*r20);
IkReal x3102=((1.0)*x3097);
IkReal x3103=((1.0)*x3098);
IkReal x3104=(sj5*x3097);
IkReal x3105=(sj5*x3098);
evalcond[0]=(((r21*x3104))+(((-1.0)*x3101*x3102))+((r22*x3098)));
evalcond[1]=(((r21*x3105))+(((-1.0)*r22*x3102))+(((-1.0)*x3101*x3103)));
evalcond[2]=(cj0+((r02*x3098))+(((-1.0)*x3099*x3102))+((r01*x3104)));
evalcond[3]=(((r11*x3104))+sj0+(((-1.0)*x3100*x3102))+((r12*x3098)));
evalcond[4]=(sj0+(((-1.0)*x3099*x3103))+((r01*x3105))+(((-1.0)*r02*x3102)));
evalcond[5]=(((r11*x3105))+(((-1.0)*r12*x3102))+(((-1.0)*x3100*x3103))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3106=((1.0)*cj5);
CheckValue<IkReal> x3107=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3106)))),-1);
if(!x3107.valid){
continue;
}
CheckValue<IkReal> x3108 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3106)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3107.value)))+(x3108.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3109=IKcos(j4);
IkReal x3110=IKsin(j4);
IkReal x3111=(cj5*r00);
IkReal x3112=(cj5*r10);
IkReal x3113=(cj5*r20);
IkReal x3114=((1.0)*x3109);
IkReal x3115=((1.0)*x3110);
IkReal x3116=(sj5*x3109);
IkReal x3117=(sj5*x3110);
evalcond[0]=((((-1.0)*x3113*x3114))+((r22*x3110))+((r21*x3116)));
evalcond[1]=((((-1.0)*x3113*x3115))+((r21*x3117))+(((-1.0)*r22*x3114)));
evalcond[2]=(cj0+((r02*x3110))+(((-1.0)*x3111*x3114))+((r01*x3116)));
evalcond[3]=(((r12*x3110))+sj0+(((-1.0)*x3112*x3114))+((r11*x3116)));
evalcond[4]=((((-1.0)*r02*x3114))+sj0+(((-1.0)*x3111*x3115))+((r01*x3117)));
evalcond[5]=((((-1.0)*r12*x3114))+(((-1.0)*x3112*x3115))+((r11*x3117))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3118 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3118.valid){
continue;
}
CheckValue<IkReal> x3119=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3118.value)+(((1.5707963267949)*(x3119.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3120=IKcos(j4);
IkReal x3121=IKsin(j4);
IkReal x3122=(cj5*r00);
IkReal x3123=(cj5*r10);
IkReal x3124=(cj5*r20);
IkReal x3125=((1.0)*x3120);
IkReal x3126=((1.0)*x3121);
IkReal x3127=(sj5*x3120);
IkReal x3128=(sj5*x3121);
evalcond[0]=((((-1.0)*x3124*x3125))+((r21*x3127))+((r22*x3121)));
evalcond[1]=((((-1.0)*x3124*x3126))+((r21*x3128))+(((-1.0)*r22*x3125)));
evalcond[2]=(((r01*x3127))+cj0+(((-1.0)*x3122*x3125))+((r02*x3121)));
evalcond[3]=(sj0+(((-1.0)*x3123*x3125))+((r12*x3121))+((r11*x3127)));
evalcond[4]=(sj0+((r01*x3128))+(((-1.0)*r02*x3125))+(((-1.0)*x3122*x3126)));
evalcond[5]=((((-1.0)*x3123*x3126))+(((-1.0)*r12*x3125))+((r11*x3128))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((7.46268656716418)*px))+IKsqr(((-7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((7.46268656716418)*px), ((-7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.134)*(IKsin(j0)))));
evalcond[1]=((((-0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3129=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3129;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3129);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3130=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3130;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3130);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3131=((1.0)*cj5);
IkReal x3132=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3131)));
j4eval[0]=x3132;
j4eval[1]=IKsign(x3132);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3131))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3133=((1.0)*cj5);
CheckValue<IkReal> x3134=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3133)))),-1);
if(!x3134.valid){
continue;
}
CheckValue<IkReal> x3135 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3133))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3134.value)))+(x3135.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3136=IKcos(j4);
IkReal x3137=IKsin(j4);
IkReal x3138=((1.0)*cj0);
IkReal x3139=(cj5*r00);
IkReal x3140=(cj5*r10);
IkReal x3141=(cj5*r20);
IkReal x3142=((1.0)*x3136);
IkReal x3143=((1.0)*x3137);
IkReal x3144=(sj5*x3136);
IkReal x3145=(sj5*x3137);
evalcond[0]=((((-1.0)*x3141*x3142))+((r22*x3137))+((r21*x3144)));
evalcond[1]=((((-1.0)*r22*x3142))+(((-1.0)*x3141*x3143))+((r21*x3145)));
evalcond[2]=(sj0+((r01*x3145))+(((-1.0)*r02*x3142))+(((-1.0)*x3139*x3143)));
evalcond[3]=(((r01*x3144))+((r02*x3137))+(((-1.0)*x3139*x3142))+(((-1.0)*x3138)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3140*x3142))+((r11*x3144))+((r12*x3137)));
evalcond[5]=((((-1.0)*r12*x3142))+(((-1.0)*x3140*x3143))+((r11*x3145))+(((-1.0)*x3138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3146 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3146.valid){
continue;
}
CheckValue<IkReal> x3147=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3146.value)+(((1.5707963267949)*(x3147.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3148=IKcos(j4);
IkReal x3149=IKsin(j4);
IkReal x3150=((1.0)*cj0);
IkReal x3151=(cj5*r00);
IkReal x3152=(cj5*r10);
IkReal x3153=(cj5*r20);
IkReal x3154=((1.0)*x3148);
IkReal x3155=((1.0)*x3149);
IkReal x3156=(sj5*x3148);
IkReal x3157=(sj5*x3149);
evalcond[0]=((((-1.0)*x3153*x3154))+((r22*x3149))+((r21*x3156)));
evalcond[1]=((((-1.0)*r22*x3154))+(((-1.0)*x3153*x3155))+((r21*x3157)));
evalcond[2]=(sj0+((r01*x3157))+(((-1.0)*r02*x3154))+(((-1.0)*x3151*x3155)));
evalcond[3]=((((-1.0)*x3150))+((r02*x3149))+((r01*x3156))+(((-1.0)*x3151*x3154)));
evalcond[4]=((((-1.0)*sj0))+((r12*x3149))+((r11*x3156))+(((-1.0)*x3152*x3154)));
evalcond[5]=((((-1.0)*x3150))+((r11*x3157))+(((-1.0)*r12*x3154))+(((-1.0)*x3152*x3155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3158=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3158.valid){
continue;
}
CheckValue<IkReal> x3159 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3158.value)))+(x3159.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3160=IKcos(j4);
IkReal x3161=IKsin(j4);
IkReal x3162=((1.0)*cj0);
IkReal x3163=(cj5*r00);
IkReal x3164=(cj5*r10);
IkReal x3165=(cj5*r20);
IkReal x3166=((1.0)*x3160);
IkReal x3167=((1.0)*x3161);
IkReal x3168=(sj5*x3160);
IkReal x3169=(sj5*x3161);
evalcond[0]=(((r22*x3161))+(((-1.0)*x3165*x3166))+((r21*x3168)));
evalcond[1]=((((-1.0)*x3165*x3167))+((r21*x3169))+(((-1.0)*r22*x3166)));
evalcond[2]=(sj0+(((-1.0)*x3163*x3167))+((r01*x3169))+(((-1.0)*r02*x3166)));
evalcond[3]=(((r02*x3161))+(((-1.0)*x3163*x3166))+((r01*x3168))+(((-1.0)*x3162)));
evalcond[4]=((((-1.0)*sj0))+((r11*x3168))+((r12*x3161))+(((-1.0)*x3164*x3166)));
evalcond[5]=((((-1.0)*r12*x3166))+((r11*x3169))+(((-1.0)*x3164*x3167))+(((-1.0)*x3162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((-0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.67478761815078)*px))+(((2.14018460980658)*py))), ((((-0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3170=IKsin(j0);
IkReal x3171=IKcos(j0);
evalcond[0]=((((0.425)*x3171))+(((-1.0)*px))+(((0.134)*x3170)));
evalcond[1]=((((-0.134)*x3171))+(((0.425)*x3170))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3172=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3172;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3172);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3173=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3173;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3173);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3174=((1.0)*cj5);
IkReal x3175=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3174)));
j4eval[0]=x3175;
j4eval[1]=IKsign(x3175);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3174))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3176=((1.0)*cj5);
CheckValue<IkReal> x3177=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3176)))),-1);
if(!x3177.valid){
continue;
}
CheckValue<IkReal> x3178 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3176))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3177.value)))+(x3178.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3179=IKcos(j4);
IkReal x3180=IKsin(j4);
IkReal x3181=((1.0)*cj0);
IkReal x3182=(cj5*r00);
IkReal x3183=(cj5*r10);
IkReal x3184=(cj5*r20);
IkReal x3185=((1.0)*x3179);
IkReal x3186=((1.0)*x3180);
IkReal x3187=(sj5*x3179);
IkReal x3188=(sj5*x3180);
evalcond[0]=(((r22*x3180))+(((-1.0)*x3184*x3185))+((r21*x3187)));
evalcond[1]=((((-1.0)*x3184*x3186))+(((-1.0)*r22*x3185))+((r21*x3188)));
evalcond[2]=(sj0+(((-1.0)*r02*x3185))+((r01*x3188))+(((-1.0)*x3182*x3186)));
evalcond[3]=(((r01*x3187))+(((-1.0)*x3182*x3185))+(((-1.0)*x3181))+((r02*x3180)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x3183*x3185))+((r12*x3180))+((r11*x3187)));
evalcond[5]=((((-1.0)*x3183*x3186))+((r11*x3188))+(((-1.0)*r12*x3185))+(((-1.0)*x3181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3189 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3189.valid){
continue;
}
CheckValue<IkReal> x3190=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3189.value)+(((1.5707963267949)*(x3190.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3191=IKcos(j4);
IkReal x3192=IKsin(j4);
IkReal x3193=((1.0)*cj0);
IkReal x3194=(cj5*r00);
IkReal x3195=(cj5*r10);
IkReal x3196=(cj5*r20);
IkReal x3197=((1.0)*x3191);
IkReal x3198=((1.0)*x3192);
IkReal x3199=(sj5*x3191);
IkReal x3200=(sj5*x3192);
evalcond[0]=((((-1.0)*x3196*x3197))+((r21*x3199))+((r22*x3192)));
evalcond[1]=((((-1.0)*x3196*x3198))+(((-1.0)*r22*x3197))+((r21*x3200)));
evalcond[2]=(sj0+((r01*x3200))+(((-1.0)*r02*x3197))+(((-1.0)*x3194*x3198)));
evalcond[3]=(((r01*x3199))+(((-1.0)*x3193))+((r02*x3192))+(((-1.0)*x3194*x3197)));
evalcond[4]=((((-1.0)*sj0))+((r11*x3199))+((r12*x3192))+(((-1.0)*x3195*x3197)));
evalcond[5]=(((r11*x3200))+(((-1.0)*r12*x3197))+(((-1.0)*x3193))+(((-1.0)*x3195*x3198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3201=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3201.valid){
continue;
}
CheckValue<IkReal> x3202 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3201.value)))+(x3202.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3203=IKcos(j4);
IkReal x3204=IKsin(j4);
IkReal x3205=((1.0)*cj0);
IkReal x3206=(cj5*r00);
IkReal x3207=(cj5*r10);
IkReal x3208=(cj5*r20);
IkReal x3209=((1.0)*x3203);
IkReal x3210=((1.0)*x3204);
IkReal x3211=(sj5*x3203);
IkReal x3212=(sj5*x3204);
evalcond[0]=(((r22*x3204))+(((-1.0)*x3208*x3209))+((r21*x3211)));
evalcond[1]=((((-1.0)*x3208*x3210))+(((-1.0)*r22*x3209))+((r21*x3212)));
evalcond[2]=((((-1.0)*r02*x3209))+(((-1.0)*x3206*x3210))+sj0+((r01*x3212)));
evalcond[3]=(((r01*x3211))+(((-1.0)*x3205))+(((-1.0)*x3206*x3209))+((r02*x3204)));
evalcond[4]=((((-1.0)*x3207*x3209))+(((-1.0)*sj0))+((r12*x3204))+((r11*x3211)));
evalcond[5]=((((-1.0)*r12*x3209))+((r11*x3212))+(((-1.0)*x3205))+(((-1.0)*x3207*x3210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((-0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.67478761815078)*px))+(((2.14018460980658)*py))), ((((-0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3213=IKsin(j0);
IkReal x3214=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.134)*x3213))+(((0.425)*x3214)));
evalcond[1]=((((-1.0)*py))+(((-0.134)*x3214))+(((0.425)*x3213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3215=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3215;
j4eval[1]=IKsign(x3215);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3216=((1.0)*cj5);
IkReal x3217=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3216)));
j4eval[0]=x3217;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3216))))));
j4eval[2]=IKsign(x3217);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3218=cj5*cj5;
IkReal x3219=((1.0)*r20);
IkReal x3220=(r01*r21);
IkReal x3221=(r21*sj5);
IkReal x3222=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3218*x3220))+((cj5*r00*x3221))+(((-1.0)*r00*x3218*x3219))+(((-1.0)*x3220)));
j4eval[0]=x3222;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x3219))+((cj0*x3221)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3222);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3223=cj5*cj5;
IkReal x3224=((1.0)*r20);
IkReal x3225=(r01*r21);
IkReal x3226=(r21*sj5);
CheckValue<IkReal> x3227 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3226))+(((-1.0)*cj0*cj5*x3224)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3227.valid){
continue;
}
CheckValue<IkReal> x3228=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3223*x3224))+((cj5*r00*x3226))+((x3223*x3225))+(((-1.0)*x3225)))),-1);
if(!x3228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3227.value)+(((1.5707963267949)*(x3228.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3229=IKcos(j4);
IkReal x3230=IKsin(j4);
IkReal x3231=(cj5*r00);
IkReal x3232=(cj5*r10);
IkReal x3233=(cj5*r20);
IkReal x3234=((1.0)*x3229);
IkReal x3235=((1.0)*x3230);
IkReal x3236=(sj5*x3229);
IkReal x3237=(sj5*x3230);
evalcond[0]=(((r22*x3230))+(((-1.0)*x3233*x3234))+((r21*x3236)));
evalcond[1]=((((-1.0)*x3233*x3235))+(((-1.0)*r22*x3234))+((r21*x3237)));
evalcond[2]=(cj0+((r01*x3236))+(((-1.0)*x3231*x3234))+((r02*x3230)));
evalcond[3]=(sj0+((r11*x3236))+((r12*x3230))+(((-1.0)*x3232*x3234)));
evalcond[4]=((((-1.0)*r02*x3234))+sj0+((r01*x3237))+(((-1.0)*x3231*x3235)));
evalcond[5]=(((r11*x3237))+(((-1.0)*r12*x3234))+(((-1.0)*x3232*x3235))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3238=((1.0)*cj5);
CheckValue<IkReal> x3239=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3238)))),-1);
if(!x3239.valid){
continue;
}
CheckValue<IkReal> x3240 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3238)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3239.value)))+(x3240.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3241=IKcos(j4);
IkReal x3242=IKsin(j4);
IkReal x3243=(cj5*r00);
IkReal x3244=(cj5*r10);
IkReal x3245=(cj5*r20);
IkReal x3246=((1.0)*x3241);
IkReal x3247=((1.0)*x3242);
IkReal x3248=(sj5*x3241);
IkReal x3249=(sj5*x3242);
evalcond[0]=(((r22*x3242))+((r21*x3248))+(((-1.0)*x3245*x3246)));
evalcond[1]=(((r21*x3249))+(((-1.0)*x3245*x3247))+(((-1.0)*r22*x3246)));
evalcond[2]=(((r01*x3248))+(((-1.0)*x3243*x3246))+cj0+((r02*x3242)));
evalcond[3]=(sj0+(((-1.0)*x3244*x3246))+((r12*x3242))+((r11*x3248)));
evalcond[4]=(((r01*x3249))+(((-1.0)*x3243*x3247))+sj0+(((-1.0)*r02*x3246)));
evalcond[5]=((((-1.0)*r12*x3246))+(((-1.0)*x3244*x3247))+((r11*x3249))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3250 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3250.valid){
continue;
}
CheckValue<IkReal> x3251=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3250.value)+(((1.5707963267949)*(x3251.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3252=IKcos(j4);
IkReal x3253=IKsin(j4);
IkReal x3254=(cj5*r00);
IkReal x3255=(cj5*r10);
IkReal x3256=(cj5*r20);
IkReal x3257=((1.0)*x3252);
IkReal x3258=((1.0)*x3253);
IkReal x3259=(sj5*x3252);
IkReal x3260=(sj5*x3253);
evalcond[0]=(((r21*x3259))+((r22*x3253))+(((-1.0)*x3256*x3257)));
evalcond[1]=(((r21*x3260))+(((-1.0)*r22*x3257))+(((-1.0)*x3256*x3258)));
evalcond[2]=(cj0+((r02*x3253))+(((-1.0)*x3254*x3257))+((r01*x3259)));
evalcond[3]=(((r12*x3253))+sj0+((r11*x3259))+(((-1.0)*x3255*x3257)));
evalcond[4]=(sj0+(((-1.0)*r02*x3257))+((r01*x3260))+(((-1.0)*x3254*x3258)));
evalcond[5]=(((r11*x3260))+(((-1.0)*r12*x3257))+(((-1.0)*x3255*x3258))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((7.46268656716418)*px))+IKsqr(((-7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((7.46268656716418)*px), ((-7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.134)*(IKsin(j0)))));
evalcond[1]=((((-0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3261=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3261;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3261);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3262=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3262;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3262);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3263=((1.0)*cj5);
IkReal x3264=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3263)));
j4eval[0]=x3264;
j4eval[1]=IKsign(x3264);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3263))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3265=((1.0)*cj5);
CheckValue<IkReal> x3266 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3265)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3266.valid){
continue;
}
CheckValue<IkReal> x3267=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3265)))),-1);
if(!x3267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3266.value)+(((1.5707963267949)*(x3267.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3268=IKcos(j4);
IkReal x3269=IKsin(j4);
IkReal x3270=((1.0)*cj0);
IkReal x3271=(cj5*r00);
IkReal x3272=(cj5*r10);
IkReal x3273=(cj5*r20);
IkReal x3274=((1.0)*x3268);
IkReal x3275=((1.0)*x3269);
IkReal x3276=(sj5*x3268);
IkReal x3277=(sj5*x3269);
evalcond[0]=((((-1.0)*x3273*x3274))+((r21*x3276))+((r22*x3269)));
evalcond[1]=((((-1.0)*x3273*x3275))+((r21*x3277))+(((-1.0)*r22*x3274)));
evalcond[2]=(sj0+((r01*x3277))+(((-1.0)*x3271*x3275))+(((-1.0)*r02*x3274)));
evalcond[3]=(((r01*x3276))+(((-1.0)*x3270))+((r02*x3269))+(((-1.0)*x3271*x3274)));
evalcond[4]=((((-1.0)*x3272*x3274))+(((-1.0)*sj0))+((r11*x3276))+((r12*x3269)));
evalcond[5]=((((-1.0)*x3272*x3275))+(((-1.0)*r12*x3274))+(((-1.0)*x3270))+((r11*x3277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3278 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3278.valid){
continue;
}
CheckValue<IkReal> x3279=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3278.value)+(((1.5707963267949)*(x3279.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3280=IKcos(j4);
IkReal x3281=IKsin(j4);
IkReal x3282=((1.0)*cj0);
IkReal x3283=(cj5*r00);
IkReal x3284=(cj5*r10);
IkReal x3285=(cj5*r20);
IkReal x3286=((1.0)*x3280);
IkReal x3287=((1.0)*x3281);
IkReal x3288=(sj5*x3280);
IkReal x3289=(sj5*x3281);
evalcond[0]=(((r22*x3281))+((r21*x3288))+(((-1.0)*x3285*x3286)));
evalcond[1]=((((-1.0)*r22*x3286))+((r21*x3289))+(((-1.0)*x3285*x3287)));
evalcond[2]=(sj0+(((-1.0)*x3283*x3287))+(((-1.0)*r02*x3286))+((r01*x3289)));
evalcond[3]=(((r02*x3281))+(((-1.0)*x3282))+(((-1.0)*x3283*x3286))+((r01*x3288)));
evalcond[4]=((((-1.0)*sj0))+((r11*x3288))+(((-1.0)*x3284*x3286))+((r12*x3281)));
evalcond[5]=((((-1.0)*r12*x3286))+(((-1.0)*x3282))+((r11*x3289))+(((-1.0)*x3284*x3287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3290=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3290.valid){
continue;
}
CheckValue<IkReal> x3291 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3290.value)))+(x3291.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3292=IKcos(j4);
IkReal x3293=IKsin(j4);
IkReal x3294=((1.0)*cj0);
IkReal x3295=(cj5*r00);
IkReal x3296=(cj5*r10);
IkReal x3297=(cj5*r20);
IkReal x3298=((1.0)*x3292);
IkReal x3299=((1.0)*x3293);
IkReal x3300=(sj5*x3292);
IkReal x3301=(sj5*x3293);
evalcond[0]=(((r21*x3300))+(((-1.0)*x3297*x3298))+((r22*x3293)));
evalcond[1]=(((r21*x3301))+(((-1.0)*r22*x3298))+(((-1.0)*x3297*x3299)));
evalcond[2]=(sj0+(((-1.0)*r02*x3298))+(((-1.0)*x3295*x3299))+((r01*x3301)));
evalcond[3]=((((-1.0)*x3294))+((r02*x3293))+(((-1.0)*x3295*x3298))+((r01*x3300)));
evalcond[4]=((((-1.0)*sj0))+((r11*x3300))+(((-1.0)*x3296*x3298))+((r12*x3293)));
evalcond[5]=((((-1.0)*r12*x3298))+(((-1.0)*x3294))+((r11*x3301))+(((-1.0)*x3296*x3299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((7.46268656716418)*px))+IKsqr(((-7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((7.46268656716418)*px), ((-7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.134)*(IKsin(j0)))));
evalcond[1]=((((-0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3302=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3302;
j4eval[1]=IKsign(x3302);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3303=((1.0)*cj5);
IkReal x3304=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3303)));
j4eval[0]=x3304;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3303)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3304);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3305=cj5*cj5;
IkReal x3306=((1.0)*r20);
IkReal x3307=(r01*r21);
IkReal x3308=(r21*sj5);
IkReal x3309=(((cj5*r01*r20*sj5))+((cj5*r00*x3308))+(((-1.0)*r02*r22))+(((-1.0)*x3307))+(((-1.0)*r00*x3305*x3306))+((x3305*x3307)));
j4eval[0]=x3309;
j4eval[1]=((IKabs((((cj0*x3308))+(((-1.0)*cj0*cj5*x3306)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3309);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3310=cj5*cj5;
IkReal x3311=((1.0)*r20);
IkReal x3312=(r01*r21);
IkReal x3313=(r21*sj5);
CheckValue<IkReal> x3314 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3313))+(((-1.0)*cj0*cj5*x3311)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3314.valid){
continue;
}
CheckValue<IkReal> x3315=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3313))+(((-1.0)*r00*x3310*x3311))+(((-1.0)*x3312))+((x3310*x3312)))),-1);
if(!x3315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3314.value)+(((1.5707963267949)*(x3315.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3316=IKcos(j4);
IkReal x3317=IKsin(j4);
IkReal x3318=(cj5*r00);
IkReal x3319=(cj5*r10);
IkReal x3320=(cj5*r20);
IkReal x3321=((1.0)*x3316);
IkReal x3322=((1.0)*x3317);
IkReal x3323=(sj5*x3316);
IkReal x3324=(sj5*x3317);
evalcond[0]=(((r22*x3317))+(((-1.0)*x3320*x3321))+((r21*x3323)));
evalcond[1]=((((-1.0)*x3320*x3322))+((r21*x3324))+(((-1.0)*r22*x3321)));
evalcond[2]=(cj0+((r01*x3323))+((r02*x3317))+(((-1.0)*x3318*x3321)));
evalcond[3]=(sj0+((r11*x3323))+(((-1.0)*x3319*x3321))+((r12*x3317)));
evalcond[4]=(sj0+(((-1.0)*r02*x3321))+((r01*x3324))+(((-1.0)*x3318*x3322)));
evalcond[5]=(((r11*x3324))+(((-1.0)*x3319*x3322))+(((-1.0)*r12*x3321))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3325=((1.0)*cj5);
CheckValue<IkReal> x3326=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3325)))),-1);
if(!x3326.valid){
continue;
}
CheckValue<IkReal> x3327 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3325)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3326.value)))+(x3327.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3328=IKcos(j4);
IkReal x3329=IKsin(j4);
IkReal x3330=(cj5*r00);
IkReal x3331=(cj5*r10);
IkReal x3332=(cj5*r20);
IkReal x3333=((1.0)*x3328);
IkReal x3334=((1.0)*x3329);
IkReal x3335=(sj5*x3328);
IkReal x3336=(sj5*x3329);
evalcond[0]=(((r22*x3329))+((r21*x3335))+(((-1.0)*x3332*x3333)));
evalcond[1]=(((r21*x3336))+(((-1.0)*r22*x3333))+(((-1.0)*x3332*x3334)));
evalcond[2]=((((-1.0)*x3330*x3333))+cj0+((r01*x3335))+((r02*x3329)));
evalcond[3]=(((r12*x3329))+sj0+(((-1.0)*x3331*x3333))+((r11*x3335)));
evalcond[4]=(sj0+(((-1.0)*x3330*x3334))+(((-1.0)*r02*x3333))+((r01*x3336)));
evalcond[5]=((((-1.0)*x3331*x3334))+((r11*x3336))+(((-1.0)*cj0))+(((-1.0)*r12*x3333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3337 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3337.valid){
continue;
}
CheckValue<IkReal> x3338=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3337.value)+(((1.5707963267949)*(x3338.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3339=IKcos(j4);
IkReal x3340=IKsin(j4);
IkReal x3341=(cj5*r00);
IkReal x3342=(cj5*r10);
IkReal x3343=(cj5*r20);
IkReal x3344=((1.0)*x3339);
IkReal x3345=((1.0)*x3340);
IkReal x3346=(sj5*x3339);
IkReal x3347=(sj5*x3340);
evalcond[0]=((((-1.0)*x3343*x3344))+((r22*x3340))+((r21*x3346)));
evalcond[1]=((((-1.0)*x3343*x3345))+((r21*x3347))+(((-1.0)*r22*x3344)));
evalcond[2]=(cj0+((r02*x3340))+(((-1.0)*x3341*x3344))+((r01*x3346)));
evalcond[3]=(sj0+(((-1.0)*x3342*x3344))+((r11*x3346))+((r12*x3340)));
evalcond[4]=(sj0+(((-1.0)*x3341*x3345))+(((-1.0)*r02*x3344))+((r01*x3347)));
evalcond[5]=((((-1.0)*r12*x3344))+(((-1.0)*x3342*x3345))+((r11*x3347))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3348=(sj1*sj2);
IkReal x3349=(cj1*cj2);
IkReal x3350=(r00*sj5);
IkReal x3351=(cj5*r01);
IkReal x3352=((212.5)*cj1);
IkReal x3353=((500.0)*px);
CheckValue<IkReal> x3354=IKPowWithIntegerCheck(((((67.0)*x3349))+(((-67.0)*x3348))),-1);
if(!x3354.valid){
continue;
}
CheckValue<IkReal> x3355=IKPowWithIntegerCheck(((((-1.0)*x3348))+x3349),-1);
if(!x3355.valid){
continue;
}
if( IKabs(((x3354.value)*(((((-1.0)*x3348*x3353))+(((246.0)*x3349*x3350))+(((246.0)*x3349*x3351))+(((-246.0)*x3348*x3350))+(((-246.0)*x3348*x3351))+((x3351*x3352))+((x3350*x3352))+((x3349*x3353)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3355.value)*((x3351+x3350)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3354.value)*(((((-1.0)*x3348*x3353))+(((246.0)*x3349*x3350))+(((246.0)*x3349*x3351))+(((-246.0)*x3348*x3350))+(((-246.0)*x3348*x3351))+((x3351*x3352))+((x3350*x3352))+((x3349*x3353))))))+IKsqr(((x3355.value)*((x3351+x3350))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3354.value)*(((((-1.0)*x3348*x3353))+(((246.0)*x3349*x3350))+(((246.0)*x3349*x3351))+(((-246.0)*x3348*x3350))+(((-246.0)*x3348*x3351))+((x3351*x3352))+((x3350*x3352))+((x3349*x3353))))), ((x3355.value)*((x3351+x3350))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3356=IKcos(j0);
IkReal x3357=IKsin(j0);
IkReal x3358=((0.1)*sj5);
IkReal x3359=(cj5*r11);
IkReal x3360=(cj1*cj2);
IkReal x3361=((1.0)*sj5);
IkReal x3362=(sj1*sj2);
IkReal x3363=(cj5*r01);
IkReal x3364=((0.425)*cj1);
IkReal x3365=((0.392)*x3356);
IkReal x3366=(x3357*x3362);
evalcond[0]=(((x3356*x3360))+(((-1.0)*x3363))+(((-1.0)*r00*x3361))+(((-1.0)*x3356*x3362)));
evalcond[1]=((((-1.0)*r10*x3361))+(((-1.0)*x3366))+((x3357*x3360))+(((-1.0)*x3359)));
evalcond[2]=((((-1.0)*x3360*x3365))+((x3362*x3365))+(((0.134)*x3357))+(((-0.1)*x3363))+(((-1.0)*px))+(((-1.0)*x3356*x3364))+(((-1.0)*r00*x3358)));
evalcond[3]=((((-0.1)*x3359))+(((-1.0)*x3357*x3364))+(((-1.0)*r10*x3358))+(((-1.0)*py))+(((-0.134)*x3356))+(((0.392)*x3366))+(((-0.392)*x3357*x3360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3367=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3367;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3367);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3368=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3368;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3368);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3369=((1.0)*cj5);
IkReal x3370=((((-1.0)*r21*x3369))+(((-1.0)*r20*sj5)));
j4eval[0]=x3370;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x3369))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x3369)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x3370);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3371=((-1.0)*r20);
IkReal x3373 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3373)==0){
continue;
}
IkReal x3372=pow(x3373,-0.5);
CheckValue<IkReal> x3374 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3371),IKFAST_ATAN2_MAGTHRESH);
if(!x3374.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3374.value));
IkReal gconst97=(r21*x3372);
IkReal gconst98=(x3371*x3372);
CheckValue<IkReal> x3375 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3375.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3375.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3376=((-1.0)*r20);
IkReal x3377=x3372;
CheckValue<IkReal> x3379 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3376),IKFAST_ATAN2_MAGTHRESH);
if(!x3379.valid){
continue;
}
IkReal x3378=((-1.0)*(x3379.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3378;
IkReal gconst96=x3378;
IkReal gconst97=(r21*x3377);
IkReal gconst98=(x3376*x3377);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3380=((-1.0)*r20);
IkReal x3381=x3372;
CheckValue<IkReal> x3383 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3380),IKFAST_ATAN2_MAGTHRESH);
if(!x3383.valid){
continue;
}
IkReal x3382=((-1.0)*(x3383.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3382;
IkReal gconst96=x3382;
IkReal gconst97=(r21*x3381);
IkReal gconst98=(x3380*x3381);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3384=((-1.0)*r20);
IkReal x3385=x3372;
CheckValue<IkReal> x3387 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3384),IKFAST_ATAN2_MAGTHRESH);
if(!x3387.valid){
continue;
}
IkReal x3386=((-1.0)*(x3387.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3386;
IkReal gconst96=x3386;
IkReal gconst97=(r21*x3385);
IkReal gconst98=(x3384*x3385);
IkReal x3388=((1.0)*(r22*r22));
CheckValue<IkReal> x3392=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3388))),-1);
if(!x3392.valid){
continue;
}
IkReal x3389=x3392.value;
IkReal x3390=((1.0)*x3389);
IkReal x3391=((((-1.0)*x3390*(r20*r20*r20*r20)))+(((-1.0)*x3390*(r21*r21*r21*r21)))+(((-2.0)*x3389*(r20*r20)*(r21*r21)))+(((-1.0)*x3388)));
j4eval[0]=x3391;
j4eval[1]=IKsign(x3391);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3393=(cj1*cj2);
IkReal x3394=(gconst98*r20);
IkReal x3395=(sj1*sj2);
IkReal x3396=(gconst97*r21);
CheckValue<IkReal> x3397=IKPowWithIntegerCheck(IKsign(((((2.0)*x3394*x3396))+(((-1.0)*(x3394*x3394)))+(((-1.0)*(x3396*x3396)))+(((-1.0)*(r22*r22))))),-1);
if(!x3397.valid){
continue;
}
CheckValue<IkReal> x3398 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3393))+((r22*x3395)))),IkReal((((x3393*x3394))+(((-1.0)*x3393*x3396))+(((-1.0)*x3394*x3395))+((x3395*x3396)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3398.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3397.value)))+(x3398.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3399=IKsin(j4);
IkReal x3400=IKcos(j4);
IkReal x3401=(gconst98*r10);
IkReal x3402=(gconst97*r21);
IkReal x3403=(cj2*sj1);
IkReal x3404=(gconst98*r20);
IkReal x3405=(gconst98*r00);
IkReal x3406=(cj1*sj2);
IkReal x3407=((1.0)*x3400);
IkReal x3408=((1.0)*x3399);
IkReal x3409=(gconst97*x3399);
IkReal x3410=(gconst97*x3400);
evalcond[0]=((((-1.0)*x3404*x3408))+((x3399*x3402))+(((-1.0)*r22*x3407)));
evalcond[1]=((((-1.0)*x3405*x3408))+sj0+(((-1.0)*r02*x3407))+((r01*x3409)));
evalcond[2]=((((-1.0)*x3401*x3408))+((r11*x3409))+(((-1.0)*r12*x3407))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x3404*x3407))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3399))+((x3400*x3402)));
evalcond[4]=((((-1.0)*x3405*x3407))+((r02*x3399))+((r01*x3410))+((cj0*x3403))+((cj0*x3406)));
evalcond[5]=((((-1.0)*x3401*x3407))+((sj0*x3406))+((sj0*x3403))+((r11*x3410))+((r12*x3399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3411 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*gconst98*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3411.valid){
continue;
}
CheckValue<IkReal> x3412=IKPowWithIntegerCheck(IKsign((((gconst98*r01))+((gconst97*r00)))),-1);
if(!x3412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3411.value)+(((1.5707963267949)*(x3412.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3413=IKsin(j4);
IkReal x3414=IKcos(j4);
IkReal x3415=(gconst98*r10);
IkReal x3416=(gconst97*r21);
IkReal x3417=(cj2*sj1);
IkReal x3418=(gconst98*r20);
IkReal x3419=(gconst98*r00);
IkReal x3420=(cj1*sj2);
IkReal x3421=((1.0)*x3414);
IkReal x3422=((1.0)*x3413);
IkReal x3423=(gconst97*x3413);
IkReal x3424=(gconst97*x3414);
evalcond[0]=(((x3413*x3416))+(((-1.0)*x3418*x3422))+(((-1.0)*r22*x3421)));
evalcond[1]=(sj0+(((-1.0)*x3419*x3422))+(((-1.0)*r02*x3421))+((r01*x3423)));
evalcond[2]=((((-1.0)*r12*x3421))+(((-1.0)*x3415*x3422))+(((-1.0)*cj0))+((r11*x3423)));
evalcond[3]=(((x3414*x3416))+((r22*x3413))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3418*x3421)));
evalcond[4]=(((r02*x3413))+((cj0*x3417))+(((-1.0)*x3419*x3421))+((cj0*x3420))+((r01*x3424)));
evalcond[5]=(((sj0*x3417))+((r12*x3413))+(((-1.0)*x3415*x3421))+((sj0*x3420))+((r11*x3424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3425 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*gconst98*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3425.valid){
continue;
}
CheckValue<IkReal> x3426=IKPowWithIntegerCheck(IKsign((((gconst98*r11))+((gconst97*r10)))),-1);
if(!x3426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3425.value)+(((1.5707963267949)*(x3426.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3427=IKsin(j4);
IkReal x3428=IKcos(j4);
IkReal x3429=(gconst98*r10);
IkReal x3430=(gconst97*r21);
IkReal x3431=(cj2*sj1);
IkReal x3432=(gconst98*r20);
IkReal x3433=(gconst98*r00);
IkReal x3434=(cj1*sj2);
IkReal x3435=((1.0)*x3428);
IkReal x3436=((1.0)*x3427);
IkReal x3437=(gconst97*x3427);
IkReal x3438=(gconst97*x3428);
evalcond[0]=((((-1.0)*x3432*x3436))+((x3427*x3430))+(((-1.0)*r22*x3435)));
evalcond[1]=(((r01*x3437))+sj0+(((-1.0)*x3433*x3436))+(((-1.0)*r02*x3435)));
evalcond[2]=((((-1.0)*r12*x3435))+((r11*x3437))+(((-1.0)*cj0))+(((-1.0)*x3429*x3436)));
evalcond[3]=(((x3428*x3430))+(((-1.0)*x3432*x3435))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3427)));
evalcond[4]=(((cj0*x3431))+((cj0*x3434))+((r01*x3438))+(((-1.0)*x3433*x3435))+((r02*x3427)));
evalcond[5]=(((r12*x3427))+((sj0*x3431))+((sj0*x3434))+((r11*x3438))+(((-1.0)*x3429*x3435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3439=((-1.0)*r21);
IkReal x3441 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3441)==0){
continue;
}
IkReal x3440=pow(x3441,-0.5);
CheckValue<IkReal> x3442 = IKatan2WithCheck(IkReal(x3439),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3442.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3442.value))));
IkReal gconst100=(x3439*x3440);
IkReal gconst101=((1.0)*r20*x3440);
CheckValue<IkReal> x3443 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3443.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3443.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3444=((-1.0)*r21);
CheckValue<IkReal> x3447 = IKatan2WithCheck(IkReal(x3444),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3447.valid){
continue;
}
IkReal x3445=((1.0)*(x3447.value));
IkReal x3446=x3440;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3445)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3445)));
IkReal gconst100=(x3444*x3446);
IkReal gconst101=((1.0)*r20*x3446);
IkReal x3448=r22*r22;
IkReal x3449=((1.0)*x3448);
CheckValue<IkReal> x3453=IKPowWithIntegerCheck(((-1.0)+x3448),-1);
if(!x3453.valid){
continue;
}
IkReal x3450=x3453.value;
if((((1.0)+(((-1.0)*x3449)))) < -0.00001)
continue;
IkReal x3451=IKsqrt(((1.0)+(((-1.0)*x3449))));
IkReal x3452=(sj0*x3450*x3451);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x3452+(((-1.0)*x3449*x3452))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3454=((-1.0)*r21);
CheckValue<IkReal> x3457 = IKatan2WithCheck(IkReal(x3454),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3457.valid){
continue;
}
IkReal x3455=((1.0)*(x3457.value));
IkReal x3456=x3440;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3455)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3455)));
IkReal gconst100=(x3454*x3456);
IkReal gconst101=((1.0)*r20*x3456);
IkReal x3458=r22*r22;
IkReal x3459=((1.0)*x3458);
CheckValue<IkReal> x3463=IKPowWithIntegerCheck(((-1.0)+x3458),-1);
if(!x3463.valid){
continue;
}
IkReal x3460=x3463.value;
if((((1.0)+(((-1.0)*x3459)))) < -0.00001)
continue;
IkReal x3461=IKsqrt(((1.0)+(((-1.0)*x3459))));
IkReal x3462=(cj0*x3460*x3461);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x3462+(((-1.0)*x3459*x3462))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3464=((-1.0)*r21);
CheckValue<IkReal> x3467 = IKatan2WithCheck(IkReal(x3464),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3467.valid){
continue;
}
IkReal x3465=((1.0)*(x3467.value));
IkReal x3466=x3440;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3465)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3465)));
IkReal gconst100=(x3464*x3466);
IkReal gconst101=((1.0)*r20*x3466);
IkReal x3468=r22*r22;
IkReal x3469=(cj0*r02);
IkReal x3470=(r12*sj0);
CheckValue<IkReal> x3474=IKPowWithIntegerCheck(((-1.0)+x3468),-1);
if(!x3474.valid){
continue;
}
IkReal x3471=x3474.value;
if((((1.0)+(((-1.0)*x3468)))) < -0.00001)
continue;
IkReal x3472=IKsqrt(((1.0)+(((-1.0)*x3468))));
IkReal x3473=((1.0)*r22*x3471*x3472);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x3469*x3473))+(((-1.0)*x3470*x3473)))))+(IKabs((x3470+x3469))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3475=((1.0)*gconst101);
CheckValue<IkReal> x3476=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r20))+(((-1.0)*r21*x3475)))),-1);
if(!x3476.valid){
continue;
}
CheckValue<IkReal> x3477 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x3475))+((cj0*gconst100*r01))+((gconst100*r11*sj0))+(((-1.0)*cj0*r00*x3475)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3476.value)))+(x3477.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3478=IKsin(j4);
IkReal x3479=IKcos(j4);
IkReal x3480=(cj2*sj1);
IkReal x3481=(gconst101*r20);
IkReal x3482=(gconst101*r10);
IkReal x3483=(gconst101*r00);
IkReal x3484=(cj1*sj2);
IkReal x3485=((1.0)*x3479);
IkReal x3486=((1.0)*x3478);
IkReal x3487=(gconst100*x3478);
IkReal x3488=(gconst100*x3479);
evalcond[0]=((((-1.0)*x3481*x3486))+(((-1.0)*r22*x3485))+((r21*x3487)));
evalcond[1]=((((-1.0)*x3483*x3486))+sj0+(((-1.0)*r02*x3485))+((r01*x3487)));
evalcond[2]=((((-1.0)*x3482*x3486))+(((-1.0)*r12*x3485))+((r11*x3487))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x3481*x3485))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x3488))+((r22*x3478)));
evalcond[4]=((((-1.0)*x3483*x3485))+((cj0*x3480))+((cj0*x3484))+((r01*x3488))+((r02*x3478)));
evalcond[5]=((((-1.0)*x3482*x3485))+((r12*x3478))+((sj0*x3484))+((sj0*x3480))+((r11*x3488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3489 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*gconst101*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3489.valid){
continue;
}
CheckValue<IkReal> x3490=IKPowWithIntegerCheck(IKsign((((gconst100*r00))+((gconst101*r01)))),-1);
if(!x3490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3489.value)+(((1.5707963267949)*(x3490.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3491=IKsin(j4);
IkReal x3492=IKcos(j4);
IkReal x3493=(cj2*sj1);
IkReal x3494=(gconst101*r20);
IkReal x3495=(gconst101*r10);
IkReal x3496=(gconst101*r00);
IkReal x3497=(cj1*sj2);
IkReal x3498=((1.0)*x3492);
IkReal x3499=((1.0)*x3491);
IkReal x3500=(gconst100*x3491);
IkReal x3501=(gconst100*x3492);
evalcond[0]=((((-1.0)*x3494*x3499))+(((-1.0)*r22*x3498))+((r21*x3500)));
evalcond[1]=(((r01*x3500))+(((-1.0)*r02*x3498))+sj0+(((-1.0)*x3496*x3499)));
evalcond[2]=((((-1.0)*r12*x3498))+((r11*x3500))+(((-1.0)*x3495*x3499))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x3494*x3498))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3491))+((r21*x3501)));
evalcond[4]=(((r01*x3501))+((cj0*x3493))+((cj0*x3497))+(((-1.0)*x3496*x3498))+((r02*x3491)));
evalcond[5]=(((r11*x3501))+(((-1.0)*x3495*x3498))+((sj0*x3497))+((sj0*x3493))+((r12*x3491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3502=IKPowWithIntegerCheck(IKsign((((gconst100*r10))+((gconst101*r11)))),-1);
if(!x3502.valid){
continue;
}
CheckValue<IkReal> x3503 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst101*r20*sj0))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3502.value)))+(x3503.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3504=IKsin(j4);
IkReal x3505=IKcos(j4);
IkReal x3506=(cj2*sj1);
IkReal x3507=(gconst101*r20);
IkReal x3508=(gconst101*r10);
IkReal x3509=(gconst101*r00);
IkReal x3510=(cj1*sj2);
IkReal x3511=((1.0)*x3505);
IkReal x3512=((1.0)*x3504);
IkReal x3513=(gconst100*x3504);
IkReal x3514=(gconst100*x3505);
evalcond[0]=(((r21*x3513))+(((-1.0)*r22*x3511))+(((-1.0)*x3507*x3512)));
evalcond[1]=((((-1.0)*r02*x3511))+sj0+(((-1.0)*x3509*x3512))+((r01*x3513)));
evalcond[2]=((((-1.0)*x3508*x3512))+((r11*x3513))+(((-1.0)*r12*x3511))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x3514))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3504))+(((-1.0)*x3507*x3511)));
evalcond[4]=(((cj0*x3506))+(((-1.0)*x3509*x3511))+((r01*x3514))+((cj0*x3510))+((r02*x3504)));
evalcond[5]=(((r12*x3504))+(((-1.0)*x3508*x3511))+((r11*x3514))+((sj0*x3506))+((sj0*x3510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3516 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3516)==0){
continue;
}
IkReal x3515=pow(x3516,-0.5);
CheckValue<IkReal> x3517 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3517.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3517.value));
IkReal gconst103=((-1.0)*r01*x3515);
IkReal gconst104=(r00*x3515);
CheckValue<IkReal> x3518 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3518.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3518.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3521 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3521.valid){
continue;
}
IkReal x3519=((-1.0)*(x3521.value));
IkReal x3520=x3515;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3519;
IkReal gconst102=x3519;
IkReal gconst103=((-1.0)*r01*x3520);
IkReal gconst104=(r00*x3520);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3522=((1.0)*gconst104);
CheckValue<IkReal> x3523=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r20))+(((-1.0)*r21*x3522)))),-1);
if(!x3523.valid){
continue;
}
CheckValue<IkReal> x3524 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x3522))+((cj0*gconst103*r01))+(((-1.0)*r10*sj0*x3522))+((gconst103*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3524.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3523.value)))+(x3524.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3525=IKsin(j4);
IkReal x3526=IKcos(j4);
IkReal x3527=(gconst103*r11);
IkReal x3528=(cj2*sj1);
IkReal x3529=(gconst104*r10);
IkReal x3530=(gconst104*r20);
IkReal x3531=(gconst104*r00);
IkReal x3532=(cj1*sj2);
IkReal x3533=((1.0)*x3526);
IkReal x3534=(gconst103*x3526);
IkReal x3535=(gconst103*x3525);
IkReal x3536=((1.0)*x3525);
evalcond[0]=(((r21*x3535))+(((-1.0)*x3530*x3536))+(((-1.0)*r22*x3533)));
evalcond[1]=(sj0+(((-1.0)*r02*x3533))+(((-1.0)*x3531*x3536))+((r01*x3535)));
evalcond[2]=(((x3525*x3527))+(((-1.0)*r12*x3533))+(((-1.0)*x3529*x3536))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x3534))+((r22*x3525))+(((-1.0)*x3530*x3533)));
evalcond[4]=(((cj0*x3528))+((r02*x3525))+(((-1.0)*x3531*x3533))+((r01*x3534))+((cj0*x3532)));
evalcond[5]=(((sj0*x3532))+((x3526*x3527))+(((-1.0)*x3529*x3533))+((r12*x3525))+((sj0*x3528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3537 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst103*r21*sj0))+(((-1.0)*gconst104*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3537.valid){
continue;
}
CheckValue<IkReal> x3538=IKPowWithIntegerCheck(IKsign((((gconst104*r11))+((gconst103*r10)))),-1);
if(!x3538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3537.value)+(((1.5707963267949)*(x3538.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3539=IKsin(j4);
IkReal x3540=IKcos(j4);
IkReal x3541=(gconst103*r11);
IkReal x3542=(cj2*sj1);
IkReal x3543=(gconst104*r10);
IkReal x3544=(gconst104*r20);
IkReal x3545=(gconst104*r00);
IkReal x3546=(cj1*sj2);
IkReal x3547=((1.0)*x3540);
IkReal x3548=(gconst103*x3540);
IkReal x3549=(gconst103*x3539);
IkReal x3550=((1.0)*x3539);
evalcond[0]=(((r21*x3549))+(((-1.0)*r22*x3547))+(((-1.0)*x3544*x3550)));
evalcond[1]=((((-1.0)*r02*x3547))+(((-1.0)*x3545*x3550))+sj0+((r01*x3549)));
evalcond[2]=(((x3539*x3541))+(((-1.0)*x3543*x3550))+(((-1.0)*r12*x3547))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x3539))+((r21*x3548))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3544*x3547)));
evalcond[4]=((((-1.0)*x3545*x3547))+((r02*x3539))+((r01*x3548))+((cj0*x3546))+((cj0*x3542)));
evalcond[5]=(((r12*x3539))+((sj0*x3546))+((sj0*x3542))+(((-1.0)*x3543*x3547))+((x3540*x3541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3552 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3552)==0){
continue;
}
IkReal x3551=pow(x3552,-0.5);
CheckValue<IkReal> x3553 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3553.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3553.value))));
IkReal gconst106=((1.0)*r01*x3551);
IkReal gconst107=((-1.0)*r00*x3551);
CheckValue<IkReal> x3554 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3554.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3554.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3557 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3557.valid){
continue;
}
IkReal x3555=((1.0)*(x3557.value));
IkReal x3556=x3551;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3555)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3555)));
IkReal gconst106=((1.0)*r01*x3556);
IkReal gconst107=((-1.0)*r00*x3556);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x3560 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3560.valid){
continue;
}
IkReal x3558=((1.0)*(x3560.value));
IkReal x3559=x3551;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3558)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3558)));
IkReal gconst106=((1.0)*r01*x3559);
IkReal gconst107=((-1.0)*r00*x3559);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3563 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3563.valid){
continue;
}
IkReal x3561=((1.0)*(x3563.value));
IkReal x3562=x3551;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3561)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3561)));
IkReal gconst106=((1.0)*r01*x3562);
IkReal gconst107=((-1.0)*r00*x3562);
IkReal x3564=r02*r02;
IkReal x3565=(r12*sj0);
IkReal x3566=x3551;
IkReal x3567=(cj0*x3566);
j4eval[0]=((IKabs(((((-1.0)*x3567))+((r02*x3565*x3566))+((x3564*x3567)))))+(IKabs((x3565+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3568=((1.0)*gconst107);
CheckValue<IkReal> x3569 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x3568))+((cj0*gconst106*r01))+(((-1.0)*cj0*r00*x3568))+((gconst106*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3569.valid){
continue;
}
CheckValue<IkReal> x3570=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3568))+(((-1.0)*gconst106*r20)))),-1);
if(!x3570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3569.value)+(((1.5707963267949)*(x3570.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3571=IKsin(j4);
IkReal x3572=IKcos(j4);
IkReal x3573=(gconst107*r10);
IkReal x3574=(gconst107*r00);
IkReal x3575=(gconst107*r20);
IkReal x3576=(cj2*sj1);
IkReal x3577=(cj1*sj2);
IkReal x3578=((1.0)*x3572);
IkReal x3579=(gconst106*x3572);
IkReal x3580=(gconst106*x3571);
IkReal x3581=((1.0)*x3571);
evalcond[0]=((((-1.0)*x3575*x3581))+(((-1.0)*r22*x3578))+((r21*x3580)));
evalcond[1]=((((-1.0)*x3574*x3581))+sj0+((r01*x3580))+(((-1.0)*r02*x3578)));
evalcond[2]=((((-1.0)*x3573*x3581))+((r11*x3580))+(((-1.0)*r12*x3578))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x3579))+(((-1.0)*x3575*x3578))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3571)));
evalcond[4]=(((r01*x3579))+((cj0*x3576))+((cj0*x3577))+(((-1.0)*x3574*x3578))+((r02*x3571)));
evalcond[5]=((((-1.0)*x3573*x3578))+((r12*x3571))+((sj0*x3576))+((sj0*x3577))+((r11*x3579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3582 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*gconst107*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3582.valid){
continue;
}
CheckValue<IkReal> x3583=IKPowWithIntegerCheck(IKsign((((gconst107*r01))+((gconst106*r00)))),-1);
if(!x3583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3582.value)+(((1.5707963267949)*(x3583.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3584=IKsin(j4);
IkReal x3585=IKcos(j4);
IkReal x3586=(gconst107*r10);
IkReal x3587=(gconst107*r00);
IkReal x3588=(gconst107*r20);
IkReal x3589=(cj2*sj1);
IkReal x3590=(cj1*sj2);
IkReal x3591=((1.0)*x3585);
IkReal x3592=(gconst106*x3585);
IkReal x3593=(gconst106*x3584);
IkReal x3594=((1.0)*x3584);
evalcond[0]=(((r21*x3593))+(((-1.0)*r22*x3591))+(((-1.0)*x3588*x3594)));
evalcond[1]=((((-1.0)*x3587*x3594))+sj0+(((-1.0)*r02*x3591))+((r01*x3593)));
evalcond[2]=(((r11*x3593))+(((-1.0)*x3586*x3594))+(((-1.0)*r12*x3591))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x3592))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3588*x3591))+((r22*x3584)));
evalcond[4]=((((-1.0)*x3587*x3591))+((r02*x3584))+((cj0*x3589))+((r01*x3592))+((cj0*x3590)));
evalcond[5]=(((sj0*x3590))+((r12*x3584))+((r11*x3592))+(((-1.0)*x3586*x3591))+((sj0*x3589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3595=IKPowWithIntegerCheck(IKsign((((gconst107*r11))+((gconst106*r10)))),-1);
if(!x3595.valid){
continue;
}
CheckValue<IkReal> x3596 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst106*r21*sj0))+(((-1.0)*gconst107*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3595.value)))+(x3596.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3597=IKsin(j4);
IkReal x3598=IKcos(j4);
IkReal x3599=(gconst107*r10);
IkReal x3600=(gconst107*r00);
IkReal x3601=(gconst107*r20);
IkReal x3602=(cj2*sj1);
IkReal x3603=(cj1*sj2);
IkReal x3604=((1.0)*x3598);
IkReal x3605=(gconst106*x3598);
IkReal x3606=(gconst106*x3597);
IkReal x3607=((1.0)*x3597);
evalcond[0]=((((-1.0)*x3601*x3607))+((r21*x3606))+(((-1.0)*r22*x3604)));
evalcond[1]=(sj0+(((-1.0)*r02*x3604))+(((-1.0)*x3600*x3607))+((r01*x3606)));
evalcond[2]=(((r11*x3606))+(((-1.0)*r12*x3604))+(((-1.0)*x3599*x3607))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3601*x3604))+((r21*x3605))+((r22*x3597)));
evalcond[4]=(((r02*x3597))+(((-1.0)*x3600*x3604))+((r01*x3605))+((cj0*x3602))+((cj0*x3603)));
evalcond[5]=(((r11*x3605))+((r12*x3597))+(((-1.0)*x3599*x3604))+((sj0*x3602))+((sj0*x3603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3608=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3608;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3608);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3609=((1.0)*cj5);
IkReal x3610=((((-1.0)*r21*x3609))+(((-1.0)*r20*sj5)));
j4eval[0]=x3610;
j4eval[1]=((IKabs(((((-1.0)*r10*x3609))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3610);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3611=cj5*cj5;
IkReal x3612=r01*r01;
IkReal x3613=(r01*sj5);
IkReal x3614=(cj5*r00);
IkReal x3615=((((-1.0)*(r02*r02)))+(((-1.0)*x3612))+(((2.0)*x3613*x3614))+((x3611*x3612))+(((-1.0)*x3611*(r00*r00))));
j4eval[0]=x3615;
j4eval[1]=IKsign(x3615);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x3614))+x3613))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3616=cj5*cj5;
IkReal x3617=r01*r01;
IkReal x3618=(r01*sj5);
IkReal x3619=(cj5*r00);
CheckValue<IkReal> x3620=IKPowWithIntegerCheck(IKsign(((((2.0)*x3618*x3619))+(((-1.0)*(r02*r02)))+(((-1.0)*x3617))+(((-1.0)*x3616*(r00*r00)))+((x3616*x3617)))),-1);
if(!x3620.valid){
continue;
}
CheckValue<IkReal> x3621 = IKatan2WithCheck(IkReal(((((-1.0)*x3619))+x3618)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3620.value)))+(x3621.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3622=IKcos(j4);
IkReal x3623=IKsin(j4);
IkReal x3624=(cj5*r00);
IkReal x3625=(cj5*r10);
IkReal x3626=(r21*sj5);
IkReal x3627=(cj5*r20);
IkReal x3628=((1.0)*x3622);
IkReal x3629=((1.0)*x3623);
IkReal x3630=(sj5*x3623);
IkReal x3631=(sj5*x3622);
evalcond[0]=((((-1.0)*x3624*x3628))+((r02*x3623))+((r01*x3631)));
evalcond[1]=((((-1.0)*x3627*x3629))+((x3623*x3626))+(((-1.0)*r22*x3628)));
evalcond[2]=(((r11*x3630))+(((-1.0)*x3625*x3629))+(((-1.0)*r12*x3628)));
evalcond[3]=((1.0)+(((-1.0)*x3624*x3629))+((r01*x3630))+(((-1.0)*r02*x3628)));
evalcond[4]=(((r11*x3631))+((cj2*sj1))+(((-1.0)*x3625*x3628))+((cj1*sj2))+((r12*x3623)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3627*x3628))+((x3622*x3626))+((r22*x3623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3632=((1.0)*cj5);
CheckValue<IkReal> x3633 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x3632))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3633.valid){
continue;
}
CheckValue<IkReal> x3634=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3632))+(((-1.0)*r20*sj5)))),-1);
if(!x3634.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3633.value)+(((1.5707963267949)*(x3634.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3635=IKcos(j4);
IkReal x3636=IKsin(j4);
IkReal x3637=(cj5*r00);
IkReal x3638=(cj5*r10);
IkReal x3639=(r21*sj5);
IkReal x3640=(cj5*r20);
IkReal x3641=((1.0)*x3635);
IkReal x3642=((1.0)*x3636);
IkReal x3643=(sj5*x3636);
IkReal x3644=(sj5*x3635);
evalcond[0]=(((r02*x3636))+((r01*x3644))+(((-1.0)*x3637*x3641)));
evalcond[1]=((((-1.0)*x3640*x3642))+((x3636*x3639))+(((-1.0)*r22*x3641)));
evalcond[2]=(((r11*x3643))+(((-1.0)*r12*x3641))+(((-1.0)*x3638*x3642)));
evalcond[3]=((1.0)+((r01*x3643))+(((-1.0)*x3637*x3642))+(((-1.0)*r02*x3641)));
evalcond[4]=(((cj2*sj1))+((r12*x3636))+((r11*x3644))+((cj1*sj2))+(((-1.0)*x3638*x3641)));
evalcond[5]=((((-1.0)*x3640*x3641))+((r22*x3636))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3635*x3639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3645 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3645.valid){
continue;
}
CheckValue<IkReal> x3646=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3645.value)+(((1.5707963267949)*(x3646.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3647=IKcos(j4);
IkReal x3648=IKsin(j4);
IkReal x3649=(cj5*r00);
IkReal x3650=(cj5*r10);
IkReal x3651=(r21*sj5);
IkReal x3652=(cj5*r20);
IkReal x3653=((1.0)*x3647);
IkReal x3654=((1.0)*x3648);
IkReal x3655=(sj5*x3648);
IkReal x3656=(sj5*x3647);
evalcond[0]=(((r02*x3648))+(((-1.0)*x3649*x3653))+((r01*x3656)));
evalcond[1]=(((x3648*x3651))+(((-1.0)*r22*x3653))+(((-1.0)*x3652*x3654)));
evalcond[2]=(((r11*x3655))+(((-1.0)*x3650*x3654))+(((-1.0)*r12*x3653)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3653))+(((-1.0)*x3649*x3654))+((r01*x3655)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x3648))+((r11*x3656))+(((-1.0)*x3650*x3653)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x3647*x3651))+((r22*x3648))+(((-1.0)*x3652*x3653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3657=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3657;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3657);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3658=((1.0)*cj5);
IkReal x3659=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3658)));
j4eval[0]=x3659;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x3658)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3659);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3660=cj5*cj5;
IkReal x3661=r01*r01;
IkReal x3662=(cj5*r00);
IkReal x3663=(r01*sj5);
IkReal x3664=(x3661+(((-2.0)*x3662*x3663))+(((-1.0)*x3660*x3661))+(r02*r02)+((x3660*(r00*r00))));
j4eval[0]=x3664;
j4eval[1]=IKsign(x3664);
j4eval[2]=((IKabs(((((-1.0)*x3662))+x3663)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3665=cj5*cj5;
IkReal x3666=r01*r01;
IkReal x3667=(r01*sj5);
IkReal x3668=(cj5*r00);
CheckValue<IkReal> x3669=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3665*x3666))+((x3665*(r00*r00)))+x3666+(((-2.0)*x3667*x3668))+(r02*r02))),-1);
if(!x3669.valid){
continue;
}
CheckValue<IkReal> x3670 = IKatan2WithCheck(IkReal(((((-1.0)*x3668))+x3667)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3669.value)))+(x3670.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3671=IKcos(j4);
IkReal x3672=IKsin(j4);
IkReal x3673=(cj5*r00);
IkReal x3674=(cj5*r10);
IkReal x3675=(r21*sj5);
IkReal x3676=((1.0)*cj2);
IkReal x3677=(cj5*r20);
IkReal x3678=((1.0)*x3671);
IkReal x3679=((1.0)*x3672);
IkReal x3680=(sj5*x3672);
IkReal x3681=(sj5*x3671);
evalcond[0]=(((r01*x3681))+(((-1.0)*x3673*x3678))+((r02*x3672)));
evalcond[1]=((((-1.0)*r22*x3678))+((x3672*x3675))+(((-1.0)*x3677*x3679)));
evalcond[2]=((((-1.0)*r12*x3678))+((r11*x3680))+(((-1.0)*x3674*x3679)));
evalcond[3]=((-1.0)+((r01*x3680))+(((-1.0)*x3673*x3679))+(((-1.0)*r02*x3678)));
evalcond[4]=(((sj1*sj2))+((x3671*x3675))+((r22*x3672))+(((-1.0)*cj1*x3676))+(((-1.0)*x3677*x3678)));
evalcond[5]=(((r12*x3672))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3676))+((r11*x3681))+(((-1.0)*x3674*x3678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3682=((1.0)*cj5);
CheckValue<IkReal> x3683=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3682)))),-1);
if(!x3683.valid){
continue;
}
CheckValue<IkReal> x3684 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3682))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3683.value)))+(x3684.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3685=IKcos(j4);
IkReal x3686=IKsin(j4);
IkReal x3687=(cj5*r00);
IkReal x3688=(cj5*r10);
IkReal x3689=(r21*sj5);
IkReal x3690=((1.0)*cj2);
IkReal x3691=(cj5*r20);
IkReal x3692=((1.0)*x3685);
IkReal x3693=((1.0)*x3686);
IkReal x3694=(sj5*x3686);
IkReal x3695=(sj5*x3685);
evalcond[0]=(((r01*x3695))+(((-1.0)*x3687*x3692))+((r02*x3686)));
evalcond[1]=((((-1.0)*r22*x3692))+((x3686*x3689))+(((-1.0)*x3691*x3693)));
evalcond[2]=((((-1.0)*x3688*x3693))+(((-1.0)*r12*x3692))+((r11*x3694)));
evalcond[3]=((-1.0)+((r01*x3694))+(((-1.0)*x3687*x3693))+(((-1.0)*r02*x3692)));
evalcond[4]=((((-1.0)*cj1*x3690))+((sj1*sj2))+((x3685*x3689))+((r22*x3686))+(((-1.0)*x3691*x3692)));
evalcond[5]=((((-1.0)*x3688*x3692))+(((-1.0)*sj1*x3690))+(((-1.0)*cj1*sj2))+((r12*x3686))+((r11*x3695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3696=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3696.valid){
continue;
}
CheckValue<IkReal> x3697 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3696.value)))+(x3697.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3698=IKcos(j4);
IkReal x3699=IKsin(j4);
IkReal x3700=(cj5*r00);
IkReal x3701=(cj5*r10);
IkReal x3702=(r21*sj5);
IkReal x3703=((1.0)*cj2);
IkReal x3704=(cj5*r20);
IkReal x3705=((1.0)*x3698);
IkReal x3706=((1.0)*x3699);
IkReal x3707=(sj5*x3699);
IkReal x3708=(sj5*x3698);
evalcond[0]=(((r01*x3708))+((r02*x3699))+(((-1.0)*x3700*x3705)));
evalcond[1]=(((x3699*x3702))+(((-1.0)*x3704*x3706))+(((-1.0)*r22*x3705)));
evalcond[2]=(((r11*x3707))+(((-1.0)*x3701*x3706))+(((-1.0)*r12*x3705)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3705))+((r01*x3707))+(((-1.0)*x3700*x3706)));
evalcond[4]=(((x3698*x3702))+(((-1.0)*cj1*x3703))+(((-1.0)*x3704*x3705))+((sj1*sj2))+((r22*x3699)));
evalcond[5]=(((r11*x3708))+(((-1.0)*x3701*x3705))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3703))+((r12*x3699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3710 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3710)==0){
continue;
}
IkReal x3709=pow(x3710,-0.5);
CheckValue<IkReal> x3711 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3711.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3711.value));
IkReal gconst109=((-1.0)*r11*x3709);
IkReal gconst110=(r10*x3709);
CheckValue<IkReal> x3712 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3712.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3712.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3715 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3715.valid){
continue;
}
IkReal x3713=((-1.0)*(x3715.value));
IkReal x3714=x3709;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3713;
IkReal gconst108=x3713;
IkReal gconst109=((-1.0)*r11*x3714);
IkReal gconst110=(r10*x3714);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3716=((1.0)*gconst110);
CheckValue<IkReal> x3717=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r20))+(((-1.0)*r21*x3716)))),-1);
if(!x3717.valid){
continue;
}
CheckValue<IkReal> x3718 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x3716))+(((-1.0)*r10*sj0*x3716))+((cj0*gconst109*r01))+((gconst109*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3717.value)))+(x3718.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3719=IKsin(j4);
IkReal x3720=IKcos(j4);
IkReal x3721=(gconst109*r21);
IkReal x3722=(cj2*sj1);
IkReal x3723=(cj1*sj2);
IkReal x3724=((1.0)*x3720);
IkReal x3725=(gconst109*x3719);
IkReal x3726=(gconst109*x3720);
IkReal x3727=((1.0)*gconst110*x3719);
evalcond[0]=((((-1.0)*r22*x3724))+((x3719*x3721))+(((-1.0)*r20*x3727)));
evalcond[1]=(sj0+((r01*x3725))+(((-1.0)*r00*x3727))+(((-1.0)*r02*x3724)));
evalcond[2]=((((-1.0)*r12*x3724))+((r11*x3725))+(((-1.0)*r10*x3727))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst110*r20*x3724))+((r22*x3719))+((x3720*x3721)));
evalcond[4]=((((-1.0)*gconst110*r00*x3724))+((r01*x3726))+((cj0*x3723))+((cj0*x3722))+((r02*x3719)));
evalcond[5]=((((-1.0)*gconst110*r10*x3724))+((r12*x3719))+((r11*x3726))+((sj0*x3723))+((sj0*x3722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3728=IKPowWithIntegerCheck(IKsign((((gconst109*r00))+((gconst110*r01)))),-1);
if(!x3728.valid){
continue;
}
CheckValue<IkReal> x3729 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst109*r21))+(((-1.0)*cj0*gconst110*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3728.value)))+(x3729.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3730=IKsin(j4);
IkReal x3731=IKcos(j4);
IkReal x3732=(gconst109*r21);
IkReal x3733=(cj2*sj1);
IkReal x3734=(cj1*sj2);
IkReal x3735=((1.0)*x3731);
IkReal x3736=(gconst109*x3730);
IkReal x3737=(gconst109*x3731);
IkReal x3738=((1.0)*gconst110*x3730);
evalcond[0]=(((x3730*x3732))+(((-1.0)*r20*x3738))+(((-1.0)*r22*x3735)));
evalcond[1]=(sj0+((r01*x3736))+(((-1.0)*r00*x3738))+(((-1.0)*r02*x3735)));
evalcond[2]=((((-1.0)*r12*x3735))+((r11*x3736))+(((-1.0)*r10*x3738))+(((-1.0)*cj0)));
evalcond[3]=(((x3731*x3732))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3730))+(((-1.0)*gconst110*r20*x3735)));
evalcond[4]=((((-1.0)*gconst110*r00*x3735))+((r01*x3737))+((r02*x3730))+((cj0*x3733))+((cj0*x3734)));
evalcond[5]=((((-1.0)*gconst110*r10*x3735))+((sj0*x3733))+((sj0*x3734))+((r11*x3737))+((r12*x3730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3740 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3740)==0){
continue;
}
IkReal x3739=pow(x3740,-0.5);
CheckValue<IkReal> x3741 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3741.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3741.value))));
IkReal gconst112=((1.0)*r11*x3739);
IkReal gconst113=((-1.0)*r10*x3739);
CheckValue<IkReal> x3742 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3742.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3742.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3745 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3745.valid){
continue;
}
IkReal x3743=((1.0)*(x3745.value));
IkReal x3744=x3739;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3743)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3743)));
IkReal gconst112=((1.0)*r11*x3744);
IkReal gconst113=((-1.0)*r10*x3744);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3748 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3748.valid){
continue;
}
IkReal x3746=((1.0)*(x3748.value));
IkReal x3747=x3739;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3746)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3746)));
IkReal gconst112=((1.0)*r11*x3747);
IkReal gconst113=((-1.0)*r10*x3747);
IkReal x3749=r12*r12;
IkReal x3750=(cj0*r02);
IkReal x3751=x3739;
IkReal x3752=(sj0*x3751);
j4eval[0]=((IKabs((x3750+((r12*sj0)))))+(IKabs((((r12*x3750*x3751))+(((-1.0)*x3752))+((x3749*x3752))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x3755 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3755.valid){
continue;
}
IkReal x3753=((1.0)*(x3755.value));
IkReal x3754=x3739;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3753)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3753)));
IkReal gconst112=((1.0)*r11*x3754);
IkReal gconst113=((-1.0)*r10*x3754);
IkReal x3756=r12*r12;
IkReal x3757=(sj1*sj2);
IkReal x3758=((1.0)+(((-1.0)*x3756)));
IkReal x3759=((1.0)*cj1*cj2);
CheckValue<IkReal> x3766=IKPowWithIntegerCheck(x3758,-1);
if(!x3766.valid){
continue;
}
IkReal x3760=x3766.value;
CheckValue<IkReal> x3767=IKPowWithIntegerCheck(((-1.0)+x3756),-1);
if(!x3767.valid){
continue;
}
IkReal x3761=x3767.value;
IkReal x3762=((1.0)*x3760);
if((x3758) < -0.00001)
continue;
IkReal x3763=IKsqrt(x3758);
IkReal x3764=(r12*r22*x3761*x3763);
IkReal x3765=((((-2.0)*r10*r11*r20*r21*x3760))+(((-1.0)*x3762*(r11*r11)*(r21*r21)))+(((-1.0)*x3762*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22))));
j4eval[0]=x3765;
j4eval[1]=((IKabs(((((-1.0)*r22*x3759))+((r22*x3757)))))+(IKabs(((((-1.0)*x3759*x3764))+((x3757*x3764))))));
j4eval[2]=IKsign(x3765);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3768=(sj1*sj2);
IkReal x3769=(gconst112*r21);
IkReal x3770=(gconst113*r20);
IkReal x3771=(cj1*cj2);
CheckValue<IkReal> x3772 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3771))+((r22*x3768)))),IkReal(((((-1.0)*x3769*x3771))+((x3768*x3769))+(((-1.0)*x3768*x3770))+((x3770*x3771)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3772.valid){
continue;
}
CheckValue<IkReal> x3773=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3769*x3769)))+(((-1.0)*(r22*r22)))+(((2.0)*x3769*x3770))+(((-1.0)*(x3770*x3770))))),-1);
if(!x3773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3772.value)+(((1.5707963267949)*(x3773.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3774=IKsin(j4);
IkReal x3775=IKcos(j4);
IkReal x3776=(cj2*sj1);
IkReal x3777=(gconst113*r20);
IkReal x3778=(gconst112*r21);
IkReal x3779=(gconst113*r00);
IkReal x3780=(gconst113*r10);
IkReal x3781=(cj1*sj2);
IkReal x3782=((1.0)*x3775);
IkReal x3783=((1.0)*x3774);
IkReal x3784=(gconst112*x3775);
IkReal x3785=(gconst112*x3774);
evalcond[0]=((((-1.0)*x3777*x3783))+(((-1.0)*r22*x3782))+((x3774*x3778)));
evalcond[1]=(sj0+(((-1.0)*x3779*x3783))+(((-1.0)*r02*x3782))+((r01*x3785)));
evalcond[2]=((((-1.0)*x3780*x3783))+(((-1.0)*r12*x3782))+(((-1.0)*cj0))+((r11*x3785)));
evalcond[3]=((((-1.0)*x3777*x3782))+((r22*x3774))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3775*x3778)));
evalcond[4]=(((r02*x3774))+((cj0*x3776))+(((-1.0)*x3779*x3782))+((r01*x3784))+((cj0*x3781)));
evalcond[5]=(((sj0*x3776))+(((-1.0)*x3780*x3782))+((r12*x3774))+((sj0*x3781))+((r11*x3784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3786=((1.0)*gconst113);
CheckValue<IkReal> x3787 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst112*r01))+(((-1.0)*r10*sj0*x3786))+(((-1.0)*cj0*r00*x3786))+((gconst112*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3787.valid){
continue;
}
CheckValue<IkReal> x3788=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r20))+(((-1.0)*r21*x3786)))),-1);
if(!x3788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3787.value)+(((1.5707963267949)*(x3788.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3789=IKsin(j4);
IkReal x3790=IKcos(j4);
IkReal x3791=(cj2*sj1);
IkReal x3792=(gconst113*r20);
IkReal x3793=(gconst112*r21);
IkReal x3794=(gconst113*r00);
IkReal x3795=(gconst113*r10);
IkReal x3796=(cj1*sj2);
IkReal x3797=((1.0)*x3790);
IkReal x3798=((1.0)*x3789);
IkReal x3799=(gconst112*x3790);
IkReal x3800=(gconst112*x3789);
evalcond[0]=(((x3789*x3793))+(((-1.0)*r22*x3797))+(((-1.0)*x3792*x3798)));
evalcond[1]=(((r01*x3800))+sj0+(((-1.0)*r02*x3797))+(((-1.0)*x3794*x3798)));
evalcond[2]=((((-1.0)*r12*x3797))+((r11*x3800))+(((-1.0)*x3795*x3798))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x3789))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3792*x3797))+((x3790*x3793)));
evalcond[4]=(((r02*x3789))+((cj0*x3791))+((cj0*x3796))+((r01*x3799))+(((-1.0)*x3794*x3797)));
evalcond[5]=(((r12*x3789))+((sj0*x3791))+((sj0*x3796))+(((-1.0)*x3795*x3797))+((r11*x3799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3801=IKPowWithIntegerCheck(IKsign((((gconst112*r00))+((gconst113*r01)))),-1);
if(!x3801.valid){
continue;
}
CheckValue<IkReal> x3802 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst113*r20))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3801.value)))+(x3802.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3803=IKsin(j4);
IkReal x3804=IKcos(j4);
IkReal x3805=(cj2*sj1);
IkReal x3806=(gconst113*r20);
IkReal x3807=(gconst112*r21);
IkReal x3808=(gconst113*r00);
IkReal x3809=(gconst113*r10);
IkReal x3810=(cj1*sj2);
IkReal x3811=((1.0)*x3804);
IkReal x3812=((1.0)*x3803);
IkReal x3813=(gconst112*x3804);
IkReal x3814=(gconst112*x3803);
evalcond[0]=((((-1.0)*r22*x3811))+((x3803*x3807))+(((-1.0)*x3806*x3812)));
evalcond[1]=(sj0+(((-1.0)*r02*x3811))+(((-1.0)*x3808*x3812))+((r01*x3814)));
evalcond[2]=((((-1.0)*r12*x3811))+((r11*x3814))+(((-1.0)*x3809*x3812))+(((-1.0)*cj0)));
evalcond[3]=(((x3804*x3807))+((r22*x3803))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3806*x3811)));
evalcond[4]=((((-1.0)*x3808*x3811))+((r02*x3803))+((cj0*x3810))+((cj0*x3805))+((r01*x3813)));
evalcond[5]=(((r11*x3813))+((r12*x3803))+(((-1.0)*x3809*x3811))+((sj0*x3810))+((sj0*x3805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3815=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3815;
j4eval[1]=IKsign(x3815);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3816=((1.0)*cj5);
IkReal x3817=((((-1.0)*r21*x3816))+(((-1.0)*r20*sj5)));
j4eval[0]=x3817;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3816))))));
j4eval[2]=IKsign(x3817);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3818=cj5*cj5;
IkReal x3819=r11*r11;
IkReal x3820=(r11*sj5);
IkReal x3821=(cj5*r10);
IkReal x3822=((r12*r12)+(((-2.0)*x3820*x3821))+x3819+(((-1.0)*x3818*x3819))+((x3818*(r10*r10))));
j4eval[0]=x3822;
j4eval[1]=IKsign(x3822);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3821))+x3820))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3823=cj5*cj5;
IkReal x3824=r11*r11;
IkReal x3825=(cj5*r10);
IkReal x3826=(r11*sj5);
CheckValue<IkReal> x3827 = IKatan2WithCheck(IkReal(((((-1.0)*x3825))+x3826)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3827.valid){
continue;
}
CheckValue<IkReal> x3828=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x3823*x3824))+x3824+((x3823*(r10*r10)))+(((-2.0)*x3825*x3826)))),-1);
if(!x3828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3827.value)+(((1.5707963267949)*(x3828.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3829=IKcos(j4);
IkReal x3830=IKsin(j4);
IkReal x3831=(cj5*r00);
IkReal x3832=(cj5*r10);
IkReal x3833=(r21*sj5);
IkReal x3834=(cj5*r20);
IkReal x3835=((1.0)*x3829);
IkReal x3836=((1.0)*x3830);
IkReal x3837=(sj5*x3830);
IkReal x3838=(sj5*x3829);
evalcond[0]=((((-1.0)*x3832*x3835))+((r12*x3830))+((r11*x3838)));
evalcond[1]=((((-1.0)*r22*x3835))+(((-1.0)*x3834*x3836))+((x3830*x3833)));
evalcond[2]=((((-1.0)*x3831*x3836))+((r01*x3837))+(((-1.0)*r02*x3835)));
evalcond[3]=((-1.0)+(((-1.0)*x3832*x3836))+(((-1.0)*r12*x3835))+((r11*x3837)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3831*x3835))+((r02*x3830))+((cj1*sj2))+((r01*x3838)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x3829*x3833))+(((-1.0)*x3834*x3835))+((r22*x3830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3839=((1.0)*cj5);
CheckValue<IkReal> x3840=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3839))+(((-1.0)*r20*sj5)))),-1);
if(!x3840.valid){
continue;
}
CheckValue<IkReal> x3841 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3839)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3841.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3840.value)))+(x3841.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3842=IKcos(j4);
IkReal x3843=IKsin(j4);
IkReal x3844=(cj5*r00);
IkReal x3845=(cj5*r10);
IkReal x3846=(r21*sj5);
IkReal x3847=(cj5*r20);
IkReal x3848=((1.0)*x3842);
IkReal x3849=((1.0)*x3843);
IkReal x3850=(sj5*x3843);
IkReal x3851=(sj5*x3842);
evalcond[0]=(((r12*x3843))+((r11*x3851))+(((-1.0)*x3845*x3848)));
evalcond[1]=(((x3843*x3846))+(((-1.0)*r22*x3848))+(((-1.0)*x3847*x3849)));
evalcond[2]=((((-1.0)*r02*x3848))+(((-1.0)*x3844*x3849))+((r01*x3850)));
evalcond[3]=((-1.0)+((r11*x3850))+(((-1.0)*x3845*x3849))+(((-1.0)*r12*x3848)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3844*x3848))+((cj1*sj2))+((r01*x3851))+((r02*x3843)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x3842*x3846))+((r22*x3843))+(((-1.0)*x3847*x3848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3852 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3852.valid){
continue;
}
CheckValue<IkReal> x3853=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3852.value)+(((1.5707963267949)*(x3853.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3854=IKcos(j4);
IkReal x3855=IKsin(j4);
IkReal x3856=(cj5*r00);
IkReal x3857=(cj5*r10);
IkReal x3858=(r21*sj5);
IkReal x3859=(cj5*r20);
IkReal x3860=((1.0)*x3854);
IkReal x3861=((1.0)*x3855);
IkReal x3862=(sj5*x3855);
IkReal x3863=(sj5*x3854);
evalcond[0]=(((r11*x3863))+(((-1.0)*x3857*x3860))+((r12*x3855)));
evalcond[1]=((((-1.0)*x3859*x3861))+((x3855*x3858))+(((-1.0)*r22*x3860)));
evalcond[2]=((((-1.0)*r02*x3860))+((r01*x3862))+(((-1.0)*x3856*x3861)));
evalcond[3]=((-1.0)+((r11*x3862))+(((-1.0)*x3857*x3861))+(((-1.0)*r12*x3860)));
evalcond[4]=(((r02*x3855))+((cj2*sj1))+((cj1*sj2))+((r01*x3863))+(((-1.0)*x3856*x3860)));
evalcond[5]=(((x3854*x3858))+(((-1.0)*x3859*x3860))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3864=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3864;
j4eval[1]=IKsign(x3864);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3865=((1.0)*cj5);
IkReal x3866=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3865)));
j4eval[0]=x3866;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x3865))+((r21*sj5))))));
j4eval[2]=IKsign(x3866);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3867=(sj1*sj2);
IkReal x3868=(cj5*r10);
IkReal x3869=(r11*sj5);
IkReal x3870=(cj1*cj2);
IkReal x3871=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3871;
j4eval[1]=((IKabs(((((-1.0)*x3869*x3870))+(((-1.0)*x3867*x3868))+((x3867*x3869))+((x3868*x3870)))))+(IKabs((((r12*x3870))+(((-1.0)*r12*x3867))))));
j4eval[2]=IKsign(x3871);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3872=(sj1*sj2);
IkReal x3873=(cj5*r10);
IkReal x3874=(r11*sj5);
IkReal x3875=(cj1*cj2);
CheckValue<IkReal> x3876=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3876.valid){
continue;
}
CheckValue<IkReal> x3877 = IKatan2WithCheck(IkReal((((x3872*x3874))+((x3873*x3875))+(((-1.0)*x3872*x3873))+(((-1.0)*x3874*x3875)))),IkReal(((((-1.0)*r12*x3872))+((r12*x3875)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3876.value)))+(x3877.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3878=IKcos(j4);
IkReal x3879=IKsin(j4);
IkReal x3880=(cj5*r00);
IkReal x3881=(cj5*r10);
IkReal x3882=(r21*sj5);
IkReal x3883=((1.0)*cj2);
IkReal x3884=(cj5*r20);
IkReal x3885=((1.0)*x3878);
IkReal x3886=((1.0)*x3879);
IkReal x3887=(sj5*x3879);
IkReal x3888=(sj5*x3878);
evalcond[0]=(((r11*x3888))+((r12*x3879))+(((-1.0)*x3881*x3885)));
evalcond[1]=((((-1.0)*r22*x3885))+((x3879*x3882))+(((-1.0)*x3884*x3886)));
evalcond[2]=((((-1.0)*r02*x3885))+(((-1.0)*x3880*x3886))+((r01*x3887)));
evalcond[3]=((1.0)+((r11*x3887))+(((-1.0)*r12*x3885))+(((-1.0)*x3881*x3886)));
evalcond[4]=((((-1.0)*cj1*x3883))+((x3878*x3882))+((sj1*sj2))+((r22*x3879))+(((-1.0)*x3884*x3885)));
evalcond[5]=((((-1.0)*sj1*x3883))+(((-1.0)*x3880*x3885))+(((-1.0)*cj1*sj2))+((r01*x3888))+((r02*x3879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3889=((1.0)*cj5);
CheckValue<IkReal> x3890=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3889)))),-1);
if(!x3890.valid){
continue;
}
CheckValue<IkReal> x3891 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3889)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3890.value)))+(x3891.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3892=IKcos(j4);
IkReal x3893=IKsin(j4);
IkReal x3894=(cj5*r00);
IkReal x3895=(cj5*r10);
IkReal x3896=(r21*sj5);
IkReal x3897=((1.0)*cj2);
IkReal x3898=(cj5*r20);
IkReal x3899=((1.0)*x3892);
IkReal x3900=((1.0)*x3893);
IkReal x3901=(sj5*x3893);
IkReal x3902=(sj5*x3892);
evalcond[0]=((((-1.0)*x3895*x3899))+((r12*x3893))+((r11*x3902)));
evalcond[1]=((((-1.0)*r22*x3899))+((x3893*x3896))+(((-1.0)*x3898*x3900)));
evalcond[2]=(((r01*x3901))+(((-1.0)*x3894*x3900))+(((-1.0)*r02*x3899)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3899))+((r11*x3901))+(((-1.0)*x3895*x3900)));
evalcond[4]=((((-1.0)*x3898*x3899))+((sj1*sj2))+((x3892*x3896))+((r22*x3893))+(((-1.0)*cj1*x3897)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r01*x3902))+(((-1.0)*sj1*x3897))+(((-1.0)*x3894*x3899))+((r02*x3893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3903=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3903.valid){
continue;
}
CheckValue<IkReal> x3904 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3903.value)))+(x3904.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3905=IKcos(j4);
IkReal x3906=IKsin(j4);
IkReal x3907=(cj5*r00);
IkReal x3908=(cj5*r10);
IkReal x3909=(r21*sj5);
IkReal x3910=((1.0)*cj2);
IkReal x3911=(cj5*r20);
IkReal x3912=((1.0)*x3905);
IkReal x3913=((1.0)*x3906);
IkReal x3914=(sj5*x3906);
IkReal x3915=(sj5*x3905);
evalcond[0]=((((-1.0)*x3908*x3912))+((r12*x3906))+((r11*x3915)));
evalcond[1]=((((-1.0)*x3911*x3913))+((x3906*x3909))+(((-1.0)*r22*x3912)));
evalcond[2]=((((-1.0)*r02*x3912))+(((-1.0)*x3907*x3913))+((r01*x3914)));
evalcond[3]=((1.0)+(((-1.0)*x3908*x3913))+((r11*x3914))+(((-1.0)*r12*x3912)));
evalcond[4]=((((-1.0)*x3911*x3912))+((r22*x3906))+((x3905*x3909))+((sj1*sj2))+(((-1.0)*cj1*x3910)));
evalcond[5]=((((-1.0)*sj1*x3910))+(((-1.0)*cj1*sj2))+(((-1.0)*x3907*x3912))+((r01*x3915))+((r02*x3906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3916=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3916);
rxp0_2=(py*r00);
rxp1_0=(r21*x3916);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3917=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3917);
rxp0_2=(py*r00);
rxp1_0=(r21*x3917);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3918=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3918);
rxp0_2=(py*r00);
rxp1_0=(r21*x3918);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3921=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x3921.valid){
continue;
}
IkReal x3919=x3921.value;
IkReal x3920=((1.0)*cj0*x3919);
cj4array[0]=((((-1.0)*cj2*sj1*x3920))+(((-1.0)*cj1*sj2*x3920)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3922=IKsin(j4);
IkReal x3923=IKcos(j4);
IkReal x3924=(r21*sj5);
IkReal x3925=((1.0)*x3923);
IkReal x3926=((1.0)*cj5*x3922);
evalcond[0]=(r12*x3922);
evalcond[1]=((((-1.0)*r12*x3925))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x3926))+((x3922*x3924)));
evalcond[3]=(((r01*sj5*x3922))+(((-1.0)*r00*x3926)));
evalcond[4]=((((-1.0)*cj5*r20*x3925))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3923*x3924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3928=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x3928.valid){
continue;
}
IkReal x3927=x3928.value;
cj4array[0]=(((cj1*cj2*x3927))+(((-1.0)*sj1*sj2*x3927)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3929=IKsin(j4);
IkReal x3930=IKcos(j4);
IkReal x3931=(r01*sj5);
IkReal x3932=((1.0)*cj5*r00);
evalcond[0]=(r12*x3929);
evalcond[1]=((((-1.0)*r12*x3930))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*cj5*r20*x3929))+((r21*sj5*x3929)));
evalcond[3]=((((-1.0)*x3929*x3932))+((x3929*x3931)));
evalcond[4]=(((cj0*cj2*sj1))+(((-1.0)*x3930*x3932))+((cj0*cj1*sj2))+((x3930*x3931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3933=IKPowWithIntegerCheck(r12,-1);
if(!x3933.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x3933.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3934=IKsin(j4);
IkReal x3935=IKcos(j4);
IkReal x3936=(sj5*x3935);
IkReal x3937=(sj5*x3934);
IkReal x3938=((1.0)*cj5*x3934);
IkReal x3939=((1.0)*cj5*x3935);
evalcond[0]=(r12*x3934);
evalcond[1]=(((r21*x3937))+(((-1.0)*r20*x3938)));
evalcond[2]=(((r01*x3937))+(((-1.0)*r00*x3938)));
evalcond[3]=(((r21*x3936))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x3939)));
evalcond[4]=(((r01*x3936))+(((-1.0)*r00*x3939))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3940=((1.0)*cj5);
CheckValue<IkReal> x3941=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3940))+(((-1.0)*r20*sj5)))),-1);
if(!x3941.valid){
continue;
}
CheckValue<IkReal> x3942 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x3940))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x3940)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3941.value)))+(x3942.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3943=IKsin(j4);
IkReal x3944=IKcos(j4);
IkReal x3945=(cj5*r00);
IkReal x3946=(cj5*r10);
IkReal x3947=(cj2*sj1);
IkReal x3948=(r21*sj5);
IkReal x3949=(cj5*r20);
IkReal x3950=(cj1*sj2);
IkReal x3951=((1.0)*x3944);
IkReal x3952=((1.0)*x3943);
IkReal x3953=(sj5*x3943);
IkReal x3954=(sj5*x3944);
evalcond[0]=((((-1.0)*x3949*x3952))+(((-1.0)*r22*x3951))+((x3943*x3948)));
evalcond[1]=(sj0+((r01*x3953))+(((-1.0)*x3945*x3952))+(((-1.0)*r02*x3951)));
evalcond[2]=((((-1.0)*x3946*x3952))+(((-1.0)*r12*x3951))+((r11*x3953))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x3943))+(((-1.0)*x3949*x3951))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3944*x3948)));
evalcond[4]=(((cj0*x3947))+((r01*x3954))+((cj0*x3950))+(((-1.0)*x3945*x3951))+((r02*x3943)));
evalcond[5]=((((-1.0)*x3946*x3951))+((sj0*x3947))+((sj0*x3950))+((r11*x3954))+((r12*x3943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3955=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3955.valid){
continue;
}
CheckValue<IkReal> x3956 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3955.value)))+(x3956.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3957=IKsin(j4);
IkReal x3958=IKcos(j4);
IkReal x3959=(cj5*r00);
IkReal x3960=(cj5*r10);
IkReal x3961=(cj2*sj1);
IkReal x3962=(r21*sj5);
IkReal x3963=(cj5*r20);
IkReal x3964=(cj1*sj2);
IkReal x3965=((1.0)*x3958);
IkReal x3966=((1.0)*x3957);
IkReal x3967=(sj5*x3957);
IkReal x3968=(sj5*x3958);
evalcond[0]=((((-1.0)*x3963*x3966))+((x3957*x3962))+(((-1.0)*r22*x3965)));
evalcond[1]=(sj0+(((-1.0)*r02*x3965))+(((-1.0)*x3959*x3966))+((r01*x3967)));
evalcond[2]=(((r11*x3967))+(((-1.0)*x3960*x3966))+(((-1.0)*cj0))+(((-1.0)*r12*x3965)));
evalcond[3]=((((-1.0)*x3963*x3965))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3958*x3962))+((r22*x3957)));
evalcond[4]=((((-1.0)*x3959*x3965))+((r02*x3957))+((r01*x3968))+((cj0*x3964))+((cj0*x3961)));
evalcond[5]=(((r11*x3968))+(((-1.0)*x3960*x3965))+((r12*x3957))+((sj0*x3961))+((sj0*x3964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3969=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3969.valid){
continue;
}
CheckValue<IkReal> x3970 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3969.value)))+(x3970.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3971=IKsin(j4);
IkReal x3972=IKcos(j4);
IkReal x3973=(cj5*r00);
IkReal x3974=(cj5*r10);
IkReal x3975=(cj2*sj1);
IkReal x3976=(r21*sj5);
IkReal x3977=(cj5*r20);
IkReal x3978=(cj1*sj2);
IkReal x3979=((1.0)*x3972);
IkReal x3980=((1.0)*x3971);
IkReal x3981=(sj5*x3971);
IkReal x3982=(sj5*x3972);
evalcond[0]=((((-1.0)*x3977*x3980))+((x3971*x3976))+(((-1.0)*r22*x3979)));
evalcond[1]=((((-1.0)*r02*x3979))+sj0+(((-1.0)*x3973*x3980))+((r01*x3981)));
evalcond[2]=((((-1.0)*r12*x3979))+((r11*x3981))+(((-1.0)*cj0))+(((-1.0)*x3974*x3980)));
evalcond[3]=((((-1.0)*x3977*x3979))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3971))+((x3972*x3976)));
evalcond[4]=(((r02*x3971))+((r01*x3982))+(((-1.0)*x3973*x3979))+((cj0*x3978))+((cj0*x3975)));
evalcond[5]=(((r11*x3982))+((r12*x3971))+(((-1.0)*x3974*x3979))+((sj0*x3975))+((sj0*x3978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3983=r21*r21;
IkReal x3984=cj5*cj5;
IkReal x3985=(sj1*sj2);
IkReal x3986=(r21*sj5);
IkReal x3987=(cj1*cj2);
IkReal x3988=(cj5*r20);
CheckValue<IkReal> x3989 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3987))+((r22*x3985)))),IkReal((((x3985*x3986))+(((-1.0)*x3985*x3988))+((x3987*x3988))+(((-1.0)*x3986*x3987)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3989.valid){
continue;
}
CheckValue<IkReal> x3990=IKPowWithIntegerCheck(IKsign((((x3983*x3984))+(((-1.0)*x3984*(r20*r20)))+(((2.0)*x3986*x3988))+(((-1.0)*(r22*r22)))+(((-1.0)*x3983)))),-1);
if(!x3990.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3989.value)+(((1.5707963267949)*(x3990.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x3991=IKsin(j4);
IkReal x3992=IKcos(j4);
IkReal x3993=(r21*sj5);
IkReal x3994=(cj5*r20);
IkReal x3995=((1.0)*x3992);
evalcond[0]=((((-1.0)*x3991*x3994))+(((-1.0)*r22*x3995))+((x3991*x3993)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3991))+((x3992*x3993))+(((-1.0)*x3994*x3995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3996=(cj5*sj4);
IkReal x3997=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x3997))+((r00*x3996))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x3996))+((r11*x3997))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x3997))+((r00*x3996))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x3996))+((r11*x3997))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x3997))+((r00*x3996))+((cj4*r02))), ((((-1.0)*r10*x3996))+((r11*x3997))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x3998=IKcos(j0);
IkReal x3999=IKsin(j0);
IkReal x4000=((0.1)*sj5);
IkReal x4001=(cj5*r11);
IkReal x4002=(r11*sj5);
IkReal x4003=(cj1*cj2);
IkReal x4004=((1.0)*r00);
IkReal x4005=(cj4*cj5);
IkReal x4006=((1.0)*r10);
IkReal x4007=(cj5*r01);
IkReal x4008=(cj5*sj4);
IkReal x4009=((1.0)*cj4);
IkReal x4010=(r01*sj5);
IkReal x4011=(cj1*x3999);
IkReal x4012=(sj1*x3998);
IkReal x4013=(cj1*x3998);
IkReal x4014=(sj1*sj2*x3999);
evalcond[0]=((((-1.0)*r02*x4009))+((sj4*x4010))+x3999+(((-1.0)*x4004*x4008)));
evalcond[1]=(((sj4*x4002))+(((-1.0)*x3998))+(((-1.0)*r12*x4009))+(((-1.0)*x4006*x4008)));
evalcond[2]=((((-1.0)*x4007))+(((-1.0)*sj5*x4004))+(((-1.0)*sj2*x4012))+((x3998*x4003)));
evalcond[3]=((((-1.0)*x4001))+(((-1.0)*x4014))+(((-1.0)*sj5*x4006))+((x3999*x4003)));
evalcond[4]=(((cj4*x4010))+((sj2*x4013))+((r02*sj4))+((cj2*x4012))+(((-1.0)*x4004*x4005)));
evalcond[5]=(((sj2*x4011))+((r12*sj4))+(((-1.0)*x4005*x4006))+((cj4*x4002))+((cj2*sj1*x3999)));
evalcond[6]=((((-1.0)*r00*x4000))+(((-0.425)*x4013))+(((-0.1)*x4007))+(((0.392)*sj2*x4012))+(((-1.0)*px))+(((0.134)*x3999))+(((-0.392)*x3998*x4003)));
evalcond[7]=((((-1.0)*r10*x4000))+(((-0.425)*x4011))+(((-0.1)*x4001))+(((-1.0)*py))+(((0.392)*x4014))+(((-0.392)*x3999*x4003))+(((-0.134)*x3998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4015=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x4015.valid){
continue;
}
CheckValue<IkReal> x4016 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4016.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4015.value)))+(x4016.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4017=IKcos(j0);
IkReal x4018=IKsin(j0);
IkReal x4019=((0.1)*sj5);
IkReal x4020=(cj5*r11);
IkReal x4021=(cj1*cj2);
IkReal x4022=((1.0)*sj5);
IkReal x4023=(sj1*sj2);
IkReal x4024=(cj5*r01);
IkReal x4025=((0.425)*cj1);
IkReal x4026=((0.392)*x4017);
IkReal x4027=(x4018*x4023);
evalcond[0]=(((x4017*x4021))+(((-1.0)*x4024))+(((-1.0)*x4017*x4023))+(((-1.0)*r00*x4022)));
evalcond[1]=((((-1.0)*x4020))+(((-1.0)*x4027))+((x4018*x4021))+(((-1.0)*r10*x4022)));
evalcond[2]=((((0.134)*x4018))+(((-1.0)*px))+((x4023*x4026))+(((-1.0)*r00*x4019))+(((-0.1)*x4024))+(((-1.0)*x4021*x4026))+(((-1.0)*x4017*x4025)));
evalcond[3]=((((-0.392)*x4018*x4021))+(((-1.0)*x4018*x4025))+(((-0.134)*x4017))+(((-1.0)*py))+(((0.392)*x4027))+(((-1.0)*r10*x4019))+(((-0.1)*x4020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4028=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4028;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4028);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4029=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4029;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4029);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4030=((1.0)*cj5);
IkReal x4031=((((-1.0)*r21*x4030))+(((-1.0)*r20*sj5)));
j4eval[0]=x4031;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x4030))+(((-1.0)*cj0*r00*x4030))))));
j4eval[2]=IKsign(x4031);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4032=((-1.0)*r20);
IkReal x4034 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4034)==0){
continue;
}
IkReal x4033=pow(x4034,-0.5);
CheckValue<IkReal> x4035 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4032),IKFAST_ATAN2_MAGTHRESH);
if(!x4035.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4035.value));
IkReal gconst97=(r21*x4033);
IkReal gconst98=(x4032*x4033);
CheckValue<IkReal> x4036 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4036.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4036.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4037=((-1.0)*r20);
IkReal x4038=x4033;
CheckValue<IkReal> x4040 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4037),IKFAST_ATAN2_MAGTHRESH);
if(!x4040.valid){
continue;
}
IkReal x4039=((-1.0)*(x4040.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4039;
IkReal gconst96=x4039;
IkReal gconst97=(r21*x4038);
IkReal gconst98=(x4037*x4038);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4041=((-1.0)*r20);
IkReal x4042=x4033;
CheckValue<IkReal> x4044 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4041),IKFAST_ATAN2_MAGTHRESH);
if(!x4044.valid){
continue;
}
IkReal x4043=((-1.0)*(x4044.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4043;
IkReal gconst96=x4043;
IkReal gconst97=(r21*x4042);
IkReal gconst98=(x4041*x4042);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4045=((-1.0)*r20);
IkReal x4046=x4033;
CheckValue<IkReal> x4048 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4045),IKFAST_ATAN2_MAGTHRESH);
if(!x4048.valid){
continue;
}
IkReal x4047=((-1.0)*(x4048.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4047;
IkReal gconst96=x4047;
IkReal gconst97=(r21*x4046);
IkReal gconst98=(x4045*x4046);
IkReal x4049=((1.0)*(r22*r22));
CheckValue<IkReal> x4053=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4049))),-1);
if(!x4053.valid){
continue;
}
IkReal x4050=x4053.value;
IkReal x4051=((1.0)*x4050);
IkReal x4052=((((-2.0)*x4050*(r20*r20)*(r21*r21)))+(((-1.0)*x4051*(r21*r21*r21*r21)))+(((-1.0)*x4051*(r20*r20*r20*r20)))+(((-1.0)*x4049)));
j4eval[0]=x4052;
j4eval[1]=IKsign(x4052);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4054=(cj1*cj2);
IkReal x4055=(gconst98*r20);
IkReal x4056=(sj1*sj2);
IkReal x4057=(gconst97*r21);
CheckValue<IkReal> x4058 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4054))+((r22*x4056)))),IkReal((((x4054*x4055))+(((-1.0)*x4055*x4056))+((x4056*x4057))+(((-1.0)*x4054*x4057)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4058.valid){
continue;
}
CheckValue<IkReal> x4059=IKPowWithIntegerCheck(IKsign(((((2.0)*x4055*x4057))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4055*x4055)))+(((-1.0)*(x4057*x4057))))),-1);
if(!x4059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4058.value)+(((1.5707963267949)*(x4059.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4060=IKsin(j4);
IkReal x4061=IKcos(j4);
IkReal x4062=(gconst98*r10);
IkReal x4063=(gconst97*r21);
IkReal x4064=(cj2*sj1);
IkReal x4065=(gconst98*r20);
IkReal x4066=(gconst98*r00);
IkReal x4067=(cj1*sj2);
IkReal x4068=((1.0)*x4061);
IkReal x4069=((1.0)*x4060);
IkReal x4070=(gconst97*x4060);
IkReal x4071=(gconst97*x4061);
evalcond[0]=((((-1.0)*x4065*x4069))+((x4060*x4063))+(((-1.0)*r22*x4068)));
evalcond[1]=(sj0+(((-1.0)*x4066*x4069))+((r01*x4070))+(((-1.0)*r02*x4068)));
evalcond[2]=((((-1.0)*r12*x4068))+(((-1.0)*x4062*x4069))+((r11*x4070))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4065*x4068))+((x4061*x4063))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4060)));
evalcond[4]=(((r02*x4060))+(((-1.0)*x4066*x4068))+((r01*x4071))+((cj0*x4064))+((cj0*x4067)));
evalcond[5]=(((sj0*x4064))+((sj0*x4067))+((r12*x4060))+(((-1.0)*x4062*x4068))+((r11*x4071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4072 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*gconst98*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4072.valid){
continue;
}
CheckValue<IkReal> x4073=IKPowWithIntegerCheck(IKsign((((gconst98*r01))+((gconst97*r00)))),-1);
if(!x4073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4072.value)+(((1.5707963267949)*(x4073.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4074=IKsin(j4);
IkReal x4075=IKcos(j4);
IkReal x4076=(gconst98*r10);
IkReal x4077=(gconst97*r21);
IkReal x4078=(cj2*sj1);
IkReal x4079=(gconst98*r20);
IkReal x4080=(gconst98*r00);
IkReal x4081=(cj1*sj2);
IkReal x4082=((1.0)*x4075);
IkReal x4083=((1.0)*x4074);
IkReal x4084=(gconst97*x4074);
IkReal x4085=(gconst97*x4075);
evalcond[0]=(((x4074*x4077))+(((-1.0)*r22*x4082))+(((-1.0)*x4079*x4083)));
evalcond[1]=(((r01*x4084))+sj0+(((-1.0)*r02*x4082))+(((-1.0)*x4080*x4083)));
evalcond[2]=((((-1.0)*r12*x4082))+((r11*x4084))+(((-1.0)*x4076*x4083))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4074))+((x4075*x4077))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4079*x4082)));
evalcond[4]=(((r01*x4085))+((cj0*x4078))+((cj0*x4081))+((r02*x4074))+(((-1.0)*x4080*x4082)));
evalcond[5]=(((r12*x4074))+((sj0*x4078))+((r11*x4085))+(((-1.0)*x4076*x4082))+((sj0*x4081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4086 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*gconst98*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4086.valid){
continue;
}
CheckValue<IkReal> x4087=IKPowWithIntegerCheck(IKsign((((gconst98*r11))+((gconst97*r10)))),-1);
if(!x4087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4086.value)+(((1.5707963267949)*(x4087.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4088=IKsin(j4);
IkReal x4089=IKcos(j4);
IkReal x4090=(gconst98*r10);
IkReal x4091=(gconst97*r21);
IkReal x4092=(cj2*sj1);
IkReal x4093=(gconst98*r20);
IkReal x4094=(gconst98*r00);
IkReal x4095=(cj1*sj2);
IkReal x4096=((1.0)*x4089);
IkReal x4097=((1.0)*x4088);
IkReal x4098=(gconst97*x4088);
IkReal x4099=(gconst97*x4089);
evalcond[0]=(((x4088*x4091))+(((-1.0)*r22*x4096))+(((-1.0)*x4093*x4097)));
evalcond[1]=(sj0+((r01*x4098))+(((-1.0)*r02*x4096))+(((-1.0)*x4094*x4097)));
evalcond[2]=((((-1.0)*r12*x4096))+(((-1.0)*x4090*x4097))+((r11*x4098))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4093*x4096))+((x4089*x4091))+((r22*x4088)));
evalcond[4]=(((r01*x4099))+((cj0*x4092))+((cj0*x4095))+((r02*x4088))+(((-1.0)*x4094*x4096)));
evalcond[5]=((((-1.0)*x4090*x4096))+((r11*x4099))+((r12*x4088))+((sj0*x4095))+((sj0*x4092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4100=((-1.0)*r21);
IkReal x4102 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4102)==0){
continue;
}
IkReal x4101=pow(x4102,-0.5);
CheckValue<IkReal> x4103 = IKatan2WithCheck(IkReal(x4100),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4103.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4103.value))));
IkReal gconst100=(x4100*x4101);
IkReal gconst101=((1.0)*r20*x4101);
CheckValue<IkReal> x4104 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4104.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4104.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4105=((-1.0)*r21);
CheckValue<IkReal> x4108 = IKatan2WithCheck(IkReal(x4105),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4108.valid){
continue;
}
IkReal x4106=((1.0)*(x4108.value));
IkReal x4107=x4101;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4106)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4106)));
IkReal gconst100=(x4105*x4107);
IkReal gconst101=((1.0)*r20*x4107);
IkReal x4109=r22*r22;
IkReal x4110=((1.0)*x4109);
CheckValue<IkReal> x4114=IKPowWithIntegerCheck(((-1.0)+x4109),-1);
if(!x4114.valid){
continue;
}
IkReal x4111=x4114.value;
if((((1.0)+(((-1.0)*x4110)))) < -0.00001)
continue;
IkReal x4112=IKsqrt(((1.0)+(((-1.0)*x4110))));
IkReal x4113=(sj0*x4111*x4112);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x4110*x4113))+x4113))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4115=((-1.0)*r21);
CheckValue<IkReal> x4118 = IKatan2WithCheck(IkReal(x4115),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4118.valid){
continue;
}
IkReal x4116=((1.0)*(x4118.value));
IkReal x4117=x4101;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4116)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4116)));
IkReal gconst100=(x4115*x4117);
IkReal gconst101=((1.0)*r20*x4117);
IkReal x4119=r22*r22;
IkReal x4120=((1.0)*x4119);
CheckValue<IkReal> x4124=IKPowWithIntegerCheck(((-1.0)+x4119),-1);
if(!x4124.valid){
continue;
}
IkReal x4121=x4124.value;
if((((1.0)+(((-1.0)*x4120)))) < -0.00001)
continue;
IkReal x4122=IKsqrt(((1.0)+(((-1.0)*x4120))));
IkReal x4123=(cj0*x4121*x4122);
j4eval[0]=((IKabs((x4123+(((-1.0)*x4120*x4123)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4125=((-1.0)*r21);
CheckValue<IkReal> x4128 = IKatan2WithCheck(IkReal(x4125),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4128.valid){
continue;
}
IkReal x4126=((1.0)*(x4128.value));
IkReal x4127=x4101;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4126)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4126)));
IkReal gconst100=(x4125*x4127);
IkReal gconst101=((1.0)*r20*x4127);
IkReal x4129=r22*r22;
IkReal x4130=(cj0*r02);
IkReal x4131=(r12*sj0);
CheckValue<IkReal> x4135=IKPowWithIntegerCheck(((-1.0)+x4129),-1);
if(!x4135.valid){
continue;
}
IkReal x4132=x4135.value;
if((((1.0)+(((-1.0)*x4129)))) < -0.00001)
continue;
IkReal x4133=IKsqrt(((1.0)+(((-1.0)*x4129))));
IkReal x4134=((1.0)*r22*x4132*x4133);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x4130*x4134))+(((-1.0)*x4131*x4134)))))+(IKabs((x4130+x4131))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4136=((1.0)*gconst101);
CheckValue<IkReal> x4137 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x4136))+(((-1.0)*r10*sj0*x4136))+((cj0*gconst100*r01))+((gconst100*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4137.valid){
continue;
}
CheckValue<IkReal> x4138=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r20))+(((-1.0)*r21*x4136)))),-1);
if(!x4138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4137.value)+(((1.5707963267949)*(x4138.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4139=IKsin(j4);
IkReal x4140=IKcos(j4);
IkReal x4141=(cj2*sj1);
IkReal x4142=(gconst101*r20);
IkReal x4143=(gconst101*r10);
IkReal x4144=(gconst101*r00);
IkReal x4145=(cj1*sj2);
IkReal x4146=((1.0)*x4140);
IkReal x4147=((1.0)*x4139);
IkReal x4148=(gconst100*x4139);
IkReal x4149=(gconst100*x4140);
evalcond[0]=(((r21*x4148))+(((-1.0)*x4142*x4147))+(((-1.0)*r22*x4146)));
evalcond[1]=(sj0+((r01*x4148))+(((-1.0)*r02*x4146))+(((-1.0)*x4144*x4147)));
evalcond[2]=(((r11*x4148))+(((-1.0)*x4143*x4147))+(((-1.0)*r12*x4146))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4139))+((r21*x4149))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4142*x4146)));
evalcond[4]=(((r01*x4149))+(((-1.0)*x4144*x4146))+((cj0*x4145))+((cj0*x4141))+((r02*x4139)));
evalcond[5]=(((sj0*x4145))+((sj0*x4141))+((r11*x4149))+((r12*x4139))+(((-1.0)*x4143*x4146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4150 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*gconst101*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4150.valid){
continue;
}
CheckValue<IkReal> x4151=IKPowWithIntegerCheck(IKsign((((gconst100*r00))+((gconst101*r01)))),-1);
if(!x4151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4150.value)+(((1.5707963267949)*(x4151.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4152=IKsin(j4);
IkReal x4153=IKcos(j4);
IkReal x4154=(cj2*sj1);
IkReal x4155=(gconst101*r20);
IkReal x4156=(gconst101*r10);
IkReal x4157=(gconst101*r00);
IkReal x4158=(cj1*sj2);
IkReal x4159=((1.0)*x4153);
IkReal x4160=((1.0)*x4152);
IkReal x4161=(gconst100*x4152);
IkReal x4162=(gconst100*x4153);
evalcond[0]=((((-1.0)*x4155*x4160))+((r21*x4161))+(((-1.0)*r22*x4159)));
evalcond[1]=(((r01*x4161))+sj0+(((-1.0)*r02*x4159))+(((-1.0)*x4157*x4160)));
evalcond[2]=(((r11*x4161))+(((-1.0)*r12*x4159))+(((-1.0)*x4156*x4160))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x4155*x4159))+((r22*x4152))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x4162)));
evalcond[4]=(((r01*x4162))+((r02*x4152))+(((-1.0)*x4157*x4159))+((cj0*x4154))+((cj0*x4158)));
evalcond[5]=(((r12*x4152))+(((-1.0)*x4156*x4159))+((sj0*x4154))+((sj0*x4158))+((r11*x4162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4163=IKPowWithIntegerCheck(IKsign((((gconst100*r10))+((gconst101*r11)))),-1);
if(!x4163.valid){
continue;
}
CheckValue<IkReal> x4164 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst101*r20*sj0))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4163.value)))+(x4164.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4165=IKsin(j4);
IkReal x4166=IKcos(j4);
IkReal x4167=(cj2*sj1);
IkReal x4168=(gconst101*r20);
IkReal x4169=(gconst101*r10);
IkReal x4170=(gconst101*r00);
IkReal x4171=(cj1*sj2);
IkReal x4172=((1.0)*x4166);
IkReal x4173=((1.0)*x4165);
IkReal x4174=(gconst100*x4165);
IkReal x4175=(gconst100*x4166);
evalcond[0]=((((-1.0)*x4168*x4173))+((r21*x4174))+(((-1.0)*r22*x4172)));
evalcond[1]=(sj0+(((-1.0)*x4170*x4173))+((r01*x4174))+(((-1.0)*r02*x4172)));
evalcond[2]=(((r11*x4174))+(((-1.0)*x4169*x4173))+(((-1.0)*r12*x4172))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4165))+(((-1.0)*x4168*x4172))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x4175)));
evalcond[4]=(((cj0*x4171))+(((-1.0)*x4170*x4172))+((cj0*x4167))+((r02*x4165))+((r01*x4175)));
evalcond[5]=(((r11*x4175))+(((-1.0)*x4169*x4172))+((sj0*x4171))+((r12*x4165))+((sj0*x4167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4177 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4177)==0){
continue;
}
IkReal x4176=pow(x4177,-0.5);
CheckValue<IkReal> x4178 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4178.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4178.value));
IkReal gconst103=((-1.0)*r01*x4176);
IkReal gconst104=(r00*x4176);
CheckValue<IkReal> x4179 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4179.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4179.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4182 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4182.valid){
continue;
}
IkReal x4180=((-1.0)*(x4182.value));
IkReal x4181=x4176;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4180;
IkReal gconst102=x4180;
IkReal gconst103=((-1.0)*r01*x4181);
IkReal gconst104=(r00*x4181);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4183=((1.0)*gconst104);
CheckValue<IkReal> x4184=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r20))+(((-1.0)*r21*x4183)))),-1);
if(!x4184.valid){
continue;
}
CheckValue<IkReal> x4185 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x4183))+((cj0*gconst103*r01))+(((-1.0)*r10*sj0*x4183))+((gconst103*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4184.value)))+(x4185.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4186=IKsin(j4);
IkReal x4187=IKcos(j4);
IkReal x4188=(gconst103*r11);
IkReal x4189=(cj2*sj1);
IkReal x4190=(gconst104*r10);
IkReal x4191=(gconst104*r20);
IkReal x4192=(gconst104*r00);
IkReal x4193=(cj1*sj2);
IkReal x4194=((1.0)*x4187);
IkReal x4195=(gconst103*x4187);
IkReal x4196=(gconst103*x4186);
IkReal x4197=((1.0)*x4186);
evalcond[0]=(((r21*x4196))+(((-1.0)*x4191*x4197))+(((-1.0)*r22*x4194)));
evalcond[1]=(sj0+(((-1.0)*r02*x4194))+((r01*x4196))+(((-1.0)*x4192*x4197)));
evalcond[2]=((((-1.0)*r12*x4194))+((x4186*x4188))+(((-1.0)*x4190*x4197))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x4195))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4186))+(((-1.0)*x4191*x4194)));
evalcond[4]=(((cj0*x4193))+((r02*x4186))+((r01*x4195))+(((-1.0)*x4192*x4194))+((cj0*x4189)));
evalcond[5]=(((r12*x4186))+((sj0*x4189))+((sj0*x4193))+((x4187*x4188))+(((-1.0)*x4190*x4194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4198 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst103*r21*sj0))+(((-1.0)*gconst104*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4198.valid){
continue;
}
CheckValue<IkReal> x4199=IKPowWithIntegerCheck(IKsign((((gconst104*r11))+((gconst103*r10)))),-1);
if(!x4199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4198.value)+(((1.5707963267949)*(x4199.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4200=IKsin(j4);
IkReal x4201=IKcos(j4);
IkReal x4202=(gconst103*r11);
IkReal x4203=(cj2*sj1);
IkReal x4204=(gconst104*r10);
IkReal x4205=(gconst104*r20);
IkReal x4206=(gconst104*r00);
IkReal x4207=(cj1*sj2);
IkReal x4208=((1.0)*x4201);
IkReal x4209=(gconst103*x4201);
IkReal x4210=(gconst103*x4200);
IkReal x4211=((1.0)*x4200);
evalcond[0]=((((-1.0)*r22*x4208))+(((-1.0)*x4205*x4211))+((r21*x4210)));
evalcond[1]=(sj0+(((-1.0)*r02*x4208))+(((-1.0)*x4206*x4211))+((r01*x4210)));
evalcond[2]=((((-1.0)*x4204*x4211))+(((-1.0)*r12*x4208))+((x4200*x4202))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4200))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x4209))+(((-1.0)*x4205*x4208)));
evalcond[4]=(((cj0*x4207))+((cj0*x4203))+((r02*x4200))+(((-1.0)*x4206*x4208))+((r01*x4209)));
evalcond[5]=(((sj0*x4203))+((sj0*x4207))+((x4201*x4202))+(((-1.0)*x4204*x4208))+((r12*x4200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4213 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4213)==0){
continue;
}
IkReal x4212=pow(x4213,-0.5);
CheckValue<IkReal> x4214 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4214.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4214.value))));
IkReal gconst106=((1.0)*r01*x4212);
IkReal gconst107=((-1.0)*r00*x4212);
CheckValue<IkReal> x4215 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4215.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4215.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4218 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4218.valid){
continue;
}
IkReal x4216=((1.0)*(x4218.value));
IkReal x4217=x4212;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4216)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4216)));
IkReal gconst106=((1.0)*r01*x4217);
IkReal gconst107=((-1.0)*r00*x4217);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x4221 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4221.valid){
continue;
}
IkReal x4219=((1.0)*(x4221.value));
IkReal x4220=x4212;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4219)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4219)));
IkReal gconst106=((1.0)*r01*x4220);
IkReal gconst107=((-1.0)*r00*x4220);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4224 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4224.valid){
continue;
}
IkReal x4222=((1.0)*(x4224.value));
IkReal x4223=x4212;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4222)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4222)));
IkReal gconst106=((1.0)*r01*x4223);
IkReal gconst107=((-1.0)*r00*x4223);
IkReal x4225=r02*r02;
IkReal x4226=(r12*sj0);
IkReal x4227=x4212;
IkReal x4228=(cj0*x4227);
j4eval[0]=((IKabs((x4226+((cj0*r02)))))+(IKabs((((r02*x4226*x4227))+(((-1.0)*x4228))+((x4225*x4228))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4229=((1.0)*gconst107);
CheckValue<IkReal> x4230 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst106*r01))+((gconst106*r11*sj0))+(((-1.0)*cj0*r00*x4229))+(((-1.0)*r10*sj0*x4229)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4230.valid){
continue;
}
CheckValue<IkReal> x4231=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r20))+(((-1.0)*r21*x4229)))),-1);
if(!x4231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4230.value)+(((1.5707963267949)*(x4231.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4232=IKsin(j4);
IkReal x4233=IKcos(j4);
IkReal x4234=(gconst107*r10);
IkReal x4235=(gconst107*r00);
IkReal x4236=(gconst107*r20);
IkReal x4237=(cj2*sj1);
IkReal x4238=(cj1*sj2);
IkReal x4239=((1.0)*x4233);
IkReal x4240=(gconst106*x4233);
IkReal x4241=(gconst106*x4232);
IkReal x4242=((1.0)*x4232);
evalcond[0]=((((-1.0)*r22*x4239))+(((-1.0)*x4236*x4242))+((r21*x4241)));
evalcond[1]=(sj0+((r01*x4241))+(((-1.0)*x4235*x4242))+(((-1.0)*r02*x4239)));
evalcond[2]=((((-1.0)*r12*x4239))+(((-1.0)*x4234*x4242))+(((-1.0)*cj0))+((r11*x4241)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4232))+(((-1.0)*x4236*x4239))+((r21*x4240)));
evalcond[4]=(((r01*x4240))+((r02*x4232))+(((-1.0)*x4235*x4239))+((cj0*x4237))+((cj0*x4238)));
evalcond[5]=(((r12*x4232))+((sj0*x4237))+((sj0*x4238))+(((-1.0)*x4234*x4239))+((r11*x4240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4243 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*gconst107*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4243.valid){
continue;
}
CheckValue<IkReal> x4244=IKPowWithIntegerCheck(IKsign((((gconst107*r01))+((gconst106*r00)))),-1);
if(!x4244.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4243.value)+(((1.5707963267949)*(x4244.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4245=IKsin(j4);
IkReal x4246=IKcos(j4);
IkReal x4247=(gconst107*r10);
IkReal x4248=(gconst107*r00);
IkReal x4249=(gconst107*r20);
IkReal x4250=(cj2*sj1);
IkReal x4251=(cj1*sj2);
IkReal x4252=((1.0)*x4246);
IkReal x4253=(gconst106*x4246);
IkReal x4254=(gconst106*x4245);
IkReal x4255=((1.0)*x4245);
evalcond[0]=((((-1.0)*r22*x4252))+(((-1.0)*x4249*x4255))+((r21*x4254)));
evalcond[1]=(sj0+((r01*x4254))+(((-1.0)*x4248*x4255))+(((-1.0)*r02*x4252)));
evalcond[2]=(((r11*x4254))+(((-1.0)*x4247*x4255))+(((-1.0)*cj0))+(((-1.0)*r12*x4252)));
evalcond[3]=(((r22*x4245))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4249*x4252))+((r21*x4253)));
evalcond[4]=(((cj0*x4250))+((cj0*x4251))+((r01*x4253))+((r02*x4245))+(((-1.0)*x4248*x4252)));
evalcond[5]=(((r11*x4253))+(((-1.0)*x4247*x4252))+((sj0*x4250))+((sj0*x4251))+((r12*x4245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4256=IKPowWithIntegerCheck(IKsign((((gconst107*r11))+((gconst106*r10)))),-1);
if(!x4256.valid){
continue;
}
CheckValue<IkReal> x4257 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst106*r21*sj0))+(((-1.0)*gconst107*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4256.value)))+(x4257.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4258=IKsin(j4);
IkReal x4259=IKcos(j4);
IkReal x4260=(gconst107*r10);
IkReal x4261=(gconst107*r00);
IkReal x4262=(gconst107*r20);
IkReal x4263=(cj2*sj1);
IkReal x4264=(cj1*sj2);
IkReal x4265=((1.0)*x4259);
IkReal x4266=(gconst106*x4259);
IkReal x4267=(gconst106*x4258);
IkReal x4268=((1.0)*x4258);
evalcond[0]=(((r21*x4267))+(((-1.0)*r22*x4265))+(((-1.0)*x4262*x4268)));
evalcond[1]=(((r01*x4267))+sj0+(((-1.0)*r02*x4265))+(((-1.0)*x4261*x4268)));
evalcond[2]=((((-1.0)*r12*x4265))+((r11*x4267))+(((-1.0)*x4260*x4268))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x4266))+((r22*x4258))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4262*x4265)));
evalcond[4]=(((r01*x4266))+((r02*x4258))+(((-1.0)*x4261*x4265))+((cj0*x4264))+((cj0*x4263)));
evalcond[5]=(((r11*x4266))+((r12*x4258))+(((-1.0)*x4260*x4265))+((sj0*x4264))+((sj0*x4263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4269=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4269;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4269);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4270=((1.0)*cj5);
IkReal x4271=((((-1.0)*r21*x4270))+(((-1.0)*r20*sj5)));
j4eval[0]=x4271;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x4270))+((r11*sj5))))));
j4eval[2]=IKsign(x4271);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4272=cj5*cj5;
IkReal x4273=r01*r01;
IkReal x4274=(r01*sj5);
IkReal x4275=(cj5*r00);
IkReal x4276=((((-1.0)*x4272*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x4274*x4275))+((x4272*x4273))+(((-1.0)*x4273)));
j4eval[0]=x4276;
j4eval[1]=IKsign(x4276);
j4eval[2]=((IKabs((x4274+(((-1.0)*x4275)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4277=cj5*cj5;
IkReal x4278=r01*r01;
IkReal x4279=(r01*sj5);
IkReal x4280=(cj5*r00);
CheckValue<IkReal> x4281=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x4277*(r00*r00)))+(((2.0)*x4279*x4280))+((x4277*x4278))+(((-1.0)*x4278)))),-1);
if(!x4281.valid){
continue;
}
CheckValue<IkReal> x4282 = IKatan2WithCheck(IkReal((x4279+(((-1.0)*x4280)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4282.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4281.value)))+(x4282.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4283=IKcos(j4);
IkReal x4284=IKsin(j4);
IkReal x4285=(cj5*r00);
IkReal x4286=(cj5*r10);
IkReal x4287=(r21*sj5);
IkReal x4288=(cj5*r20);
IkReal x4289=((1.0)*x4283);
IkReal x4290=((1.0)*x4284);
IkReal x4291=(sj5*x4284);
IkReal x4292=(sj5*x4283);
evalcond[0]=(((r01*x4292))+((r02*x4284))+(((-1.0)*x4285*x4289)));
evalcond[1]=(((x4284*x4287))+(((-1.0)*x4288*x4290))+(((-1.0)*r22*x4289)));
evalcond[2]=((((-1.0)*r12*x4289))+(((-1.0)*x4286*x4290))+((r11*x4291)));
evalcond[3]=((1.0)+((r01*x4291))+(((-1.0)*x4285*x4290))+(((-1.0)*r02*x4289)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4286*x4289))+((r12*x4284))+((cj1*sj2))+((r11*x4292)));
evalcond[5]=(((x4283*x4287))+((r22*x4284))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4288*x4289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4293=((1.0)*cj5);
CheckValue<IkReal> x4294=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4293))+(((-1.0)*r20*sj5)))),-1);
if(!x4294.valid){
continue;
}
CheckValue<IkReal> x4295 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x4293))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4294.value)))+(x4295.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4296=IKcos(j4);
IkReal x4297=IKsin(j4);
IkReal x4298=(cj5*r00);
IkReal x4299=(cj5*r10);
IkReal x4300=(r21*sj5);
IkReal x4301=(cj5*r20);
IkReal x4302=((1.0)*x4296);
IkReal x4303=((1.0)*x4297);
IkReal x4304=(sj5*x4297);
IkReal x4305=(sj5*x4296);
evalcond[0]=(((r01*x4305))+(((-1.0)*x4298*x4302))+((r02*x4297)));
evalcond[1]=((((-1.0)*r22*x4302))+(((-1.0)*x4301*x4303))+((x4297*x4300)));
evalcond[2]=((((-1.0)*r12*x4302))+((r11*x4304))+(((-1.0)*x4299*x4303)));
evalcond[3]=((1.0)+((r01*x4304))+(((-1.0)*r02*x4302))+(((-1.0)*x4298*x4303)));
evalcond[4]=(((cj2*sj1))+((r11*x4305))+((cj1*sj2))+((r12*x4297))+(((-1.0)*x4299*x4302)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4297))+(((-1.0)*x4301*x4302))+((x4296*x4300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4306 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4306.valid){
continue;
}
CheckValue<IkReal> x4307=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4306.value)+(((1.5707963267949)*(x4307.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4308=IKcos(j4);
IkReal x4309=IKsin(j4);
IkReal x4310=(cj5*r00);
IkReal x4311=(cj5*r10);
IkReal x4312=(r21*sj5);
IkReal x4313=(cj5*r20);
IkReal x4314=((1.0)*x4308);
IkReal x4315=((1.0)*x4309);
IkReal x4316=(sj5*x4309);
IkReal x4317=(sj5*x4308);
evalcond[0]=(((r02*x4309))+(((-1.0)*x4310*x4314))+((r01*x4317)));
evalcond[1]=((((-1.0)*r22*x4314))+((x4309*x4312))+(((-1.0)*x4313*x4315)));
evalcond[2]=((((-1.0)*x4311*x4315))+((r11*x4316))+(((-1.0)*r12*x4314)));
evalcond[3]=((1.0)+(((-1.0)*x4310*x4315))+((r01*x4316))+(((-1.0)*r02*x4314)));
evalcond[4]=(((cj2*sj1))+((r12*x4309))+(((-1.0)*x4311*x4314))+((cj1*sj2))+((r11*x4317)));
evalcond[5]=(((r22*x4309))+((x4308*x4312))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4313*x4314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4318=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4318;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4318);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4319=((1.0)*cj5);
IkReal x4320=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4319)));
j4eval[0]=x4320;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4319))))));
j4eval[2]=IKsign(x4320);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4321=cj5*cj5;
IkReal x4322=r01*r01;
IkReal x4323=(cj5*r00);
IkReal x4324=(r01*sj5);
IkReal x4325=((((-1.0)*x4321*x4322))+((x4321*(r00*r00)))+x4322+(r02*r02)+(((-2.0)*x4323*x4324)));
j4eval[0]=x4325;
j4eval[1]=IKsign(x4325);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4323))+x4324))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4326=cj5*cj5;
IkReal x4327=r01*r01;
IkReal x4328=(r01*sj5);
IkReal x4329=(cj5*r00);
CheckValue<IkReal> x4330=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4328*x4329))+((x4326*(r00*r00)))+x4327+(r02*r02)+(((-1.0)*x4326*x4327)))),-1);
if(!x4330.valid){
continue;
}
CheckValue<IkReal> x4331 = IKatan2WithCheck(IkReal(((((-1.0)*x4329))+x4328)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4330.value)))+(x4331.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4332=IKcos(j4);
IkReal x4333=IKsin(j4);
IkReal x4334=(cj5*r00);
IkReal x4335=(cj5*r10);
IkReal x4336=(r21*sj5);
IkReal x4337=((1.0)*cj2);
IkReal x4338=(cj5*r20);
IkReal x4339=((1.0)*x4332);
IkReal x4340=((1.0)*x4333);
IkReal x4341=(sj5*x4333);
IkReal x4342=(sj5*x4332);
evalcond[0]=((((-1.0)*x4334*x4339))+((r02*x4333))+((r01*x4342)));
evalcond[1]=((((-1.0)*r22*x4339))+((x4333*x4336))+(((-1.0)*x4338*x4340)));
evalcond[2]=((((-1.0)*r12*x4339))+((r11*x4341))+(((-1.0)*x4335*x4340)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4339))+((r01*x4341))+(((-1.0)*x4334*x4340)));
evalcond[4]=((((-1.0)*x4338*x4339))+((sj1*sj2))+(((-1.0)*cj1*x4337))+((x4332*x4336))+((r22*x4333)));
evalcond[5]=((((-1.0)*sj1*x4337))+(((-1.0)*cj1*sj2))+((r12*x4333))+((r11*x4342))+(((-1.0)*x4335*x4339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4343=((1.0)*cj5);
CheckValue<IkReal> x4344 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4343))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4344.valid){
continue;
}
CheckValue<IkReal> x4345=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4343)))),-1);
if(!x4345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4344.value)+(((1.5707963267949)*(x4345.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4346=IKcos(j4);
IkReal x4347=IKsin(j4);
IkReal x4348=(cj5*r00);
IkReal x4349=(cj5*r10);
IkReal x4350=(r21*sj5);
IkReal x4351=((1.0)*cj2);
IkReal x4352=(cj5*r20);
IkReal x4353=((1.0)*x4346);
IkReal x4354=((1.0)*x4347);
IkReal x4355=(sj5*x4347);
IkReal x4356=(sj5*x4346);
evalcond[0]=(((r02*x4347))+(((-1.0)*x4348*x4353))+((r01*x4356)));
evalcond[1]=(((x4347*x4350))+(((-1.0)*x4352*x4354))+(((-1.0)*r22*x4353)));
evalcond[2]=((((-1.0)*x4349*x4354))+(((-1.0)*r12*x4353))+((r11*x4355)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4353))+(((-1.0)*x4348*x4354))+((r01*x4355)));
evalcond[4]=(((sj1*sj2))+((r22*x4347))+(((-1.0)*x4352*x4353))+(((-1.0)*cj1*x4351))+((x4346*x4350)));
evalcond[5]=((((-1.0)*x4349*x4353))+(((-1.0)*cj1*sj2))+((r12*x4347))+((r11*x4356))+(((-1.0)*sj1*x4351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4357=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4357.valid){
continue;
}
CheckValue<IkReal> x4358 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4357.value)))+(x4358.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4359=IKcos(j4);
IkReal x4360=IKsin(j4);
IkReal x4361=(cj5*r00);
IkReal x4362=(cj5*r10);
IkReal x4363=(r21*sj5);
IkReal x4364=((1.0)*cj2);
IkReal x4365=(cj5*r20);
IkReal x4366=((1.0)*x4359);
IkReal x4367=((1.0)*x4360);
IkReal x4368=(sj5*x4360);
IkReal x4369=(sj5*x4359);
evalcond[0]=((((-1.0)*x4361*x4366))+((r01*x4369))+((r02*x4360)));
evalcond[1]=((((-1.0)*r22*x4366))+(((-1.0)*x4365*x4367))+((x4360*x4363)));
evalcond[2]=(((r11*x4368))+(((-1.0)*x4362*x4367))+(((-1.0)*r12*x4366)));
evalcond[3]=((-1.0)+(((-1.0)*x4361*x4367))+((r01*x4368))+(((-1.0)*r02*x4366)));
evalcond[4]=((((-1.0)*cj1*x4364))+((x4359*x4363))+((sj1*sj2))+(((-1.0)*x4365*x4366))+((r22*x4360)));
evalcond[5]=(((r11*x4369))+(((-1.0)*sj1*x4364))+(((-1.0)*x4362*x4366))+(((-1.0)*cj1*sj2))+((r12*x4360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4371 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4371)==0){
continue;
}
IkReal x4370=pow(x4371,-0.5);
CheckValue<IkReal> x4372 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4372.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4372.value));
IkReal gconst109=((-1.0)*r11*x4370);
IkReal gconst110=(r10*x4370);
CheckValue<IkReal> x4373 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4373.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4373.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4376 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4376.valid){
continue;
}
IkReal x4374=((-1.0)*(x4376.value));
IkReal x4375=x4370;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4374;
IkReal gconst108=x4374;
IkReal gconst109=((-1.0)*r11*x4375);
IkReal gconst110=(r10*x4375);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4377=((1.0)*gconst110);
CheckValue<IkReal> x4378=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4377))+(((-1.0)*gconst109*r20)))),-1);
if(!x4378.valid){
continue;
}
CheckValue<IkReal> x4379 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst109*r01))+(((-1.0)*r10*sj0*x4377))+(((-1.0)*cj0*r00*x4377))+((gconst109*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4379.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4378.value)))+(x4379.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4380=IKsin(j4);
IkReal x4381=IKcos(j4);
IkReal x4382=(gconst109*r21);
IkReal x4383=(cj2*sj1);
IkReal x4384=(cj1*sj2);
IkReal x4385=((1.0)*x4381);
IkReal x4386=(gconst109*x4380);
IkReal x4387=(gconst109*x4381);
IkReal x4388=((1.0)*gconst110*x4380);
evalcond[0]=((((-1.0)*r22*x4385))+((x4380*x4382))+(((-1.0)*r20*x4388)));
evalcond[1]=((((-1.0)*r02*x4385))+sj0+(((-1.0)*r00*x4388))+((r01*x4386)));
evalcond[2]=((((-1.0)*r12*x4385))+(((-1.0)*r10*x4388))+((r11*x4386))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*gconst110*r20*x4385))+((r22*x4380))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4381*x4382)));
evalcond[4]=((((-1.0)*gconst110*r00*x4385))+((r02*x4380))+((r01*x4387))+((cj0*x4383))+((cj0*x4384)));
evalcond[5]=((((-1.0)*gconst110*r10*x4385))+((sj0*x4384))+((sj0*x4383))+((r11*x4387))+((r12*x4380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4389=IKPowWithIntegerCheck(IKsign((((gconst109*r00))+((gconst110*r01)))),-1);
if(!x4389.valid){
continue;
}
CheckValue<IkReal> x4390 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst109*r21))+(((-1.0)*cj0*gconst110*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4389.value)))+(x4390.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4391=IKsin(j4);
IkReal x4392=IKcos(j4);
IkReal x4393=(gconst109*r21);
IkReal x4394=(cj2*sj1);
IkReal x4395=(cj1*sj2);
IkReal x4396=((1.0)*x4392);
IkReal x4397=(gconst109*x4391);
IkReal x4398=(gconst109*x4392);
IkReal x4399=((1.0)*gconst110*x4391);
evalcond[0]=(((x4391*x4393))+(((-1.0)*r22*x4396))+(((-1.0)*r20*x4399)));
evalcond[1]=(((r01*x4397))+(((-1.0)*r02*x4396))+sj0+(((-1.0)*r00*x4399)));
evalcond[2]=((((-1.0)*r12*x4396))+(((-1.0)*r10*x4399))+((r11*x4397))+(((-1.0)*cj0)));
evalcond[3]=(((x4392*x4393))+((r22*x4391))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst110*r20*x4396)));
evalcond[4]=(((r01*x4398))+((cj0*x4394))+((cj0*x4395))+(((-1.0)*gconst110*r00*x4396))+((r02*x4391)));
evalcond[5]=((((-1.0)*gconst110*r10*x4396))+((r11*x4398))+((sj0*x4394))+((sj0*x4395))+((r12*x4391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4401 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4401)==0){
continue;
}
IkReal x4400=pow(x4401,-0.5);
CheckValue<IkReal> x4402 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4402.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4402.value))));
IkReal gconst112=((1.0)*r11*x4400);
IkReal gconst113=((-1.0)*r10*x4400);
CheckValue<IkReal> x4403 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4403.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4403.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4406 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4406.valid){
continue;
}
IkReal x4404=((1.0)*(x4406.value));
IkReal x4405=x4400;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4404)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4404)));
IkReal gconst112=((1.0)*r11*x4405);
IkReal gconst113=((-1.0)*r10*x4405);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4409 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4409.valid){
continue;
}
IkReal x4407=((1.0)*(x4409.value));
IkReal x4408=x4400;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4407)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4407)));
IkReal gconst112=((1.0)*r11*x4408);
IkReal gconst113=((-1.0)*r10*x4408);
IkReal x4410=r12*r12;
IkReal x4411=(cj0*r02);
IkReal x4412=x4400;
IkReal x4413=(sj0*x4412);
j4eval[0]=((IKabs((((x4410*x4413))+((r12*x4411*x4412))+(((-1.0)*x4413)))))+(IKabs((x4411+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4416 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4416.valid){
continue;
}
IkReal x4414=((1.0)*(x4416.value));
IkReal x4415=x4400;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4414)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4414)));
IkReal gconst112=((1.0)*r11*x4415);
IkReal gconst113=((-1.0)*r10*x4415);
IkReal x4417=r12*r12;
IkReal x4418=(sj1*sj2);
IkReal x4419=((1.0)+(((-1.0)*x4417)));
IkReal x4420=((1.0)*cj1*cj2);
CheckValue<IkReal> x4427=IKPowWithIntegerCheck(x4419,-1);
if(!x4427.valid){
continue;
}
IkReal x4421=x4427.value;
CheckValue<IkReal> x4428=IKPowWithIntegerCheck(((-1.0)+x4417),-1);
if(!x4428.valid){
continue;
}
IkReal x4422=x4428.value;
IkReal x4423=((1.0)*x4421);
if((x4419) < -0.00001)
continue;
IkReal x4424=IKsqrt(x4419);
IkReal x4425=(r12*r22*x4422*x4424);
IkReal x4426=((((-1.0)*x4423*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x4421))+(((-1.0)*x4423*(r10*r10)*(r20*r20))));
j4eval[0]=x4426;
j4eval[1]=((IKabs(((((-1.0)*x4420*x4425))+((x4418*x4425)))))+(IKabs((((r22*x4418))+(((-1.0)*r22*x4420))))));
j4eval[2]=IKsign(x4426);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4429=(sj1*sj2);
IkReal x4430=(gconst112*r21);
IkReal x4431=(gconst113*r20);
IkReal x4432=(cj1*cj2);
CheckValue<IkReal> x4433 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4432))+((r22*x4429)))),IkReal((((x4429*x4430))+((x4431*x4432))+(((-1.0)*x4430*x4432))+(((-1.0)*x4429*x4431)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4433.valid){
continue;
}
CheckValue<IkReal> x4434=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4430*x4430)))+(((-1.0)*(r22*r22)))+(((2.0)*x4430*x4431))+(((-1.0)*(x4431*x4431))))),-1);
if(!x4434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4433.value)+(((1.5707963267949)*(x4434.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4435=IKsin(j4);
IkReal x4436=IKcos(j4);
IkReal x4437=(cj2*sj1);
IkReal x4438=(gconst113*r20);
IkReal x4439=(gconst112*r21);
IkReal x4440=(gconst113*r00);
IkReal x4441=(gconst113*r10);
IkReal x4442=(cj1*sj2);
IkReal x4443=((1.0)*x4436);
IkReal x4444=((1.0)*x4435);
IkReal x4445=(gconst112*x4436);
IkReal x4446=(gconst112*x4435);
evalcond[0]=(((x4435*x4439))+(((-1.0)*r22*x4443))+(((-1.0)*x4438*x4444)));
evalcond[1]=(sj0+((r01*x4446))+(((-1.0)*r02*x4443))+(((-1.0)*x4440*x4444)));
evalcond[2]=((((-1.0)*r12*x4443))+((r11*x4446))+(((-1.0)*x4441*x4444))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x4435))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4436*x4439))+(((-1.0)*x4438*x4443)));
evalcond[4]=(((r01*x4445))+((cj0*x4437))+((cj0*x4442))+(((-1.0)*x4440*x4443))+((r02*x4435)));
evalcond[5]=(((sj0*x4442))+((r12*x4435))+((r11*x4445))+(((-1.0)*x4441*x4443))+((sj0*x4437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4447=((1.0)*gconst113);
CheckValue<IkReal> x4448=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r20))+(((-1.0)*r21*x4447)))),-1);
if(!x4448.valid){
continue;
}
CheckValue<IkReal> x4449 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst112*r01))+(((-1.0)*cj0*r00*x4447))+(((-1.0)*r10*sj0*x4447))+((gconst112*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4448.value)))+(x4449.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4450=IKsin(j4);
IkReal x4451=IKcos(j4);
IkReal x4452=(cj2*sj1);
IkReal x4453=(gconst113*r20);
IkReal x4454=(gconst112*r21);
IkReal x4455=(gconst113*r00);
IkReal x4456=(gconst113*r10);
IkReal x4457=(cj1*sj2);
IkReal x4458=((1.0)*x4451);
IkReal x4459=((1.0)*x4450);
IkReal x4460=(gconst112*x4451);
IkReal x4461=(gconst112*x4450);
evalcond[0]=(((x4450*x4454))+(((-1.0)*r22*x4458))+(((-1.0)*x4453*x4459)));
evalcond[1]=(sj0+(((-1.0)*x4455*x4459))+(((-1.0)*r02*x4458))+((r01*x4461)));
evalcond[2]=((((-1.0)*x4456*x4459))+(((-1.0)*r12*x4458))+((r11*x4461))+(((-1.0)*cj0)));
evalcond[3]=(((x4451*x4454))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4450))+(((-1.0)*x4453*x4458)));
evalcond[4]=((((-1.0)*x4455*x4458))+((r01*x4460))+((cj0*x4452))+((cj0*x4457))+((r02*x4450)));
evalcond[5]=((((-1.0)*x4456*x4458))+((r11*x4460))+((r12*x4450))+((sj0*x4452))+((sj0*x4457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4462=IKPowWithIntegerCheck(IKsign((((gconst112*r00))+((gconst113*r01)))),-1);
if(!x4462.valid){
continue;
}
CheckValue<IkReal> x4463 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst113*r20))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4462.value)))+(x4463.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4464=IKsin(j4);
IkReal x4465=IKcos(j4);
IkReal x4466=(cj2*sj1);
IkReal x4467=(gconst113*r20);
IkReal x4468=(gconst112*r21);
IkReal x4469=(gconst113*r00);
IkReal x4470=(gconst113*r10);
IkReal x4471=(cj1*sj2);
IkReal x4472=((1.0)*x4465);
IkReal x4473=((1.0)*x4464);
IkReal x4474=(gconst112*x4465);
IkReal x4475=(gconst112*x4464);
evalcond[0]=((((-1.0)*x4467*x4473))+((x4464*x4468))+(((-1.0)*r22*x4472)));
evalcond[1]=(sj0+((r01*x4475))+(((-1.0)*x4469*x4473))+(((-1.0)*r02*x4472)));
evalcond[2]=((((-1.0)*r12*x4472))+(((-1.0)*x4470*x4473))+(((-1.0)*cj0))+((r11*x4475)));
evalcond[3]=(((r22*x4464))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4467*x4472))+((x4465*x4468)));
evalcond[4]=(((cj0*x4471))+((r01*x4474))+((cj0*x4466))+(((-1.0)*x4469*x4472))+((r02*x4464)));
evalcond[5]=(((sj0*x4471))+((r12*x4464))+(((-1.0)*x4470*x4472))+((sj0*x4466))+((r11*x4474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4476=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4476;
j4eval[1]=IKsign(x4476);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4477=((1.0)*cj5);
IkReal x4478=((((-1.0)*r21*x4477))+(((-1.0)*r20*sj5)));
j4eval[0]=x4478;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4477))))));
j4eval[2]=IKsign(x4478);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4479=cj5*cj5;
IkReal x4480=r11*r11;
IkReal x4481=(r11*sj5);
IkReal x4482=(cj5*r10);
IkReal x4483=((((-1.0)*x4479*x4480))+(((-2.0)*x4481*x4482))+(r12*r12)+x4480+((x4479*(r10*r10))));
j4eval[0]=x4483;
j4eval[1]=IKsign(x4483);
j4eval[2]=((IKabs(((((-1.0)*x4482))+x4481)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4484=cj5*cj5;
IkReal x4485=r11*r11;
IkReal x4486=(cj5*r10);
IkReal x4487=(r11*sj5);
CheckValue<IkReal> x4488=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x4486*x4487))+x4485+(((-1.0)*x4484*x4485))+((x4484*(r10*r10))))),-1);
if(!x4488.valid){
continue;
}
CheckValue<IkReal> x4489 = IKatan2WithCheck(IkReal(((((-1.0)*x4486))+x4487)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4488.value)))+(x4489.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4490=IKcos(j4);
IkReal x4491=IKsin(j4);
IkReal x4492=(cj5*r00);
IkReal x4493=(cj5*r10);
IkReal x4494=(r21*sj5);
IkReal x4495=(cj5*r20);
IkReal x4496=((1.0)*x4490);
IkReal x4497=((1.0)*x4491);
IkReal x4498=(sj5*x4491);
IkReal x4499=(sj5*x4490);
evalcond[0]=(((r12*x4491))+((r11*x4499))+(((-1.0)*x4493*x4496)));
evalcond[1]=(((x4491*x4494))+(((-1.0)*x4495*x4497))+(((-1.0)*r22*x4496)));
evalcond[2]=((((-1.0)*x4492*x4497))+(((-1.0)*r02*x4496))+((r01*x4498)));
evalcond[3]=((-1.0)+((r11*x4498))+(((-1.0)*x4493*x4497))+(((-1.0)*r12*x4496)));
evalcond[4]=((((-1.0)*x4492*x4496))+((cj2*sj1))+((cj1*sj2))+((r02*x4491))+((r01*x4499)));
evalcond[5]=(((x4490*x4494))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4495*x4496))+((r22*x4491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4500=((1.0)*cj5);
CheckValue<IkReal> x4501 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x4500))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4501.valid){
continue;
}
CheckValue<IkReal> x4502=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4500))+(((-1.0)*r20*sj5)))),-1);
if(!x4502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4501.value)+(((1.5707963267949)*(x4502.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4503=IKcos(j4);
IkReal x4504=IKsin(j4);
IkReal x4505=(cj5*r00);
IkReal x4506=(cj5*r10);
IkReal x4507=(r21*sj5);
IkReal x4508=(cj5*r20);
IkReal x4509=((1.0)*x4503);
IkReal x4510=((1.0)*x4504);
IkReal x4511=(sj5*x4504);
IkReal x4512=(sj5*x4503);
evalcond[0]=((((-1.0)*x4506*x4509))+((r12*x4504))+((r11*x4512)));
evalcond[1]=((((-1.0)*r22*x4509))+((x4504*x4507))+(((-1.0)*x4508*x4510)));
evalcond[2]=((((-1.0)*x4505*x4510))+(((-1.0)*r02*x4509))+((r01*x4511)));
evalcond[3]=((-1.0)+(((-1.0)*x4506*x4510))+((r11*x4511))+(((-1.0)*r12*x4509)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x4504))+((r01*x4512))+(((-1.0)*x4505*x4509)));
evalcond[5]=(((r22*x4504))+(((-1.0)*x4508*x4509))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4503*x4507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4513 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4513.valid){
continue;
}
CheckValue<IkReal> x4514=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4513.value)+(((1.5707963267949)*(x4514.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4515=IKcos(j4);
IkReal x4516=IKsin(j4);
IkReal x4517=(cj5*r00);
IkReal x4518=(cj5*r10);
IkReal x4519=(r21*sj5);
IkReal x4520=(cj5*r20);
IkReal x4521=((1.0)*x4515);
IkReal x4522=((1.0)*x4516);
IkReal x4523=(sj5*x4516);
IkReal x4524=(sj5*x4515);
evalcond[0]=(((r11*x4524))+((r12*x4516))+(((-1.0)*x4518*x4521)));
evalcond[1]=(((x4516*x4519))+(((-1.0)*x4520*x4522))+(((-1.0)*r22*x4521)));
evalcond[2]=(((r01*x4523))+(((-1.0)*x4517*x4522))+(((-1.0)*r02*x4521)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x4521))+((r11*x4523))+(((-1.0)*x4518*x4522)));
evalcond[4]=(((r02*x4516))+((r01*x4524))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4517*x4521)));
evalcond[5]=((((-1.0)*x4520*x4521))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4516))+((x4515*x4519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4525=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4525;
j4eval[1]=IKsign(x4525);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4526=((1.0)*cj5);
IkReal x4527=((((-1.0)*r01*x4526))+(((-1.0)*r00*sj5)));
j4eval[0]=x4527;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4526))))));
j4eval[2]=IKsign(x4527);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4528=(sj1*sj2);
IkReal x4529=(cj5*r10);
IkReal x4530=(r11*sj5);
IkReal x4531=(cj1*cj2);
IkReal x4532=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4532;
j4eval[1]=((IKabs((((x4528*x4530))+(((-1.0)*x4528*x4529))+((x4529*x4531))+(((-1.0)*x4530*x4531)))))+(IKabs(((((-1.0)*r12*x4528))+((r12*x4531))))));
j4eval[2]=IKsign(x4532);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4533=(sj1*sj2);
IkReal x4534=(cj5*r10);
IkReal x4535=(r11*sj5);
IkReal x4536=(cj1*cj2);
CheckValue<IkReal> x4537=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4537.valid){
continue;
}
CheckValue<IkReal> x4538 = IKatan2WithCheck(IkReal(((((-1.0)*x4535*x4536))+(((-1.0)*x4533*x4534))+((x4533*x4535))+((x4534*x4536)))),IkReal((((r12*x4536))+(((-1.0)*r12*x4533)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4537.value)))+(x4538.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4539=IKcos(j4);
IkReal x4540=IKsin(j4);
IkReal x4541=(cj5*r00);
IkReal x4542=(cj5*r10);
IkReal x4543=(r21*sj5);
IkReal x4544=((1.0)*cj2);
IkReal x4545=(cj5*r20);
IkReal x4546=((1.0)*x4539);
IkReal x4547=((1.0)*x4540);
IkReal x4548=(sj5*x4540);
IkReal x4549=(sj5*x4539);
evalcond[0]=((((-1.0)*x4542*x4546))+((r12*x4540))+((r11*x4549)));
evalcond[1]=((((-1.0)*r22*x4546))+(((-1.0)*x4545*x4547))+((x4540*x4543)));
evalcond[2]=((((-1.0)*r02*x4546))+((r01*x4548))+(((-1.0)*x4541*x4547)));
evalcond[3]=((1.0)+(((-1.0)*x4542*x4547))+(((-1.0)*r12*x4546))+((r11*x4548)));
evalcond[4]=(((r22*x4540))+(((-1.0)*x4545*x4546))+((sj1*sj2))+(((-1.0)*cj1*x4544))+((x4539*x4543)));
evalcond[5]=(((r02*x4540))+(((-1.0)*cj1*sj2))+((r01*x4549))+(((-1.0)*x4541*x4546))+(((-1.0)*sj1*x4544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4550=((1.0)*cj5);
CheckValue<IkReal> x4551=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4550))+(((-1.0)*r00*sj5)))),-1);
if(!x4551.valid){
continue;
}
CheckValue<IkReal> x4552 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4550)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4551.value)))+(x4552.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4553=IKcos(j4);
IkReal x4554=IKsin(j4);
IkReal x4555=(cj5*r00);
IkReal x4556=(cj5*r10);
IkReal x4557=(r21*sj5);
IkReal x4558=((1.0)*cj2);
IkReal x4559=(cj5*r20);
IkReal x4560=((1.0)*x4553);
IkReal x4561=((1.0)*x4554);
IkReal x4562=(sj5*x4554);
IkReal x4563=(sj5*x4553);
evalcond[0]=((((-1.0)*x4556*x4560))+((r11*x4563))+((r12*x4554)));
evalcond[1]=((((-1.0)*r22*x4560))+(((-1.0)*x4559*x4561))+((x4554*x4557)));
evalcond[2]=((((-1.0)*x4555*x4561))+(((-1.0)*r02*x4560))+((r01*x4562)));
evalcond[3]=((1.0)+(((-1.0)*x4556*x4561))+((r11*x4562))+(((-1.0)*r12*x4560)));
evalcond[4]=(((x4553*x4557))+(((-1.0)*cj1*x4558))+((sj1*sj2))+((r22*x4554))+(((-1.0)*x4559*x4560)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x4555*x4560))+((r02*x4554))+((r01*x4563))+(((-1.0)*sj1*x4558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4564=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4564.valid){
continue;
}
CheckValue<IkReal> x4565 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4564.value)))+(x4565.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4566=IKcos(j4);
IkReal x4567=IKsin(j4);
IkReal x4568=(cj5*r00);
IkReal x4569=(cj5*r10);
IkReal x4570=(r21*sj5);
IkReal x4571=((1.0)*cj2);
IkReal x4572=(cj5*r20);
IkReal x4573=((1.0)*x4566);
IkReal x4574=((1.0)*x4567);
IkReal x4575=(sj5*x4567);
IkReal x4576=(sj5*x4566);
evalcond[0]=((((-1.0)*x4569*x4573))+((r12*x4567))+((r11*x4576)));
evalcond[1]=(((x4567*x4570))+(((-1.0)*x4572*x4574))+(((-1.0)*r22*x4573)));
evalcond[2]=((((-1.0)*r02*x4573))+(((-1.0)*x4568*x4574))+((r01*x4575)));
evalcond[3]=((1.0)+(((-1.0)*x4569*x4574))+((r11*x4575))+(((-1.0)*r12*x4573)));
evalcond[4]=((((-1.0)*cj1*x4571))+((r22*x4567))+((sj1*sj2))+(((-1.0)*x4572*x4573))+((x4566*x4570)));
evalcond[5]=((((-1.0)*sj1*x4571))+((r02*x4567))+(((-1.0)*cj1*sj2))+(((-1.0)*x4568*x4573))+((r01*x4576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4577=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4577);
rxp0_2=(py*r00);
rxp1_0=(r21*x4577);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4578=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4578);
rxp0_2=(py*r00);
rxp1_0=(r21*x4578);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4579=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4579);
rxp0_2=(py*r00);
rxp1_0=(r21*x4579);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4582=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x4582.valid){
continue;
}
IkReal x4580=x4582.value;
IkReal x4581=((1.0)*cj0*x4580);
cj4array[0]=((((-1.0)*cj1*sj2*x4581))+(((-1.0)*cj2*sj1*x4581)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4583=IKsin(j4);
IkReal x4584=IKcos(j4);
IkReal x4585=(r21*sj5);
IkReal x4586=((1.0)*x4584);
IkReal x4587=((1.0)*cj5*x4583);
evalcond[0]=(r12*x4583);
evalcond[1]=((((-1.0)*r12*x4586))+(((-1.0)*cj0)));
evalcond[2]=(((x4583*x4585))+(((-1.0)*r20*x4587)));
evalcond[3]=((((-1.0)*r00*x4587))+((r01*sj5*x4583)));
evalcond[4]=((((-1.0)*cj5*r20*x4586))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4584*x4585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4589=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4589.valid){
continue;
}
IkReal x4588=x4589.value;
cj4array[0]=((((-1.0)*sj1*sj2*x4588))+((cj1*cj2*x4588)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4590=IKsin(j4);
IkReal x4591=IKcos(j4);
IkReal x4592=(r01*sj5);
IkReal x4593=((1.0)*cj5*r00);
evalcond[0]=(r12*x4590);
evalcond[1]=((((-1.0)*r12*x4591))+(((-1.0)*cj0)));
evalcond[2]=(((r21*sj5*x4590))+(((-1.0)*cj5*r20*x4590)));
evalcond[3]=(((x4590*x4592))+(((-1.0)*x4590*x4593)));
evalcond[4]=((((-1.0)*x4591*x4593))+((cj0*cj2*sj1))+((x4591*x4592))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4594=IKPowWithIntegerCheck(r12,-1);
if(!x4594.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x4594.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4595=IKsin(j4);
IkReal x4596=IKcos(j4);
IkReal x4597=(sj5*x4596);
IkReal x4598=(sj5*x4595);
IkReal x4599=((1.0)*cj5*x4595);
IkReal x4600=((1.0)*cj5*x4596);
evalcond[0]=(r12*x4595);
evalcond[1]=(((r21*x4598))+(((-1.0)*r20*x4599)));
evalcond[2]=((((-1.0)*r00*x4599))+((r01*x4598)));
evalcond[3]=(((r21*x4597))+(((-1.0)*r20*x4600))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((cj0*cj2*sj1))+(((-1.0)*r00*x4600))+((cj0*cj1*sj2))+((r01*x4597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4601=((1.0)*cj5);
CheckValue<IkReal> x4602 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x4601))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x4601)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4602.valid){
continue;
}
CheckValue<IkReal> x4603=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4601))+(((-1.0)*r20*sj5)))),-1);
if(!x4603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4602.value)+(((1.5707963267949)*(x4603.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4604=IKsin(j4);
IkReal x4605=IKcos(j4);
IkReal x4606=(cj5*r00);
IkReal x4607=(cj5*r10);
IkReal x4608=(cj2*sj1);
IkReal x4609=(r21*sj5);
IkReal x4610=(cj5*r20);
IkReal x4611=(cj1*sj2);
IkReal x4612=((1.0)*x4605);
IkReal x4613=((1.0)*x4604);
IkReal x4614=(sj5*x4604);
IkReal x4615=(sj5*x4605);
evalcond[0]=(((x4604*x4609))+(((-1.0)*r22*x4612))+(((-1.0)*x4610*x4613)));
evalcond[1]=((((-1.0)*r02*x4612))+sj0+(((-1.0)*x4606*x4613))+((r01*x4614)));
evalcond[2]=((((-1.0)*x4607*x4613))+((r11*x4614))+(((-1.0)*r12*x4612))+(((-1.0)*cj0)));
evalcond[3]=(((x4605*x4609))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4604))+(((-1.0)*x4610*x4612)));
evalcond[4]=(((cj0*x4608))+(((-1.0)*x4606*x4612))+((r01*x4615))+((r02*x4604))+((cj0*x4611)));
evalcond[5]=(((r12*x4604))+((sj0*x4611))+(((-1.0)*x4607*x4612))+((r11*x4615))+((sj0*x4608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4616=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4616.valid){
continue;
}
CheckValue<IkReal> x4617 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4616.value)))+(x4617.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4618=IKsin(j4);
IkReal x4619=IKcos(j4);
IkReal x4620=(cj5*r00);
IkReal x4621=(cj5*r10);
IkReal x4622=(cj2*sj1);
IkReal x4623=(r21*sj5);
IkReal x4624=(cj5*r20);
IkReal x4625=(cj1*sj2);
IkReal x4626=((1.0)*x4619);
IkReal x4627=((1.0)*x4618);
IkReal x4628=(sj5*x4618);
IkReal x4629=(sj5*x4619);
evalcond[0]=((((-1.0)*r22*x4626))+((x4618*x4623))+(((-1.0)*x4624*x4627)));
evalcond[1]=(sj0+(((-1.0)*r02*x4626))+(((-1.0)*x4620*x4627))+((r01*x4628)));
evalcond[2]=(((r11*x4628))+(((-1.0)*x4621*x4627))+(((-1.0)*r12*x4626))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4619*x4623))+((r22*x4618))+(((-1.0)*x4624*x4626)));
evalcond[4]=(((cj0*x4622))+((cj0*x4625))+((r02*x4618))+(((-1.0)*x4620*x4626))+((r01*x4629)));
evalcond[5]=(((r11*x4629))+(((-1.0)*x4621*x4626))+((r12*x4618))+((sj0*x4622))+((sj0*x4625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4630=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4630.valid){
continue;
}
CheckValue<IkReal> x4631 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4631.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4630.value)))+(x4631.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4632=IKsin(j4);
IkReal x4633=IKcos(j4);
IkReal x4634=(cj5*r00);
IkReal x4635=(cj5*r10);
IkReal x4636=(cj2*sj1);
IkReal x4637=(r21*sj5);
IkReal x4638=(cj5*r20);
IkReal x4639=(cj1*sj2);
IkReal x4640=((1.0)*x4633);
IkReal x4641=((1.0)*x4632);
IkReal x4642=(sj5*x4632);
IkReal x4643=(sj5*x4633);
evalcond[0]=(((x4632*x4637))+(((-1.0)*r22*x4640))+(((-1.0)*x4638*x4641)));
evalcond[1]=(sj0+(((-1.0)*r02*x4640))+((r01*x4642))+(((-1.0)*x4634*x4641)));
evalcond[2]=(((r11*x4642))+(((-1.0)*r12*x4640))+(((-1.0)*x4635*x4641))+(((-1.0)*cj0)));
evalcond[3]=(((x4633*x4637))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4638*x4640))+((r22*x4632)));
evalcond[4]=(((r01*x4643))+(((-1.0)*x4634*x4640))+((r02*x4632))+((cj0*x4636))+((cj0*x4639)));
evalcond[5]=(((r12*x4632))+((sj0*x4639))+((sj0*x4636))+((r11*x4643))+(((-1.0)*x4635*x4640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4644=((1.0)*cj5);
IkReal x4645=((1.0)*sj5);
IkReal x4646=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x4646;
j0eval[1]=((IKabs(((((-1.0)*r01*x4644))+(((-1.0)*r00*x4645)))))+(IKabs(((((-1.0)*r11*x4644))+(((-1.0)*r10*x4645))))));
j0eval[2]=IKsign(x4646);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4647=r21*r21;
IkReal x4648=cj5*cj5;
IkReal x4649=(cj2*sj1);
IkReal x4650=(cj1*sj2);
IkReal x4651=(r21*sj5);
IkReal x4652=((1.0)*cj5*r20);
IkReal x4653=((((2.0)*cj5*r20*x4651))+(((-1.0)*x4647))+(((-1.0)*(r22*r22)))+((x4647*x4648))+(((-1.0)*x4648*(r20*r20))));
j4eval[0]=x4653;
j4eval[1]=((IKabs((((x4650*x4651))+(((-1.0)*x4649*x4652))+((x4649*x4651))+(((-1.0)*x4650*x4652)))))+(IKabs((((r22*x4649))+((r22*x4650))))));
j4eval[2]=IKsign(x4653);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4654=cj1*cj1;
IkReal x4655=(cj2*sj2);
IkReal x4656=(cj1*sj1);
j0eval[0]=((((-2.0)*x4654*x4655))+(((-1.08418367346939)*cj2*x4656))+x4655+x4656+(((-1.08418367346939)*sj2*x4654))+(((-2.0)*x4656*(cj2*cj2))));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.195493438569105)*px))+(((-1.19192641276835)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.195493438569105)*py))+(((-1.19192641276835)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.195493438569105)*px))+(((-1.19192641276835)*py))))+IKsqr(((((-0.195493438569105)*py))+(((-1.19192641276835)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.195493438569105)*px))+(((-1.19192641276835)*py))), ((((-0.195493438569105)*py))+(((-1.19192641276835)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4657=IKcos(j0);
IkReal x4658=IKsin(j0);
evalcond[0]=((((-0.817)*x4657))+(((-1.0)*px))+(((0.134)*x4658)));
evalcond[1]=((((-0.817)*x4658))+(((-0.134)*x4657))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4659=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4659;
j4eval[1]=IKsign(x4659);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4660=((1.0)*cj5);
IkReal x4661=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4660)));
j4eval[0]=x4661;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4660))))));
j4eval[2]=IKsign(x4661);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4662=cj5*cj5;
IkReal x4663=((1.0)*r20);
IkReal x4664=(r01*r21);
IkReal x4665=(r21*sj5);
IkReal x4666=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4664))+((x4662*x4664))+((cj5*r00*x4665))+(((-1.0)*r00*x4662*x4663)));
j4eval[0]=x4666;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x4663))+((cj0*x4665))))));
j4eval[2]=IKsign(x4666);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4667=cj5*cj5;
IkReal x4668=((1.0)*r20);
IkReal x4669=(r01*r21);
IkReal x4670=(r21*sj5);
CheckValue<IkReal> x4671 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x4670))+(((-1.0)*cj0*cj5*x4668)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4671.valid){
continue;
}
CheckValue<IkReal> x4672=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4669))+((cj5*r00*x4670))+(((-1.0)*r00*x4667*x4668))+((x4667*x4669)))),-1);
if(!x4672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4671.value)+(((1.5707963267949)*(x4672.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4673=IKcos(j4);
IkReal x4674=IKsin(j4);
IkReal x4675=(cj5*r00);
IkReal x4676=(cj5*r10);
IkReal x4677=(cj5*r20);
IkReal x4678=((1.0)*x4673);
IkReal x4679=((1.0)*x4674);
IkReal x4680=(sj5*x4673);
IkReal x4681=(sj5*x4674);
evalcond[0]=(((r22*x4674))+((r21*x4680))+(((-1.0)*x4677*x4678)));
evalcond[1]=((((-1.0)*r22*x4678))+((r21*x4681))+(((-1.0)*x4677*x4679)));
evalcond[2]=(((r02*x4674))+(((-1.0)*x4675*x4678))+cj0+((r01*x4680)));
evalcond[3]=(sj0+(((-1.0)*x4676*x4678))+((r12*x4674))+((r11*x4680)));
evalcond[4]=((((-1.0)*r02*x4678))+(((-1.0)*x4675*x4679))+sj0+((r01*x4681)));
evalcond[5]=((((-1.0)*x4676*x4679))+(((-1.0)*r12*x4678))+((r11*x4681))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4682=((1.0)*cj5);
CheckValue<IkReal> x4683 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4682)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4683.valid){
continue;
}
CheckValue<IkReal> x4684=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4682))+(((-1.0)*r10*sj5)))),-1);
if(!x4684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4683.value)+(((1.5707963267949)*(x4684.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4685=IKcos(j4);
IkReal x4686=IKsin(j4);
IkReal x4687=(cj5*r00);
IkReal x4688=(cj5*r10);
IkReal x4689=(cj5*r20);
IkReal x4690=((1.0)*x4685);
IkReal x4691=((1.0)*x4686);
IkReal x4692=(sj5*x4685);
IkReal x4693=(sj5*x4686);
evalcond[0]=(((r22*x4686))+((r21*x4692))+(((-1.0)*x4689*x4690)));
evalcond[1]=(((r21*x4693))+(((-1.0)*r22*x4690))+(((-1.0)*x4689*x4691)));
evalcond[2]=((((-1.0)*x4687*x4690))+cj0+((r02*x4686))+((r01*x4692)));
evalcond[3]=(sj0+(((-1.0)*x4688*x4690))+((r12*x4686))+((r11*x4692)));
evalcond[4]=((((-1.0)*x4687*x4691))+sj0+(((-1.0)*r02*x4690))+((r01*x4693)));
evalcond[5]=((((-1.0)*r12*x4690))+(((-1.0)*x4688*x4691))+((r11*x4693))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4694 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4694.valid){
continue;
}
CheckValue<IkReal> x4695=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4694.value)+(((1.5707963267949)*(x4695.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4696=IKcos(j4);
IkReal x4697=IKsin(j4);
IkReal x4698=(cj5*r00);
IkReal x4699=(cj5*r10);
IkReal x4700=(cj5*r20);
IkReal x4701=((1.0)*x4696);
IkReal x4702=((1.0)*x4697);
IkReal x4703=(sj5*x4696);
IkReal x4704=(sj5*x4697);
evalcond[0]=((((-1.0)*x4700*x4701))+((r21*x4703))+((r22*x4697)));
evalcond[1]=((((-1.0)*x4700*x4702))+(((-1.0)*r22*x4701))+((r21*x4704)));
evalcond[2]=(((r02*x4697))+cj0+(((-1.0)*x4698*x4701))+((r01*x4703)));
evalcond[3]=(sj0+((r12*x4697))+(((-1.0)*x4699*x4701))+((r11*x4703)));
evalcond[4]=(sj0+(((-1.0)*r02*x4701))+(((-1.0)*x4698*x4702))+((r01*x4704)));
evalcond[5]=((((-1.0)*r12*x4701))+(((-1.0)*x4699*x4702))+((r11*x4704))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((7.03596744552376)*px))+(((-1.73273825150958)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.73273825150958)*px))+(((-7.03596744552376)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.03596744552376)*px))+(((-1.73273825150958)*py))))+IKsqr(((((-1.73273825150958)*px))+(((-7.03596744552376)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((7.03596744552376)*px))+(((-1.73273825150958)*py))), ((((-1.73273825150958)*px))+(((-7.03596744552376)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4705=IKcos(j0);
IkReal x4706=IKsin(j0);
evalcond[0]=((((-0.033)*x4705))+(((0.134)*x4706))+(((-1.0)*px)));
evalcond[1]=((((-0.033)*x4706))+(((-0.134)*x4705))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4707=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4707;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4707);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4708=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4708;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4708);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4709=((1.0)*cj5);
IkReal x4710=((((-1.0)*r01*x4709))+(((-1.0)*r00*sj5)));
j4eval[0]=x4710;
j4eval[1]=IKsign(x4710);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4709)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4711=((1.0)*cj5);
CheckValue<IkReal> x4712 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4711))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4712.valid){
continue;
}
CheckValue<IkReal> x4713=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4711)))),-1);
if(!x4713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4712.value)+(((1.5707963267949)*(x4713.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4714=IKcos(j4);
IkReal x4715=IKsin(j4);
IkReal x4716=((1.0)*cj0);
IkReal x4717=(cj5*r00);
IkReal x4718=(cj5*r10);
IkReal x4719=(cj5*r20);
IkReal x4720=((1.0)*x4714);
IkReal x4721=((1.0)*x4715);
IkReal x4722=(sj5*x4714);
IkReal x4723=(sj5*x4715);
evalcond[0]=(((r22*x4715))+((r21*x4722))+(((-1.0)*x4719*x4720)));
evalcond[1]=(((r21*x4723))+(((-1.0)*x4719*x4721))+(((-1.0)*r22*x4720)));
evalcond[2]=(sj0+(((-1.0)*x4717*x4721))+((r01*x4723))+(((-1.0)*r02*x4720)));
evalcond[3]=((((-1.0)*x4717*x4720))+((r01*x4722))+((r02*x4715))+(((-1.0)*x4716)));
evalcond[4]=(((r11*x4722))+(((-1.0)*sj0))+(((-1.0)*x4718*x4720))+((r12*x4715)));
evalcond[5]=(((r11*x4723))+(((-1.0)*r12*x4720))+(((-1.0)*x4718*x4721))+(((-1.0)*x4716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4724 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4724.valid){
continue;
}
CheckValue<IkReal> x4725=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4724.value)+(((1.5707963267949)*(x4725.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4726=IKcos(j4);
IkReal x4727=IKsin(j4);
IkReal x4728=((1.0)*cj0);
IkReal x4729=(cj5*r00);
IkReal x4730=(cj5*r10);
IkReal x4731=(cj5*r20);
IkReal x4732=((1.0)*x4726);
IkReal x4733=((1.0)*x4727);
IkReal x4734=(sj5*x4726);
IkReal x4735=(sj5*x4727);
evalcond[0]=((((-1.0)*x4731*x4732))+((r21*x4734))+((r22*x4727)));
evalcond[1]=((((-1.0)*x4731*x4733))+((r21*x4735))+(((-1.0)*r22*x4732)));
evalcond[2]=(sj0+(((-1.0)*x4729*x4733))+((r01*x4735))+(((-1.0)*r02*x4732)));
evalcond[3]=((((-1.0)*x4728))+((r02*x4727))+(((-1.0)*x4729*x4732))+((r01*x4734)));
evalcond[4]=(((r11*x4734))+(((-1.0)*x4730*x4732))+(((-1.0)*sj0))+((r12*x4727)));
evalcond[5]=(((r11*x4735))+(((-1.0)*x4730*x4733))+(((-1.0)*r12*x4732))+(((-1.0)*x4728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4736=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4736.valid){
continue;
}
CheckValue<IkReal> x4737 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4736.value)))+(x4737.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4738=IKcos(j4);
IkReal x4739=IKsin(j4);
IkReal x4740=((1.0)*cj0);
IkReal x4741=(cj5*r00);
IkReal x4742=(cj5*r10);
IkReal x4743=(cj5*r20);
IkReal x4744=((1.0)*x4738);
IkReal x4745=((1.0)*x4739);
IkReal x4746=(sj5*x4738);
IkReal x4747=(sj5*x4739);
evalcond[0]=(((r22*x4739))+((r21*x4746))+(((-1.0)*x4743*x4744)));
evalcond[1]=((((-1.0)*r22*x4744))+((r21*x4747))+(((-1.0)*x4743*x4745)));
evalcond[2]=(sj0+((r01*x4747))+(((-1.0)*x4741*x4745))+(((-1.0)*r02*x4744)));
evalcond[3]=(((r01*x4746))+((r02*x4739))+(((-1.0)*x4740))+(((-1.0)*x4741*x4744)));
evalcond[4]=(((r11*x4746))+(((-1.0)*sj0))+(((-1.0)*x4742*x4744))+((r12*x4739)));
evalcond[5]=(((r11*x4747))+(((-1.0)*r12*x4744))+(((-1.0)*x4740))+(((-1.0)*x4742*x4745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4748=((1.0)*sj5);
IkReal x4749=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x4748))+(((-1.0)*r11*x4749)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x4748))+(((-1.0)*r01*x4749)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x4748))+(((-1.0)*r11*x4749))))+IKsqr(((((-1.0)*r00*x4748))+(((-1.0)*r01*x4749))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x4748))+(((-1.0)*r11*x4749))), ((((-1.0)*r00*x4748))+(((-1.0)*r01*x4749))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4750=IKsin(j0);
IkReal x4751=IKcos(j0);
IkReal x4752=(r10*sj5);
IkReal x4753=(r00*sj5);
IkReal x4754=(cj5*r11);
IkReal x4755=(cj5*r01);
evalcond[0]=(x4751+x4753+x4755);
evalcond[1]=(x4750+x4752+x4754);
evalcond[2]=((((0.134)*x4750))+(((-1.0)*px))+(((-0.1)*x4755))+(((-0.1)*x4753)));
evalcond[3]=((((-0.134)*x4751))+(((-1.0)*py))+(((-0.1)*x4754))+(((-0.1)*x4752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4756=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4756;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x4756);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4757=((1.0)*cj5);
IkReal x4758=((((-1.0)*r01*x4757))+(((-1.0)*r00*sj5)));
j4eval[0]=x4758;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4757))))));
j4eval[2]=IKsign(x4758);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4759=cj5*cj5;
IkReal x4760=r01*r01;
IkReal x4761=(cj5*r00);
IkReal x4762=(r01*sj5);
IkReal x4763=((((-1.0)*x4760))+(((-1.0)*x4759*(r00*r00)))+((x4759*x4760))+(((-1.0)*(r02*r02)))+(((2.0)*x4761*x4762)));
j4eval[0]=x4763;
j4eval[1]=IKsign(x4763);
j4eval[2]=((IKabs((r02*sj0)))+(IKabs(((((-1.0)*sj0*x4761))+((sj0*x4762))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4764=cj5*cj5;
IkReal x4765=r01*r01;
IkReal x4766=(cj5*r00);
IkReal x4767=(r01*sj5);
CheckValue<IkReal> x4768=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4765))+(((2.0)*x4766*x4767))+(((-1.0)*(r02*r02)))+((x4764*x4765))+(((-1.0)*x4764*(r00*r00))))),-1);
if(!x4768.valid){
continue;
}
CheckValue<IkReal> x4769 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x4766))+((sj0*x4767)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4769.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4768.value)))+(x4769.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4770=IKcos(j4);
IkReal x4771=IKsin(j4);
IkReal x4772=(cj5*r00);
IkReal x4773=(r01*sj5);
IkReal x4774=(cj5*r10);
IkReal x4775=(cj5*r20);
IkReal x4776=((1.0)*x4770);
IkReal x4777=((1.0)*x4771);
IkReal x4778=(sj5*x4771);
IkReal x4779=(sj5*x4770);
evalcond[0]=(((r02*x4771))+(((-1.0)*x4772*x4776))+((x4770*x4773)));
evalcond[1]=(((r11*x4779))+((r12*x4771))+(((-1.0)*x4774*x4776)));
evalcond[2]=((((-1.0)*r22*x4776))+((r21*x4778))+(((-1.0)*x4775*x4777)));
evalcond[3]=((1.0)+((r21*x4779))+((r22*x4771))+(((-1.0)*x4775*x4776)));
evalcond[4]=(sj0+(((-1.0)*x4772*x4777))+((x4771*x4773))+(((-1.0)*r02*x4776)));
evalcond[5]=(((r11*x4778))+(((-1.0)*r12*x4776))+(((-1.0)*x4774*x4777))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4780=((1.0)*cj5);
CheckValue<IkReal> x4781 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x4780)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4781.valid){
continue;
}
CheckValue<IkReal> x4782=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4780)))),-1);
if(!x4782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4781.value)+(((1.5707963267949)*(x4782.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4783=IKcos(j4);
IkReal x4784=IKsin(j4);
IkReal x4785=(cj5*r00);
IkReal x4786=(r01*sj5);
IkReal x4787=(cj5*r10);
IkReal x4788=(cj5*r20);
IkReal x4789=((1.0)*x4783);
IkReal x4790=((1.0)*x4784);
IkReal x4791=(sj5*x4784);
IkReal x4792=(sj5*x4783);
evalcond[0]=(((r02*x4784))+(((-1.0)*x4785*x4789))+((x4783*x4786)));
evalcond[1]=((((-1.0)*x4787*x4789))+((r12*x4784))+((r11*x4792)));
evalcond[2]=((((-1.0)*x4788*x4790))+((r21*x4791))+(((-1.0)*r22*x4789)));
evalcond[3]=((1.0)+(((-1.0)*x4788*x4789))+((r21*x4792))+((r22*x4784)));
evalcond[4]=(sj0+(((-1.0)*x4785*x4790))+((x4784*x4786))+(((-1.0)*r02*x4789)));
evalcond[5]=((((-1.0)*x4787*x4790))+((r11*x4791))+(((-1.0)*cj0))+(((-1.0)*r12*x4789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4793 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4793.valid){
continue;
}
CheckValue<IkReal> x4794=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4794.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4793.value)+(((1.5707963267949)*(x4794.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4795=IKcos(j4);
IkReal x4796=IKsin(j4);
IkReal x4797=(cj5*r00);
IkReal x4798=(r01*sj5);
IkReal x4799=(cj5*r10);
IkReal x4800=(cj5*r20);
IkReal x4801=((1.0)*x4795);
IkReal x4802=((1.0)*x4796);
IkReal x4803=(sj5*x4796);
IkReal x4804=(sj5*x4795);
evalcond[0]=(((x4795*x4798))+(((-1.0)*x4797*x4801))+((r02*x4796)));
evalcond[1]=((((-1.0)*x4799*x4801))+((r12*x4796))+((r11*x4804)));
evalcond[2]=((((-1.0)*r22*x4801))+(((-1.0)*x4800*x4802))+((r21*x4803)));
evalcond[3]=((1.0)+(((-1.0)*x4800*x4801))+((r21*x4804))+((r22*x4796)));
evalcond[4]=(((x4796*x4798))+sj0+(((-1.0)*x4797*x4802))+(((-1.0)*r02*x4801)));
evalcond[5]=((((-1.0)*x4799*x4802))+(((-1.0)*r12*x4801))+((r11*x4803))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.780794779163268)*px))+(((2.28411607038807)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.28411607038807)*px))+(((-0.780794779163268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.780794779163268)*px))+(((2.28411607038807)*py))))+IKsqr(((((2.28411607038807)*px))+(((-0.780794779163268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.780794779163268)*px))+(((2.28411607038807)*py))), ((((2.28411607038807)*px))+(((-0.780794779163268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4805=IKsin(j0);
IkReal x4806=IKcos(j0);
evalcond[0]=((((0.134)*x4805))+(((-1.0)*px))+(((0.392)*x4806)));
evalcond[1]=((((-0.134)*x4806))+(((-1.0)*py))+(((0.392)*x4805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4807=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4807;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4807);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4808=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4808;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4808);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4809=((1.0)*cj5);
IkReal x4810=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4809)));
j4eval[0]=x4810;
j4eval[1]=IKsign(x4810);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4809)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4811=((1.0)*cj5);
CheckValue<IkReal> x4812=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4811))+(((-1.0)*r00*sj5)))),-1);
if(!x4812.valid){
continue;
}
CheckValue<IkReal> x4813 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4811))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4812.value)))+(x4813.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4814=IKcos(j4);
IkReal x4815=IKsin(j4);
IkReal x4816=((1.0)*cj0);
IkReal x4817=(cj5*r00);
IkReal x4818=(cj5*r10);
IkReal x4819=(cj5*r20);
IkReal x4820=((1.0)*x4814);
IkReal x4821=((1.0)*x4815);
IkReal x4822=(sj5*x4814);
IkReal x4823=(sj5*x4815);
evalcond[0]=(((r21*x4822))+(((-1.0)*x4819*x4820))+((r22*x4815)));
evalcond[1]=(((r21*x4823))+(((-1.0)*r22*x4820))+(((-1.0)*x4819*x4821)));
evalcond[2]=(sj0+(((-1.0)*r02*x4820))+(((-1.0)*x4817*x4821))+((r01*x4823)));
evalcond[3]=((((-1.0)*x4816))+(((-1.0)*x4817*x4820))+((r02*x4815))+((r01*x4822)));
evalcond[4]=((((-1.0)*sj0))+((r11*x4822))+((r12*x4815))+(((-1.0)*x4818*x4820)));
evalcond[5]=((((-1.0)*x4816))+((r11*x4823))+(((-1.0)*x4818*x4821))+(((-1.0)*r12*x4820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4824 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4824.valid){
continue;
}
CheckValue<IkReal> x4825=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4824.value)+(((1.5707963267949)*(x4825.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4826=IKcos(j4);
IkReal x4827=IKsin(j4);
IkReal x4828=((1.0)*cj0);
IkReal x4829=(cj5*r00);
IkReal x4830=(cj5*r10);
IkReal x4831=(cj5*r20);
IkReal x4832=((1.0)*x4826);
IkReal x4833=((1.0)*x4827);
IkReal x4834=(sj5*x4826);
IkReal x4835=(sj5*x4827);
evalcond[0]=(((r22*x4827))+(((-1.0)*x4831*x4832))+((r21*x4834)));
evalcond[1]=((((-1.0)*x4831*x4833))+(((-1.0)*r22*x4832))+((r21*x4835)));
evalcond[2]=(((r01*x4835))+sj0+(((-1.0)*x4829*x4833))+(((-1.0)*r02*x4832)));
evalcond[3]=(((r01*x4834))+(((-1.0)*x4828))+((r02*x4827))+(((-1.0)*x4829*x4832)));
evalcond[4]=((((-1.0)*sj0))+((r11*x4834))+(((-1.0)*x4830*x4832))+((r12*x4827)));
evalcond[5]=(((r11*x4835))+(((-1.0)*x4830*x4833))+(((-1.0)*x4828))+(((-1.0)*r12*x4832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4836=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4836.valid){
continue;
}
CheckValue<IkReal> x4837 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4836.value)))+(x4837.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4838=IKcos(j4);
IkReal x4839=IKsin(j4);
IkReal x4840=((1.0)*cj0);
IkReal x4841=(cj5*r00);
IkReal x4842=(cj5*r10);
IkReal x4843=(cj5*r20);
IkReal x4844=((1.0)*x4838);
IkReal x4845=((1.0)*x4839);
IkReal x4846=(sj5*x4838);
IkReal x4847=(sj5*x4839);
evalcond[0]=(((r22*x4839))+((r21*x4846))+(((-1.0)*x4843*x4844)));
evalcond[1]=(((r21*x4847))+(((-1.0)*r22*x4844))+(((-1.0)*x4843*x4845)));
evalcond[2]=(sj0+(((-1.0)*x4841*x4845))+(((-1.0)*r02*x4844))+((r01*x4847)));
evalcond[3]=((((-1.0)*x4840))+(((-1.0)*x4841*x4844))+((r01*x4846))+((r02*x4839)));
evalcond[4]=(((r12*x4839))+(((-1.0)*sj0))+(((-1.0)*x4842*x4844))+((r11*x4846)));
evalcond[5]=((((-1.0)*x4840))+(((-1.0)*x4842*x4845))+((r11*x4847))+(((-1.0)*r12*x4844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4848=IKsin(j0);
IkReal x4849=IKcos(j0);
IkReal x4850=((0.1)*sj5);
IkReal x4851=(cj5*r11);
IkReal x4852=(cj5*r01);
evalcond[0]=(((r00*sj5))+(((-1.0)*x4849))+x4852);
evalcond[1]=(((r10*sj5))+(((-1.0)*x4848))+x4851);
evalcond[2]=((((0.134)*x4848))+(((-1.0)*px))+(((-0.1)*x4852))+(((-1.0)*r00*x4850)));
evalcond[3]=((((-1.0)*r10*x4850))+(((-0.134)*x4849))+(((-1.0)*py))+(((-0.1)*x4851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4853=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4853;
j4eval[1]=IKsign(x4853);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4854=((1.0)*cj5);
IkReal x4855=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4854)));
j4eval[0]=x4855;
j4eval[1]=IKsign(x4855);
j4eval[2]=((IKabs((((r01*sj5))+(((-1.0)*r00*x4854)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4856=cj5*cj5;
IkReal x4857=r01*r01;
IkReal x4858=(cj5*r00);
IkReal x4859=(r01*sj5);
IkReal x4860=((((-1.0)*x4856*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x4857))+(((2.0)*x4858*x4859))+((x4856*x4857)));
j4eval[0]=x4860;
j4eval[1]=IKsign(x4860);
j4eval[2]=((IKabs((((sj0*x4859))+(((-1.0)*sj0*x4858)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4861=cj5*cj5;
IkReal x4862=r01*r01;
IkReal x4863=(cj5*r00);
IkReal x4864=(r01*sj5);
CheckValue<IkReal> x4865 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x4863))+((sj0*x4864)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4865.valid){
continue;
}
CheckValue<IkReal> x4866=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4861*(r00*r00)))+(((-1.0)*(r02*r02)))+((x4861*x4862))+(((2.0)*x4863*x4864))+(((-1.0)*x4862)))),-1);
if(!x4866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4865.value)+(((1.5707963267949)*(x4866.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4867=IKcos(j4);
IkReal x4868=IKsin(j4);
IkReal x4869=(cj5*r00);
IkReal x4870=(r01*sj5);
IkReal x4871=(cj5*r10);
IkReal x4872=(cj5*r20);
IkReal x4873=((1.0)*x4867);
IkReal x4874=((1.0)*x4868);
IkReal x4875=(sj5*x4868);
IkReal x4876=(sj5*x4867);
evalcond[0]=((((-1.0)*x4869*x4873))+((x4867*x4870))+((r02*x4868)));
evalcond[1]=(((r12*x4868))+(((-1.0)*x4871*x4873))+((r11*x4876)));
evalcond[2]=((((-1.0)*r22*x4873))+((r21*x4875))+(((-1.0)*x4872*x4874)));
evalcond[3]=((-1.0)+((r22*x4868))+((r21*x4876))+(((-1.0)*x4872*x4873)));
evalcond[4]=(((x4868*x4870))+sj0+(((-1.0)*x4869*x4874))+(((-1.0)*r02*x4873)));
evalcond[5]=((((-1.0)*x4871*x4874))+(((-1.0)*r12*x4873))+((r11*x4875))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4877=((1.0)*cj5);
CheckValue<IkReal> x4878=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4877)))),-1);
if(!x4878.valid){
continue;
}
CheckValue<IkReal> x4879 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x4877)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4879.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4878.value)))+(x4879.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4880=IKcos(j4);
IkReal x4881=IKsin(j4);
IkReal x4882=(cj5*r00);
IkReal x4883=(r01*sj5);
IkReal x4884=(cj5*r10);
IkReal x4885=(cj5*r20);
IkReal x4886=((1.0)*x4880);
IkReal x4887=((1.0)*x4881);
IkReal x4888=(sj5*x4881);
IkReal x4889=(sj5*x4880);
evalcond[0]=(((r02*x4881))+(((-1.0)*x4882*x4886))+((x4880*x4883)));
evalcond[1]=(((r12*x4881))+((r11*x4889))+(((-1.0)*x4884*x4886)));
evalcond[2]=((((-1.0)*x4885*x4887))+(((-1.0)*r22*x4886))+((r21*x4888)));
evalcond[3]=((-1.0)+(((-1.0)*x4885*x4886))+((r22*x4881))+((r21*x4889)));
evalcond[4]=(sj0+(((-1.0)*r02*x4886))+(((-1.0)*x4882*x4887))+((x4881*x4883)));
evalcond[5]=(((r11*x4888))+(((-1.0)*r12*x4886))+(((-1.0)*x4884*x4887))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4890=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4890.valid){
continue;
}
CheckValue<IkReal> x4891 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4890.value)))+(x4891.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4892=IKcos(j4);
IkReal x4893=IKsin(j4);
IkReal x4894=(cj5*r00);
IkReal x4895=(r01*sj5);
IkReal x4896=(cj5*r10);
IkReal x4897=(cj5*r20);
IkReal x4898=((1.0)*x4892);
IkReal x4899=((1.0)*x4893);
IkReal x4900=(sj5*x4893);
IkReal x4901=(sj5*x4892);
evalcond[0]=(((r02*x4893))+((x4892*x4895))+(((-1.0)*x4894*x4898)));
evalcond[1]=(((r12*x4893))+((r11*x4901))+(((-1.0)*x4896*x4898)));
evalcond[2]=(((r21*x4900))+(((-1.0)*x4897*x4899))+(((-1.0)*r22*x4898)));
evalcond[3]=((-1.0)+((r21*x4901))+(((-1.0)*x4897*x4898))+((r22*x4893)));
evalcond[4]=(sj0+(((-1.0)*r02*x4898))+(((-1.0)*x4894*x4899))+((x4893*x4895)));
evalcond[5]=((((-1.0)*r12*x4898))+((r11*x4900))+(((-1.0)*x4896*x4899))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.780794779163268)*px))+(((-2.28411607038807)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.28411607038807)*px))+(((-0.780794779163268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.780794779163268)*px))+(((-2.28411607038807)*py))))+IKsqr(((((-2.28411607038807)*px))+(((-0.780794779163268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.780794779163268)*px))+(((-2.28411607038807)*py))), ((((-2.28411607038807)*px))+(((-0.780794779163268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4902=IKsin(j0);
IkReal x4903=IKcos(j0);
evalcond[0]=((((0.134)*x4902))+(((-0.392)*x4903))+(((-1.0)*px)));
evalcond[1]=((((-0.134)*x4903))+(((-0.392)*x4902))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4904=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4904;
j4eval[1]=IKsign(x4904);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4905=((1.0)*cj5);
IkReal x4906=((((-1.0)*r11*x4905))+(((-1.0)*r10*sj5)));
j4eval[0]=x4906;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4905)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4906);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4907=cj5*cj5;
IkReal x4908=((1.0)*r20);
IkReal x4909=(r01*r21);
IkReal x4910=(r21*sj5);
IkReal x4911=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x4910))+(((-1.0)*x4909))+((x4907*x4909))+(((-1.0)*r00*x4907*x4908)));
j4eval[0]=x4911;
j4eval[1]=((IKabs((((cj0*x4910))+(((-1.0)*cj0*cj5*x4908)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4911);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4912=cj5*cj5;
IkReal x4913=((1.0)*r20);
IkReal x4914=(r01*r21);
IkReal x4915=(r21*sj5);
CheckValue<IkReal> x4916 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4913))+((cj0*x4915)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4916.valid){
continue;
}
CheckValue<IkReal> x4917=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x4915))+(((-1.0)*x4914))+(((-1.0)*r00*x4912*x4913))+((x4912*x4914)))),-1);
if(!x4917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4916.value)+(((1.5707963267949)*(x4917.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4918=IKcos(j4);
IkReal x4919=IKsin(j4);
IkReal x4920=(cj5*r00);
IkReal x4921=(cj5*r10);
IkReal x4922=(cj5*r20);
IkReal x4923=((1.0)*x4918);
IkReal x4924=((1.0)*x4919);
IkReal x4925=(sj5*x4918);
IkReal x4926=(sj5*x4919);
evalcond[0]=(((r21*x4925))+(((-1.0)*x4922*x4923))+((r22*x4919)));
evalcond[1]=(((r21*x4926))+(((-1.0)*r22*x4923))+(((-1.0)*x4922*x4924)));
evalcond[2]=(cj0+((r02*x4919))+((r01*x4925))+(((-1.0)*x4920*x4923)));
evalcond[3]=(sj0+((r12*x4919))+(((-1.0)*x4921*x4923))+((r11*x4925)));
evalcond[4]=((((-1.0)*r02*x4923))+sj0+((r01*x4926))+(((-1.0)*x4920*x4924)));
evalcond[5]=((((-1.0)*x4921*x4924))+(((-1.0)*r12*x4923))+((r11*x4926))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4927=((1.0)*cj5);
CheckValue<IkReal> x4928=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4927)))),-1);
if(!x4928.valid){
continue;
}
CheckValue<IkReal> x4929 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4927)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4928.value)))+(x4929.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4930=IKcos(j4);
IkReal x4931=IKsin(j4);
IkReal x4932=(cj5*r00);
IkReal x4933=(cj5*r10);
IkReal x4934=(cj5*r20);
IkReal x4935=((1.0)*x4930);
IkReal x4936=((1.0)*x4931);
IkReal x4937=(sj5*x4930);
IkReal x4938=(sj5*x4931);
evalcond[0]=((((-1.0)*x4934*x4935))+((r22*x4931))+((r21*x4937)));
evalcond[1]=((((-1.0)*x4934*x4936))+((r21*x4938))+(((-1.0)*r22*x4935)));
evalcond[2]=(cj0+(((-1.0)*x4932*x4935))+((r01*x4937))+((r02*x4931)));
evalcond[3]=(((r12*x4931))+sj0+(((-1.0)*x4933*x4935))+((r11*x4937)));
evalcond[4]=(sj0+(((-1.0)*r02*x4935))+(((-1.0)*x4932*x4936))+((r01*x4938)));
evalcond[5]=((((-1.0)*x4933*x4936))+(((-1.0)*r12*x4935))+((r11*x4938))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4939 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4939.valid){
continue;
}
CheckValue<IkReal> x4940=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4939.value)+(((1.5707963267949)*(x4940.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4941=IKcos(j4);
IkReal x4942=IKsin(j4);
IkReal x4943=(cj5*r00);
IkReal x4944=(cj5*r10);
IkReal x4945=(cj5*r20);
IkReal x4946=((1.0)*x4941);
IkReal x4947=((1.0)*x4942);
IkReal x4948=(sj5*x4941);
IkReal x4949=(sj5*x4942);
evalcond[0]=(((r21*x4948))+(((-1.0)*x4945*x4946))+((r22*x4942)));
evalcond[1]=(((r21*x4949))+(((-1.0)*r22*x4946))+(((-1.0)*x4945*x4947)));
evalcond[2]=((((-1.0)*x4943*x4946))+((r01*x4948))+cj0+((r02*x4942)));
evalcond[3]=(sj0+((r11*x4948))+((r12*x4942))+(((-1.0)*x4944*x4946)));
evalcond[4]=((((-1.0)*x4943*x4947))+((r01*x4949))+sj0+(((-1.0)*r02*x4946)));
evalcond[5]=(((r11*x4949))+(((-1.0)*r12*x4946))+(((-1.0)*x4944*x4947))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.19192641276835)*py))+(((0.195493438569105)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.19192641276835)*px))+(((-0.195493438569105)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.19192641276835)*py))+(((0.195493438569105)*px))))+IKsqr(((((1.19192641276835)*px))+(((-0.195493438569105)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.19192641276835)*py))+(((0.195493438569105)*px))), ((((1.19192641276835)*px))+(((-0.195493438569105)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4950=IKsin(j0);
IkReal x4951=IKcos(j0);
evalcond[0]=((((0.817)*x4951))+(((-1.0)*px))+(((0.134)*x4950)));
evalcond[1]=((((0.817)*x4950))+(((-1.0)*py))+(((-0.134)*x4951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4952=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4952;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4952);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4953=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4953;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4953);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4954=((1.0)*cj5);
IkReal x4955=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4954)));
j4eval[0]=x4955;
j4eval[1]=IKsign(x4955);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x4954))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4956=((1.0)*cj5);
CheckValue<IkReal> x4957=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4956)))),-1);
if(!x4957.valid){
continue;
}
CheckValue<IkReal> x4958 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4956))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4957.value)))+(x4958.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4959=IKcos(j4);
IkReal x4960=IKsin(j4);
IkReal x4961=((1.0)*cj0);
IkReal x4962=(cj5*r00);
IkReal x4963=(cj5*r10);
IkReal x4964=(cj5*r20);
IkReal x4965=((1.0)*x4959);
IkReal x4966=((1.0)*x4960);
IkReal x4967=(sj5*x4959);
IkReal x4968=(sj5*x4960);
evalcond[0]=(((r22*x4960))+(((-1.0)*x4964*x4965))+((r21*x4967)));
evalcond[1]=((((-1.0)*r22*x4965))+(((-1.0)*x4964*x4966))+((r21*x4968)));
evalcond[2]=(sj0+(((-1.0)*r02*x4965))+(((-1.0)*x4962*x4966))+((r01*x4968)));
evalcond[3]=((((-1.0)*x4961))+((r02*x4960))+(((-1.0)*x4962*x4965))+((r01*x4967)));
evalcond[4]=((((-1.0)*sj0))+((r12*x4960))+(((-1.0)*x4963*x4965))+((r11*x4967)));
evalcond[5]=((((-1.0)*x4961))+(((-1.0)*x4963*x4966))+((r11*x4968))+(((-1.0)*r12*x4965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4969 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4969.valid){
continue;
}
CheckValue<IkReal> x4970=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4969.value)+(((1.5707963267949)*(x4970.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4971=IKcos(j4);
IkReal x4972=IKsin(j4);
IkReal x4973=((1.0)*cj0);
IkReal x4974=(cj5*r00);
IkReal x4975=(cj5*r10);
IkReal x4976=(cj5*r20);
IkReal x4977=((1.0)*x4971);
IkReal x4978=((1.0)*x4972);
IkReal x4979=(sj5*x4971);
IkReal x4980=(sj5*x4972);
evalcond[0]=(((r22*x4972))+(((-1.0)*x4976*x4977))+((r21*x4979)));
evalcond[1]=((((-1.0)*x4976*x4978))+((r21*x4980))+(((-1.0)*r22*x4977)));
evalcond[2]=(((r01*x4980))+sj0+(((-1.0)*r02*x4977))+(((-1.0)*x4974*x4978)));
evalcond[3]=((((-1.0)*x4973))+((r02*x4972))+(((-1.0)*x4974*x4977))+((r01*x4979)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x4975*x4977))+((r12*x4972))+((r11*x4979)));
evalcond[5]=((((-1.0)*x4975*x4978))+((r11*x4980))+(((-1.0)*r12*x4977))+(((-1.0)*x4973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4981=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4981.valid){
continue;
}
CheckValue<IkReal> x4982 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4981.value)))+(x4982.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4983=IKcos(j4);
IkReal x4984=IKsin(j4);
IkReal x4985=((1.0)*cj0);
IkReal x4986=(cj5*r00);
IkReal x4987=(cj5*r10);
IkReal x4988=(cj5*r20);
IkReal x4989=((1.0)*x4983);
IkReal x4990=((1.0)*x4984);
IkReal x4991=(sj5*x4983);
IkReal x4992=(sj5*x4984);
evalcond[0]=((((-1.0)*x4988*x4989))+((r22*x4984))+((r21*x4991)));
evalcond[1]=((((-1.0)*r22*x4989))+(((-1.0)*x4988*x4990))+((r21*x4992)));
evalcond[2]=((((-1.0)*x4986*x4990))+sj0+(((-1.0)*r02*x4989))+((r01*x4992)));
evalcond[3]=((((-1.0)*x4986*x4989))+(((-1.0)*x4985))+((r01*x4991))+((r02*x4984)));
evalcond[4]=((((-1.0)*sj0))+((r12*x4984))+((r11*x4991))+(((-1.0)*x4987*x4989)));
evalcond[5]=(((r11*x4992))+(((-1.0)*r12*x4989))+(((-1.0)*x4985))+(((-1.0)*x4987*x4990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.73273825150958)*py))+(((7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.73273825150958)*px))+(((-7.03596744552376)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.73273825150958)*py))+(((7.03596744552376)*px))))+IKsqr(((((1.73273825150958)*px))+(((-7.03596744552376)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.73273825150958)*py))+(((7.03596744552376)*px))), ((((1.73273825150958)*px))+(((-7.03596744552376)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4993=IKsin(j0);
IkReal x4994=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.134)*x4993))+(((0.033)*x4994)));
evalcond[1]=((((-0.134)*x4994))+(((-1.0)*py))+(((0.033)*x4993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4995=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4995;
j4eval[1]=IKsign(x4995);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4996=((1.0)*cj5);
IkReal x4997=((((-1.0)*r11*x4996))+(((-1.0)*r10*sj5)));
j4eval[0]=x4997;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4996))))));
j4eval[2]=IKsign(x4997);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4998=cj5*cj5;
IkReal x4999=((1.0)*r20);
IkReal x5000=(r01*r21);
IkReal x5001=(r21*sj5);
IkReal x5002=(((cj5*r01*r20*sj5))+((cj5*r00*x5001))+(((-1.0)*r02*r22))+(((-1.0)*x5000))+(((-1.0)*r00*x4998*x4999))+((x4998*x5000)));
j4eval[0]=x5002;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x4999))+((cj0*x5001))))));
j4eval[2]=IKsign(x5002);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5003=cj5*cj5;
IkReal x5004=((1.0)*r20);
IkReal x5005=(r01*r21);
IkReal x5006=(r21*sj5);
CheckValue<IkReal> x5007 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5004))+((cj0*x5006)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5007.valid){
continue;
}
CheckValue<IkReal> x5008=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((cj5*r00*x5006))+(((-1.0)*r02*r22))+((x5003*x5005))+(((-1.0)*x5005))+(((-1.0)*r00*x5003*x5004)))),-1);
if(!x5008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5007.value)+(((1.5707963267949)*(x5008.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5009=IKcos(j4);
IkReal x5010=IKsin(j4);
IkReal x5011=(cj5*r00);
IkReal x5012=(cj5*r10);
IkReal x5013=(cj5*r20);
IkReal x5014=((1.0)*x5009);
IkReal x5015=((1.0)*x5010);
IkReal x5016=(sj5*x5009);
IkReal x5017=(sj5*x5010);
evalcond[0]=((((-1.0)*x5013*x5014))+((r21*x5016))+((r22*x5010)));
evalcond[1]=((((-1.0)*r22*x5014))+(((-1.0)*x5013*x5015))+((r21*x5017)));
evalcond[2]=(cj0+((r02*x5010))+(((-1.0)*x5011*x5014))+((r01*x5016)));
evalcond[3]=(sj0+(((-1.0)*x5012*x5014))+((r11*x5016))+((r12*x5010)));
evalcond[4]=(sj0+(((-1.0)*r02*x5014))+(((-1.0)*x5011*x5015))+((r01*x5017)));
evalcond[5]=((((-1.0)*x5012*x5015))+(((-1.0)*r12*x5014))+((r11*x5017))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5018=((1.0)*cj5);
CheckValue<IkReal> x5019 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5018)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5019.valid){
continue;
}
CheckValue<IkReal> x5020=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5018)))),-1);
if(!x5020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5019.value)+(((1.5707963267949)*(x5020.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5021=IKcos(j4);
IkReal x5022=IKsin(j4);
IkReal x5023=(cj5*r00);
IkReal x5024=(cj5*r10);
IkReal x5025=(cj5*r20);
IkReal x5026=((1.0)*x5021);
IkReal x5027=((1.0)*x5022);
IkReal x5028=(sj5*x5021);
IkReal x5029=(sj5*x5022);
evalcond[0]=((((-1.0)*x5025*x5026))+((r22*x5022))+((r21*x5028)));
evalcond[1]=((((-1.0)*x5025*x5027))+(((-1.0)*r22*x5026))+((r21*x5029)));
evalcond[2]=(((r02*x5022))+cj0+(((-1.0)*x5023*x5026))+((r01*x5028)));
evalcond[3]=(((r11*x5028))+sj0+((r12*x5022))+(((-1.0)*x5024*x5026)));
evalcond[4]=((((-1.0)*r02*x5026))+sj0+(((-1.0)*x5023*x5027))+((r01*x5029)));
evalcond[5]=(((r11*x5029))+(((-1.0)*r12*x5026))+(((-1.0)*x5024*x5027))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5030 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5030.valid){
continue;
}
CheckValue<IkReal> x5031=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5030.value)+(((1.5707963267949)*(x5031.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5032=IKcos(j4);
IkReal x5033=IKsin(j4);
IkReal x5034=(cj5*r00);
IkReal x5035=(cj5*r10);
IkReal x5036=(cj5*r20);
IkReal x5037=((1.0)*x5032);
IkReal x5038=((1.0)*x5033);
IkReal x5039=(sj5*x5032);
IkReal x5040=(sj5*x5033);
evalcond[0]=((((-1.0)*x5036*x5037))+((r21*x5039))+((r22*x5033)));
evalcond[1]=(((r21*x5040))+(((-1.0)*x5036*x5038))+(((-1.0)*r22*x5037)));
evalcond[2]=(cj0+((r02*x5033))+((r01*x5039))+(((-1.0)*x5034*x5037)));
evalcond[3]=(((r12*x5033))+sj0+((r11*x5039))+(((-1.0)*x5035*x5037)));
evalcond[4]=(sj0+((r01*x5040))+(((-1.0)*r02*x5037))+(((-1.0)*x5034*x5038)));
evalcond[5]=((((-1.0)*r12*x5037))+(((-1.0)*x5035*x5038))+((r11*x5040))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5041=IKsin(j0);
IkReal x5042=IKcos(j0);
IkReal x5043=((0.1)*sj5);
IkReal x5044=(cj5*r11);
IkReal x5045=(cj5*r01);
evalcond[0]=(((r00*sj5))+x5045+(((-1.0)*x5042)));
evalcond[1]=(((r10*sj5))+x5044+(((-1.0)*x5041)));
evalcond[2]=((((-1.0)*px))+(((-0.1)*x5045))+(((-1.0)*r00*x5043))+(((0.134)*x5041)));
evalcond[3]=((((-1.0)*r10*x5043))+(((-1.0)*py))+(((-0.1)*x5044))+(((-0.134)*x5042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5046=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5046;
j4eval[1]=IKsign(x5046);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5047=((1.0)*cj5);
IkReal x5048=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5047)));
j4eval[0]=x5048;
j4eval[1]=IKsign(x5048);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5047))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5049=cj5*cj5;
IkReal x5050=r01*r01;
IkReal x5051=(cj5*r00);
IkReal x5052=(r01*sj5);
IkReal x5053=(((x5049*x5050))+(((-1.0)*(r02*r02)))+(((-1.0)*x5049*(r00*r00)))+(((2.0)*x5051*x5052))+(((-1.0)*x5050)));
j4eval[0]=x5053;
j4eval[1]=IKsign(x5053);
j4eval[2]=((IKabs(((((-1.0)*sj0*x5051))+((sj0*x5052)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5054=cj5*cj5;
IkReal x5055=r01*r01;
IkReal x5056=(cj5*r00);
IkReal x5057=(r01*sj5);
CheckValue<IkReal> x5058=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x5056*x5057))+(((-1.0)*x5054*(r00*r00)))+(((-1.0)*x5055))+((x5054*x5055)))),-1);
if(!x5058.valid){
continue;
}
CheckValue<IkReal> x5059 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x5056))+((sj0*x5057)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5058.value)))+(x5059.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5060=IKcos(j4);
IkReal x5061=IKsin(j4);
IkReal x5062=(cj5*r00);
IkReal x5063=(r01*sj5);
IkReal x5064=(cj5*r10);
IkReal x5065=(cj5*r20);
IkReal x5066=((1.0)*x5060);
IkReal x5067=((1.0)*x5061);
IkReal x5068=(sj5*x5061);
IkReal x5069=(sj5*x5060);
evalcond[0]=(((x5060*x5063))+((r02*x5061))+(((-1.0)*x5062*x5066)));
evalcond[1]=(((r11*x5069))+((r12*x5061))+(((-1.0)*x5064*x5066)));
evalcond[2]=((((-1.0)*r22*x5066))+((r21*x5068))+(((-1.0)*x5065*x5067)));
evalcond[3]=((-1.0)+((r21*x5069))+(((-1.0)*x5065*x5066))+((r22*x5061)));
evalcond[4]=(sj0+(((-1.0)*r02*x5066))+((x5061*x5063))+(((-1.0)*x5062*x5067)));
evalcond[5]=((((-1.0)*r12*x5066))+((r11*x5068))+(((-1.0)*cj0))+(((-1.0)*x5064*x5067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5070=((1.0)*cj5);
CheckValue<IkReal> x5071 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5070)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5071.valid){
continue;
}
CheckValue<IkReal> x5072=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5070)))),-1);
if(!x5072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5071.value)+(((1.5707963267949)*(x5072.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5073=IKcos(j4);
IkReal x5074=IKsin(j4);
IkReal x5075=(cj5*r00);
IkReal x5076=(r01*sj5);
IkReal x5077=(cj5*r10);
IkReal x5078=(cj5*r20);
IkReal x5079=((1.0)*x5073);
IkReal x5080=((1.0)*x5074);
IkReal x5081=(sj5*x5074);
IkReal x5082=(sj5*x5073);
evalcond[0]=(((x5073*x5076))+((r02*x5074))+(((-1.0)*x5075*x5079)));
evalcond[1]=(((r11*x5082))+(((-1.0)*x5077*x5079))+((r12*x5074)));
evalcond[2]=(((r21*x5081))+(((-1.0)*x5078*x5080))+(((-1.0)*r22*x5079)));
evalcond[3]=((-1.0)+((r21*x5082))+(((-1.0)*x5078*x5079))+((r22*x5074)));
evalcond[4]=((((-1.0)*r02*x5079))+sj0+(((-1.0)*x5075*x5080))+((x5074*x5076)));
evalcond[5]=((((-1.0)*x5077*x5080))+((r11*x5081))+(((-1.0)*r12*x5079))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5083=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5083.valid){
continue;
}
CheckValue<IkReal> x5084 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5083.value)))+(x5084.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5085=IKcos(j4);
IkReal x5086=IKsin(j4);
IkReal x5087=(cj5*r00);
IkReal x5088=(r01*sj5);
IkReal x5089=(cj5*r10);
IkReal x5090=(cj5*r20);
IkReal x5091=((1.0)*x5085);
IkReal x5092=((1.0)*x5086);
IkReal x5093=(sj5*x5086);
IkReal x5094=(sj5*x5085);
evalcond[0]=(((x5085*x5088))+((r02*x5086))+(((-1.0)*x5087*x5091)));
evalcond[1]=(((r11*x5094))+((r12*x5086))+(((-1.0)*x5089*x5091)));
evalcond[2]=((((-1.0)*r22*x5091))+((r21*x5093))+(((-1.0)*x5090*x5092)));
evalcond[3]=((-1.0)+((r21*x5094))+((r22*x5086))+(((-1.0)*x5090*x5091)));
evalcond[4]=(sj0+((x5086*x5088))+(((-1.0)*r02*x5091))+(((-1.0)*x5087*x5092)));
evalcond[5]=(((r11*x5093))+(((-1.0)*x5089*x5092))+(((-1.0)*cj0))+(((-1.0)*r12*x5091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.780794779163268)*px))+(((-2.28411607038807)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.28411607038807)*px))+(((-0.780794779163268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.780794779163268)*px))+(((-2.28411607038807)*py))))+IKsqr(((((-2.28411607038807)*px))+(((-0.780794779163268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.780794779163268)*px))+(((-2.28411607038807)*py))), ((((-2.28411607038807)*px))+(((-0.780794779163268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5095=IKsin(j0);
IkReal x5096=IKcos(j0);
evalcond[0]=((((-0.392)*x5096))+(((0.134)*x5095))+(((-1.0)*px)));
evalcond[1]=((((-0.134)*x5096))+(((-0.392)*x5095))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5097=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5097;
j4eval[1]=IKsign(x5097);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5098=((1.0)*cj5);
IkReal x5099=((((-1.0)*r11*x5098))+(((-1.0)*r10*sj5)));
j4eval[0]=x5099;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5098))))));
j4eval[2]=IKsign(x5099);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5100=cj5*cj5;
IkReal x5101=((1.0)*r20);
IkReal x5102=(r01*r21);
IkReal x5103=(r21*sj5);
IkReal x5104=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5102))+(((-1.0)*r00*x5100*x5101))+((cj5*r00*x5103))+((x5100*x5102)));
j4eval[0]=x5104;
j4eval[1]=((IKabs((((cj0*x5103))+(((-1.0)*cj0*cj5*x5101)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5104);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5105=cj5*cj5;
IkReal x5106=((1.0)*r20);
IkReal x5107=(r01*r21);
IkReal x5108=(r21*sj5);
CheckValue<IkReal> x5109 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5108))+(((-1.0)*cj0*cj5*x5106)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5109.valid){
continue;
}
CheckValue<IkReal> x5110=IKPowWithIntegerCheck(IKsign((((x5105*x5107))+((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5105*x5106))+(((-1.0)*x5107))+((cj5*r00*x5108)))),-1);
if(!x5110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5109.value)+(((1.5707963267949)*(x5110.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5111=IKcos(j4);
IkReal x5112=IKsin(j4);
IkReal x5113=(cj5*r00);
IkReal x5114=(cj5*r10);
IkReal x5115=(cj5*r20);
IkReal x5116=((1.0)*x5111);
IkReal x5117=((1.0)*x5112);
IkReal x5118=(sj5*x5111);
IkReal x5119=(sj5*x5112);
evalcond[0]=((((-1.0)*x5115*x5116))+((r21*x5118))+((r22*x5112)));
evalcond[1]=((((-1.0)*r22*x5116))+(((-1.0)*x5115*x5117))+((r21*x5119)));
evalcond[2]=(((r01*x5118))+cj0+((r02*x5112))+(((-1.0)*x5113*x5116)));
evalcond[3]=(sj0+(((-1.0)*x5114*x5116))+((r11*x5118))+((r12*x5112)));
evalcond[4]=(((r01*x5119))+sj0+(((-1.0)*r02*x5116))+(((-1.0)*x5113*x5117)));
evalcond[5]=((((-1.0)*x5114*x5117))+((r11*x5119))+(((-1.0)*r12*x5116))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5120=((1.0)*cj5);
CheckValue<IkReal> x5121 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x5120))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5121.valid){
continue;
}
CheckValue<IkReal> x5122=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5120)))),-1);
if(!x5122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5121.value)+(((1.5707963267949)*(x5122.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5123=IKcos(j4);
IkReal x5124=IKsin(j4);
IkReal x5125=(cj5*r00);
IkReal x5126=(cj5*r10);
IkReal x5127=(cj5*r20);
IkReal x5128=((1.0)*x5123);
IkReal x5129=((1.0)*x5124);
IkReal x5130=(sj5*x5123);
IkReal x5131=(sj5*x5124);
evalcond[0]=(((r22*x5124))+((r21*x5130))+(((-1.0)*x5127*x5128)));
evalcond[1]=(((r21*x5131))+(((-1.0)*x5127*x5129))+(((-1.0)*r22*x5128)));
evalcond[2]=((((-1.0)*x5125*x5128))+cj0+((r01*x5130))+((r02*x5124)));
evalcond[3]=(sj0+(((-1.0)*x5126*x5128))+((r12*x5124))+((r11*x5130)));
evalcond[4]=(sj0+(((-1.0)*x5125*x5129))+((r01*x5131))+(((-1.0)*r02*x5128)));
evalcond[5]=((((-1.0)*x5126*x5129))+((r11*x5131))+(((-1.0)*r12*x5128))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5132 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5132.valid){
continue;
}
CheckValue<IkReal> x5133=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5132.value)+(((1.5707963267949)*(x5133.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5134=IKcos(j4);
IkReal x5135=IKsin(j4);
IkReal x5136=(cj5*r00);
IkReal x5137=(cj5*r10);
IkReal x5138=(cj5*r20);
IkReal x5139=((1.0)*x5134);
IkReal x5140=((1.0)*x5135);
IkReal x5141=(sj5*x5134);
IkReal x5142=(sj5*x5135);
evalcond[0]=(((r21*x5141))+((r22*x5135))+(((-1.0)*x5138*x5139)));
evalcond[1]=(((r21*x5142))+(((-1.0)*r22*x5139))+(((-1.0)*x5138*x5140)));
evalcond[2]=(((r01*x5141))+cj0+(((-1.0)*x5136*x5139))+((r02*x5135)));
evalcond[3]=(sj0+((r12*x5135))+(((-1.0)*x5137*x5139))+((r11*x5141)));
evalcond[4]=((((-1.0)*x5136*x5140))+sj0+((r01*x5142))+(((-1.0)*r02*x5139)));
evalcond[5]=((((-1.0)*x5137*x5140))+((r11*x5142))+(((-1.0)*r12*x5139))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5143=((1.0)*sj5);
IkReal x5144=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5144))+(((-1.0)*r10*x5143)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5144))+(((-1.0)*r00*x5143)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5144))+(((-1.0)*r10*x5143))))+IKsqr(((((-1.0)*r01*x5144))+(((-1.0)*r00*x5143))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5144))+(((-1.0)*r10*x5143))), ((((-1.0)*r01*x5144))+(((-1.0)*r00*x5143))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5145=IKsin(j0);
IkReal x5146=IKcos(j0);
IkReal x5147=(r10*sj5);
IkReal x5148=(r00*sj5);
IkReal x5149=(cj5*r11);
IkReal x5150=(cj5*r01);
evalcond[0]=(x5150+x5148+x5146);
evalcond[1]=(x5149+x5147+x5145);
evalcond[2]=((((-0.1)*x5150))+(((-1.0)*px))+(((-0.1)*x5148))+(((0.134)*x5145)));
evalcond[3]=((((-1.0)*py))+(((-0.1)*x5147))+(((-0.1)*x5149))+(((-0.134)*x5146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5151=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5151;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5151);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5152=((1.0)*cj5);
IkReal x5153=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5152)));
j4eval[0]=x5153;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5152))))));
j4eval[2]=IKsign(x5153);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5154=cj5*cj5;
IkReal x5155=r01*r01;
IkReal x5156=(cj5*r00);
IkReal x5157=(r01*sj5);
IkReal x5158=((((-1.0)*x5154*(r00*r00)))+(((2.0)*x5156*x5157))+((x5154*x5155))+(((-1.0)*(r02*r02)))+(((-1.0)*x5155)));
j4eval[0]=x5158;
j4eval[1]=IKsign(x5158);
j4eval[2]=((IKabs(((((-1.0)*sj0*x5156))+((sj0*x5157)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5159=cj5*cj5;
IkReal x5160=r01*r01;
IkReal x5161=(cj5*r00);
IkReal x5162=(r01*sj5);
CheckValue<IkReal> x5163 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x5161))+((sj0*x5162)))),IkReal(((-1.0)*r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5163.valid){
continue;
}
CheckValue<IkReal> x5164=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5159*(r00*r00)))+(((-1.0)*(r02*r02)))+((x5159*x5160))+(((-1.0)*x5160))+(((2.0)*x5161*x5162)))),-1);
if(!x5164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5163.value)+(((1.5707963267949)*(x5164.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5165=IKcos(j4);
IkReal x5166=IKsin(j4);
IkReal x5167=(cj5*r00);
IkReal x5168=(r01*sj5);
IkReal x5169=(cj5*r10);
IkReal x5170=(cj5*r20);
IkReal x5171=((1.0)*x5165);
IkReal x5172=((1.0)*x5166);
IkReal x5173=(sj5*x5166);
IkReal x5174=(sj5*x5165);
evalcond[0]=(((x5165*x5168))+((r02*x5166))+(((-1.0)*x5167*x5171)));
evalcond[1]=((((-1.0)*x5169*x5171))+((r12*x5166))+((r11*x5174)));
evalcond[2]=((((-1.0)*x5170*x5172))+(((-1.0)*r22*x5171))+((r21*x5173)));
evalcond[3]=((1.0)+(((-1.0)*x5170*x5171))+((r22*x5166))+((r21*x5174)));
evalcond[4]=(sj0+(((-1.0)*r02*x5171))+((x5166*x5168))+(((-1.0)*x5167*x5172)));
evalcond[5]=((((-1.0)*x5169*x5172))+(((-1.0)*r12*x5171))+((r11*x5173))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5175=((1.0)*cj5);
CheckValue<IkReal> x5176=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5175)))),-1);
if(!x5176.valid){
continue;
}
CheckValue<IkReal> x5177 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5175)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5177.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5176.value)))+(x5177.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5178=IKcos(j4);
IkReal x5179=IKsin(j4);
IkReal x5180=(cj5*r00);
IkReal x5181=(r01*sj5);
IkReal x5182=(cj5*r10);
IkReal x5183=(cj5*r20);
IkReal x5184=((1.0)*x5178);
IkReal x5185=((1.0)*x5179);
IkReal x5186=(sj5*x5179);
IkReal x5187=(sj5*x5178);
evalcond[0]=(((r02*x5179))+((x5178*x5181))+(((-1.0)*x5180*x5184)));
evalcond[1]=((((-1.0)*x5182*x5184))+((r12*x5179))+((r11*x5187)));
evalcond[2]=((((-1.0)*x5183*x5185))+(((-1.0)*r22*x5184))+((r21*x5186)));
evalcond[3]=((1.0)+(((-1.0)*x5183*x5184))+((r21*x5187))+((r22*x5179)));
evalcond[4]=(sj0+(((-1.0)*r02*x5184))+((x5179*x5181))+(((-1.0)*x5180*x5185)));
evalcond[5]=((((-1.0)*x5182*x5185))+(((-1.0)*r12*x5184))+((r11*x5186))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5188 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5188.valid){
continue;
}
CheckValue<IkReal> x5189=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5188.value)+(((1.5707963267949)*(x5189.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5190=IKcos(j4);
IkReal x5191=IKsin(j4);
IkReal x5192=(cj5*r00);
IkReal x5193=(r01*sj5);
IkReal x5194=(cj5*r10);
IkReal x5195=(cj5*r20);
IkReal x5196=((1.0)*x5190);
IkReal x5197=((1.0)*x5191);
IkReal x5198=(sj5*x5191);
IkReal x5199=(sj5*x5190);
evalcond[0]=(((r02*x5191))+(((-1.0)*x5192*x5196))+((x5190*x5193)));
evalcond[1]=(((r11*x5199))+((r12*x5191))+(((-1.0)*x5194*x5196)));
evalcond[2]=(((r21*x5198))+(((-1.0)*r22*x5196))+(((-1.0)*x5195*x5197)));
evalcond[3]=((1.0)+((r21*x5199))+((r22*x5191))+(((-1.0)*x5195*x5196)));
evalcond[4]=(sj0+(((-1.0)*x5192*x5197))+(((-1.0)*r02*x5196))+((x5191*x5193)));
evalcond[5]=((((-1.0)*r12*x5196))+((r11*x5198))+(((-1.0)*x5194*x5197))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.780794779163268)*px))+(((2.28411607038807)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.28411607038807)*px))+(((-0.780794779163268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.780794779163268)*px))+(((2.28411607038807)*py))))+IKsqr(((((2.28411607038807)*px))+(((-0.780794779163268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.780794779163268)*px))+(((2.28411607038807)*py))), ((((2.28411607038807)*px))+(((-0.780794779163268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5200=IKsin(j0);
IkReal x5201=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.134)*x5200))+(((0.392)*x5201)));
evalcond[1]=((((-0.134)*x5201))+(((-1.0)*py))+(((0.392)*x5200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5202=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5202;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5202);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5203=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5203;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5203);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5204=((1.0)*cj5);
IkReal x5205=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5204)));
j4eval[0]=x5205;
j4eval[1]=IKsign(x5205);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x5204))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5206=((1.0)*cj5);
CheckValue<IkReal> x5207=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5206)))),-1);
if(!x5207.valid){
continue;
}
CheckValue<IkReal> x5208 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5206))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5207.value)))+(x5208.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5209=IKcos(j4);
IkReal x5210=IKsin(j4);
IkReal x5211=((1.0)*cj0);
IkReal x5212=(cj5*r00);
IkReal x5213=(cj5*r10);
IkReal x5214=(cj5*r20);
IkReal x5215=((1.0)*x5209);
IkReal x5216=((1.0)*x5210);
IkReal x5217=(sj5*x5209);
IkReal x5218=(sj5*x5210);
evalcond[0]=((((-1.0)*x5214*x5215))+((r22*x5210))+((r21*x5217)));
evalcond[1]=((((-1.0)*x5214*x5216))+(((-1.0)*r22*x5215))+((r21*x5218)));
evalcond[2]=(((r01*x5218))+sj0+(((-1.0)*x5212*x5216))+(((-1.0)*r02*x5215)));
evalcond[3]=(((r01*x5217))+(((-1.0)*x5212*x5215))+(((-1.0)*x5211))+((r02*x5210)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x5213*x5215))+((r12*x5210))+((r11*x5217)));
evalcond[5]=((((-1.0)*x5211))+(((-1.0)*x5213*x5216))+((r11*x5218))+(((-1.0)*r12*x5215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5219 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5219.valid){
continue;
}
CheckValue<IkReal> x5220=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5219.value)+(((1.5707963267949)*(x5220.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5221=IKcos(j4);
IkReal x5222=IKsin(j4);
IkReal x5223=((1.0)*cj0);
IkReal x5224=(cj5*r00);
IkReal x5225=(cj5*r10);
IkReal x5226=(cj5*r20);
IkReal x5227=((1.0)*x5221);
IkReal x5228=((1.0)*x5222);
IkReal x5229=(sj5*x5221);
IkReal x5230=(sj5*x5222);
evalcond[0]=(((r21*x5229))+((r22*x5222))+(((-1.0)*x5226*x5227)));
evalcond[1]=(((r21*x5230))+(((-1.0)*x5226*x5228))+(((-1.0)*r22*x5227)));
evalcond[2]=(sj0+((r01*x5230))+(((-1.0)*x5224*x5228))+(((-1.0)*r02*x5227)));
evalcond[3]=(((r02*x5222))+(((-1.0)*x5224*x5227))+(((-1.0)*x5223))+((r01*x5229)));
evalcond[4]=((((-1.0)*sj0))+(((-1.0)*x5225*x5227))+((r11*x5229))+((r12*x5222)));
evalcond[5]=(((r11*x5230))+(((-1.0)*r12*x5227))+(((-1.0)*x5225*x5228))+(((-1.0)*x5223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5231=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5231.valid){
continue;
}
CheckValue<IkReal> x5232 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5231.value)))+(x5232.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5233=IKcos(j4);
IkReal x5234=IKsin(j4);
IkReal x5235=((1.0)*cj0);
IkReal x5236=(cj5*r00);
IkReal x5237=(cj5*r10);
IkReal x5238=(cj5*r20);
IkReal x5239=((1.0)*x5233);
IkReal x5240=((1.0)*x5234);
IkReal x5241=(sj5*x5233);
IkReal x5242=(sj5*x5234);
evalcond[0]=(((r21*x5241))+(((-1.0)*x5238*x5239))+((r22*x5234)));
evalcond[1]=((((-1.0)*r22*x5239))+((r21*x5242))+(((-1.0)*x5238*x5240)));
evalcond[2]=(sj0+(((-1.0)*x5236*x5240))+(((-1.0)*r02*x5239))+((r01*x5242)));
evalcond[3]=((((-1.0)*x5236*x5239))+(((-1.0)*x5235))+((r01*x5241))+((r02*x5234)));
evalcond[4]=((((-1.0)*sj0))+((r11*x5241))+((r12*x5234))+(((-1.0)*x5237*x5239)));
evalcond[5]=((((-1.0)*x5235))+((r11*x5242))+(((-1.0)*r12*x5239))+(((-1.0)*x5237*x5240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5243=cj1*cj1;
IkReal x5244=(cj1*sj2);
IkReal x5245=((500.0)*py);
IkReal x5246=(cj2*sj2);
IkReal x5247=(cj5*r01);
IkReal x5248=(cj1*sj1);
IkReal x5249=(r00*sj5);
IkReal x5250=(cj2*sj1);
IkReal x5251=((50.0)*r10*sj5);
IkReal x5252=((50.0)*cj5*r11);
CheckValue<IkReal> x5253=IKPowWithIntegerCheck(((((-212.5)*cj2*x5248))+(((-392.0)*x5243*x5246))+(((196.0)*x5246))+(((196.0)*x5248))+(((-212.5)*sj2*x5243))+(((-392.0)*x5248*(cj2*cj2)))),-1);
if(!x5253.valid){
continue;
}
CheckValue<IkReal> x5254=IKPowWithIntegerCheck((x5250+x5244),-1);
if(!x5254.valid){
continue;
}
if( IKabs(((x5253.value)*((((x5245*x5250))+((x5250*x5251))+((x5250*x5252))+(((-67.0)*x5249))+(((-67.0)*x5247))+((x5244*x5251))+((x5244*x5252))+((x5244*x5245)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5254.value)*(((((-1.0)*x5247))+(((-1.0)*x5249)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5253.value)*((((x5245*x5250))+((x5250*x5251))+((x5250*x5252))+(((-67.0)*x5249))+(((-67.0)*x5247))+((x5244*x5251))+((x5244*x5252))+((x5244*x5245))))))+IKsqr(((x5254.value)*(((((-1.0)*x5247))+(((-1.0)*x5249))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5253.value)*((((x5245*x5250))+((x5250*x5251))+((x5250*x5252))+(((-67.0)*x5249))+(((-67.0)*x5247))+((x5244*x5251))+((x5244*x5252))+((x5244*x5245))))), ((x5254.value)*(((((-1.0)*x5247))+(((-1.0)*x5249))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5255=IKcos(j0);
IkReal x5256=IKsin(j0);
IkReal x5257=((0.1)*sj5);
IkReal x5258=(sj1*sj2);
IkReal x5259=(cj5*r11);
IkReal x5260=(cj5*r01);
IkReal x5261=(cj2*sj1);
IkReal x5262=((0.392)*x5256);
IkReal x5263=(cj1*x5255);
IkReal x5264=(cj1*x5256);
evalcond[0]=(((r00*sj5))+((x5255*x5261))+((sj2*x5263))+x5260);
evalcond[1]=(((sj2*x5264))+((r10*sj5))+x5259+((x5256*x5261)));
evalcond[2]=((((-0.1)*x5260))+(((-1.0)*r00*x5257))+(((-0.392)*cj2*x5263))+(((-1.0)*px))+(((0.134)*x5256))+(((0.392)*x5255*x5258))+(((-0.425)*x5263)));
evalcond[3]=((((-0.1)*x5259))+(((-1.0)*cj1*cj2*x5262))+(((-1.0)*py))+(((-0.134)*x5255))+((x5258*x5262))+(((-1.0)*r10*x5257))+(((-0.425)*x5264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5265=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5265;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5265);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5266=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5266;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5266);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5267=((1.0)*cj5);
IkReal x5268=((((-1.0)*r21*x5267))+(((-1.0)*r20*sj5)));
j4eval[0]=x5268;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x5267))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x5267))))));
j4eval[2]=IKsign(x5268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5269=((-1.0)*r20);
IkReal x5271 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5271)==0){
continue;
}
IkReal x5270=pow(x5271,-0.5);
CheckValue<IkReal> x5272 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5269),IKFAST_ATAN2_MAGTHRESH);
if(!x5272.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5272.value));
IkReal gconst115=(r21*x5270);
IkReal gconst116=(x5269*x5270);
CheckValue<IkReal> x5273 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5273.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5273.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5274=((-1.0)*r20);
IkReal x5275=x5270;
CheckValue<IkReal> x5277 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5274),IKFAST_ATAN2_MAGTHRESH);
if(!x5277.valid){
continue;
}
IkReal x5276=((-1.0)*(x5277.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5276;
IkReal gconst114=x5276;
IkReal gconst115=(r21*x5275);
IkReal gconst116=(x5274*x5275);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5278=((-1.0)*r20);
IkReal x5279=x5270;
CheckValue<IkReal> x5281 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5278),IKFAST_ATAN2_MAGTHRESH);
if(!x5281.valid){
continue;
}
IkReal x5280=((-1.0)*(x5281.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5280;
IkReal gconst114=x5280;
IkReal gconst115=(r21*x5279);
IkReal gconst116=(x5278*x5279);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5282=((-1.0)*r20);
IkReal x5283=x5270;
CheckValue<IkReal> x5285 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5282),IKFAST_ATAN2_MAGTHRESH);
if(!x5285.valid){
continue;
}
IkReal x5284=((-1.0)*(x5285.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5284;
IkReal gconst114=x5284;
IkReal gconst115=(r21*x5283);
IkReal gconst116=(x5282*x5283);
IkReal x5286=((1.0)*(r22*r22));
CheckValue<IkReal> x5290=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5286))),-1);
if(!x5290.valid){
continue;
}
IkReal x5287=x5290.value;
IkReal x5288=((1.0)*x5287);
IkReal x5289=((((-1.0)*x5288*(r21*r21*r21*r21)))+(((-1.0)*x5286))+(((-2.0)*x5287*(r20*r20)*(r21*r21)))+(((-1.0)*x5288*(r20*r20*r20*r20))));
j4eval[0]=x5289;
j4eval[1]=IKsign(x5289);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5291=(cj2*sj1);
IkReal x5292=(gconst115*r21);
IkReal x5293=(cj1*sj2);
IkReal x5294=((1.0)*gconst116*r20);
CheckValue<IkReal> x5295=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst116*r20*x5292))+(((-1.0)*gconst116*r20*x5294))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5292*x5292))))),-1);
if(!x5295.valid){
continue;
}
CheckValue<IkReal> x5296 = IKatan2WithCheck(IkReal((((r22*x5291))+((r22*x5293)))),IkReal((((x5291*x5292))+(((-1.0)*x5293*x5294))+(((-1.0)*x5291*x5294))+((x5292*x5293)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5295.value)))+(x5296.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5297=IKsin(j4);
IkReal x5298=IKcos(j4);
IkReal x5299=(cj1*cj2);
IkReal x5300=((1.0)*x5298);
IkReal x5301=(gconst115*x5297);
IkReal x5302=(gconst115*x5298);
IkReal x5303=((1.0)*sj1*sj2);
IkReal x5304=((1.0)*gconst116*x5297);
evalcond[0]=((((-1.0)*r22*x5300))+((r21*x5301))+(((-1.0)*r20*x5304)));
evalcond[1]=(sj0+(((-1.0)*r00*x5304))+(((-1.0)*r02*x5300))+((r01*x5301)));
evalcond[2]=((((-1.0)*r12*x5300))+(((-1.0)*r10*x5304))+((r11*x5301))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x5302))+((cj2*sj1))+((r22*x5297))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5300)));
evalcond[4]=((((-1.0)*cj0*x5303))+((r02*x5297))+((cj0*x5299))+(((-1.0)*gconst116*r00*x5300))+((r01*x5302)));
evalcond[5]=(((r12*x5297))+((sj0*x5299))+(((-1.0)*gconst116*r10*x5300))+((r11*x5302))+(((-1.0)*sj0*x5303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5305 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*gconst116*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5305.valid){
continue;
}
CheckValue<IkReal> x5306=IKPowWithIntegerCheck(IKsign((((gconst115*r00))+((gconst116*r01)))),-1);
if(!x5306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5305.value)+(((1.5707963267949)*(x5306.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5307=IKsin(j4);
IkReal x5308=IKcos(j4);
IkReal x5309=(cj1*cj2);
IkReal x5310=((1.0)*x5308);
IkReal x5311=(gconst115*x5307);
IkReal x5312=(gconst115*x5308);
IkReal x5313=((1.0)*sj1*sj2);
IkReal x5314=((1.0)*gconst116*x5307);
evalcond[0]=(((r21*x5311))+(((-1.0)*r20*x5314))+(((-1.0)*r22*x5310)));
evalcond[1]=(((r01*x5311))+sj0+(((-1.0)*r00*x5314))+(((-1.0)*r02*x5310)));
evalcond[2]=((((-1.0)*r12*x5310))+((r11*x5311))+(((-1.0)*cj0))+(((-1.0)*r10*x5314)));
evalcond[3]=(((cj2*sj1))+((r21*x5312))+((cj1*sj2))+((r22*x5307))+(((-1.0)*gconst116*r20*x5310)));
evalcond[4]=(((r01*x5312))+(((-1.0)*cj0*x5313))+((r02*x5307))+(((-1.0)*gconst116*r00*x5310))+((cj0*x5309)));
evalcond[5]=((((-1.0)*sj0*x5313))+((sj0*x5309))+((r12*x5307))+((r11*x5312))+(((-1.0)*gconst116*r10*x5310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5315=IKPowWithIntegerCheck(IKsign((((gconst115*r10))+((gconst116*r11)))),-1);
if(!x5315.valid){
continue;
}
CheckValue<IkReal> x5316 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*gconst116*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5315.value)))+(x5316.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5317=IKsin(j4);
IkReal x5318=IKcos(j4);
IkReal x5319=(cj1*cj2);
IkReal x5320=((1.0)*x5318);
IkReal x5321=(gconst115*x5317);
IkReal x5322=(gconst115*x5318);
IkReal x5323=((1.0)*sj1*sj2);
IkReal x5324=((1.0)*gconst116*x5317);
evalcond[0]=((((-1.0)*r20*x5324))+(((-1.0)*r22*x5320))+((r21*x5321)));
evalcond[1]=(sj0+(((-1.0)*r02*x5320))+((r01*x5321))+(((-1.0)*r00*x5324)));
evalcond[2]=(((r11*x5321))+(((-1.0)*r12*x5320))+(((-1.0)*r10*x5324))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r22*x5317))+(((-1.0)*gconst116*r20*x5320))+((cj1*sj2))+((r21*x5322)));
evalcond[4]=(((cj0*x5319))+((r02*x5317))+(((-1.0)*gconst116*r00*x5320))+((r01*x5322))+(((-1.0)*cj0*x5323)));
evalcond[5]=((((-1.0)*gconst116*r10*x5320))+((r11*x5322))+((sj0*x5319))+((r12*x5317))+(((-1.0)*sj0*x5323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5325=((-1.0)*r21);
IkReal x5327 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5327)==0){
continue;
}
IkReal x5326=pow(x5327,-0.5);
CheckValue<IkReal> x5328 = IKatan2WithCheck(IkReal(x5325),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5328.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5328.value))));
IkReal gconst118=(x5325*x5326);
IkReal gconst119=((1.0)*r20*x5326);
CheckValue<IkReal> x5329 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5329.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5329.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5330=((-1.0)*r21);
CheckValue<IkReal> x5333 = IKatan2WithCheck(IkReal(x5330),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5333.valid){
continue;
}
IkReal x5331=((1.0)*(x5333.value));
IkReal x5332=x5326;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5331)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5331)));
IkReal gconst118=(x5330*x5332);
IkReal gconst119=((1.0)*r20*x5332);
IkReal x5334=r22*r22;
IkReal x5335=((1.0)*x5334);
CheckValue<IkReal> x5339=IKPowWithIntegerCheck(((-1.0)+x5334),-1);
if(!x5339.valid){
continue;
}
IkReal x5336=x5339.value;
if((((1.0)+(((-1.0)*x5335)))) < -0.00001)
continue;
IkReal x5337=IKsqrt(((1.0)+(((-1.0)*x5335))));
IkReal x5338=(sj0*x5336*x5337);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5338+(((-1.0)*x5335*x5338))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5340=((-1.0)*r21);
CheckValue<IkReal> x5343 = IKatan2WithCheck(IkReal(x5340),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5343.valid){
continue;
}
IkReal x5341=((1.0)*(x5343.value));
IkReal x5342=x5326;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5341)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5341)));
IkReal gconst118=(x5340*x5342);
IkReal gconst119=((1.0)*r20*x5342);
IkReal x5344=r22*r22;
IkReal x5345=((1.0)*x5344);
CheckValue<IkReal> x5349=IKPowWithIntegerCheck(((-1.0)+x5344),-1);
if(!x5349.valid){
continue;
}
IkReal x5346=x5349.value;
if((((1.0)+(((-1.0)*x5345)))) < -0.00001)
continue;
IkReal x5347=IKsqrt(((1.0)+(((-1.0)*x5345))));
IkReal x5348=(cj0*x5346*x5347);
j4eval[0]=((IKabs((x5348+(((-1.0)*x5345*x5348)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5350=((-1.0)*r21);
CheckValue<IkReal> x5353 = IKatan2WithCheck(IkReal(x5350),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5353.valid){
continue;
}
IkReal x5351=((1.0)*(x5353.value));
IkReal x5352=x5326;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5351)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5351)));
IkReal gconst118=(x5350*x5352);
IkReal gconst119=((1.0)*r20*x5352);
IkReal x5354=r22*r22;
IkReal x5355=(cj0*r02);
IkReal x5356=(r12*sj0);
CheckValue<IkReal> x5360=IKPowWithIntegerCheck(((-1.0)+x5354),-1);
if(!x5360.valid){
continue;
}
IkReal x5357=x5360.value;
if((((1.0)+(((-1.0)*x5354)))) < -0.00001)
continue;
IkReal x5358=IKsqrt(((1.0)+(((-1.0)*x5354))));
IkReal x5359=((1.0)*r22*x5357*x5358);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x5355*x5359))+(((-1.0)*x5356*x5359)))))+(IKabs((x5356+x5355))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5361=((1.0)*gconst119);
CheckValue<IkReal> x5362 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x5361))+(((-1.0)*cj0*r00*x5361))+((gconst118*r11*sj0))+((cj0*gconst118*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5362.valid){
continue;
}
CheckValue<IkReal> x5363=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r20))+(((-1.0)*r21*x5361)))),-1);
if(!x5363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5362.value)+(((1.5707963267949)*(x5363.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5364=IKsin(j4);
IkReal x5365=IKcos(j4);
IkReal x5366=(cj1*cj2);
IkReal x5367=(gconst118*r01);
IkReal x5368=(gconst119*r20);
IkReal x5369=(gconst119*r10);
IkReal x5370=(gconst119*r00);
IkReal x5371=(gconst118*r21);
IkReal x5372=(gconst118*r11);
IkReal x5373=((1.0)*cj0);
IkReal x5374=(sj1*sj2);
IkReal x5375=((1.0)*x5365);
IkReal x5376=((1.0)*x5364);
evalcond[0]=((((-1.0)*r22*x5375))+((x5364*x5371))+(((-1.0)*x5368*x5376)));
evalcond[1]=(sj0+((x5364*x5367))+(((-1.0)*x5370*x5376))+(((-1.0)*r02*x5375)));
evalcond[2]=((((-1.0)*r12*x5375))+(((-1.0)*x5373))+((x5364*x5372))+(((-1.0)*x5369*x5376)));
evalcond[3]=(((r22*x5364))+((cj2*sj1))+((cj1*sj2))+((x5365*x5371))+(((-1.0)*x5368*x5375)));
evalcond[4]=(((r02*x5364))+((x5365*x5367))+(((-1.0)*x5370*x5375))+(((-1.0)*x5373*x5374))+((cj0*x5366)));
evalcond[5]=(((r12*x5364))+(((-1.0)*sj0*x5374))+((x5365*x5372))+((sj0*x5366))+(((-1.0)*x5369*x5375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5377=IKPowWithIntegerCheck(IKsign((((gconst118*r00))+((gconst119*r01)))),-1);
if(!x5377.valid){
continue;
}
CheckValue<IkReal> x5378 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*gconst119*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5377.value)))+(x5378.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5379=IKsin(j4);
IkReal x5380=IKcos(j4);
IkReal x5381=(cj1*cj2);
IkReal x5382=(gconst118*r01);
IkReal x5383=(gconst119*r20);
IkReal x5384=(gconst119*r10);
IkReal x5385=(gconst119*r00);
IkReal x5386=(gconst118*r21);
IkReal x5387=(gconst118*r11);
IkReal x5388=((1.0)*cj0);
IkReal x5389=(sj1*sj2);
IkReal x5390=((1.0)*x5380);
IkReal x5391=((1.0)*x5379);
evalcond[0]=(((x5379*x5386))+(((-1.0)*r22*x5390))+(((-1.0)*x5383*x5391)));
evalcond[1]=(sj0+(((-1.0)*x5385*x5391))+((x5379*x5382))+(((-1.0)*r02*x5390)));
evalcond[2]=((((-1.0)*x5384*x5391))+((x5379*x5387))+(((-1.0)*r12*x5390))+(((-1.0)*x5388)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5379))+((x5380*x5386))+(((-1.0)*x5383*x5390)));
evalcond[4]=((((-1.0)*x5385*x5390))+(((-1.0)*x5388*x5389))+((cj0*x5381))+((r02*x5379))+((x5380*x5382)));
evalcond[5]=(((sj0*x5381))+(((-1.0)*x5384*x5390))+(((-1.0)*sj0*x5389))+((r12*x5379))+((x5380*x5387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5392=IKPowWithIntegerCheck(IKsign((((gconst118*r10))+((gconst119*r11)))),-1);
if(!x5392.valid){
continue;
}
CheckValue<IkReal> x5393 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst119*r20*sj0))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5392.value)))+(x5393.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5394=IKsin(j4);
IkReal x5395=IKcos(j4);
IkReal x5396=(cj1*cj2);
IkReal x5397=(gconst118*r01);
IkReal x5398=(gconst119*r20);
IkReal x5399=(gconst119*r10);
IkReal x5400=(gconst119*r00);
IkReal x5401=(gconst118*r21);
IkReal x5402=(gconst118*r11);
IkReal x5403=((1.0)*cj0);
IkReal x5404=(sj1*sj2);
IkReal x5405=((1.0)*x5395);
IkReal x5406=((1.0)*x5394);
evalcond[0]=((((-1.0)*x5398*x5406))+(((-1.0)*r22*x5405))+((x5394*x5401)));
evalcond[1]=((((-1.0)*x5400*x5406))+sj0+(((-1.0)*r02*x5405))+((x5394*x5397)));
evalcond[2]=((((-1.0)*x5399*x5406))+(((-1.0)*r12*x5405))+(((-1.0)*x5403))+((x5394*x5402)));
evalcond[3]=(((cj2*sj1))+((r22*x5394))+(((-1.0)*x5398*x5405))+((cj1*sj2))+((x5395*x5401)));
evalcond[4]=((((-1.0)*x5400*x5405))+((r02*x5394))+(((-1.0)*x5403*x5404))+((cj0*x5396))+((x5395*x5397)));
evalcond[5]=((((-1.0)*sj0*x5404))+(((-1.0)*x5399*x5405))+((r12*x5394))+((x5395*x5402))+((sj0*x5396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5408 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5408)==0){
continue;
}
IkReal x5407=pow(x5408,-0.5);
CheckValue<IkReal> x5409 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5409.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5409.value));
IkReal gconst121=((-1.0)*r01*x5407);
IkReal gconst122=(r00*x5407);
CheckValue<IkReal> x5410 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5410.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5410.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5413 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5413.valid){
continue;
}
IkReal x5411=((-1.0)*(x5413.value));
IkReal x5412=x5407;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5411;
IkReal gconst120=x5411;
IkReal gconst121=((-1.0)*r01*x5412);
IkReal gconst122=(r00*x5412);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5414=((1.0)*gconst122);
CheckValue<IkReal> x5415=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5414))+(((-1.0)*gconst121*r20)))),-1);
if(!x5415.valid){
continue;
}
CheckValue<IkReal> x5416 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x5414))+((cj0*gconst121*r01))+((gconst121*r11*sj0))+(((-1.0)*r10*sj0*x5414)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5415.value)))+(x5416.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5417=IKsin(j4);
IkReal x5418=IKcos(j4);
IkReal x5419=(cj1*cj2);
IkReal x5420=(gconst121*r11);
IkReal x5421=(gconst122*r00);
IkReal x5422=(gconst122*r10);
IkReal x5423=(gconst122*r20);
IkReal x5424=((1.0)*cj0);
IkReal x5425=(sj1*sj2);
IkReal x5426=((1.0)*x5418);
IkReal x5427=((1.0)*x5417);
IkReal x5428=(gconst121*x5417);
IkReal x5429=(gconst121*x5418);
evalcond[0]=(((r21*x5428))+(((-1.0)*r22*x5426))+(((-1.0)*x5423*x5427)));
evalcond[1]=(sj0+((r01*x5428))+(((-1.0)*x5421*x5427))+(((-1.0)*r02*x5426)));
evalcond[2]=((((-1.0)*x5424))+(((-1.0)*x5422*x5427))+((x5417*x5420))+(((-1.0)*r12*x5426)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5417))+((r21*x5429))+(((-1.0)*x5423*x5426)));
evalcond[4]=(((r01*x5429))+(((-1.0)*x5421*x5426))+(((-1.0)*x5424*x5425))+((r02*x5417))+((cj0*x5419)));
evalcond[5]=((((-1.0)*x5422*x5426))+((sj0*x5419))+(((-1.0)*sj0*x5425))+((x5418*x5420))+((r12*x5417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5430 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst122*r20*sj0))+((gconst121*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5430.valid){
continue;
}
CheckValue<IkReal> x5431=IKPowWithIntegerCheck(IKsign((((gconst121*r10))+((gconst122*r11)))),-1);
if(!x5431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5430.value)+(((1.5707963267949)*(x5431.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5432=IKsin(j4);
IkReal x5433=IKcos(j4);
IkReal x5434=(cj1*cj2);
IkReal x5435=(gconst121*r11);
IkReal x5436=(gconst122*r00);
IkReal x5437=(gconst122*r10);
IkReal x5438=(gconst122*r20);
IkReal x5439=((1.0)*cj0);
IkReal x5440=(sj1*sj2);
IkReal x5441=((1.0)*x5433);
IkReal x5442=((1.0)*x5432);
IkReal x5443=(gconst121*x5432);
IkReal x5444=(gconst121*x5433);
evalcond[0]=((((-1.0)*x5438*x5442))+(((-1.0)*r22*x5441))+((r21*x5443)));
evalcond[1]=(sj0+(((-1.0)*x5436*x5442))+((r01*x5443))+(((-1.0)*r02*x5441)));
evalcond[2]=((((-1.0)*x5437*x5442))+(((-1.0)*r12*x5441))+(((-1.0)*x5439))+((x5432*x5435)));
evalcond[3]=(((cj2*sj1))+((r22*x5432))+((cj1*sj2))+(((-1.0)*x5438*x5441))+((r21*x5444)));
evalcond[4]=((((-1.0)*x5436*x5441))+((r02*x5432))+((r01*x5444))+(((-1.0)*x5439*x5440))+((cj0*x5434)));
evalcond[5]=((((-1.0)*x5437*x5441))+((sj0*x5434))+(((-1.0)*sj0*x5440))+((x5433*x5435))+((r12*x5432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5446 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5446)==0){
continue;
}
IkReal x5445=pow(x5446,-0.5);
CheckValue<IkReal> x5447 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5447.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5447.value))));
IkReal gconst124=((1.0)*r01*x5445);
IkReal gconst125=((-1.0)*r00*x5445);
CheckValue<IkReal> x5448 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5448.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5448.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5451 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5451.valid){
continue;
}
IkReal x5449=((1.0)*(x5451.value));
IkReal x5450=x5445;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5449)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5449)));
IkReal gconst124=((1.0)*r01*x5450);
IkReal gconst125=((-1.0)*r00*x5450);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x5454 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5454.valid){
continue;
}
IkReal x5452=((1.0)*(x5454.value));
IkReal x5453=x5445;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5452)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5452)));
IkReal gconst124=((1.0)*r01*x5453);
IkReal gconst125=((-1.0)*r00*x5453);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5457 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5457.valid){
continue;
}
IkReal x5455=((1.0)*(x5457.value));
IkReal x5456=x5445;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5455)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5455)));
IkReal gconst124=((1.0)*r01*x5456);
IkReal gconst125=((-1.0)*r00*x5456);
IkReal x5458=r02*r02;
IkReal x5459=(r12*sj0);
IkReal x5460=x5445;
IkReal x5461=(cj0*x5460);
j4eval[0]=((IKabs((((x5458*x5461))+(((-1.0)*x5461))+((r02*x5459*x5460)))))+(IKabs((x5459+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5462=((1.0)*gconst125);
CheckValue<IkReal> x5463 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x5462))+((cj0*gconst124*r01))+(((-1.0)*cj0*r00*x5462))+((gconst124*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5463.valid){
continue;
}
CheckValue<IkReal> x5464=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*r21*x5462)))),-1);
if(!x5464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5463.value)+(((1.5707963267949)*(x5464.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5465=IKsin(j4);
IkReal x5466=IKcos(j4);
IkReal x5467=(cj1*cj2);
IkReal x5468=(gconst125*r20);
IkReal x5469=(gconst124*r01);
IkReal x5470=(gconst125*r00);
IkReal x5471=(gconst125*r10);
IkReal x5472=((1.0)*cj0);
IkReal x5473=(sj1*sj2);
IkReal x5474=((1.0)*x5466);
IkReal x5475=((1.0)*x5465);
IkReal x5476=(gconst124*x5465);
IkReal x5477=(gconst124*x5466);
evalcond[0]=((((-1.0)*x5468*x5475))+(((-1.0)*r22*x5474))+((r21*x5476)));
evalcond[1]=(sj0+(((-1.0)*x5470*x5475))+(((-1.0)*r02*x5474))+((x5465*x5469)));
evalcond[2]=((((-1.0)*x5472))+(((-1.0)*r12*x5474))+(((-1.0)*x5471*x5475))+((r11*x5476)));
evalcond[3]=(((cj2*sj1))+((r22*x5465))+(((-1.0)*x5468*x5474))+((cj1*sj2))+((r21*x5477)));
evalcond[4]=(((x5466*x5469))+((r02*x5465))+((cj0*x5467))+(((-1.0)*x5470*x5474))+(((-1.0)*x5472*x5473)));
evalcond[5]=(((r12*x5465))+(((-1.0)*x5471*x5474))+(((-1.0)*sj0*x5473))+((r11*x5477))+((sj0*x5467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5478=IKPowWithIntegerCheck(IKsign((((gconst124*r00))+((gconst125*r01)))),-1);
if(!x5478.valid){
continue;
}
CheckValue<IkReal> x5479 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst125*r20))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5478.value)))+(x5479.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5480=IKsin(j4);
IkReal x5481=IKcos(j4);
IkReal x5482=(cj1*cj2);
IkReal x5483=(gconst125*r20);
IkReal x5484=(gconst124*r01);
IkReal x5485=(gconst125*r00);
IkReal x5486=(gconst125*r10);
IkReal x5487=((1.0)*cj0);
IkReal x5488=(sj1*sj2);
IkReal x5489=((1.0)*x5481);
IkReal x5490=((1.0)*x5480);
IkReal x5491=(gconst124*x5480);
IkReal x5492=(gconst124*x5481);
evalcond[0]=((((-1.0)*r22*x5489))+((r21*x5491))+(((-1.0)*x5483*x5490)));
evalcond[1]=(((x5480*x5484))+sj0+(((-1.0)*x5485*x5490))+(((-1.0)*r02*x5489)));
evalcond[2]=((((-1.0)*x5487))+(((-1.0)*r12*x5489))+((r11*x5491))+(((-1.0)*x5486*x5490)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5483*x5489))+((cj1*sj2))+((r21*x5492))+((r22*x5480)));
evalcond[4]=(((x5481*x5484))+((cj0*x5482))+(((-1.0)*x5487*x5488))+(((-1.0)*x5485*x5489))+((r02*x5480)));
evalcond[5]=((((-1.0)*x5486*x5489))+((r12*x5480))+((r11*x5492))+(((-1.0)*sj0*x5488))+((sj0*x5482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5493 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst124*r21*sj0))+(((-1.0)*gconst125*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5493.valid){
continue;
}
CheckValue<IkReal> x5494=IKPowWithIntegerCheck(IKsign((((gconst125*r11))+((gconst124*r10)))),-1);
if(!x5494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5493.value)+(((1.5707963267949)*(x5494.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5495=IKsin(j4);
IkReal x5496=IKcos(j4);
IkReal x5497=(cj1*cj2);
IkReal x5498=(gconst125*r20);
IkReal x5499=(gconst124*r01);
IkReal x5500=(gconst125*r00);
IkReal x5501=(gconst125*r10);
IkReal x5502=((1.0)*cj0);
IkReal x5503=(sj1*sj2);
IkReal x5504=((1.0)*x5496);
IkReal x5505=((1.0)*x5495);
IkReal x5506=(gconst124*x5495);
IkReal x5507=(gconst124*x5496);
evalcond[0]=((((-1.0)*r22*x5504))+(((-1.0)*x5498*x5505))+((r21*x5506)));
evalcond[1]=(((x5495*x5499))+sj0+(((-1.0)*x5500*x5505))+(((-1.0)*r02*x5504)));
evalcond[2]=((((-1.0)*x5501*x5505))+(((-1.0)*r12*x5504))+((r11*x5506))+(((-1.0)*x5502)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5498*x5504))+((cj1*sj2))+((r21*x5507))+((r22*x5495)));
evalcond[4]=(((cj0*x5497))+(((-1.0)*x5502*x5503))+(((-1.0)*x5500*x5504))+((x5496*x5499))+((r02*x5495)));
evalcond[5]=((((-1.0)*x5501*x5504))+((r12*x5495))+(((-1.0)*sj0*x5503))+((r11*x5507))+((sj0*x5497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5508=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5508;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5508);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5509=((1.0)*cj5);
IkReal x5510=((((-1.0)*r21*x5509))+(((-1.0)*r20*sj5)));
j4eval[0]=x5510;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5509))+((r11*sj5))))));
j4eval[2]=IKsign(x5510);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5511=(r01*sj5);
IkReal x5512=(cj1*sj2);
IkReal x5513=(cj2*sj1);
IkReal x5514=((1.0)*r02);
IkReal x5515=((1.0)*cj5*r00);
IkReal x5516=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5516;
j4eval[1]=((IKabs(((((-1.0)*x5512*x5515))+(((-1.0)*x5513*x5515))+((x5511*x5513))+((x5511*x5512)))))+(IKabs(((((-1.0)*x5512*x5514))+(((-1.0)*x5513*x5514))))));
j4eval[2]=IKsign(x5516);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5517=(r01*sj5);
IkReal x5518=(cj1*sj2);
IkReal x5519=(cj2*sj1);
IkReal x5520=((1.0)*r02);
IkReal x5521=((1.0)*cj5*r00);
CheckValue<IkReal> x5522 = IKatan2WithCheck(IkReal(((((-1.0)*x5519*x5521))+((x5517*x5518))+((x5517*x5519))+(((-1.0)*x5518*x5521)))),IkReal(((((-1.0)*x5519*x5520))+(((-1.0)*x5518*x5520)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5522.valid){
continue;
}
CheckValue<IkReal> x5523=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5522.value)+(((1.5707963267949)*(x5523.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5524=IKcos(j4);
IkReal x5525=IKsin(j4);
IkReal x5526=(cj5*r00);
IkReal x5527=(cj5*r10);
IkReal x5528=(r21*sj5);
IkReal x5529=(cj5*r20);
IkReal x5530=((1.0)*x5524);
IkReal x5531=((1.0)*x5525);
IkReal x5532=(sj5*x5525);
IkReal x5533=(sj5*x5524);
evalcond[0]=(((r02*x5525))+(((-1.0)*x5526*x5530))+((r01*x5533)));
evalcond[1]=((((-1.0)*r22*x5530))+((x5525*x5528))+(((-1.0)*x5529*x5531)));
evalcond[2]=((((-1.0)*x5527*x5531))+((r11*x5532))+(((-1.0)*r12*x5530)));
evalcond[3]=((1.0)+(((-1.0)*r02*x5530))+(((-1.0)*x5526*x5531))+((r01*x5532)));
evalcond[4]=(((cj2*sj1))+((r22*x5525))+((cj1*sj2))+((x5524*x5528))+(((-1.0)*x5529*x5530)));
evalcond[5]=((((-1.0)*x5527*x5530))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r11*x5533))+((r12*x5525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5534=((1.0)*cj5);
CheckValue<IkReal> x5535=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5534))+(((-1.0)*r20*sj5)))),-1);
if(!x5535.valid){
continue;
}
CheckValue<IkReal> x5536 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x5534))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5535.value)))+(x5536.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5537=IKcos(j4);
IkReal x5538=IKsin(j4);
IkReal x5539=(cj5*r00);
IkReal x5540=(cj5*r10);
IkReal x5541=(r21*sj5);
IkReal x5542=(cj5*r20);
IkReal x5543=((1.0)*x5537);
IkReal x5544=((1.0)*x5538);
IkReal x5545=(sj5*x5538);
IkReal x5546=(sj5*x5537);
evalcond[0]=((((-1.0)*x5539*x5543))+((r02*x5538))+((r01*x5546)));
evalcond[1]=(((x5538*x5541))+(((-1.0)*x5542*x5544))+(((-1.0)*r22*x5543)));
evalcond[2]=(((r11*x5545))+(((-1.0)*x5540*x5544))+(((-1.0)*r12*x5543)));
evalcond[3]=((1.0)+(((-1.0)*x5539*x5544))+(((-1.0)*r02*x5543))+((r01*x5545)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5542*x5543))+((cj1*sj2))+((r22*x5538))+((x5537*x5541)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x5546))+(((-1.0)*x5540*x5543))+((cj1*cj2))+((r12*x5538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5547 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5547.valid){
continue;
}
CheckValue<IkReal> x5548=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5547.value)+(((1.5707963267949)*(x5548.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5549=IKcos(j4);
IkReal x5550=IKsin(j4);
IkReal x5551=(cj5*r00);
IkReal x5552=(cj5*r10);
IkReal x5553=(r21*sj5);
IkReal x5554=(cj5*r20);
IkReal x5555=((1.0)*x5549);
IkReal x5556=((1.0)*x5550);
IkReal x5557=(sj5*x5550);
IkReal x5558=(sj5*x5549);
evalcond[0]=(((r01*x5558))+(((-1.0)*x5551*x5555))+((r02*x5550)));
evalcond[1]=((((-1.0)*r22*x5555))+((x5550*x5553))+(((-1.0)*x5554*x5556)));
evalcond[2]=(((r11*x5557))+(((-1.0)*x5552*x5556))+(((-1.0)*r12*x5555)));
evalcond[3]=((1.0)+((r01*x5557))+(((-1.0)*x5551*x5556))+(((-1.0)*r02*x5555)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5549*x5553))+((r22*x5550))+(((-1.0)*x5554*x5555)));
evalcond[5]=(((r11*x5558))+(((-1.0)*x5552*x5555))+(((-1.0)*sj1*sj2))+((r12*x5550))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5559=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5559;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5559);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5560=((1.0)*cj5);
IkReal x5561=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5560)));
j4eval[0]=x5561;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x5560)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5561);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5562=cj5*cj5;
IkReal x5563=r01*r01;
IkReal x5564=(cj5*r00);
IkReal x5565=(r01*sj5);
IkReal x5566=(x5563+(((-2.0)*x5564*x5565))+(((-1.0)*x5562*x5563))+(r02*r02)+((x5562*(r00*r00))));
j4eval[0]=x5566;
j4eval[1]=IKsign(x5566);
j4eval[2]=((IKabs(r02))+(IKabs((x5565+(((-1.0)*x5564))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5567=cj5*cj5;
IkReal x5568=r01*r01;
IkReal x5569=(r01*sj5);
IkReal x5570=(cj5*r00);
CheckValue<IkReal> x5571=IKPowWithIntegerCheck(IKsign((x5568+((x5567*(r00*r00)))+(((-2.0)*x5569*x5570))+(((-1.0)*x5567*x5568))+(r02*r02))),-1);
if(!x5571.valid){
continue;
}
CheckValue<IkReal> x5572 = IKatan2WithCheck(IkReal((x5569+(((-1.0)*x5570)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5571.value)))+(x5572.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5573=IKcos(j4);
IkReal x5574=IKsin(j4);
IkReal x5575=(cj5*r00);
IkReal x5576=(cj5*r10);
IkReal x5577=(r21*sj5);
IkReal x5578=(cj5*r20);
IkReal x5579=((1.0)*x5573);
IkReal x5580=((1.0)*x5574);
IkReal x5581=(sj5*x5574);
IkReal x5582=(sj5*x5573);
evalcond[0]=(((r02*x5574))+(((-1.0)*x5575*x5579))+((r01*x5582)));
evalcond[1]=(((x5574*x5577))+(((-1.0)*x5578*x5580))+(((-1.0)*r22*x5579)));
evalcond[2]=((((-1.0)*x5576*x5580))+(((-1.0)*r12*x5579))+((r11*x5581)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x5579))+(((-1.0)*x5575*x5580))+((r01*x5581)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5578*x5579))+((cj1*sj2))+((r22*x5574))+((x5573*x5577)));
evalcond[5]=(((r11*x5582))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x5574))+(((-1.0)*x5576*x5579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5583=((1.0)*cj5);
CheckValue<IkReal> x5584=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5583)))),-1);
if(!x5584.valid){
continue;
}
CheckValue<IkReal> x5585 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5583))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5584.value)))+(x5585.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5586=IKcos(j4);
IkReal x5587=IKsin(j4);
IkReal x5588=(cj5*r00);
IkReal x5589=(cj5*r10);
IkReal x5590=(r21*sj5);
IkReal x5591=(cj5*r20);
IkReal x5592=((1.0)*x5586);
IkReal x5593=((1.0)*x5587);
IkReal x5594=(sj5*x5587);
IkReal x5595=(sj5*x5586);
evalcond[0]=((((-1.0)*x5588*x5592))+((r02*x5587))+((r01*x5595)));
evalcond[1]=(((x5587*x5590))+(((-1.0)*x5591*x5593))+(((-1.0)*r22*x5592)));
evalcond[2]=((((-1.0)*r12*x5592))+((r11*x5594))+(((-1.0)*x5589*x5593)));
evalcond[3]=((-1.0)+(((-1.0)*x5588*x5593))+(((-1.0)*r02*x5592))+((r01*x5594)));
evalcond[4]=(((cj2*sj1))+((x5586*x5590))+((cj1*sj2))+(((-1.0)*x5591*x5592))+((r22*x5587)));
evalcond[5]=(((r11*x5595))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x5587))+(((-1.0)*x5589*x5592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5596=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5596.valid){
continue;
}
CheckValue<IkReal> x5597 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5596.value)))+(x5597.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5598=IKcos(j4);
IkReal x5599=IKsin(j4);
IkReal x5600=(cj5*r00);
IkReal x5601=(cj5*r10);
IkReal x5602=(r21*sj5);
IkReal x5603=(cj5*r20);
IkReal x5604=((1.0)*x5598);
IkReal x5605=((1.0)*x5599);
IkReal x5606=(sj5*x5599);
IkReal x5607=(sj5*x5598);
evalcond[0]=(((r02*x5599))+((r01*x5607))+(((-1.0)*x5600*x5604)));
evalcond[1]=((((-1.0)*r22*x5604))+(((-1.0)*x5603*x5605))+((x5599*x5602)));
evalcond[2]=((((-1.0)*r12*x5604))+(((-1.0)*x5601*x5605))+((r11*x5606)));
evalcond[3]=((-1.0)+((r01*x5606))+(((-1.0)*r02*x5604))+(((-1.0)*x5600*x5605)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5603*x5604))+((r22*x5599))+((x5598*x5602)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x5599))+(((-1.0)*x5601*x5604))+((r11*x5607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5609 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5609)==0){
continue;
}
IkReal x5608=pow(x5609,-0.5);
CheckValue<IkReal> x5610 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5610.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5610.value));
IkReal gconst127=((-1.0)*r11*x5608);
IkReal gconst128=(r10*x5608);
CheckValue<IkReal> x5611 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5611.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5611.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5614 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5614.valid){
continue;
}
IkReal x5612=((-1.0)*(x5614.value));
IkReal x5613=x5608;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5612;
IkReal gconst126=x5612;
IkReal gconst127=((-1.0)*r11*x5613);
IkReal gconst128=(r10*x5613);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5615=((1.0)*gconst128);
CheckValue<IkReal> x5616 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x5615))+((cj0*gconst127*r01))+(((-1.0)*r10*sj0*x5615))+((gconst127*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5616.valid){
continue;
}
CheckValue<IkReal> x5617=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst127*r20))+(((-1.0)*r21*x5615)))),-1);
if(!x5617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5616.value)+(((1.5707963267949)*(x5617.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5618=IKsin(j4);
IkReal x5619=IKcos(j4);
IkReal x5620=(cj1*cj2);
IkReal x5621=(gconst127*r01);
IkReal x5622=(gconst128*r10);
IkReal x5623=(gconst128*r00);
IkReal x5624=(gconst128*r20);
IkReal x5625=((1.0)*cj0);
IkReal x5626=(sj1*sj2);
IkReal x5627=((1.0)*x5619);
IkReal x5628=((1.0)*x5618);
IkReal x5629=(gconst127*x5619);
IkReal x5630=(gconst127*x5618);
evalcond[0]=((((-1.0)*r22*x5627))+(((-1.0)*x5624*x5628))+((r21*x5630)));
evalcond[1]=(((x5618*x5621))+sj0+(((-1.0)*x5623*x5628))+(((-1.0)*r02*x5627)));
evalcond[2]=(((r11*x5630))+(((-1.0)*r12*x5627))+(((-1.0)*x5622*x5628))+(((-1.0)*x5625)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5629))+(((-1.0)*x5624*x5627))+((r22*x5618)));
evalcond[4]=(((cj0*x5620))+((x5619*x5621))+((r02*x5618))+(((-1.0)*x5625*x5626))+(((-1.0)*x5623*x5627)));
evalcond[5]=(((sj0*x5620))+((r12*x5618))+(((-1.0)*x5622*x5627))+((r11*x5629))+(((-1.0)*sj0*x5626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5631 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst128*r20))+((cj0*gconst127*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5631.valid){
continue;
}
CheckValue<IkReal> x5632=IKPowWithIntegerCheck(IKsign((((gconst128*r01))+((gconst127*r00)))),-1);
if(!x5632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5631.value)+(((1.5707963267949)*(x5632.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5633=IKsin(j4);
IkReal x5634=IKcos(j4);
IkReal x5635=(cj1*cj2);
IkReal x5636=(gconst127*r01);
IkReal x5637=(gconst128*r10);
IkReal x5638=(gconst128*r00);
IkReal x5639=(gconst128*r20);
IkReal x5640=((1.0)*cj0);
IkReal x5641=(sj1*sj2);
IkReal x5642=((1.0)*x5634);
IkReal x5643=((1.0)*x5633);
IkReal x5644=(gconst127*x5634);
IkReal x5645=(gconst127*x5633);
evalcond[0]=((((-1.0)*r22*x5642))+((r21*x5645))+(((-1.0)*x5639*x5643)));
evalcond[1]=(sj0+(((-1.0)*x5638*x5643))+(((-1.0)*r02*x5642))+((x5633*x5636)));
evalcond[2]=((((-1.0)*r12*x5642))+(((-1.0)*x5640))+((r11*x5645))+(((-1.0)*x5637*x5643)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5633))+((r21*x5644))+(((-1.0)*x5639*x5642)));
evalcond[4]=((((-1.0)*x5638*x5642))+((cj0*x5635))+(((-1.0)*x5640*x5641))+((x5634*x5636))+((r02*x5633)));
evalcond[5]=(((r12*x5633))+(((-1.0)*sj0*x5641))+((r11*x5644))+((sj0*x5635))+(((-1.0)*x5637*x5642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5647 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5647)==0){
continue;
}
IkReal x5646=pow(x5647,-0.5);
CheckValue<IkReal> x5648 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5648.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5648.value))));
IkReal gconst130=((1.0)*r11*x5646);
IkReal gconst131=((-1.0)*r10*x5646);
CheckValue<IkReal> x5649 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5649.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5649.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5652 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5652.valid){
continue;
}
IkReal x5650=((1.0)*(x5652.value));
IkReal x5651=x5646;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5650)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5650)));
IkReal gconst130=((1.0)*r11*x5651);
IkReal gconst131=((-1.0)*r10*x5651);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5655 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5655.valid){
continue;
}
IkReal x5653=((1.0)*(x5655.value));
IkReal x5654=x5646;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5653)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5653)));
IkReal gconst130=((1.0)*r11*x5654);
IkReal gconst131=((-1.0)*r10*x5654);
IkReal x5656=r12*r12;
IkReal x5657=(cj0*r02);
IkReal x5658=x5646;
IkReal x5659=(sj0*x5658);
j4eval[0]=((IKabs((((x5656*x5659))+((r12*x5657*x5658))+(((-1.0)*x5659)))))+(IKabs((x5657+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5662 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5662.valid){
continue;
}
IkReal x5660=((1.0)*(x5662.value));
IkReal x5661=x5646;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5660)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5660)));
IkReal gconst130=((1.0)*r11*x5661);
IkReal gconst131=((-1.0)*r10*x5661);
IkReal x5663=(cj1*sj2);
IkReal x5664=(cj2*sj1);
IkReal x5665=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x5671=IKPowWithIntegerCheck(x5665,-1);
if(!x5671.valid){
continue;
}
IkReal x5666=x5671.value;
IkReal x5667=((1.0)*x5666);
IkReal x5668=x5646;
IkReal x5669=(r12*r22*x5668);
IkReal x5670=((((-2.0)*r10*r11*r20*r21*x5666))+(((-1.0)*x5667*(r11*r11)*(r21*r21)))+(((-1.0)*x5667*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22))));
j4eval[0]=x5670;
j4eval[1]=((IKabs((((x5664*x5669))+((x5663*x5669)))))+(IKabs((((r22*x5664))+((r22*x5663))))));
j4eval[2]=IKsign(x5670);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5672=(cj2*sj1);
IkReal x5673=(cj1*sj2);
IkReal x5674=(gconst130*r21);
IkReal x5675=((1.0)*gconst131*r20);
CheckValue<IkReal> x5676=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5674*x5674)))+(((-1.0)*(r22*r22)))+(((2.0)*gconst131*r20*x5674))+(((-1.0)*gconst131*r20*x5675)))),-1);
if(!x5676.valid){
continue;
}
CheckValue<IkReal> x5677 = IKatan2WithCheck(IkReal((((r22*x5672))+((r22*x5673)))),IkReal(((((-1.0)*x5672*x5675))+((x5673*x5674))+((x5672*x5674))+(((-1.0)*x5673*x5675)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5676.value)))+(x5677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5678=IKsin(j4);
IkReal x5679=IKcos(j4);
IkReal x5680=(cj1*cj2);
IkReal x5681=(gconst131*r10);
IkReal x5682=(gconst130*r11);
IkReal x5683=(gconst131*r20);
IkReal x5684=(gconst131*r00);
IkReal x5685=((1.0)*cj0);
IkReal x5686=(sj1*sj2);
IkReal x5687=((1.0)*x5679);
IkReal x5688=((1.0)*x5678);
IkReal x5689=(gconst130*x5679);
IkReal x5690=(gconst130*x5678);
evalcond[0]=((((-1.0)*r22*x5687))+(((-1.0)*x5683*x5688))+((r21*x5690)));
evalcond[1]=((((-1.0)*r02*x5687))+sj0+(((-1.0)*x5684*x5688))+((r01*x5690)));
evalcond[2]=((((-1.0)*x5681*x5688))+(((-1.0)*x5685))+((x5678*x5682))+(((-1.0)*r12*x5687)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5683*x5687))+((r22*x5678))+((r21*x5689)));
evalcond[4]=(((r02*x5678))+(((-1.0)*x5684*x5687))+(((-1.0)*x5685*x5686))+((cj0*x5680))+((r01*x5689)));
evalcond[5]=((((-1.0)*x5681*x5687))+((sj0*x5680))+((x5679*x5682))+((r12*x5678))+(((-1.0)*sj0*x5686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5691=((1.0)*gconst131);
CheckValue<IkReal> x5692 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst130*r01))+(((-1.0)*r10*sj0*x5691))+(((-1.0)*cj0*r00*x5691))+((gconst130*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5692.valid){
continue;
}
CheckValue<IkReal> x5693=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r20))+(((-1.0)*r21*x5691)))),-1);
if(!x5693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5692.value)+(((1.5707963267949)*(x5693.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5694=IKsin(j4);
IkReal x5695=IKcos(j4);
IkReal x5696=(cj1*cj2);
IkReal x5697=(gconst131*r10);
IkReal x5698=(gconst130*r11);
IkReal x5699=(gconst131*r20);
IkReal x5700=(gconst131*r00);
IkReal x5701=((1.0)*cj0);
IkReal x5702=(sj1*sj2);
IkReal x5703=((1.0)*x5695);
IkReal x5704=((1.0)*x5694);
IkReal x5705=(gconst130*x5695);
IkReal x5706=(gconst130*x5694);
evalcond[0]=((((-1.0)*r22*x5703))+(((-1.0)*x5699*x5704))+((r21*x5706)));
evalcond[1]=(sj0+(((-1.0)*x5700*x5704))+((r01*x5706))+(((-1.0)*r02*x5703)));
evalcond[2]=(((x5694*x5698))+(((-1.0)*r12*x5703))+(((-1.0)*x5697*x5704))+(((-1.0)*x5701)));
evalcond[3]=(((cj2*sj1))+((r22*x5694))+((cj1*sj2))+(((-1.0)*x5699*x5703))+((r21*x5705)));
evalcond[4]=((((-1.0)*x5700*x5703))+(((-1.0)*x5701*x5702))+((r02*x5694))+((r01*x5705))+((cj0*x5696)));
evalcond[5]=(((x5695*x5698))+(((-1.0)*x5697*x5703))+(((-1.0)*sj0*x5702))+((sj0*x5696))+((r12*x5694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5707=IKPowWithIntegerCheck(IKsign((((gconst131*r01))+((gconst130*r00)))),-1);
if(!x5707.valid){
continue;
}
CheckValue<IkReal> x5708 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*gconst131*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5707.value)))+(x5708.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5709=IKsin(j4);
IkReal x5710=IKcos(j4);
IkReal x5711=(cj1*cj2);
IkReal x5712=(gconst131*r10);
IkReal x5713=(gconst130*r11);
IkReal x5714=(gconst131*r20);
IkReal x5715=(gconst131*r00);
IkReal x5716=((1.0)*cj0);
IkReal x5717=(sj1*sj2);
IkReal x5718=((1.0)*x5710);
IkReal x5719=((1.0)*x5709);
IkReal x5720=(gconst130*x5710);
IkReal x5721=(gconst130*x5709);
evalcond[0]=(((r21*x5721))+(((-1.0)*r22*x5718))+(((-1.0)*x5714*x5719)));
evalcond[1]=(sj0+((r01*x5721))+(((-1.0)*x5715*x5719))+(((-1.0)*r02*x5718)));
evalcond[2]=((((-1.0)*x5712*x5719))+(((-1.0)*r12*x5718))+(((-1.0)*x5716))+((x5709*x5713)));
evalcond[3]=(((cj2*sj1))+((r21*x5720))+(((-1.0)*x5714*x5718))+((cj1*sj2))+((r22*x5709)));
evalcond[4]=(((r02*x5709))+((r01*x5720))+(((-1.0)*x5715*x5718))+((cj0*x5711))+(((-1.0)*x5716*x5717)));
evalcond[5]=(((x5710*x5713))+((r12*x5709))+((sj0*x5711))+(((-1.0)*x5712*x5718))+(((-1.0)*sj0*x5717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5722=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5722;
j4eval[1]=IKsign(x5722);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5723=((1.0)*cj5);
IkReal x5724=((((-1.0)*r21*x5723))+(((-1.0)*r20*sj5)));
j4eval[0]=x5724;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5723))))));
j4eval[2]=IKsign(x5724);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5725=cj5*cj5;
IkReal x5726=r11*r11;
IkReal x5727=(r11*sj5);
IkReal x5728=(cj5*r10);
IkReal x5729=((((-1.0)*x5725*x5726))+(r12*r12)+(((-2.0)*x5727*x5728))+((x5725*(r10*r10)))+x5726);
j4eval[0]=x5729;
j4eval[1]=IKsign(x5729);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5728))+x5727))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5730=cj5*cj5;
IkReal x5731=r11*r11;
IkReal x5732=(cj5*r10);
IkReal x5733=(r11*sj5);
CheckValue<IkReal> x5734=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5730*x5731))+(r12*r12)+((x5730*(r10*r10)))+(((-2.0)*x5732*x5733))+x5731)),-1);
if(!x5734.valid){
continue;
}
CheckValue<IkReal> x5735 = IKatan2WithCheck(IkReal(((((-1.0)*x5732))+x5733)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5734.value)))+(x5735.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5736=IKcos(j4);
IkReal x5737=IKsin(j4);
IkReal x5738=(cj5*r00);
IkReal x5739=(cj5*r10);
IkReal x5740=(r21*sj5);
IkReal x5741=(cj5*r20);
IkReal x5742=((1.0)*x5736);
IkReal x5743=((1.0)*x5737);
IkReal x5744=(sj5*x5737);
IkReal x5745=(sj5*x5736);
evalcond[0]=(((r11*x5745))+((r12*x5737))+(((-1.0)*x5739*x5742)));
evalcond[1]=(((x5737*x5740))+(((-1.0)*x5741*x5743))+(((-1.0)*r22*x5742)));
evalcond[2]=(((r01*x5744))+(((-1.0)*r02*x5742))+(((-1.0)*x5738*x5743)));
evalcond[3]=((-1.0)+((r11*x5744))+(((-1.0)*x5739*x5743))+(((-1.0)*r12*x5742)));
evalcond[4]=(((cj2*sj1))+((x5736*x5740))+((cj1*sj2))+(((-1.0)*x5741*x5742))+((r22*x5737)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x5745))+(((-1.0)*x5738*x5742))+((r02*x5737))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5746=((1.0)*cj5);
CheckValue<IkReal> x5747 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5746)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5747.valid){
continue;
}
CheckValue<IkReal> x5748=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5746))+(((-1.0)*r20*sj5)))),-1);
if(!x5748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5747.value)+(((1.5707963267949)*(x5748.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5749=IKcos(j4);
IkReal x5750=IKsin(j4);
IkReal x5751=(cj5*r00);
IkReal x5752=(cj5*r10);
IkReal x5753=(r21*sj5);
IkReal x5754=(cj5*r20);
IkReal x5755=((1.0)*x5749);
IkReal x5756=((1.0)*x5750);
IkReal x5757=(sj5*x5750);
IkReal x5758=(sj5*x5749);
evalcond[0]=((((-1.0)*x5752*x5755))+((r11*x5758))+((r12*x5750)));
evalcond[1]=(((x5750*x5753))+(((-1.0)*r22*x5755))+(((-1.0)*x5754*x5756)));
evalcond[2]=((((-1.0)*x5751*x5756))+((r01*x5757))+(((-1.0)*r02*x5755)));
evalcond[3]=((-1.0)+(((-1.0)*x5752*x5756))+(((-1.0)*r12*x5755))+((r11*x5757)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5749*x5753))+(((-1.0)*x5754*x5755))+((r22*x5750)));
evalcond[5]=((((-1.0)*x5751*x5755))+(((-1.0)*sj1*sj2))+((r01*x5758))+((cj1*cj2))+((r02*x5750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5759 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5759.valid){
continue;
}
CheckValue<IkReal> x5760=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5759.value)+(((1.5707963267949)*(x5760.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5761=IKcos(j4);
IkReal x5762=IKsin(j4);
IkReal x5763=(cj5*r00);
IkReal x5764=(cj5*r10);
IkReal x5765=(r21*sj5);
IkReal x5766=(cj5*r20);
IkReal x5767=((1.0)*x5761);
IkReal x5768=((1.0)*x5762);
IkReal x5769=(sj5*x5762);
IkReal x5770=(sj5*x5761);
evalcond[0]=(((r11*x5770))+((r12*x5762))+(((-1.0)*x5764*x5767)));
evalcond[1]=((((-1.0)*x5766*x5768))+(((-1.0)*r22*x5767))+((x5762*x5765)));
evalcond[2]=(((r01*x5769))+(((-1.0)*x5763*x5768))+(((-1.0)*r02*x5767)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5767))+((r11*x5769))+(((-1.0)*x5764*x5768)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5766*x5767))+((cj1*sj2))+((r22*x5762))+((x5761*x5765)));
evalcond[5]=(((r01*x5770))+(((-1.0)*sj1*sj2))+(((-1.0)*x5763*x5767))+((cj1*cj2))+((r02*x5762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5771=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5771;
j4eval[1]=IKsign(x5771);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5772=((1.0)*cj5);
IkReal x5773=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5772)));
j4eval[0]=x5773;
j4eval[1]=((IKabs(((((-1.0)*r20*x5772))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5773);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5774=cj5*cj5;
IkReal x5775=r11*r11;
IkReal x5776=(cj5*r10);
IkReal x5777=(r11*sj5);
IkReal x5778=(((x5774*x5775))+(((2.0)*x5776*x5777))+(((-1.0)*x5774*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x5775)));
j4eval[0]=x5778;
j4eval[1]=IKsign(x5778);
j4eval[2]=((IKabs(((((-1.0)*x5776))+x5777)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5779=cj5*cj5;
IkReal x5780=r11*r11;
IkReal x5781=(cj5*r10);
IkReal x5782=(r11*sj5);
CheckValue<IkReal> x5783=IKPowWithIntegerCheck(IKsign((((x5779*x5780))+(((-1.0)*(r12*r12)))+(((-1.0)*x5780))+(((2.0)*x5781*x5782))+(((-1.0)*x5779*(r10*r10))))),-1);
if(!x5783.valid){
continue;
}
CheckValue<IkReal> x5784 = IKatan2WithCheck(IkReal(((((-1.0)*x5781))+x5782)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5783.value)))+(x5784.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5785=IKcos(j4);
IkReal x5786=IKsin(j4);
IkReal x5787=(cj5*r00);
IkReal x5788=(cj5*r10);
IkReal x5789=(r21*sj5);
IkReal x5790=(cj5*r20);
IkReal x5791=((1.0)*x5785);
IkReal x5792=((1.0)*x5786);
IkReal x5793=(sj5*x5786);
IkReal x5794=(sj5*x5785);
evalcond[0]=(((r12*x5786))+((r11*x5794))+(((-1.0)*x5788*x5791)));
evalcond[1]=((((-1.0)*r22*x5791))+(((-1.0)*x5790*x5792))+((x5786*x5789)));
evalcond[2]=(((r01*x5793))+(((-1.0)*x5787*x5792))+(((-1.0)*r02*x5791)));
evalcond[3]=((1.0)+((r11*x5793))+(((-1.0)*r12*x5791))+(((-1.0)*x5788*x5792)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5785*x5789))+((r22*x5786))+(((-1.0)*x5790*x5791)));
evalcond[5]=(((r01*x5794))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5787*x5791))+((r02*x5786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5795=((1.0)*cj5);
CheckValue<IkReal> x5796 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5795)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5796.valid){
continue;
}
CheckValue<IkReal> x5797=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5795))+(((-1.0)*r00*sj5)))),-1);
if(!x5797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5796.value)+(((1.5707963267949)*(x5797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5798=IKcos(j4);
IkReal x5799=IKsin(j4);
IkReal x5800=(cj5*r00);
IkReal x5801=(cj5*r10);
IkReal x5802=(r21*sj5);
IkReal x5803=(cj5*r20);
IkReal x5804=((1.0)*x5798);
IkReal x5805=((1.0)*x5799);
IkReal x5806=(sj5*x5799);
IkReal x5807=(sj5*x5798);
evalcond[0]=(((r12*x5799))+((r11*x5807))+(((-1.0)*x5801*x5804)));
evalcond[1]=((((-1.0)*r22*x5804))+((x5799*x5802))+(((-1.0)*x5803*x5805)));
evalcond[2]=((((-1.0)*x5800*x5805))+((r01*x5806))+(((-1.0)*r02*x5804)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5804))+((r11*x5806))+(((-1.0)*x5801*x5805)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x5799))+(((-1.0)*x5803*x5804))+((x5798*x5802)));
evalcond[5]=((((-1.0)*x5800*x5804))+((r01*x5807))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5808=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5808.valid){
continue;
}
CheckValue<IkReal> x5809 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5808.value)))+(x5809.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5810=IKcos(j4);
IkReal x5811=IKsin(j4);
IkReal x5812=(cj5*r00);
IkReal x5813=(cj5*r10);
IkReal x5814=(r21*sj5);
IkReal x5815=(cj5*r20);
IkReal x5816=((1.0)*x5810);
IkReal x5817=((1.0)*x5811);
IkReal x5818=(sj5*x5811);
IkReal x5819=(sj5*x5810);
evalcond[0]=((((-1.0)*x5813*x5816))+((r11*x5819))+((r12*x5811)));
evalcond[1]=((((-1.0)*x5815*x5817))+((x5811*x5814))+(((-1.0)*r22*x5816)));
evalcond[2]=((((-1.0)*r02*x5816))+(((-1.0)*x5812*x5817))+((r01*x5818)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5816))+(((-1.0)*x5813*x5817))+((r11*x5818)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5815*x5816))+((r22*x5811))+((cj1*sj2))+((x5810*x5814)));
evalcond[5]=(((r02*x5811))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5812*x5816))+((r01*x5819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5820=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5820);
rxp0_2=(py*r00);
rxp1_0=(r21*x5820);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5821=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5821);
rxp0_2=(py*r00);
rxp1_0=(r21*x5821);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5822=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5822);
rxp0_2=(py*r00);
rxp1_0=(r21*x5822);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5825=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x5825.valid){
continue;
}
IkReal x5823=x5825.value;
IkReal x5824=(cj0*x5823);
cj4array[0]=(((sj1*sj2*x5824))+(((-1.0)*cj1*cj2*x5824)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5826=IKsin(j4);
IkReal x5827=IKcos(j4);
IkReal x5828=(r21*sj5);
IkReal x5829=((1.0)*x5827);
IkReal x5830=((1.0)*cj5*x5826);
evalcond[0]=(r12*x5826);
evalcond[1]=((((-1.0)*r12*x5829))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x5830))+((x5826*x5828)));
evalcond[3]=((((-1.0)*r00*x5830))+((r01*sj5*x5826)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*cj5*r20*x5829))+((x5827*x5828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5833=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x5833.valid){
continue;
}
IkReal x5831=x5833.value;
IkReal x5832=((1.0)*x5831);
cj4array[0]=((((-1.0)*cj1*sj2*x5832))+(((-1.0)*cj2*sj1*x5832)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5834=IKsin(j4);
IkReal x5835=IKcos(j4);
IkReal x5836=((1.0)*cj0);
IkReal x5837=(r01*sj5);
IkReal x5838=((1.0)*cj5*r00);
evalcond[0]=(r12*x5834);
evalcond[1]=((((-1.0)*x5836))+(((-1.0)*r12*x5835)));
evalcond[2]=((((-1.0)*cj5*r20*x5834))+((r21*sj5*x5834)));
evalcond[3]=(((x5834*x5837))+(((-1.0)*x5834*x5838)));
evalcond[4]=(((x5835*x5837))+(((-1.0)*sj1*sj2*x5836))+((cj0*cj1*cj2))+(((-1.0)*x5835*x5838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5839=IKPowWithIntegerCheck(r12,-1);
if(!x5839.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x5839.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5840=IKsin(j4);
IkReal x5841=IKcos(j4);
IkReal x5842=((1.0)*cj5*r00);
IkReal x5843=(sj5*x5841);
IkReal x5844=(sj5*x5840);
IkReal x5845=((1.0)*cj5*r20);
evalcond[0]=(r12*x5840);
evalcond[1]=(((r21*x5844))+(((-1.0)*x5840*x5845)));
evalcond[2]=((((-1.0)*x5840*x5842))+((r01*x5844)));
evalcond[3]=(((cj2*sj1))+((r21*x5843))+((cj1*sj2))+(((-1.0)*x5841*x5845)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+((r01*x5843))+(((-1.0)*x5841*x5842))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5846=((1.0)*cj5);
CheckValue<IkReal> x5847 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x5846))+(((-1.0)*r10*sj0*x5846)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5847.valid){
continue;
}
CheckValue<IkReal> x5848=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5846))+(((-1.0)*r20*sj5)))),-1);
if(!x5848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5847.value)+(((1.5707963267949)*(x5848.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5849=IKsin(j4);
IkReal x5850=IKcos(j4);
IkReal x5851=(cj5*r00);
IkReal x5852=(cj1*cj2);
IkReal x5853=(cj5*r10);
IkReal x5854=(r21*sj5);
IkReal x5855=(cj5*r20);
IkReal x5856=((1.0)*x5850);
IkReal x5857=((1.0)*x5849);
IkReal x5858=(sj5*x5849);
IkReal x5859=(sj5*x5850);
IkReal x5860=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x5855*x5857))+(((-1.0)*r22*x5856))+((x5849*x5854)));
evalcond[1]=(sj0+((r01*x5858))+(((-1.0)*x5851*x5857))+(((-1.0)*r02*x5856)));
evalcond[2]=((((-1.0)*x5853*x5857))+((r11*x5858))+(((-1.0)*r12*x5856))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5855*x5856))+((x5850*x5854))+((r22*x5849)));
evalcond[4]=(((r01*x5859))+(((-1.0)*cj0*x5860))+(((-1.0)*x5851*x5856))+((r02*x5849))+((cj0*x5852)));
evalcond[5]=((((-1.0)*x5853*x5856))+(((-1.0)*sj0*x5860))+((r11*x5859))+((r12*x5849))+((sj0*x5852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5861=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5861.valid){
continue;
}
CheckValue<IkReal> x5862 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5861.value)))+(x5862.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5863=IKsin(j4);
IkReal x5864=IKcos(j4);
IkReal x5865=(cj5*r00);
IkReal x5866=(cj1*cj2);
IkReal x5867=(cj5*r10);
IkReal x5868=(r21*sj5);
IkReal x5869=(cj5*r20);
IkReal x5870=((1.0)*x5864);
IkReal x5871=((1.0)*x5863);
IkReal x5872=(sj5*x5863);
IkReal x5873=(sj5*x5864);
IkReal x5874=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x5870))+(((-1.0)*x5869*x5871))+((x5863*x5868)));
evalcond[1]=(sj0+(((-1.0)*r02*x5870))+(((-1.0)*x5865*x5871))+((r01*x5872)));
evalcond[2]=((((-1.0)*r12*x5870))+((r11*x5872))+(((-1.0)*cj0))+(((-1.0)*x5867*x5871)));
evalcond[3]=(((cj2*sj1))+((r22*x5863))+((cj1*sj2))+(((-1.0)*x5869*x5870))+((x5864*x5868)));
evalcond[4]=((((-1.0)*cj0*x5874))+((r02*x5863))+((cj0*x5866))+(((-1.0)*x5865*x5870))+((r01*x5873)));
evalcond[5]=((((-1.0)*sj0*x5874))+((sj0*x5866))+((r11*x5873))+((r12*x5863))+(((-1.0)*x5867*x5870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5875=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5875.valid){
continue;
}
CheckValue<IkReal> x5876 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5875.value)))+(x5876.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5877=IKsin(j4);
IkReal x5878=IKcos(j4);
IkReal x5879=(cj5*r00);
IkReal x5880=(cj1*cj2);
IkReal x5881=(cj5*r10);
IkReal x5882=(r21*sj5);
IkReal x5883=(cj5*r20);
IkReal x5884=((1.0)*x5878);
IkReal x5885=((1.0)*x5877);
IkReal x5886=(sj5*x5877);
IkReal x5887=(sj5*x5878);
IkReal x5888=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x5883*x5885))+(((-1.0)*r22*x5884))+((x5877*x5882)));
evalcond[1]=(sj0+((r01*x5886))+(((-1.0)*x5879*x5885))+(((-1.0)*r02*x5884)));
evalcond[2]=(((r11*x5886))+(((-1.0)*r12*x5884))+(((-1.0)*x5881*x5885))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x5883*x5884))+((cj2*sj1))+((cj1*sj2))+((r22*x5877))+((x5878*x5882)));
evalcond[4]=(((r01*x5887))+(((-1.0)*x5879*x5884))+((r02*x5877))+(((-1.0)*cj0*x5888))+((cj0*x5880)));
evalcond[5]=(((r11*x5887))+((r12*x5877))+(((-1.0)*sj0*x5888))+(((-1.0)*x5881*x5884))+((sj0*x5880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5889=r21*r21;
IkReal x5890=cj5*cj5;
IkReal x5891=(cj2*sj1);
IkReal x5892=(cj1*sj2);
IkReal x5893=(r21*sj5);
IkReal x5894=((1.0)*cj5*r20);
CheckValue<IkReal> x5895=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5889))+((x5889*x5890))+(((2.0)*cj5*r20*x5893))+(((-1.0)*(r22*r22)))+(((-1.0)*x5890*(r20*r20))))),-1);
if(!x5895.valid){
continue;
}
CheckValue<IkReal> x5896 = IKatan2WithCheck(IkReal((((r22*x5891))+((r22*x5892)))),IkReal(((((-1.0)*x5892*x5894))+(((-1.0)*x5891*x5894))+((x5891*x5893))+((x5892*x5893)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5895.value)))+(x5896.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x5897=IKsin(j4);
IkReal x5898=IKcos(j4);
IkReal x5899=(r21*sj5);
IkReal x5900=(cj5*r20);
IkReal x5901=((1.0)*x5898);
evalcond[0]=(((x5897*x5899))+(((-1.0)*r22*x5901))+(((-1.0)*x5897*x5900)));
evalcond[1]=(((r22*x5897))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5900*x5901))+((x5898*x5899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5902=(cj5*sj4);
IkReal x5903=(sj4*sj5);
if( IKabs((((r00*x5902))+(((-1.0)*r01*x5903))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x5902))+((r11*x5903))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x5902))+(((-1.0)*r01*x5903))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x5902))+((r11*x5903))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x5902))+(((-1.0)*r01*x5903))+((cj4*r02))), ((((-1.0)*r10*x5902))+((r11*x5903))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5904=IKcos(j0);
IkReal x5905=IKsin(j0);
IkReal x5906=((0.1)*sj5);
IkReal x5907=(cj5*r11);
IkReal x5908=(cj5*r01);
IkReal x5909=(r11*sj5);
IkReal x5910=(cj1*cj2);
IkReal x5911=((1.0)*cj4);
IkReal x5912=(r01*sj5);
IkReal x5913=(cj1*x5905);
IkReal x5914=(cj5*x5911);
IkReal x5915=(cj1*x5904);
IkReal x5916=(sj1*x5904);
IkReal x5917=((1.0)*cj5*sj4);
IkReal x5918=(sj1*sj2*x5905);
evalcond[0]=((((-1.0)*r00*x5917))+((sj4*x5912))+(((-1.0)*r02*x5911))+x5905);
evalcond[1]=((((-1.0)*r12*x5911))+((sj4*x5909))+(((-1.0)*r10*x5917))+(((-1.0)*x5904)));
evalcond[2]=(((r00*sj5))+((cj2*x5916))+((sj2*x5915))+x5908);
evalcond[3]=(((r10*sj5))+((cj2*sj1*x5905))+((sj2*x5913))+x5907);
evalcond[4]=((((-1.0)*sj2*x5916))+(((-1.0)*r00*x5914))+((r02*sj4))+((cj4*x5912))+((x5904*x5910)));
evalcond[5]=(((x5905*x5910))+((r12*sj4))+((cj4*x5909))+(((-1.0)*r10*x5914))+(((-1.0)*x5918)));
evalcond[6]=((((-1.0)*r00*x5906))+(((0.134)*x5905))+(((-0.392)*x5904*x5910))+(((-0.425)*x5915))+(((-0.1)*x5908))+(((-1.0)*px))+(((0.392)*sj2*x5916)));
evalcond[7]=((((0.392)*x5918))+(((-0.425)*x5913))+(((-0.1)*x5907))+(((-1.0)*py))+(((-0.392)*x5905*x5910))+(((-0.134)*x5904))+(((-1.0)*r10*x5906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5919=((1.0)*cj5);
IkReal x5920=((1.0)*sj5);
CheckValue<IkReal> x5921=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x5921.valid){
continue;
}
CheckValue<IkReal> x5922 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x5919))+(((-1.0)*r10*x5920)))),IkReal(((((-1.0)*r00*x5920))+(((-1.0)*r01*x5919)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5922.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5921.value)))+(x5922.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5923=IKcos(j0);
IkReal x5924=IKsin(j0);
IkReal x5925=((0.1)*sj5);
IkReal x5926=(sj1*sj2);
IkReal x5927=(cj5*r11);
IkReal x5928=(cj5*r01);
IkReal x5929=(cj2*sj1);
IkReal x5930=((0.392)*x5924);
IkReal x5931=(cj1*x5923);
IkReal x5932=(cj1*x5924);
evalcond[0]=(((r00*sj5))+((sj2*x5931))+((x5923*x5929))+x5928);
evalcond[1]=(((x5924*x5929))+((r10*sj5))+((sj2*x5932))+x5927);
evalcond[2]=((((0.392)*x5923*x5926))+(((-1.0)*r00*x5925))+(((-1.0)*px))+(((-0.392)*cj2*x5931))+(((-0.425)*x5931))+(((-0.1)*x5928))+(((0.134)*x5924)));
evalcond[3]=((((-1.0)*cj1*cj2*x5930))+(((-0.134)*x5923))+((x5926*x5930))+(((-1.0)*py))+(((-1.0)*r10*x5925))+(((-0.425)*x5932))+(((-0.1)*x5927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5933=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5933;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5933);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5934=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5934;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5934);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5935=((1.0)*cj5);
IkReal x5936=((((-1.0)*r21*x5935))+(((-1.0)*r20*sj5)));
j4eval[0]=x5936;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x5935))+(((-1.0)*r10*sj0*x5935))+((cj0*r01*sj5)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x5936);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5937=((-1.0)*r20);
IkReal x5939 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5939)==0){
continue;
}
IkReal x5938=pow(x5939,-0.5);
CheckValue<IkReal> x5940 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5937),IKFAST_ATAN2_MAGTHRESH);
if(!x5940.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5940.value));
IkReal gconst115=(r21*x5938);
IkReal gconst116=(x5937*x5938);
CheckValue<IkReal> x5941 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5941.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5941.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5942=((-1.0)*r20);
IkReal x5943=x5938;
CheckValue<IkReal> x5945 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5942),IKFAST_ATAN2_MAGTHRESH);
if(!x5945.valid){
continue;
}
IkReal x5944=((-1.0)*(x5945.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5944;
IkReal gconst114=x5944;
IkReal gconst115=(r21*x5943);
IkReal gconst116=(x5942*x5943);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5946=((-1.0)*r20);
IkReal x5947=x5938;
CheckValue<IkReal> x5949 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5946),IKFAST_ATAN2_MAGTHRESH);
if(!x5949.valid){
continue;
}
IkReal x5948=((-1.0)*(x5949.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5948;
IkReal gconst114=x5948;
IkReal gconst115=(r21*x5947);
IkReal gconst116=(x5946*x5947);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5950=((-1.0)*r20);
IkReal x5951=x5938;
CheckValue<IkReal> x5953 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5950),IKFAST_ATAN2_MAGTHRESH);
if(!x5953.valid){
continue;
}
IkReal x5952=((-1.0)*(x5953.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5952;
IkReal gconst114=x5952;
IkReal gconst115=(r21*x5951);
IkReal gconst116=(x5950*x5951);
IkReal x5954=((1.0)*(r22*r22));
CheckValue<IkReal> x5958=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5954))),-1);
if(!x5958.valid){
continue;
}
IkReal x5955=x5958.value;
IkReal x5956=((1.0)*x5955);
IkReal x5957=((((-2.0)*x5955*(r20*r20)*(r21*r21)))+(((-1.0)*x5956*(r21*r21*r21*r21)))+(((-1.0)*x5956*(r20*r20*r20*r20)))+(((-1.0)*x5954)));
j4eval[0]=x5957;
j4eval[1]=IKsign(x5957);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5959=(cj2*sj1);
IkReal x5960=(gconst115*r21);
IkReal x5961=(cj1*sj2);
IkReal x5962=((1.0)*gconst116*r20);
CheckValue<IkReal> x5963=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5960*x5960)))+(((-1.0)*(r22*r22)))+(((2.0)*gconst116*r20*x5960))+(((-1.0)*gconst116*r20*x5962)))),-1);
if(!x5963.valid){
continue;
}
CheckValue<IkReal> x5964 = IKatan2WithCheck(IkReal((((r22*x5961))+((r22*x5959)))),IkReal((((x5960*x5961))+((x5959*x5960))+(((-1.0)*x5961*x5962))+(((-1.0)*x5959*x5962)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5963.value)))+(x5964.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5965=IKsin(j4);
IkReal x5966=IKcos(j4);
IkReal x5967=(cj1*cj2);
IkReal x5968=((1.0)*x5966);
IkReal x5969=(gconst115*x5965);
IkReal x5970=(gconst115*x5966);
IkReal x5971=((1.0)*sj1*sj2);
IkReal x5972=((1.0)*gconst116*x5965);
evalcond[0]=((((-1.0)*r22*x5968))+((r21*x5969))+(((-1.0)*r20*x5972)));
evalcond[1]=(sj0+((r01*x5969))+(((-1.0)*r00*x5972))+(((-1.0)*r02*x5968)));
evalcond[2]=((((-1.0)*r12*x5968))+(((-1.0)*r10*x5972))+((r11*x5969))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5965))+((r21*x5970))+(((-1.0)*gconst116*r20*x5968)));
evalcond[4]=(((r02*x5965))+((cj0*x5967))+(((-1.0)*gconst116*r00*x5968))+((r01*x5970))+(((-1.0)*cj0*x5971)));
evalcond[5]=((((-1.0)*gconst116*r10*x5968))+(((-1.0)*sj0*x5971))+((r11*x5970))+((r12*x5965))+((sj0*x5967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5973 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*gconst116*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5973.valid){
continue;
}
CheckValue<IkReal> x5974=IKPowWithIntegerCheck(IKsign((((gconst115*r00))+((gconst116*r01)))),-1);
if(!x5974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5973.value)+(((1.5707963267949)*(x5974.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5975=IKsin(j4);
IkReal x5976=IKcos(j4);
IkReal x5977=(cj1*cj2);
IkReal x5978=((1.0)*x5976);
IkReal x5979=(gconst115*x5975);
IkReal x5980=(gconst115*x5976);
IkReal x5981=((1.0)*sj1*sj2);
IkReal x5982=((1.0)*gconst116*x5975);
evalcond[0]=((((-1.0)*r22*x5978))+((r21*x5979))+(((-1.0)*r20*x5982)));
evalcond[1]=((((-1.0)*r02*x5978))+sj0+((r01*x5979))+(((-1.0)*r00*x5982)));
evalcond[2]=((((-1.0)*r10*x5982))+(((-1.0)*r12*x5978))+((r11*x5979))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x5978))+((r21*x5980))+((cj1*sj2))+((r22*x5975)));
evalcond[4]=(((cj0*x5977))+(((-1.0)*gconst116*r00*x5978))+(((-1.0)*cj0*x5981))+((r02*x5975))+((r01*x5980)));
evalcond[5]=((((-1.0)*gconst116*r10*x5978))+((r11*x5980))+(((-1.0)*sj0*x5981))+((r12*x5975))+((sj0*x5977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5983=IKPowWithIntegerCheck(IKsign((((gconst115*r10))+((gconst116*r11)))),-1);
if(!x5983.valid){
continue;
}
CheckValue<IkReal> x5984 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*gconst116*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5983.value)))+(x5984.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5985=IKsin(j4);
IkReal x5986=IKcos(j4);
IkReal x5987=(cj1*cj2);
IkReal x5988=((1.0)*x5986);
IkReal x5989=(gconst115*x5985);
IkReal x5990=(gconst115*x5986);
IkReal x5991=((1.0)*sj1*sj2);
IkReal x5992=((1.0)*gconst116*x5985);
evalcond[0]=((((-1.0)*r20*x5992))+((r21*x5989))+(((-1.0)*r22*x5988)));
evalcond[1]=(sj0+(((-1.0)*r02*x5988))+(((-1.0)*r00*x5992))+((r01*x5989)));
evalcond[2]=((((-1.0)*r12*x5988))+((r11*x5989))+(((-1.0)*r10*x5992))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x5990))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5988))+((r22*x5985)));
evalcond[4]=((((-1.0)*gconst116*r00*x5988))+((r02*x5985))+(((-1.0)*cj0*x5991))+((cj0*x5987))+((r01*x5990)));
evalcond[5]=(((r12*x5985))+((r11*x5990))+((sj0*x5987))+(((-1.0)*sj0*x5991))+(((-1.0)*gconst116*r10*x5988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5993=((-1.0)*r21);
IkReal x5995 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5995)==0){
continue;
}
IkReal x5994=pow(x5995,-0.5);
CheckValue<IkReal> x5996 = IKatan2WithCheck(IkReal(x5993),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5996.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5996.value))));
IkReal gconst118=(x5993*x5994);
IkReal gconst119=((1.0)*r20*x5994);
CheckValue<IkReal> x5997 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5997.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5997.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5998=((-1.0)*r21);
CheckValue<IkReal> x6001 = IKatan2WithCheck(IkReal(x5998),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6001.valid){
continue;
}
IkReal x5999=((1.0)*(x6001.value));
IkReal x6000=x5994;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5999)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5999)));
IkReal gconst118=(x5998*x6000);
IkReal gconst119=((1.0)*r20*x6000);
IkReal x6002=r22*r22;
IkReal x6003=((1.0)*x6002);
CheckValue<IkReal> x6007=IKPowWithIntegerCheck(((-1.0)+x6002),-1);
if(!x6007.valid){
continue;
}
IkReal x6004=x6007.value;
if((((1.0)+(((-1.0)*x6003)))) < -0.00001)
continue;
IkReal x6005=IKsqrt(((1.0)+(((-1.0)*x6003))));
IkReal x6006=(sj0*x6004*x6005);
j4eval[0]=((IKabs((x6006+(((-1.0)*x6003*x6006)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6008=((-1.0)*r21);
CheckValue<IkReal> x6011 = IKatan2WithCheck(IkReal(x6008),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6011.valid){
continue;
}
IkReal x6009=((1.0)*(x6011.value));
IkReal x6010=x5994;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6009)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6009)));
IkReal gconst118=(x6008*x6010);
IkReal gconst119=((1.0)*r20*x6010);
IkReal x6012=r22*r22;
IkReal x6013=((1.0)*x6012);
CheckValue<IkReal> x6017=IKPowWithIntegerCheck(((-1.0)+x6012),-1);
if(!x6017.valid){
continue;
}
IkReal x6014=x6017.value;
if((((1.0)+(((-1.0)*x6013)))) < -0.00001)
continue;
IkReal x6015=IKsqrt(((1.0)+(((-1.0)*x6013))));
IkReal x6016=(cj0*x6014*x6015);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x6016+(((-1.0)*x6013*x6016))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6018=((-1.0)*r21);
CheckValue<IkReal> x6021 = IKatan2WithCheck(IkReal(x6018),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6021.valid){
continue;
}
IkReal x6019=((1.0)*(x6021.value));
IkReal x6020=x5994;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6019)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6019)));
IkReal gconst118=(x6018*x6020);
IkReal gconst119=((1.0)*r20*x6020);
IkReal x6022=r22*r22;
IkReal x6023=(cj0*r02);
IkReal x6024=(r12*sj0);
CheckValue<IkReal> x6028=IKPowWithIntegerCheck(((-1.0)+x6022),-1);
if(!x6028.valid){
continue;
}
IkReal x6025=x6028.value;
if((((1.0)+(((-1.0)*x6022)))) < -0.00001)
continue;
IkReal x6026=IKsqrt(((1.0)+(((-1.0)*x6022))));
IkReal x6027=((1.0)*r22*x6025*x6026);
j4eval[0]=0;
j4eval[1]=((IKabs((x6023+x6024)))+(IKabs(((((-1.0)*x6023*x6027))+(((-1.0)*x6024*x6027))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6029=((1.0)*gconst119);
CheckValue<IkReal> x6030=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r20))+(((-1.0)*r21*x6029)))),-1);
if(!x6030.valid){
continue;
}
CheckValue<IkReal> x6031 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst118*r11*sj0))+(((-1.0)*r10*sj0*x6029))+(((-1.0)*cj0*r00*x6029))+((cj0*gconst118*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6030.value)))+(x6031.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6032=IKsin(j4);
IkReal x6033=IKcos(j4);
IkReal x6034=(cj1*cj2);
IkReal x6035=(gconst118*r01);
IkReal x6036=(gconst119*r20);
IkReal x6037=(gconst119*r10);
IkReal x6038=(gconst119*r00);
IkReal x6039=(gconst118*r21);
IkReal x6040=(gconst118*r11);
IkReal x6041=((1.0)*cj0);
IkReal x6042=(sj1*sj2);
IkReal x6043=((1.0)*x6033);
IkReal x6044=((1.0)*x6032);
evalcond[0]=((((-1.0)*r22*x6043))+(((-1.0)*x6036*x6044))+((x6032*x6039)));
evalcond[1]=(sj0+(((-1.0)*r02*x6043))+((x6032*x6035))+(((-1.0)*x6038*x6044)));
evalcond[2]=((((-1.0)*x6041))+((x6032*x6040))+(((-1.0)*x6037*x6044))+(((-1.0)*r12*x6043)));
evalcond[3]=(((r22*x6032))+((cj2*sj1))+((cj1*sj2))+((x6033*x6039))+(((-1.0)*x6036*x6043)));
evalcond[4]=(((cj0*x6034))+((x6033*x6035))+((r02*x6032))+(((-1.0)*x6038*x6043))+(((-1.0)*x6041*x6042)));
evalcond[5]=(((r12*x6032))+((x6033*x6040))+((sj0*x6034))+(((-1.0)*x6037*x6043))+(((-1.0)*sj0*x6042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6045=IKPowWithIntegerCheck(IKsign((((gconst118*r00))+((gconst119*r01)))),-1);
if(!x6045.valid){
continue;
}
CheckValue<IkReal> x6046 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*gconst119*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6045.value)))+(x6046.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6047=IKsin(j4);
IkReal x6048=IKcos(j4);
IkReal x6049=(cj1*cj2);
IkReal x6050=(gconst118*r01);
IkReal x6051=(gconst119*r20);
IkReal x6052=(gconst119*r10);
IkReal x6053=(gconst119*r00);
IkReal x6054=(gconst118*r21);
IkReal x6055=(gconst118*r11);
IkReal x6056=((1.0)*cj0);
IkReal x6057=(sj1*sj2);
IkReal x6058=((1.0)*x6048);
IkReal x6059=((1.0)*x6047);
evalcond[0]=((((-1.0)*x6051*x6059))+((x6047*x6054))+(((-1.0)*r22*x6058)));
evalcond[1]=((((-1.0)*x6053*x6059))+sj0+((x6047*x6050))+(((-1.0)*r02*x6058)));
evalcond[2]=((((-1.0)*x6052*x6059))+(((-1.0)*x6056))+((x6047*x6055))+(((-1.0)*r12*x6058)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6051*x6058))+((cj1*sj2))+((r22*x6047))+((x6048*x6054)));
evalcond[4]=((((-1.0)*x6053*x6058))+((cj0*x6049))+((x6048*x6050))+(((-1.0)*x6056*x6057))+((r02*x6047)));
evalcond[5]=((((-1.0)*x6052*x6058))+((sj0*x6049))+((x6048*x6055))+(((-1.0)*sj0*x6057))+((r12*x6047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6060=IKPowWithIntegerCheck(IKsign((((gconst118*r10))+((gconst119*r11)))),-1);
if(!x6060.valid){
continue;
}
CheckValue<IkReal> x6061 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst119*r20*sj0))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6060.value)))+(x6061.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6062=IKsin(j4);
IkReal x6063=IKcos(j4);
IkReal x6064=(cj1*cj2);
IkReal x6065=(gconst118*r01);
IkReal x6066=(gconst119*r20);
IkReal x6067=(gconst119*r10);
IkReal x6068=(gconst119*r00);
IkReal x6069=(gconst118*r21);
IkReal x6070=(gconst118*r11);
IkReal x6071=((1.0)*cj0);
IkReal x6072=(sj1*sj2);
IkReal x6073=((1.0)*x6063);
IkReal x6074=((1.0)*x6062);
evalcond[0]=((((-1.0)*x6066*x6074))+((x6062*x6069))+(((-1.0)*r22*x6073)));
evalcond[1]=(sj0+(((-1.0)*r02*x6073))+((x6062*x6065))+(((-1.0)*x6068*x6074)));
evalcond[2]=((((-1.0)*x6067*x6074))+(((-1.0)*x6071))+((x6062*x6070))+(((-1.0)*r12*x6073)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6066*x6073))+((cj1*sj2))+((x6063*x6069))+((r22*x6062)));
evalcond[4]=(((x6063*x6065))+((cj0*x6064))+(((-1.0)*x6068*x6073))+(((-1.0)*x6071*x6072))+((r02*x6062)));
evalcond[5]=((((-1.0)*x6067*x6073))+((sj0*x6064))+((x6063*x6070))+(((-1.0)*sj0*x6072))+((r12*x6062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6076 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6076)==0){
continue;
}
IkReal x6075=pow(x6076,-0.5);
CheckValue<IkReal> x6077 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6077.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6077.value));
IkReal gconst121=((-1.0)*r01*x6075);
IkReal gconst122=(r00*x6075);
CheckValue<IkReal> x6078 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6078.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6078.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6081 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6081.valid){
continue;
}
IkReal x6079=((-1.0)*(x6081.value));
IkReal x6080=x6075;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6079;
IkReal gconst120=x6079;
IkReal gconst121=((-1.0)*r01*x6080);
IkReal gconst122=(r00*x6080);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6082=((1.0)*gconst122);
CheckValue<IkReal> x6083=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r20))+(((-1.0)*r21*x6082)))),-1);
if(!x6083.valid){
continue;
}
CheckValue<IkReal> x6084 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x6082))+((cj0*gconst121*r01))+((gconst121*r11*sj0))+(((-1.0)*cj0*r00*x6082)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6083.value)))+(x6084.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6085=IKsin(j4);
IkReal x6086=IKcos(j4);
IkReal x6087=(cj1*cj2);
IkReal x6088=(gconst121*r11);
IkReal x6089=(gconst122*r00);
IkReal x6090=(gconst122*r10);
IkReal x6091=(gconst122*r20);
IkReal x6092=((1.0)*cj0);
IkReal x6093=(sj1*sj2);
IkReal x6094=((1.0)*x6086);
IkReal x6095=((1.0)*x6085);
IkReal x6096=(gconst121*x6085);
IkReal x6097=(gconst121*x6086);
evalcond[0]=((((-1.0)*r22*x6094))+(((-1.0)*x6091*x6095))+((r21*x6096)));
evalcond[1]=((((-1.0)*x6089*x6095))+sj0+((r01*x6096))+(((-1.0)*r02*x6094)));
evalcond[2]=((((-1.0)*x6092))+(((-1.0)*x6090*x6095))+((x6085*x6088))+(((-1.0)*r12*x6094)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6091*x6094))+((cj1*sj2))+((r21*x6097))+((r22*x6085)));
evalcond[4]=((((-1.0)*x6089*x6094))+((r01*x6097))+(((-1.0)*x6092*x6093))+((cj0*x6087))+((r02*x6085)));
evalcond[5]=(((sj0*x6087))+((x6086*x6088))+(((-1.0)*x6090*x6094))+(((-1.0)*sj0*x6093))+((r12*x6085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6098 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst122*r20*sj0))+((gconst121*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6098.valid){
continue;
}
CheckValue<IkReal> x6099=IKPowWithIntegerCheck(IKsign((((gconst121*r10))+((gconst122*r11)))),-1);
if(!x6099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6098.value)+(((1.5707963267949)*(x6099.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6100=IKsin(j4);
IkReal x6101=IKcos(j4);
IkReal x6102=(cj1*cj2);
IkReal x6103=(gconst121*r11);
IkReal x6104=(gconst122*r00);
IkReal x6105=(gconst122*r10);
IkReal x6106=(gconst122*r20);
IkReal x6107=((1.0)*cj0);
IkReal x6108=(sj1*sj2);
IkReal x6109=((1.0)*x6101);
IkReal x6110=((1.0)*x6100);
IkReal x6111=(gconst121*x6100);
IkReal x6112=(gconst121*x6101);
evalcond[0]=((((-1.0)*x6106*x6110))+(((-1.0)*r22*x6109))+((r21*x6111)));
evalcond[1]=((((-1.0)*r02*x6109))+sj0+(((-1.0)*x6104*x6110))+((r01*x6111)));
evalcond[2]=((((-1.0)*x6105*x6110))+((x6100*x6103))+(((-1.0)*r12*x6109))+(((-1.0)*x6107)));
evalcond[3]=(((cj2*sj1))+((r22*x6100))+((cj1*sj2))+(((-1.0)*x6106*x6109))+((r21*x6112)));
evalcond[4]=(((cj0*x6102))+(((-1.0)*x6104*x6109))+((r01*x6112))+(((-1.0)*x6107*x6108))+((r02*x6100)));
evalcond[5]=((((-1.0)*x6105*x6109))+((sj0*x6102))+((x6101*x6103))+(((-1.0)*sj0*x6108))+((r12*x6100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6114 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6114)==0){
continue;
}
IkReal x6113=pow(x6114,-0.5);
CheckValue<IkReal> x6115 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6115.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6115.value))));
IkReal gconst124=((1.0)*r01*x6113);
IkReal gconst125=((-1.0)*r00*x6113);
CheckValue<IkReal> x6116 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6116.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6116.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6119 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6119.valid){
continue;
}
IkReal x6117=((1.0)*(x6119.value));
IkReal x6118=x6113;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6117)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6117)));
IkReal gconst124=((1.0)*r01*x6118);
IkReal gconst125=((-1.0)*r00*x6118);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x6122 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6122.valid){
continue;
}
IkReal x6120=((1.0)*(x6122.value));
IkReal x6121=x6113;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6120)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6120)));
IkReal gconst124=((1.0)*r01*x6121);
IkReal gconst125=((-1.0)*r00*x6121);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6125 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6125.valid){
continue;
}
IkReal x6123=((1.0)*(x6125.value));
IkReal x6124=x6113;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6123)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6123)));
IkReal gconst124=((1.0)*r01*x6124);
IkReal gconst125=((-1.0)*r00*x6124);
IkReal x6126=r02*r02;
IkReal x6127=(r12*sj0);
IkReal x6128=x6113;
IkReal x6129=(cj0*x6128);
j4eval[0]=((IKabs((x6127+((cj0*r02)))))+(IKabs((((x6126*x6129))+((r02*x6127*x6128))+(((-1.0)*x6129))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6130=((1.0)*gconst125);
CheckValue<IkReal> x6131 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x6130))+((cj0*gconst124*r01))+(((-1.0)*cj0*r00*x6130))+((gconst124*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6131.valid){
continue;
}
CheckValue<IkReal> x6132=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*r21*x6130)))),-1);
if(!x6132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6131.value)+(((1.5707963267949)*(x6132.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6133=IKsin(j4);
IkReal x6134=IKcos(j4);
IkReal x6135=(cj1*cj2);
IkReal x6136=(gconst125*r20);
IkReal x6137=(gconst124*r01);
IkReal x6138=(gconst125*r00);
IkReal x6139=(gconst125*r10);
IkReal x6140=((1.0)*cj0);
IkReal x6141=(sj1*sj2);
IkReal x6142=((1.0)*x6134);
IkReal x6143=((1.0)*x6133);
IkReal x6144=(gconst124*x6133);
IkReal x6145=(gconst124*x6134);
evalcond[0]=((((-1.0)*x6136*x6143))+((r21*x6144))+(((-1.0)*r22*x6142)));
evalcond[1]=(sj0+(((-1.0)*x6138*x6143))+(((-1.0)*r02*x6142))+((x6133*x6137)));
evalcond[2]=((((-1.0)*x6139*x6143))+(((-1.0)*x6140))+((r11*x6144))+(((-1.0)*r12*x6142)));
evalcond[3]=(((cj2*sj1))+((r22*x6133))+((cj1*sj2))+(((-1.0)*x6136*x6142))+((r21*x6145)));
evalcond[4]=(((cj0*x6135))+(((-1.0)*x6138*x6142))+((x6134*x6137))+((r02*x6133))+(((-1.0)*x6140*x6141)));
evalcond[5]=((((-1.0)*x6139*x6142))+((r11*x6145))+((r12*x6133))+(((-1.0)*sj0*x6141))+((sj0*x6135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6146=IKPowWithIntegerCheck(IKsign((((gconst124*r00))+((gconst125*r01)))),-1);
if(!x6146.valid){
continue;
}
CheckValue<IkReal> x6147 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst125*r20))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6146.value)))+(x6147.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6148=IKsin(j4);
IkReal x6149=IKcos(j4);
IkReal x6150=(cj1*cj2);
IkReal x6151=(gconst125*r20);
IkReal x6152=(gconst124*r01);
IkReal x6153=(gconst125*r00);
IkReal x6154=(gconst125*r10);
IkReal x6155=((1.0)*cj0);
IkReal x6156=(sj1*sj2);
IkReal x6157=((1.0)*x6149);
IkReal x6158=((1.0)*x6148);
IkReal x6159=(gconst124*x6148);
IkReal x6160=(gconst124*x6149);
evalcond[0]=(((r21*x6159))+(((-1.0)*x6151*x6158))+(((-1.0)*r22*x6157)));
evalcond[1]=((((-1.0)*r02*x6157))+sj0+((x6148*x6152))+(((-1.0)*x6153*x6158)));
evalcond[2]=((((-1.0)*x6155))+(((-1.0)*r12*x6157))+(((-1.0)*x6154*x6158))+((r11*x6159)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6151*x6157))+((cj1*sj2))+((r21*x6160))+((r22*x6148)));
evalcond[4]=(((x6149*x6152))+((cj0*x6150))+(((-1.0)*x6155*x6156))+(((-1.0)*x6153*x6157))+((r02*x6148)));
evalcond[5]=(((sj0*x6150))+((r11*x6160))+(((-1.0)*sj0*x6156))+(((-1.0)*x6154*x6157))+((r12*x6148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6161 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst124*r21*sj0))+(((-1.0)*gconst125*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6161.valid){
continue;
}
CheckValue<IkReal> x6162=IKPowWithIntegerCheck(IKsign((((gconst125*r11))+((gconst124*r10)))),-1);
if(!x6162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6161.value)+(((1.5707963267949)*(x6162.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6163=IKsin(j4);
IkReal x6164=IKcos(j4);
IkReal x6165=(cj1*cj2);
IkReal x6166=(gconst125*r20);
IkReal x6167=(gconst124*r01);
IkReal x6168=(gconst125*r00);
IkReal x6169=(gconst125*r10);
IkReal x6170=((1.0)*cj0);
IkReal x6171=(sj1*sj2);
IkReal x6172=((1.0)*x6164);
IkReal x6173=((1.0)*x6163);
IkReal x6174=(gconst124*x6163);
IkReal x6175=(gconst124*x6164);
evalcond[0]=((((-1.0)*x6166*x6173))+((r21*x6174))+(((-1.0)*r22*x6172)));
evalcond[1]=((((-1.0)*x6168*x6173))+sj0+((x6163*x6167))+(((-1.0)*r02*x6172)));
evalcond[2]=(((r11*x6174))+(((-1.0)*r12*x6172))+(((-1.0)*x6170))+(((-1.0)*x6169*x6173)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6166*x6172))+((cj1*sj2))+((r21*x6175))+((r22*x6163)));
evalcond[4]=((((-1.0)*x6168*x6172))+((r02*x6163))+(((-1.0)*x6170*x6171))+((x6164*x6167))+((cj0*x6165)));
evalcond[5]=(((sj0*x6165))+((r12*x6163))+((r11*x6175))+(((-1.0)*sj0*x6171))+(((-1.0)*x6169*x6172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6176=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6176;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6176);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6177=((1.0)*cj5);
IkReal x6178=((((-1.0)*r21*x6177))+(((-1.0)*r20*sj5)));
j4eval[0]=x6178;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6177))))));
j4eval[2]=IKsign(x6178);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6179=(r01*sj5);
IkReal x6180=(cj1*sj2);
IkReal x6181=(cj2*sj1);
IkReal x6182=((1.0)*r02);
IkReal x6183=((1.0)*cj5*r00);
IkReal x6184=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6184;
j4eval[1]=((IKabs((((x6179*x6180))+((x6179*x6181))+(((-1.0)*x6181*x6183))+(((-1.0)*x6180*x6183)))))+(IKabs(((((-1.0)*x6181*x6182))+(((-1.0)*x6180*x6182))))));
j4eval[2]=IKsign(x6184);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6185=(r01*sj5);
IkReal x6186=(cj1*sj2);
IkReal x6187=(cj2*sj1);
IkReal x6188=((1.0)*r02);
IkReal x6189=((1.0)*cj5*r00);
CheckValue<IkReal> x6190 = IKatan2WithCheck(IkReal((((x6185*x6186))+((x6185*x6187))+(((-1.0)*x6187*x6189))+(((-1.0)*x6186*x6189)))),IkReal(((((-1.0)*x6187*x6188))+(((-1.0)*x6186*x6188)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6190.valid){
continue;
}
CheckValue<IkReal> x6191=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6190.value)+(((1.5707963267949)*(x6191.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6192=IKcos(j4);
IkReal x6193=IKsin(j4);
IkReal x6194=(cj5*r00);
IkReal x6195=(cj5*r10);
IkReal x6196=(r21*sj5);
IkReal x6197=(cj5*r20);
IkReal x6198=((1.0)*x6192);
IkReal x6199=((1.0)*x6193);
IkReal x6200=(sj5*x6193);
IkReal x6201=(sj5*x6192);
evalcond[0]=(((r01*x6201))+((r02*x6193))+(((-1.0)*x6194*x6198)));
evalcond[1]=((((-1.0)*x6197*x6199))+(((-1.0)*r22*x6198))+((x6193*x6196)));
evalcond[2]=((((-1.0)*r12*x6198))+(((-1.0)*x6195*x6199))+((r11*x6200)));
evalcond[3]=((1.0)+((r01*x6200))+(((-1.0)*x6194*x6199))+(((-1.0)*r02*x6198)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6197*x6198))+((r22*x6193))+((x6192*x6196)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x6193))+(((-1.0)*x6195*x6198))+((cj1*cj2))+((r11*x6201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6202=((1.0)*cj5);
CheckValue<IkReal> x6203=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6202))+(((-1.0)*r20*sj5)))),-1);
if(!x6203.valid){
continue;
}
CheckValue<IkReal> x6204 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6202)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6203.value)))+(x6204.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6205=IKcos(j4);
IkReal x6206=IKsin(j4);
IkReal x6207=(cj5*r00);
IkReal x6208=(cj5*r10);
IkReal x6209=(r21*sj5);
IkReal x6210=(cj5*r20);
IkReal x6211=((1.0)*x6205);
IkReal x6212=((1.0)*x6206);
IkReal x6213=(sj5*x6206);
IkReal x6214=(sj5*x6205);
evalcond[0]=(((r02*x6206))+((r01*x6214))+(((-1.0)*x6207*x6211)));
evalcond[1]=((((-1.0)*x6210*x6212))+((x6206*x6209))+(((-1.0)*r22*x6211)));
evalcond[2]=(((r11*x6213))+(((-1.0)*r12*x6211))+(((-1.0)*x6208*x6212)));
evalcond[3]=((1.0)+((r01*x6213))+(((-1.0)*x6207*x6212))+(((-1.0)*r02*x6211)));
evalcond[4]=(((cj2*sj1))+((r22*x6206))+(((-1.0)*x6210*x6211))+((cj1*sj2))+((x6205*x6209)));
evalcond[5]=(((r11*x6214))+(((-1.0)*sj1*sj2))+(((-1.0)*x6208*x6211))+((cj1*cj2))+((r12*x6206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6215 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6215.valid){
continue;
}
CheckValue<IkReal> x6216=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6215.value)+(((1.5707963267949)*(x6216.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6217=IKcos(j4);
IkReal x6218=IKsin(j4);
IkReal x6219=(cj5*r00);
IkReal x6220=(cj5*r10);
IkReal x6221=(r21*sj5);
IkReal x6222=(cj5*r20);
IkReal x6223=((1.0)*x6217);
IkReal x6224=((1.0)*x6218);
IkReal x6225=(sj5*x6218);
IkReal x6226=(sj5*x6217);
evalcond[0]=(((r02*x6218))+((r01*x6226))+(((-1.0)*x6219*x6223)));
evalcond[1]=((((-1.0)*x6222*x6224))+(((-1.0)*r22*x6223))+((x6218*x6221)));
evalcond[2]=(((r11*x6225))+(((-1.0)*r12*x6223))+(((-1.0)*x6220*x6224)));
evalcond[3]=((1.0)+((r01*x6225))+(((-1.0)*x6219*x6224))+(((-1.0)*r02*x6223)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6222*x6223))+((cj1*sj2))+((x6217*x6221))+((r22*x6218)));
evalcond[5]=(((r12*x6218))+((r11*x6226))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x6220*x6223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6227=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6227;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6227);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6228=((1.0)*cj5);
IkReal x6229=((((-1.0)*r11*x6228))+(((-1.0)*r10*sj5)));
j4eval[0]=x6229;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6228)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6229);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6230=cj5*cj5;
IkReal x6231=r01*r01;
IkReal x6232=(cj5*r00);
IkReal x6233=(r01*sj5);
IkReal x6234=(x6231+((x6230*(r00*r00)))+(((-2.0)*x6232*x6233))+(((-1.0)*x6230*x6231))+(r02*r02));
j4eval[0]=x6234;
j4eval[1]=IKsign(x6234);
j4eval[2]=((IKabs((x6233+(((-1.0)*x6232)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6235=cj5*cj5;
IkReal x6236=r01*r01;
IkReal x6237=(r01*sj5);
IkReal x6238=(cj5*r00);
CheckValue<IkReal> x6239=IKPowWithIntegerCheck(IKsign((x6236+(((-1.0)*x6235*x6236))+(((-2.0)*x6237*x6238))+(r02*r02)+((x6235*(r00*r00))))),-1);
if(!x6239.valid){
continue;
}
CheckValue<IkReal> x6240 = IKatan2WithCheck(IkReal((x6237+(((-1.0)*x6238)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6239.value)))+(x6240.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6241=IKcos(j4);
IkReal x6242=IKsin(j4);
IkReal x6243=(cj5*r00);
IkReal x6244=(cj5*r10);
IkReal x6245=(r21*sj5);
IkReal x6246=(cj5*r20);
IkReal x6247=((1.0)*x6241);
IkReal x6248=((1.0)*x6242);
IkReal x6249=(sj5*x6242);
IkReal x6250=(sj5*x6241);
evalcond[0]=(((r01*x6250))+((r02*x6242))+(((-1.0)*x6243*x6247)));
evalcond[1]=(((x6242*x6245))+(((-1.0)*r22*x6247))+(((-1.0)*x6246*x6248)));
evalcond[2]=(((r11*x6249))+(((-1.0)*r12*x6247))+(((-1.0)*x6244*x6248)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6247))+((r01*x6249))+(((-1.0)*x6243*x6248)));
evalcond[4]=(((cj2*sj1))+((x6241*x6245))+((cj1*sj2))+((r22*x6242))+(((-1.0)*x6246*x6247)));
evalcond[5]=(((r12*x6242))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6244*x6247))+((r11*x6250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6251=((1.0)*cj5);
CheckValue<IkReal> x6252 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6251)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6252.valid){
continue;
}
CheckValue<IkReal> x6253=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6251)))),-1);
if(!x6253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6252.value)+(((1.5707963267949)*(x6253.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6254=IKcos(j4);
IkReal x6255=IKsin(j4);
IkReal x6256=(cj5*r00);
IkReal x6257=(cj5*r10);
IkReal x6258=(r21*sj5);
IkReal x6259=(cj5*r20);
IkReal x6260=((1.0)*x6254);
IkReal x6261=((1.0)*x6255);
IkReal x6262=(sj5*x6255);
IkReal x6263=(sj5*x6254);
evalcond[0]=(((r01*x6263))+((r02*x6255))+(((-1.0)*x6256*x6260)));
evalcond[1]=((((-1.0)*x6259*x6261))+((x6255*x6258))+(((-1.0)*r22*x6260)));
evalcond[2]=((((-1.0)*x6257*x6261))+(((-1.0)*r12*x6260))+((r11*x6262)));
evalcond[3]=((-1.0)+((r01*x6262))+(((-1.0)*r02*x6260))+(((-1.0)*x6256*x6261)));
evalcond[4]=(((cj2*sj1))+((r22*x6255))+((x6254*x6258))+((cj1*sj2))+(((-1.0)*x6259*x6260)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6257*x6260))+((r12*x6255))+((r11*x6263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6264=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6264.valid){
continue;
}
CheckValue<IkReal> x6265 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6264.value)))+(x6265.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6266=IKcos(j4);
IkReal x6267=IKsin(j4);
IkReal x6268=(cj5*r00);
IkReal x6269=(cj5*r10);
IkReal x6270=(r21*sj5);
IkReal x6271=(cj5*r20);
IkReal x6272=((1.0)*x6266);
IkReal x6273=((1.0)*x6267);
IkReal x6274=(sj5*x6267);
IkReal x6275=(sj5*x6266);
evalcond[0]=(((r01*x6275))+((r02*x6267))+(((-1.0)*x6268*x6272)));
evalcond[1]=(((x6267*x6270))+(((-1.0)*x6271*x6273))+(((-1.0)*r22*x6272)));
evalcond[2]=((((-1.0)*x6269*x6273))+(((-1.0)*r12*x6272))+((r11*x6274)));
evalcond[3]=((-1.0)+((r01*x6274))+(((-1.0)*r02*x6272))+(((-1.0)*x6268*x6273)));
evalcond[4]=(((cj2*sj1))+((r22*x6267))+((cj1*sj2))+((x6266*x6270))+(((-1.0)*x6271*x6272)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6269*x6272))+((r12*x6267))+((r11*x6275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6277 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6277)==0){
continue;
}
IkReal x6276=pow(x6277,-0.5);
CheckValue<IkReal> x6278 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6278.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6278.value));
IkReal gconst127=((-1.0)*r11*x6276);
IkReal gconst128=(r10*x6276);
CheckValue<IkReal> x6279 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6279.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6279.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6282 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6282.valid){
continue;
}
IkReal x6280=((-1.0)*(x6282.value));
IkReal x6281=x6276;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6280;
IkReal gconst126=x6280;
IkReal gconst127=((-1.0)*r11*x6281);
IkReal gconst128=(r10*x6281);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6283=((1.0)*gconst128);
CheckValue<IkReal> x6284 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x6283))+((cj0*gconst127*r01))+((gconst127*r11*sj0))+(((-1.0)*cj0*r00*x6283)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6284.valid){
continue;
}
CheckValue<IkReal> x6285=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6283))+(((-1.0)*gconst127*r20)))),-1);
if(!x6285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6284.value)+(((1.5707963267949)*(x6285.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6286=IKsin(j4);
IkReal x6287=IKcos(j4);
IkReal x6288=(cj1*cj2);
IkReal x6289=(gconst127*r01);
IkReal x6290=(gconst128*r10);
IkReal x6291=(gconst128*r00);
IkReal x6292=(gconst128*r20);
IkReal x6293=((1.0)*cj0);
IkReal x6294=(sj1*sj2);
IkReal x6295=((1.0)*x6287);
IkReal x6296=((1.0)*x6286);
IkReal x6297=(gconst127*x6287);
IkReal x6298=(gconst127*x6286);
evalcond[0]=((((-1.0)*r22*x6295))+(((-1.0)*x6292*x6296))+((r21*x6298)));
evalcond[1]=(sj0+(((-1.0)*r02*x6295))+(((-1.0)*x6291*x6296))+((x6286*x6289)));
evalcond[2]=(((r11*x6298))+(((-1.0)*x6293))+(((-1.0)*r12*x6295))+(((-1.0)*x6290*x6296)));
evalcond[3]=(((cj2*sj1))+((r22*x6286))+((cj1*sj2))+(((-1.0)*x6292*x6295))+((r21*x6297)));
evalcond[4]=(((cj0*x6288))+(((-1.0)*x6293*x6294))+(((-1.0)*x6291*x6295))+((r02*x6286))+((x6287*x6289)));
evalcond[5]=(((r11*x6297))+(((-1.0)*sj0*x6294))+((r12*x6286))+((sj0*x6288))+(((-1.0)*x6290*x6295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6299 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst128*r20))+((cj0*gconst127*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6299.valid){
continue;
}
CheckValue<IkReal> x6300=IKPowWithIntegerCheck(IKsign((((gconst128*r01))+((gconst127*r00)))),-1);
if(!x6300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6299.value)+(((1.5707963267949)*(x6300.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6301=IKsin(j4);
IkReal x6302=IKcos(j4);
IkReal x6303=(cj1*cj2);
IkReal x6304=(gconst127*r01);
IkReal x6305=(gconst128*r10);
IkReal x6306=(gconst128*r00);
IkReal x6307=(gconst128*r20);
IkReal x6308=((1.0)*cj0);
IkReal x6309=(sj1*sj2);
IkReal x6310=((1.0)*x6302);
IkReal x6311=((1.0)*x6301);
IkReal x6312=(gconst127*x6302);
IkReal x6313=(gconst127*x6301);
evalcond[0]=((((-1.0)*r22*x6310))+((r21*x6313))+(((-1.0)*x6307*x6311)));
evalcond[1]=((((-1.0)*x6306*x6311))+sj0+(((-1.0)*r02*x6310))+((x6301*x6304)));
evalcond[2]=((((-1.0)*x6305*x6311))+(((-1.0)*r12*x6310))+(((-1.0)*x6308))+((r11*x6313)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6301))+((r21*x6312))+(((-1.0)*x6307*x6310)));
evalcond[4]=(((x6302*x6304))+(((-1.0)*x6306*x6310))+(((-1.0)*x6308*x6309))+((r02*x6301))+((cj0*x6303)));
evalcond[5]=((((-1.0)*x6305*x6310))+(((-1.0)*sj0*x6309))+((r11*x6312))+((r12*x6301))+((sj0*x6303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6315 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6315)==0){
continue;
}
IkReal x6314=pow(x6315,-0.5);
CheckValue<IkReal> x6316 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6316.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6316.value))));
IkReal gconst130=((1.0)*r11*x6314);
IkReal gconst131=((-1.0)*r10*x6314);
CheckValue<IkReal> x6317 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6317.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6317.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6320 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6320.valid){
continue;
}
IkReal x6318=((1.0)*(x6320.value));
IkReal x6319=x6314;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6318)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6318)));
IkReal gconst130=((1.0)*r11*x6319);
IkReal gconst131=((-1.0)*r10*x6319);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6323 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6323.valid){
continue;
}
IkReal x6321=((1.0)*(x6323.value));
IkReal x6322=x6314;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6321)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6321)));
IkReal gconst130=((1.0)*r11*x6322);
IkReal gconst131=((-1.0)*r10*x6322);
IkReal x6324=r12*r12;
IkReal x6325=(cj0*r02);
IkReal x6326=x6314;
IkReal x6327=(sj0*x6326);
j4eval[0]=((IKabs(((((-1.0)*x6327))+((x6324*x6327))+((r12*x6325*x6326)))))+(IKabs((x6325+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6330 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6330.valid){
continue;
}
IkReal x6328=((1.0)*(x6330.value));
IkReal x6329=x6314;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6328)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6328)));
IkReal gconst130=((1.0)*r11*x6329);
IkReal gconst131=((-1.0)*r10*x6329);
IkReal x6331=(cj1*sj2);
IkReal x6332=(cj2*sj1);
IkReal x6333=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x6339=IKPowWithIntegerCheck(x6333,-1);
if(!x6339.valid){
continue;
}
IkReal x6334=x6339.value;
IkReal x6335=((1.0)*x6334);
IkReal x6336=x6314;
IkReal x6337=(r12*r22*x6336);
IkReal x6338=((((-1.0)*x6335*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x6334))+(((-1.0)*x6335*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22))));
j4eval[0]=x6338;
j4eval[1]=((IKabs((((x6331*x6337))+((x6332*x6337)))))+(IKabs((((r22*x6331))+((r22*x6332))))));
j4eval[2]=IKsign(x6338);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6340=(cj2*sj1);
IkReal x6341=(cj1*sj2);
IkReal x6342=(gconst130*r21);
IkReal x6343=((1.0)*gconst131*r20);
CheckValue<IkReal> x6344 = IKatan2WithCheck(IkReal((((r22*x6341))+((r22*x6340)))),IkReal(((((-1.0)*x6340*x6343))+((x6341*x6342))+(((-1.0)*x6341*x6343))+((x6340*x6342)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6344.valid){
continue;
}
CheckValue<IkReal> x6345=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6342*x6342)))+(((2.0)*gconst131*r20*x6342))+(((-1.0)*(r22*r22)))+(((-1.0)*gconst131*r20*x6343)))),-1);
if(!x6345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6344.value)+(((1.5707963267949)*(x6345.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6346=IKsin(j4);
IkReal x6347=IKcos(j4);
IkReal x6348=(cj1*cj2);
IkReal x6349=(gconst131*r10);
IkReal x6350=(gconst130*r11);
IkReal x6351=(gconst131*r20);
IkReal x6352=(gconst131*r00);
IkReal x6353=((1.0)*cj0);
IkReal x6354=(sj1*sj2);
IkReal x6355=((1.0)*x6347);
IkReal x6356=((1.0)*x6346);
IkReal x6357=(gconst130*x6347);
IkReal x6358=(gconst130*x6346);
evalcond[0]=(((r21*x6358))+(((-1.0)*x6351*x6356))+(((-1.0)*r22*x6355)));
evalcond[1]=(sj0+(((-1.0)*r02*x6355))+((r01*x6358))+(((-1.0)*x6352*x6356)));
evalcond[2]=((((-1.0)*x6349*x6356))+((x6346*x6350))+(((-1.0)*r12*x6355))+(((-1.0)*x6353)));
evalcond[3]=(((cj2*sj1))+((r21*x6357))+(((-1.0)*x6351*x6355))+((r22*x6346))+((cj1*sj2)));
evalcond[4]=(((cj0*x6348))+(((-1.0)*x6353*x6354))+((r02*x6346))+((r01*x6357))+(((-1.0)*x6352*x6355)));
evalcond[5]=(((sj0*x6348))+(((-1.0)*x6349*x6355))+((r12*x6346))+((x6347*x6350))+(((-1.0)*sj0*x6354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6359=((1.0)*gconst131);
CheckValue<IkReal> x6360=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6359))+(((-1.0)*gconst130*r20)))),-1);
if(!x6360.valid){
continue;
}
CheckValue<IkReal> x6361 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst130*r01))+(((-1.0)*r10*sj0*x6359))+(((-1.0)*cj0*r00*x6359))+((gconst130*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6360.value)))+(x6361.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6362=IKsin(j4);
IkReal x6363=IKcos(j4);
IkReal x6364=(cj1*cj2);
IkReal x6365=(gconst131*r10);
IkReal x6366=(gconst130*r11);
IkReal x6367=(gconst131*r20);
IkReal x6368=(gconst131*r00);
IkReal x6369=((1.0)*cj0);
IkReal x6370=(sj1*sj2);
IkReal x6371=((1.0)*x6363);
IkReal x6372=((1.0)*x6362);
IkReal x6373=(gconst130*x6363);
IkReal x6374=(gconst130*x6362);
evalcond[0]=(((r21*x6374))+(((-1.0)*x6367*x6372))+(((-1.0)*r22*x6371)));
evalcond[1]=((((-1.0)*x6368*x6372))+sj0+(((-1.0)*r02*x6371))+((r01*x6374)));
evalcond[2]=((((-1.0)*x6365*x6372))+((x6362*x6366))+(((-1.0)*x6369))+(((-1.0)*r12*x6371)));
evalcond[3]=(((r21*x6373))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6367*x6371))+((r22*x6362)));
evalcond[4]=((((-1.0)*x6368*x6371))+((r01*x6373))+((cj0*x6364))+((r02*x6362))+(((-1.0)*x6369*x6370)));
evalcond[5]=((((-1.0)*x6365*x6371))+((r12*x6362))+((sj0*x6364))+((x6363*x6366))+(((-1.0)*sj0*x6370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6375=IKPowWithIntegerCheck(IKsign((((gconst131*r01))+((gconst130*r00)))),-1);
if(!x6375.valid){
continue;
}
CheckValue<IkReal> x6376 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*gconst131*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6375.value)))+(x6376.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6377=IKsin(j4);
IkReal x6378=IKcos(j4);
IkReal x6379=(cj1*cj2);
IkReal x6380=(gconst131*r10);
IkReal x6381=(gconst130*r11);
IkReal x6382=(gconst131*r20);
IkReal x6383=(gconst131*r00);
IkReal x6384=((1.0)*cj0);
IkReal x6385=(sj1*sj2);
IkReal x6386=((1.0)*x6378);
IkReal x6387=((1.0)*x6377);
IkReal x6388=(gconst130*x6378);
IkReal x6389=(gconst130*x6377);
evalcond[0]=((((-1.0)*x6382*x6387))+(((-1.0)*r22*x6386))+((r21*x6389)));
evalcond[1]=(sj0+(((-1.0)*x6383*x6387))+((r01*x6389))+(((-1.0)*r02*x6386)));
evalcond[2]=((((-1.0)*x6384))+(((-1.0)*x6380*x6387))+(((-1.0)*r12*x6386))+((x6377*x6381)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6382*x6386))+((cj1*sj2))+((r21*x6388))+((r22*x6377)));
evalcond[4]=((((-1.0)*x6384*x6385))+(((-1.0)*x6383*x6386))+((cj0*x6379))+((r01*x6388))+((r02*x6377)));
evalcond[5]=((((-1.0)*x6380*x6386))+(((-1.0)*sj0*x6385))+((r12*x6377))+((sj0*x6379))+((x6378*x6381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6390=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6390;
j4eval[1]=IKsign(x6390);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6391=((1.0)*cj5);
IkReal x6392=((((-1.0)*r21*x6391))+(((-1.0)*r20*sj5)));
j4eval[0]=x6392;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x6391))+((r01*sj5))))));
j4eval[2]=IKsign(x6392);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6393=cj5*cj5;
IkReal x6394=r11*r11;
IkReal x6395=(r11*sj5);
IkReal x6396=(cj5*r10);
IkReal x6397=((r12*r12)+x6394+(((-2.0)*x6395*x6396))+((x6393*(r10*r10)))+(((-1.0)*x6393*x6394)));
j4eval[0]=x6397;
j4eval[1]=IKsign(x6397);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x6396))+x6395))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6398=cj5*cj5;
IkReal x6399=r11*r11;
IkReal x6400=(cj5*r10);
IkReal x6401=(r11*sj5);
CheckValue<IkReal> x6402=IKPowWithIntegerCheck(IKsign((((x6398*(r10*r10)))+(r12*r12)+x6399+(((-2.0)*x6400*x6401))+(((-1.0)*x6398*x6399)))),-1);
if(!x6402.valid){
continue;
}
CheckValue<IkReal> x6403 = IKatan2WithCheck(IkReal((x6401+(((-1.0)*x6400)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6402.value)))+(x6403.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6404=IKcos(j4);
IkReal x6405=IKsin(j4);
IkReal x6406=(cj5*r00);
IkReal x6407=(cj5*r10);
IkReal x6408=(r21*sj5);
IkReal x6409=(cj5*r20);
IkReal x6410=((1.0)*x6404);
IkReal x6411=((1.0)*x6405);
IkReal x6412=(sj5*x6405);
IkReal x6413=(sj5*x6404);
evalcond[0]=((((-1.0)*x6407*x6410))+((r12*x6405))+((r11*x6413)));
evalcond[1]=(((x6405*x6408))+(((-1.0)*r22*x6410))+(((-1.0)*x6409*x6411)));
evalcond[2]=(((r01*x6412))+(((-1.0)*x6406*x6411))+(((-1.0)*r02*x6410)));
evalcond[3]=((-1.0)+(((-1.0)*x6407*x6411))+(((-1.0)*r12*x6410))+((r11*x6412)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6404*x6408))+((r22*x6405))+(((-1.0)*x6409*x6410)));
evalcond[5]=(((r02*x6405))+((r01*x6413))+(((-1.0)*sj1*sj2))+(((-1.0)*x6406*x6410))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6414=((1.0)*cj5);
CheckValue<IkReal> x6415=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6414))+(((-1.0)*r20*sj5)))),-1);
if(!x6415.valid){
continue;
}
CheckValue<IkReal> x6416 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x6414)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6415.value)))+(x6416.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6417=IKcos(j4);
IkReal x6418=IKsin(j4);
IkReal x6419=(cj5*r00);
IkReal x6420=(cj5*r10);
IkReal x6421=(r21*sj5);
IkReal x6422=(cj5*r20);
IkReal x6423=((1.0)*x6417);
IkReal x6424=((1.0)*x6418);
IkReal x6425=(sj5*x6418);
IkReal x6426=(sj5*x6417);
evalcond[0]=(((r11*x6426))+((r12*x6418))+(((-1.0)*x6420*x6423)));
evalcond[1]=((((-1.0)*x6422*x6424))+(((-1.0)*r22*x6423))+((x6418*x6421)));
evalcond[2]=((((-1.0)*x6419*x6424))+((r01*x6425))+(((-1.0)*r02*x6423)));
evalcond[3]=((-1.0)+((r11*x6425))+(((-1.0)*x6420*x6424))+(((-1.0)*r12*x6423)));
evalcond[4]=((((-1.0)*x6422*x6423))+((cj2*sj1))+((cj1*sj2))+((r22*x6418))+((x6417*x6421)));
evalcond[5]=(((r02*x6418))+(((-1.0)*x6419*x6423))+(((-1.0)*sj1*sj2))+((r01*x6426))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6427 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6427.valid){
continue;
}
CheckValue<IkReal> x6428=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6427.value)+(((1.5707963267949)*(x6428.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6429=IKcos(j4);
IkReal x6430=IKsin(j4);
IkReal x6431=(cj5*r00);
IkReal x6432=(cj5*r10);
IkReal x6433=(r21*sj5);
IkReal x6434=(cj5*r20);
IkReal x6435=((1.0)*x6429);
IkReal x6436=((1.0)*x6430);
IkReal x6437=(sj5*x6430);
IkReal x6438=(sj5*x6429);
evalcond[0]=(((r12*x6430))+((r11*x6438))+(((-1.0)*x6432*x6435)));
evalcond[1]=((((-1.0)*x6434*x6436))+(((-1.0)*r22*x6435))+((x6430*x6433)));
evalcond[2]=(((r01*x6437))+(((-1.0)*r02*x6435))+(((-1.0)*x6431*x6436)));
evalcond[3]=((-1.0)+((r11*x6437))+(((-1.0)*r12*x6435))+(((-1.0)*x6432*x6436)));
evalcond[4]=(((r22*x6430))+((cj2*sj1))+((x6429*x6433))+((cj1*sj2))+(((-1.0)*x6434*x6435)));
evalcond[5]=(((r01*x6438))+(((-1.0)*sj1*sj2))+(((-1.0)*x6431*x6435))+((r02*x6430))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6439=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6439;
j4eval[1]=IKsign(x6439);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6440=((1.0)*cj5);
IkReal x6441=((((-1.0)*r01*x6440))+(((-1.0)*r00*sj5)));
j4eval[0]=x6441;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6440))))));
j4eval[2]=IKsign(x6441);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6442=cj5*cj5;
IkReal x6443=r11*r11;
IkReal x6444=(cj5*r10);
IkReal x6445=(r11*sj5);
IkReal x6446=((((-1.0)*x6442*(r10*r10)))+((x6442*x6443))+(((-1.0)*x6443))+(((-1.0)*(r12*r12)))+(((2.0)*x6444*x6445)));
j4eval[0]=x6446;
j4eval[1]=IKsign(x6446);
j4eval[2]=((IKabs(((((-1.0)*x6444))+x6445)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6447=cj5*cj5;
IkReal x6448=r11*r11;
IkReal x6449=(cj5*r10);
IkReal x6450=(r11*sj5);
CheckValue<IkReal> x6451=IKPowWithIntegerCheck(IKsign(((((2.0)*x6449*x6450))+(((-1.0)*x6448))+((x6447*x6448))+(((-1.0)*x6447*(r10*r10)))+(((-1.0)*(r12*r12))))),-1);
if(!x6451.valid){
continue;
}
CheckValue<IkReal> x6452 = IKatan2WithCheck(IkReal(((((-1.0)*x6449))+x6450)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6451.value)))+(x6452.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6453=IKcos(j4);
IkReal x6454=IKsin(j4);
IkReal x6455=(cj5*r00);
IkReal x6456=(cj5*r10);
IkReal x6457=(r21*sj5);
IkReal x6458=(cj5*r20);
IkReal x6459=((1.0)*x6453);
IkReal x6460=((1.0)*x6454);
IkReal x6461=(sj5*x6454);
IkReal x6462=(sj5*x6453);
evalcond[0]=((((-1.0)*x6456*x6459))+((r11*x6462))+((r12*x6454)));
evalcond[1]=((((-1.0)*x6458*x6460))+((x6454*x6457))+(((-1.0)*r22*x6459)));
evalcond[2]=((((-1.0)*r02*x6459))+((r01*x6461))+(((-1.0)*x6455*x6460)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6459))+(((-1.0)*x6456*x6460))+((r11*x6461)));
evalcond[4]=(((cj2*sj1))+((x6453*x6457))+((cj1*sj2))+((r22*x6454))+(((-1.0)*x6458*x6459)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6462))+(((-1.0)*x6455*x6459))+((r02*x6454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6463=((1.0)*cj5);
CheckValue<IkReal> x6464 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6463)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6464.valid){
continue;
}
CheckValue<IkReal> x6465=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6463))+(((-1.0)*r00*sj5)))),-1);
if(!x6465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6464.value)+(((1.5707963267949)*(x6465.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6466=IKcos(j4);
IkReal x6467=IKsin(j4);
IkReal x6468=(cj5*r00);
IkReal x6469=(cj5*r10);
IkReal x6470=(r21*sj5);
IkReal x6471=(cj5*r20);
IkReal x6472=((1.0)*x6466);
IkReal x6473=((1.0)*x6467);
IkReal x6474=(sj5*x6467);
IkReal x6475=(sj5*x6466);
evalcond[0]=(((r11*x6475))+(((-1.0)*x6469*x6472))+((r12*x6467)));
evalcond[1]=(((x6467*x6470))+(((-1.0)*r22*x6472))+(((-1.0)*x6471*x6473)));
evalcond[2]=((((-1.0)*x6468*x6473))+((r01*x6474))+(((-1.0)*r02*x6472)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6472))+((r11*x6474))+(((-1.0)*x6469*x6473)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6466*x6470))+((r22*x6467))+(((-1.0)*x6471*x6472)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6468*x6472))+((r01*x6475))+((r02*x6467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6476=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6476.valid){
continue;
}
CheckValue<IkReal> x6477 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6476.value)))+(x6477.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6478=IKcos(j4);
IkReal x6479=IKsin(j4);
IkReal x6480=(cj5*r00);
IkReal x6481=(cj5*r10);
IkReal x6482=(r21*sj5);
IkReal x6483=(cj5*r20);
IkReal x6484=((1.0)*x6478);
IkReal x6485=((1.0)*x6479);
IkReal x6486=(sj5*x6479);
IkReal x6487=(sj5*x6478);
evalcond[0]=(((r11*x6487))+(((-1.0)*x6481*x6484))+((r12*x6479)));
evalcond[1]=(((x6479*x6482))+(((-1.0)*r22*x6484))+(((-1.0)*x6483*x6485)));
evalcond[2]=(((r01*x6486))+(((-1.0)*r02*x6484))+(((-1.0)*x6480*x6485)));
evalcond[3]=((1.0)+((r11*x6486))+(((-1.0)*r12*x6484))+(((-1.0)*x6481*x6485)));
evalcond[4]=(((r22*x6479))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6483*x6484))+((x6478*x6482)));
evalcond[5]=(((r01*x6487))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6480*x6484))+((r02*x6479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6488=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6488);
rxp0_2=(py*r00);
rxp1_0=(r21*x6488);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6489=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6489);
rxp0_2=(py*r00);
rxp1_0=(r21*x6489);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6490=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6490);
rxp0_2=(py*r00);
rxp1_0=(r21*x6490);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6493=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x6493.valid){
continue;
}
IkReal x6491=x6493.value;
IkReal x6492=(cj0*x6491);
cj4array[0]=(((sj1*sj2*x6492))+(((-1.0)*cj1*cj2*x6492)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6494=IKsin(j4);
IkReal x6495=IKcos(j4);
IkReal x6496=(r21*sj5);
IkReal x6497=((1.0)*x6495);
IkReal x6498=((1.0)*cj5*x6494);
evalcond[0]=(r12*x6494);
evalcond[1]=((((-1.0)*r12*x6497))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x6498))+((x6494*x6496)));
evalcond[3]=((((-1.0)*r00*x6498))+((r01*sj5*x6494)));
evalcond[4]=((((-1.0)*cj5*r20*x6497))+((cj2*sj1))+((x6495*x6496))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6501=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6501.valid){
continue;
}
IkReal x6499=x6501.value;
IkReal x6500=((1.0)*x6499);
cj4array[0]=((((-1.0)*cj1*sj2*x6500))+(((-1.0)*cj2*sj1*x6500)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6502=IKsin(j4);
IkReal x6503=IKcos(j4);
IkReal x6504=((1.0)*cj0);
IkReal x6505=(r01*sj5);
IkReal x6506=((1.0)*cj5*r00);
evalcond[0]=(r12*x6502);
evalcond[1]=((((-1.0)*x6504))+(((-1.0)*r12*x6503)));
evalcond[2]=((((-1.0)*cj5*r20*x6502))+((r21*sj5*x6502)));
evalcond[3]=(((x6502*x6505))+(((-1.0)*x6502*x6506)));
evalcond[4]=((((-1.0)*x6503*x6506))+(((-1.0)*sj1*sj2*x6504))+((cj0*cj1*cj2))+((x6503*x6505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6507=IKPowWithIntegerCheck(r12,-1);
if(!x6507.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x6507.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6508=IKsin(j4);
IkReal x6509=IKcos(j4);
IkReal x6510=((1.0)*cj5*r00);
IkReal x6511=(sj5*x6509);
IkReal x6512=(sj5*x6508);
IkReal x6513=((1.0)*cj5*r20);
evalcond[0]=(r12*x6508);
evalcond[1]=(((r21*x6512))+(((-1.0)*x6508*x6513)));
evalcond[2]=(((r01*x6512))+(((-1.0)*x6508*x6510)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6511))+(((-1.0)*x6509*x6513)));
evalcond[4]=(((r01*x6511))+(((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))+(((-1.0)*x6509*x6510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6514=((1.0)*cj5);
CheckValue<IkReal> x6515 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x6514))+(((-1.0)*r10*sj0*x6514))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6515.valid){
continue;
}
CheckValue<IkReal> x6516=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6514))+(((-1.0)*r20*sj5)))),-1);
if(!x6516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6515.value)+(((1.5707963267949)*(x6516.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6517=IKsin(j4);
IkReal x6518=IKcos(j4);
IkReal x6519=(cj5*r00);
IkReal x6520=(cj1*cj2);
IkReal x6521=(cj5*r10);
IkReal x6522=(r21*sj5);
IkReal x6523=(cj5*r20);
IkReal x6524=((1.0)*x6518);
IkReal x6525=((1.0)*x6517);
IkReal x6526=(sj5*x6517);
IkReal x6527=(sj5*x6518);
IkReal x6528=((1.0)*sj1*sj2);
evalcond[0]=(((x6517*x6522))+(((-1.0)*r22*x6524))+(((-1.0)*x6523*x6525)));
evalcond[1]=(sj0+(((-1.0)*x6519*x6525))+(((-1.0)*r02*x6524))+((r01*x6526)));
evalcond[2]=((((-1.0)*x6521*x6525))+(((-1.0)*r12*x6524))+((r11*x6526))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6518*x6522))+(((-1.0)*x6523*x6524))+((r22*x6517)));
evalcond[4]=((((-1.0)*x6519*x6524))+(((-1.0)*cj0*x6528))+((r02*x6517))+((cj0*x6520))+((r01*x6527)));
evalcond[5]=((((-1.0)*x6521*x6524))+((r12*x6517))+((sj0*x6520))+((r11*x6527))+(((-1.0)*sj0*x6528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6529=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6529.valid){
continue;
}
CheckValue<IkReal> x6530 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6529.value)))+(x6530.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6531=IKsin(j4);
IkReal x6532=IKcos(j4);
IkReal x6533=(cj5*r00);
IkReal x6534=(cj1*cj2);
IkReal x6535=(cj5*r10);
IkReal x6536=(r21*sj5);
IkReal x6537=(cj5*r20);
IkReal x6538=((1.0)*x6532);
IkReal x6539=((1.0)*x6531);
IkReal x6540=(sj5*x6531);
IkReal x6541=(sj5*x6532);
IkReal x6542=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x6537*x6539))+(((-1.0)*r22*x6538))+((x6531*x6536)));
evalcond[1]=(sj0+(((-1.0)*r02*x6538))+(((-1.0)*x6533*x6539))+((r01*x6540)));
evalcond[2]=((((-1.0)*x6535*x6539))+(((-1.0)*r12*x6538))+((r11*x6540))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6537*x6538))+((cj1*sj2))+((r22*x6531))+((x6532*x6536)));
evalcond[4]=(((r02*x6531))+(((-1.0)*x6533*x6538))+((cj0*x6534))+(((-1.0)*cj0*x6542))+((r01*x6541)));
evalcond[5]=((((-1.0)*sj0*x6542))+(((-1.0)*x6535*x6538))+((sj0*x6534))+((r11*x6541))+((r12*x6531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6543=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6543.valid){
continue;
}
CheckValue<IkReal> x6544 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6544.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6543.value)))+(x6544.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6545=IKsin(j4);
IkReal x6546=IKcos(j4);
IkReal x6547=(cj5*r00);
IkReal x6548=(cj1*cj2);
IkReal x6549=(cj5*r10);
IkReal x6550=(r21*sj5);
IkReal x6551=(cj5*r20);
IkReal x6552=((1.0)*x6546);
IkReal x6553=((1.0)*x6545);
IkReal x6554=(sj5*x6545);
IkReal x6555=(sj5*x6546);
IkReal x6556=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x6551*x6553))+(((-1.0)*r22*x6552))+((x6545*x6550)));
evalcond[1]=(sj0+(((-1.0)*r02*x6552))+(((-1.0)*x6547*x6553))+((r01*x6554)));
evalcond[2]=((((-1.0)*r12*x6552))+((r11*x6554))+(((-1.0)*x6549*x6553))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6551*x6552))+((cj1*sj2))+((x6546*x6550))+((r22*x6545)));
evalcond[4]=(((r02*x6545))+(((-1.0)*cj0*x6556))+(((-1.0)*x6547*x6552))+((r01*x6555))+((cj0*x6548)));
evalcond[5]=((((-1.0)*sj0*x6556))+((r11*x6555))+((r12*x6545))+(((-1.0)*x6549*x6552))+((sj0*x6548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6557=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x6557;
j0eval[1]=IKsign(x6557);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6558=cj5*cj5;
IkReal x6559=r21*r21;
IkReal x6560=(cj2*sj1);
IkReal x6561=(cj1*sj2);
IkReal x6562=(r21*sj5);
IkReal x6563=((1.0)*cj5*r20);
IkReal x6564=((r22*r22)+((x6558*(r20*r20)))+x6559+(((-2.0)*cj5*r20*x6562))+(((-1.0)*x6558*x6559)));
j4eval[0]=x6564;
j4eval[1]=IKsign(x6564);
j4eval[2]=((IKabs((((r22*x6561))+((r22*x6560)))))+(IKabs((((x6561*x6562))+((x6560*x6562))+(((-1.0)*x6561*x6563))+(((-1.0)*x6560*x6563))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6565=cj1*cj1;
IkReal x6566=(cj2*sj2);
IkReal x6567=(cj1*sj1);
j0eval[0]=((((-1.08418367346939)*cj2*x6567))+x6567+x6566+(((-2.0)*x6565*x6566))+(((-1.08418367346939)*sj2*x6565))+(((-2.0)*x6567*(cj2*cj2))));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.195493438569105)*px))+(((-1.19192641276835)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.195493438569105)*py))+(((-1.19192641276835)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.195493438569105)*px))+(((-1.19192641276835)*py))))+IKsqr(((((-0.195493438569105)*py))+(((-1.19192641276835)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.195493438569105)*px))+(((-1.19192641276835)*py))), ((((-0.195493438569105)*py))+(((-1.19192641276835)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6568=IKcos(j0);
IkReal x6569=IKsin(j0);
evalcond[0]=((((0.134)*x6569))+(((-1.0)*px))+(((-0.817)*x6568)));
evalcond[1]=((((-0.134)*x6568))+(((-1.0)*py))+(((-0.817)*x6569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6570=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6570;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6570);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6571=cj5*cj5;
IkReal x6572=((1.0)*r21);
IkReal x6573=(cj5*sj5);
IkReal x6574=((1.0)*r20);
IkReal x6575=(((r01*r21))+((r00*r20*x6571))+(((-1.0)*r01*x6571*x6572))+(((-1.0)*r01*x6573*x6574))+((r02*r22))+(((-1.0)*r00*x6572*x6573)));
j4eval[0]=x6575;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6574)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6575);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6576=cj5*cj5;
IkReal x6577=(r21*sj5);
IkReal x6578=(r11*r21);
IkReal x6579=((1.0)*cj5*r20);
IkReal x6580=((((-1.0)*r11*sj5*x6579))+((r10*r20*x6576))+((r12*r22))+(((-1.0)*x6576*x6578))+x6578+(((-1.0)*cj5*r10*x6577)));
j4eval[0]=x6580;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x6577))+(((-1.0)*sj0*x6579))))));
j4eval[2]=IKsign(x6580);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6581=cj5*cj5;
IkReal x6582=(r21*sj5);
IkReal x6583=(r11*r21);
IkReal x6584=((1.0)*cj5*r20);
CheckValue<IkReal> x6585=IKPowWithIntegerCheck(IKsign((((r12*r22))+x6583+(((-1.0)*cj5*r10*x6582))+(((-1.0)*r11*sj5*x6584))+(((-1.0)*x6581*x6583))+((r10*r20*x6581)))),-1);
if(!x6585.valid){
continue;
}
CheckValue<IkReal> x6586 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x6582))+(((-1.0)*sj0*x6584)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6585.value)))+(x6586.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6587=IKsin(j4);
IkReal x6588=IKcos(j4);
IkReal x6589=(r11*sj5);
IkReal x6590=(cj5*r00);
IkReal x6591=(cj5*r10);
IkReal x6592=(r21*sj5);
IkReal x6593=(cj5*r20);
IkReal x6594=(r01*sj5);
IkReal x6595=((1.0)*x6588);
IkReal x6596=((1.0)*x6587);
evalcond[0]=((((-1.0)*x6593*x6596))+((x6587*x6592))+(((-1.0)*r22*x6595)));
evalcond[1]=(((x6588*x6593))+(((-1.0)*x6592*x6595))+(((-1.0)*r22*x6596)));
evalcond[2]=(sj0+(((-1.0)*x6590*x6596))+(((-1.0)*r02*x6595))+((x6587*x6594)));
evalcond[3]=(((x6588*x6590))+cj0+(((-1.0)*r02*x6596))+(((-1.0)*x6594*x6595)));
evalcond[4]=(sj0+((x6588*x6591))+(((-1.0)*x6589*x6595))+(((-1.0)*r12*x6596)));
evalcond[5]=((((-1.0)*r12*x6595))+(((-1.0)*x6591*x6596))+((x6587*x6589))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6597=cj5*cj5;
IkReal x6598=((1.0)*r21);
IkReal x6599=(cj5*sj5);
IkReal x6600=((1.0)*r20);
CheckValue<IkReal> x6601 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6600)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6601.valid){
continue;
}
CheckValue<IkReal> x6602=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x6597*x6598))+((r00*r20*x6597))+(((-1.0)*r00*x6598*x6599))+((r02*r22))+(((-1.0)*r01*x6599*x6600)))),-1);
if(!x6602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6601.value)+(((1.5707963267949)*(x6602.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6603=IKsin(j4);
IkReal x6604=IKcos(j4);
IkReal x6605=(r11*sj5);
IkReal x6606=(cj5*r00);
IkReal x6607=(cj5*r10);
IkReal x6608=(r21*sj5);
IkReal x6609=(cj5*r20);
IkReal x6610=(r01*sj5);
IkReal x6611=((1.0)*x6604);
IkReal x6612=((1.0)*x6603);
evalcond[0]=((((-1.0)*r22*x6611))+(((-1.0)*x6609*x6612))+((x6603*x6608)));
evalcond[1]=((((-1.0)*x6608*x6611))+(((-1.0)*r22*x6612))+((x6604*x6609)));
evalcond[2]=(((x6603*x6610))+(((-1.0)*x6606*x6612))+sj0+(((-1.0)*r02*x6611)));
evalcond[3]=(cj0+(((-1.0)*x6610*x6611))+(((-1.0)*r02*x6612))+((x6604*x6606)));
evalcond[4]=((((-1.0)*x6605*x6611))+(((-1.0)*r12*x6612))+sj0+((x6604*x6607)));
evalcond[5]=((((-1.0)*r12*x6611))+(((-1.0)*x6607*x6612))+((x6603*x6605))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6613=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6613.valid){
continue;
}
CheckValue<IkReal> x6614 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6613.value)))+(x6614.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6615=IKsin(j4);
IkReal x6616=IKcos(j4);
IkReal x6617=(r11*sj5);
IkReal x6618=(cj5*r00);
IkReal x6619=(cj5*r10);
IkReal x6620=(r21*sj5);
IkReal x6621=(cj5*r20);
IkReal x6622=(r01*sj5);
IkReal x6623=((1.0)*x6616);
IkReal x6624=((1.0)*x6615);
evalcond[0]=((((-1.0)*r22*x6623))+(((-1.0)*x6621*x6624))+((x6615*x6620)));
evalcond[1]=((((-1.0)*x6620*x6623))+(((-1.0)*r22*x6624))+((x6616*x6621)));
evalcond[2]=(sj0+(((-1.0)*x6618*x6624))+(((-1.0)*r02*x6623))+((x6615*x6622)));
evalcond[3]=(cj0+(((-1.0)*r02*x6624))+((x6616*x6618))+(((-1.0)*x6622*x6623)));
evalcond[4]=(sj0+(((-1.0)*r12*x6624))+(((-1.0)*x6617*x6623))+((x6616*x6619)));
evalcond[5]=((((-1.0)*r12*x6623))+(((-1.0)*x6619*x6624))+((x6615*x6617))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((7.03596744552376)*px))+(((-1.73273825150958)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.73273825150958)*px))+(((-7.03596744552376)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.03596744552376)*px))+(((-1.73273825150958)*py))))+IKsqr(((((-1.73273825150958)*px))+(((-7.03596744552376)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((7.03596744552376)*px))+(((-1.73273825150958)*py))), ((((-1.73273825150958)*px))+(((-7.03596744552376)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6625=IKcos(j0);
IkReal x6626=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.134)*x6626))+(((-0.033)*x6625)));
evalcond[1]=((((-0.134)*x6625))+(((-1.0)*py))+(((-0.033)*x6626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6627=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6627;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6627);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6628=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6628;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6628);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6629=cj5*cj5;
IkReal x6630=((1.0)*r21);
IkReal x6631=(cj5*r20);
IkReal x6632=(((r00*r20*x6629))+(((-1.0)*cj5*r00*sj5*x6630))+((r01*r21))+(((-1.0)*r01*x6629*x6630))+(((-1.0)*r01*sj5*x6631))+((r02*r22)));
j4eval[0]=x6632;
j4eval[1]=IKsign(x6632);
j4eval[2]=((IKabs(((((-1.0)*sj0*sj5*x6630))+((sj0*x6631)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6633=cj5*cj5;
IkReal x6634=((1.0)*r21);
IkReal x6635=(cj5*r20);
CheckValue<IkReal> x6636=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6633*x6634))+(((-1.0)*cj5*r00*sj5*x6634))+((r01*r21))+(((-1.0)*r01*sj5*x6635))+((r02*r22))+((r00*r20*x6633)))),-1);
if(!x6636.valid){
continue;
}
CheckValue<IkReal> x6637 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x6634))+((sj0*x6635)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6636.value)))+(x6637.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6638=IKsin(j4);
IkReal x6639=IKcos(j4);
IkReal x6640=((1.0)*cj0);
IkReal x6641=(cj5*r00);
IkReal x6642=(r11*sj5);
IkReal x6643=(cj5*r10);
IkReal x6644=(r21*sj5);
IkReal x6645=(cj5*r20);
IkReal x6646=(r01*sj5);
IkReal x6647=((1.0)*x6639);
IkReal x6648=((1.0)*x6638);
evalcond[0]=((((-1.0)*r22*x6647))+((x6638*x6644))+(((-1.0)*x6645*x6648)));
evalcond[1]=((((-1.0)*r22*x6648))+((x6639*x6645))+(((-1.0)*x6644*x6647)));
evalcond[2]=(sj0+((x6638*x6646))+(((-1.0)*x6641*x6648))+(((-1.0)*r02*x6647)));
evalcond[3]=((((-1.0)*x6640))+((x6638*x6642))+(((-1.0)*x6643*x6648))+(((-1.0)*r12*x6647)));
evalcond[4]=((((-1.0)*x6640))+((x6639*x6641))+(((-1.0)*x6646*x6647))+(((-1.0)*r02*x6648)));
evalcond[5]=((((-1.0)*sj0))+((x6639*x6643))+(((-1.0)*x6642*x6647))+(((-1.0)*r12*x6648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6649=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6649.valid){
continue;
}
CheckValue<IkReal> x6650 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6649.value)))+(x6650.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6651=IKsin(j4);
IkReal x6652=IKcos(j4);
IkReal x6653=((1.0)*cj0);
IkReal x6654=(cj5*r00);
IkReal x6655=(r11*sj5);
IkReal x6656=(cj5*r10);
IkReal x6657=(r21*sj5);
IkReal x6658=(cj5*r20);
IkReal x6659=(r01*sj5);
IkReal x6660=((1.0)*x6652);
IkReal x6661=((1.0)*x6651);
evalcond[0]=((((-1.0)*x6658*x6661))+((x6651*x6657))+(((-1.0)*r22*x6660)));
evalcond[1]=((((-1.0)*x6657*x6660))+((x6652*x6658))+(((-1.0)*r22*x6661)));
evalcond[2]=(sj0+(((-1.0)*x6654*x6661))+(((-1.0)*r02*x6660))+((x6651*x6659)));
evalcond[3]=((((-1.0)*x6653))+(((-1.0)*r12*x6660))+((x6651*x6655))+(((-1.0)*x6656*x6661)));
evalcond[4]=((((-1.0)*x6653))+((x6652*x6654))+(((-1.0)*x6659*x6660))+(((-1.0)*r02*x6661)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x6661))+((x6652*x6656))+(((-1.0)*x6655*x6660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6662=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6662.valid){
continue;
}
CheckValue<IkReal> x6663 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6663.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6662.value)))+(x6663.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6664=IKsin(j4);
IkReal x6665=IKcos(j4);
IkReal x6666=((1.0)*cj0);
IkReal x6667=(cj5*r00);
IkReal x6668=(r11*sj5);
IkReal x6669=(cj5*r10);
IkReal x6670=(r21*sj5);
IkReal x6671=(cj5*r20);
IkReal x6672=(r01*sj5);
IkReal x6673=((1.0)*x6665);
IkReal x6674=((1.0)*x6664);
evalcond[0]=((((-1.0)*x6671*x6674))+((x6664*x6670))+(((-1.0)*r22*x6673)));
evalcond[1]=((((-1.0)*x6670*x6673))+((x6665*x6671))+(((-1.0)*r22*x6674)));
evalcond[2]=((((-1.0)*r02*x6673))+sj0+((x6664*x6672))+(((-1.0)*x6667*x6674)));
evalcond[3]=(((x6664*x6668))+(((-1.0)*x6669*x6674))+(((-1.0)*r12*x6673))+(((-1.0)*x6666)));
evalcond[4]=((((-1.0)*r02*x6674))+(((-1.0)*x6672*x6673))+(((-1.0)*x6666))+((x6665*x6667)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6668*x6673))+(((-1.0)*r12*x6674))+((x6665*x6669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6675=IKsin(j0);
IkReal x6676=IKcos(j0);
IkReal x6677=((0.1)*sj5);
IkReal x6678=(cj5*r11);
IkReal x6679=(cj5*r01);
IkReal x6680=((1.0)*sj5);
evalcond[0]=((((-1.0)*r00*x6680))+x6676+(((-1.0)*x6679)));
evalcond[1]=(x6675+(((-1.0)*x6678))+(((-1.0)*r10*x6680)));
evalcond[2]=((((0.134)*x6675))+(((-1.0)*r00*x6677))+(((-1.0)*px))+(((-0.1)*x6679)));
evalcond[3]=((((-0.134)*x6676))+(((-1.0)*py))+(((-0.1)*x6678))+(((-1.0)*r10*x6677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6681=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6681;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x6681);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6682=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6682;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6682);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6683=cj5*cj5;
IkReal x6684=r21*r21;
IkReal x6685=(r21*sj5);
IkReal x6686=(cj5*r20);
IkReal x6687=((((-1.0)*x6683*x6684))+(r22*r22)+x6684+((x6683*(r20*r20)))+(((-2.0)*x6685*x6686)));
j4eval[0]=x6687;
j4eval[1]=IKsign(x6687);
j4eval[2]=((IKabs(r22))+(IKabs((x6685+(((-1.0)*x6686))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6688=cj5*cj5;
IkReal x6689=r21*r21;
IkReal x6690=(r21*sj5);
IkReal x6691=(cj5*r20);
CheckValue<IkReal> x6692=IKPowWithIntegerCheck(IKsign(((r22*r22)+x6689+(((-1.0)*x6688*x6689))+(((-2.0)*x6690*x6691))+((x6688*(r20*r20))))),-1);
if(!x6692.valid){
continue;
}
CheckValue<IkReal> x6693 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x6691))+x6690)),IKFAST_ATAN2_MAGTHRESH);
if(!x6693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6692.value)))+(x6693.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6694=IKsin(j4);
IkReal x6695=IKcos(j4);
IkReal x6696=(r11*sj5);
IkReal x6697=(r21*sj5);
IkReal x6698=(cj5*r00);
IkReal x6699=(cj5*r10);
IkReal x6700=(cj5*r20);
IkReal x6701=(r01*sj5);
IkReal x6702=((1.0)*x6695);
IkReal x6703=((1.0)*x6694);
evalcond[0]=((((-1.0)*r22*x6702))+(((-1.0)*x6700*x6703))+((x6694*x6697)));
evalcond[1]=((((-1.0)*r02*x6703))+(((-1.0)*x6701*x6702))+((x6695*x6698)));
evalcond[2]=((((-1.0)*x6696*x6702))+(((-1.0)*r12*x6703))+((x6695*x6699)));
evalcond[3]=(sj0+(((-1.0)*r02*x6702))+(((-1.0)*x6698*x6703))+((x6694*x6701)));
evalcond[4]=((1.0)+(((-1.0)*x6697*x6702))+(((-1.0)*r22*x6703))+((x6695*x6700)));
evalcond[5]=((((-1.0)*x6699*x6703))+(((-1.0)*r12*x6702))+((x6694*x6696))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6704=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6704.valid){
continue;
}
CheckValue<IkReal> x6705 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6705.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6704.value)))+(x6705.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6706=IKsin(j4);
IkReal x6707=IKcos(j4);
IkReal x6708=(r11*sj5);
IkReal x6709=(r21*sj5);
IkReal x6710=(cj5*r00);
IkReal x6711=(cj5*r10);
IkReal x6712=(cj5*r20);
IkReal x6713=(r01*sj5);
IkReal x6714=((1.0)*x6707);
IkReal x6715=((1.0)*x6706);
evalcond[0]=(((x6706*x6709))+(((-1.0)*x6712*x6715))+(((-1.0)*r22*x6714)));
evalcond[1]=((((-1.0)*x6713*x6714))+((x6707*x6710))+(((-1.0)*r02*x6715)));
evalcond[2]=(((x6707*x6711))+(((-1.0)*x6708*x6714))+(((-1.0)*r12*x6715)));
evalcond[3]=(sj0+(((-1.0)*x6710*x6715))+(((-1.0)*r02*x6714))+((x6706*x6713)));
evalcond[4]=((1.0)+((x6707*x6712))+(((-1.0)*x6709*x6714))+(((-1.0)*r22*x6715)));
evalcond[5]=((((-1.0)*x6711*x6715))+((x6706*x6708))+(((-1.0)*r12*x6714))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6716 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6716.valid){
continue;
}
CheckValue<IkReal> x6717=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6716.value)+(((1.5707963267949)*(x6717.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6718=IKsin(j4);
IkReal x6719=IKcos(j4);
IkReal x6720=(r11*sj5);
IkReal x6721=(r21*sj5);
IkReal x6722=(cj5*r00);
IkReal x6723=(cj5*r10);
IkReal x6724=(cj5*r20);
IkReal x6725=(r01*sj5);
IkReal x6726=((1.0)*x6719);
IkReal x6727=((1.0)*x6718);
evalcond[0]=((((-1.0)*r22*x6726))+(((-1.0)*x6724*x6727))+((x6718*x6721)));
evalcond[1]=((((-1.0)*r02*x6727))+((x6719*x6722))+(((-1.0)*x6725*x6726)));
evalcond[2]=((((-1.0)*r12*x6727))+(((-1.0)*x6720*x6726))+((x6719*x6723)));
evalcond[3]=(sj0+((x6718*x6725))+(((-1.0)*x6722*x6727))+(((-1.0)*r02*x6726)));
evalcond[4]=((1.0)+(((-1.0)*r22*x6727))+(((-1.0)*x6721*x6726))+((x6719*x6724)));
evalcond[5]=((((-1.0)*x6723*x6727))+((x6718*x6720))+(((-1.0)*r12*x6726))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.780794779163268)*px))+(((2.28411607038807)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.28411607038807)*px))+(((-0.780794779163268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.780794779163268)*px))+(((2.28411607038807)*py))))+IKsqr(((((2.28411607038807)*px))+(((-0.780794779163268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.780794779163268)*px))+(((2.28411607038807)*py))), ((((2.28411607038807)*px))+(((-0.780794779163268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6728=IKsin(j0);
IkReal x6729=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.134)*x6728))+(((0.392)*x6729)));
evalcond[1]=((((-1.0)*py))+(((-0.134)*x6729))+(((0.392)*x6728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6730=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6730;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6730);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6731=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6731;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6731);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6732=cj5*cj5;
IkReal x6733=((1.0)*r21);
IkReal x6734=(cj5*r20);
IkReal x6735=((((-1.0)*r01*x6732*x6733))+((r01*r21))+(((-1.0)*r01*sj5*x6734))+((r00*r20*x6732))+((r02*r22))+(((-1.0)*cj5*r00*sj5*x6733)));
j4eval[0]=x6735;
j4eval[1]=IKsign(x6735);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*sj5*x6733))+((sj0*x6734))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6736=cj5*cj5;
IkReal x6737=((1.0)*r21);
IkReal x6738=(cj5*r20);
CheckValue<IkReal> x6739 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x6737))+((sj0*x6738)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6739.valid){
continue;
}
CheckValue<IkReal> x6740=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6736*x6737))+((r01*r21))+(((-1.0)*r01*sj5*x6738))+((r00*r20*x6736))+((r02*r22))+(((-1.0)*cj5*r00*sj5*x6737)))),-1);
if(!x6740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6739.value)+(((1.5707963267949)*(x6740.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6741=IKsin(j4);
IkReal x6742=IKcos(j4);
IkReal x6743=((1.0)*cj0);
IkReal x6744=(cj5*r00);
IkReal x6745=(r11*sj5);
IkReal x6746=(cj5*r10);
IkReal x6747=(r21*sj5);
IkReal x6748=(cj5*r20);
IkReal x6749=(r01*sj5);
IkReal x6750=((1.0)*x6742);
IkReal x6751=((1.0)*x6741);
evalcond[0]=(((x6741*x6747))+(((-1.0)*x6748*x6751))+(((-1.0)*r22*x6750)));
evalcond[1]=(((x6742*x6748))+(((-1.0)*r22*x6751))+(((-1.0)*x6747*x6750)));
evalcond[2]=(sj0+((x6741*x6749))+(((-1.0)*r02*x6750))+(((-1.0)*x6744*x6751)));
evalcond[3]=(((x6741*x6745))+(((-1.0)*x6746*x6751))+(((-1.0)*r12*x6750))+(((-1.0)*x6743)));
evalcond[4]=(((x6742*x6744))+(((-1.0)*x6749*x6750))+(((-1.0)*r02*x6751))+(((-1.0)*x6743)));
evalcond[5]=((((-1.0)*sj0))+((x6742*x6746))+(((-1.0)*x6745*x6750))+(((-1.0)*r12*x6751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6752=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6752.valid){
continue;
}
CheckValue<IkReal> x6753 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6752.value)))+(x6753.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6754=IKsin(j4);
IkReal x6755=IKcos(j4);
IkReal x6756=((1.0)*cj0);
IkReal x6757=(cj5*r00);
IkReal x6758=(r11*sj5);
IkReal x6759=(cj5*r10);
IkReal x6760=(r21*sj5);
IkReal x6761=(cj5*r20);
IkReal x6762=(r01*sj5);
IkReal x6763=((1.0)*x6755);
IkReal x6764=((1.0)*x6754);
evalcond[0]=(((x6754*x6760))+(((-1.0)*r22*x6763))+(((-1.0)*x6761*x6764)));
evalcond[1]=((((-1.0)*x6760*x6763))+(((-1.0)*r22*x6764))+((x6755*x6761)));
evalcond[2]=(sj0+((x6754*x6762))+(((-1.0)*r02*x6763))+(((-1.0)*x6757*x6764)));
evalcond[3]=((((-1.0)*x6759*x6764))+((x6754*x6758))+(((-1.0)*x6756))+(((-1.0)*r12*x6763)));
evalcond[4]=((((-1.0)*x6762*x6763))+(((-1.0)*x6756))+(((-1.0)*r02*x6764))+((x6755*x6757)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6758*x6763))+(((-1.0)*r12*x6764))+((x6755*x6759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6765=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6765.valid){
continue;
}
CheckValue<IkReal> x6766 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6766.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6765.value)))+(x6766.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6767=IKsin(j4);
IkReal x6768=IKcos(j4);
IkReal x6769=((1.0)*cj0);
IkReal x6770=(cj5*r00);
IkReal x6771=(r11*sj5);
IkReal x6772=(cj5*r10);
IkReal x6773=(r21*sj5);
IkReal x6774=(cj5*r20);
IkReal x6775=(r01*sj5);
IkReal x6776=((1.0)*x6768);
IkReal x6777=((1.0)*x6767);
evalcond[0]=((((-1.0)*r22*x6776))+((x6767*x6773))+(((-1.0)*x6774*x6777)));
evalcond[1]=((((-1.0)*r22*x6777))+(((-1.0)*x6773*x6776))+((x6768*x6774)));
evalcond[2]=(sj0+(((-1.0)*x6770*x6777))+(((-1.0)*r02*x6776))+((x6767*x6775)));
evalcond[3]=((((-1.0)*r12*x6776))+(((-1.0)*x6769))+(((-1.0)*x6772*x6777))+((x6767*x6771)));
evalcond[4]=((((-1.0)*x6775*x6776))+(((-1.0)*x6769))+(((-1.0)*r02*x6777))+((x6768*x6770)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x6777))+(((-1.0)*x6771*x6776))+((x6768*x6772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6778=((1.0)*sj5);
IkReal x6779=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x6779))+(((-1.0)*r10*x6778)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x6779))+(((-1.0)*r00*x6778)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x6779))+(((-1.0)*r10*x6778))))+IKsqr(((((-1.0)*r01*x6779))+(((-1.0)*r00*x6778))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x6779))+(((-1.0)*r10*x6778))), ((((-1.0)*r01*x6779))+(((-1.0)*r00*x6778))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6780=IKsin(j0);
IkReal x6781=IKcos(j0);
IkReal x6782=((0.1)*sj5);
IkReal x6783=(cj5*r11);
IkReal x6784=(cj5*r01);
IkReal x6785=((1.0)*sj5);
evalcond[0]=((((-1.0)*x6784))+(((-1.0)*x6781))+(((-1.0)*r00*x6785)));
evalcond[1]=((((-1.0)*x6780))+(((-1.0)*x6783))+(((-1.0)*r10*x6785)));
evalcond[2]=((((-0.1)*x6784))+(((-1.0)*px))+(((0.134)*x6780))+(((-1.0)*r00*x6782)));
evalcond[3]=((((-0.1)*x6783))+(((-0.134)*x6781))+(((-1.0)*py))+(((-1.0)*r10*x6782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6786=((1.0)*sj5);
IkReal x6787=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6786)));
j4eval[0]=x6787;
j4eval[1]=IKsign(x6787);
j4eval[2]=((IKabs(((((-1.0)*r01*x6786))+((cj5*r00)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6788=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6788;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6788);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6789=r21*r21;
IkReal x6790=cj5*cj5;
IkReal x6791=(r21*sj5);
IkReal x6792=(cj5*r20);
IkReal x6793=((((-1.0)*x6789))+(((-1.0)*(r22*r22)))+((x6789*x6790))+(((-1.0)*x6790*(r20*r20)))+(((2.0)*x6791*x6792)));
j4eval[0]=x6793;
j4eval[1]=((IKabs((x6791+(((-1.0)*x6792)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6793);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6794=r21*r21;
IkReal x6795=cj5*cj5;
IkReal x6796=(r21*sj5);
IkReal x6797=(cj5*r20);
CheckValue<IkReal> x6798=IKPowWithIntegerCheck(IKsign((((x6794*x6795))+(((-1.0)*(r22*r22)))+(((-1.0)*x6795*(r20*r20)))+(((-1.0)*x6794))+(((2.0)*x6796*x6797)))),-1);
if(!x6798.valid){
continue;
}
CheckValue<IkReal> x6799 = IKatan2WithCheck(IkReal(r22),IkReal((x6796+(((-1.0)*x6797)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6799.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6798.value)))+(x6799.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6800=IKsin(j4);
IkReal x6801=IKcos(j4);
IkReal x6802=(r11*sj5);
IkReal x6803=(r21*sj5);
IkReal x6804=(cj5*r00);
IkReal x6805=(cj5*r10);
IkReal x6806=(cj5*r20);
IkReal x6807=(r01*sj5);
IkReal x6808=((1.0)*x6801);
IkReal x6809=((1.0)*x6800);
evalcond[0]=(((x6800*x6803))+(((-1.0)*r22*x6808))+(((-1.0)*x6806*x6809)));
evalcond[1]=(((x6801*x6804))+(((-1.0)*r02*x6809))+(((-1.0)*x6807*x6808)));
evalcond[2]=(((x6801*x6805))+(((-1.0)*r12*x6809))+(((-1.0)*x6802*x6808)));
evalcond[3]=(sj0+((x6800*x6807))+(((-1.0)*r02*x6808))+(((-1.0)*x6804*x6809)));
evalcond[4]=((-1.0)+((x6801*x6806))+(((-1.0)*x6803*x6808))+(((-1.0)*r22*x6809)));
evalcond[5]=(((x6800*x6802))+(((-1.0)*r12*x6808))+(((-1.0)*x6805*x6809))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6810=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6810.valid){
continue;
}
CheckValue<IkReal> x6811 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6810.value)))+(x6811.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6812=IKsin(j4);
IkReal x6813=IKcos(j4);
IkReal x6814=(r11*sj5);
IkReal x6815=(r21*sj5);
IkReal x6816=(cj5*r00);
IkReal x6817=(cj5*r10);
IkReal x6818=(cj5*r20);
IkReal x6819=(r01*sj5);
IkReal x6820=((1.0)*x6813);
IkReal x6821=((1.0)*x6812);
evalcond[0]=((((-1.0)*x6818*x6821))+((x6812*x6815))+(((-1.0)*r22*x6820)));
evalcond[1]=((((-1.0)*r02*x6821))+((x6813*x6816))+(((-1.0)*x6819*x6820)));
evalcond[2]=((((-1.0)*x6814*x6820))+(((-1.0)*r12*x6821))+((x6813*x6817)));
evalcond[3]=(sj0+(((-1.0)*r02*x6820))+(((-1.0)*x6816*x6821))+((x6812*x6819)));
evalcond[4]=((-1.0)+(((-1.0)*x6815*x6820))+((x6813*x6818))+(((-1.0)*r22*x6821)));
evalcond[5]=((((-1.0)*x6817*x6821))+(((-1.0)*r12*x6820))+((x6812*x6814))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6822=((1.0)*sj5);
CheckValue<IkReal> x6823 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x6822))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6823.valid){
continue;
}
CheckValue<IkReal> x6824=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6822)))),-1);
if(!x6824.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6823.value)+(((1.5707963267949)*(x6824.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6825=IKsin(j4);
IkReal x6826=IKcos(j4);
IkReal x6827=(r11*sj5);
IkReal x6828=(r21*sj5);
IkReal x6829=(cj5*r00);
IkReal x6830=(cj5*r10);
IkReal x6831=(cj5*r20);
IkReal x6832=(r01*sj5);
IkReal x6833=((1.0)*x6826);
IkReal x6834=((1.0)*x6825);
evalcond[0]=(((x6825*x6828))+(((-1.0)*r22*x6833))+(((-1.0)*x6831*x6834)));
evalcond[1]=((((-1.0)*r02*x6834))+(((-1.0)*x6832*x6833))+((x6826*x6829)));
evalcond[2]=((((-1.0)*r12*x6834))+((x6826*x6830))+(((-1.0)*x6827*x6833)));
evalcond[3]=(sj0+(((-1.0)*r02*x6833))+((x6825*x6832))+(((-1.0)*x6829*x6834)));
evalcond[4]=((-1.0)+((x6826*x6831))+(((-1.0)*x6828*x6833))+(((-1.0)*r22*x6834)));
evalcond[5]=((((-1.0)*r12*x6833))+((x6825*x6827))+(((-1.0)*x6830*x6834))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.780794779163268)*px))+(((-2.28411607038807)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.28411607038807)*px))+(((-0.780794779163268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.780794779163268)*px))+(((-2.28411607038807)*py))))+IKsqr(((((-2.28411607038807)*px))+(((-0.780794779163268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.780794779163268)*px))+(((-2.28411607038807)*py))), ((((-2.28411607038807)*px))+(((-0.780794779163268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6835=IKsin(j0);
IkReal x6836=IKcos(j0);
evalcond[0]=((((0.134)*x6835))+(((-1.0)*px))+(((-0.392)*x6836)));
evalcond[1]=((((-0.134)*x6836))+(((-1.0)*py))+(((-0.392)*x6835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6837=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6837;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6837);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6838=cj5*cj5;
IkReal x6839=((1.0)*r21);
IkReal x6840=(cj5*sj5);
IkReal x6841=((1.0)*r20);
IkReal x6842=(((r01*r21))+(((-1.0)*r00*x6839*x6840))+(((-1.0)*r01*x6840*x6841))+(((-1.0)*r01*x6838*x6839))+((r00*r20*x6838))+((r02*r22)));
j4eval[0]=x6842;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6841)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6842);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6843=cj5*cj5;
IkReal x6844=(r21*sj5);
IkReal x6845=(r11*r21);
IkReal x6846=((1.0)*cj5*r20);
IkReal x6847=((((-1.0)*x6843*x6845))+(((-1.0)*cj5*r10*x6844))+((r12*r22))+x6845+((r10*r20*x6843))+(((-1.0)*r11*sj5*x6846)));
j4eval[0]=x6847;
j4eval[1]=((IKabs(((((-1.0)*sj0*x6846))+((sj0*x6844)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6847);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6848=cj5*cj5;
IkReal x6849=(r21*sj5);
IkReal x6850=(r11*r21);
IkReal x6851=((1.0)*cj5*r20);
CheckValue<IkReal> x6852 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x6849))+(((-1.0)*sj0*x6851)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6852.valid){
continue;
}
CheckValue<IkReal> x6853=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6848*x6850))+(((-1.0)*cj5*r10*x6849))+((r12*r22))+(((-1.0)*r11*sj5*x6851))+x6850+((r10*r20*x6848)))),-1);
if(!x6853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6852.value)+(((1.5707963267949)*(x6853.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6854=IKsin(j4);
IkReal x6855=IKcos(j4);
IkReal x6856=(r11*sj5);
IkReal x6857=(cj5*r00);
IkReal x6858=(cj5*r10);
IkReal x6859=(r21*sj5);
IkReal x6860=(cj5*r20);
IkReal x6861=(r01*sj5);
IkReal x6862=((1.0)*x6855);
IkReal x6863=((1.0)*x6854);
evalcond[0]=((((-1.0)*x6860*x6863))+(((-1.0)*r22*x6862))+((x6854*x6859)));
evalcond[1]=(((x6855*x6860))+(((-1.0)*r22*x6863))+(((-1.0)*x6859*x6862)));
evalcond[2]=((((-1.0)*x6857*x6863))+sj0+((x6854*x6861))+(((-1.0)*r02*x6862)));
evalcond[3]=(cj0+((x6855*x6857))+(((-1.0)*x6861*x6862))+(((-1.0)*r02*x6863)));
evalcond[4]=(sj0+((x6855*x6858))+(((-1.0)*r12*x6863))+(((-1.0)*x6856*x6862)));
evalcond[5]=((((-1.0)*r12*x6862))+(((-1.0)*x6858*x6863))+(((-1.0)*cj0))+((x6854*x6856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6864=cj5*cj5;
IkReal x6865=((1.0)*r21);
IkReal x6866=(cj5*sj5);
IkReal x6867=((1.0)*r20);
CheckValue<IkReal> x6868 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6867)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6868.valid){
continue;
}
CheckValue<IkReal> x6869=IKPowWithIntegerCheck(IKsign((((r00*r20*x6864))+((r01*r21))+(((-1.0)*r01*x6866*x6867))+(((-1.0)*r00*x6865*x6866))+((r02*r22))+(((-1.0)*r01*x6864*x6865)))),-1);
if(!x6869.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6868.value)+(((1.5707963267949)*(x6869.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6870=IKsin(j4);
IkReal x6871=IKcos(j4);
IkReal x6872=(r11*sj5);
IkReal x6873=(cj5*r00);
IkReal x6874=(cj5*r10);
IkReal x6875=(r21*sj5);
IkReal x6876=(cj5*r20);
IkReal x6877=(r01*sj5);
IkReal x6878=((1.0)*x6871);
IkReal x6879=((1.0)*x6870);
evalcond[0]=((((-1.0)*x6876*x6879))+((x6870*x6875))+(((-1.0)*r22*x6878)));
evalcond[1]=((((-1.0)*x6875*x6878))+(((-1.0)*r22*x6879))+((x6871*x6876)));
evalcond[2]=(sj0+((x6870*x6877))+(((-1.0)*r02*x6878))+(((-1.0)*x6873*x6879)));
evalcond[3]=((((-1.0)*x6877*x6878))+cj0+(((-1.0)*r02*x6879))+((x6871*x6873)));
evalcond[4]=(sj0+(((-1.0)*r12*x6879))+(((-1.0)*x6872*x6878))+((x6871*x6874)));
evalcond[5]=(((x6870*x6872))+(((-1.0)*x6874*x6879))+(((-1.0)*r12*x6878))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6880=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6880.valid){
continue;
}
CheckValue<IkReal> x6881 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6880.value)))+(x6881.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6882=IKsin(j4);
IkReal x6883=IKcos(j4);
IkReal x6884=(r11*sj5);
IkReal x6885=(cj5*r00);
IkReal x6886=(cj5*r10);
IkReal x6887=(r21*sj5);
IkReal x6888=(cj5*r20);
IkReal x6889=(r01*sj5);
IkReal x6890=((1.0)*x6883);
IkReal x6891=((1.0)*x6882);
evalcond[0]=((((-1.0)*x6888*x6891))+((x6882*x6887))+(((-1.0)*r22*x6890)));
evalcond[1]=((((-1.0)*r22*x6891))+((x6883*x6888))+(((-1.0)*x6887*x6890)));
evalcond[2]=(sj0+(((-1.0)*x6885*x6891))+((x6882*x6889))+(((-1.0)*r02*x6890)));
evalcond[3]=((((-1.0)*x6889*x6890))+cj0+(((-1.0)*r02*x6891))+((x6883*x6885)));
evalcond[4]=(sj0+(((-1.0)*r12*x6891))+(((-1.0)*x6884*x6890))+((x6883*x6886)));
evalcond[5]=((((-1.0)*x6886*x6891))+(((-1.0)*r12*x6890))+((x6882*x6884))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.19192641276835)*py))+(((0.195493438569105)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.19192641276835)*px))+(((-0.195493438569105)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.19192641276835)*py))+(((0.195493438569105)*px))))+IKsqr(((((1.19192641276835)*px))+(((-0.195493438569105)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.19192641276835)*py))+(((0.195493438569105)*px))), ((((1.19192641276835)*px))+(((-0.195493438569105)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6892=IKsin(j0);
IkReal x6893=IKcos(j0);
evalcond[0]=((((0.817)*x6893))+(((-1.0)*px))+(((0.134)*x6892)));
evalcond[1]=((((0.817)*x6892))+(((-1.0)*py))+(((-0.134)*x6893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6894=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6894;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6894);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6895=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6895;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6895);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6896=cj5*cj5;
IkReal x6897=((1.0)*r21);
IkReal x6898=(cj5*r20);
IkReal x6899=(((r00*r20*x6896))+((r01*r21))+(((-1.0)*r01*sj5*x6898))+((r02*r22))+(((-1.0)*cj5*r00*sj5*x6897))+(((-1.0)*r01*x6896*x6897)));
j4eval[0]=x6899;
j4eval[1]=IKsign(x6899);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*sj5*x6897))+((sj0*x6898))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6900=cj5*cj5;
IkReal x6901=((1.0)*r21);
IkReal x6902=(cj5*r20);
CheckValue<IkReal> x6903=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r00*sj5*x6901))+((r01*r21))+((r00*r20*x6900))+((r02*r22))+(((-1.0)*r01*x6900*x6901))+(((-1.0)*r01*sj5*x6902)))),-1);
if(!x6903.valid){
continue;
}
CheckValue<IkReal> x6904 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*sj5*x6901))+((sj0*x6902)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6903.value)))+(x6904.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6905=IKsin(j4);
IkReal x6906=IKcos(j4);
IkReal x6907=((1.0)*cj0);
IkReal x6908=(cj5*r00);
IkReal x6909=(r11*sj5);
IkReal x6910=(cj5*r10);
IkReal x6911=(r21*sj5);
IkReal x6912=(cj5*r20);
IkReal x6913=(r01*sj5);
IkReal x6914=((1.0)*x6906);
IkReal x6915=((1.0)*x6905);
evalcond[0]=((((-1.0)*x6912*x6915))+(((-1.0)*r22*x6914))+((x6905*x6911)));
evalcond[1]=((((-1.0)*x6911*x6914))+(((-1.0)*r22*x6915))+((x6906*x6912)));
evalcond[2]=((((-1.0)*x6908*x6915))+sj0+((x6905*x6913))+(((-1.0)*r02*x6914)));
evalcond[3]=((((-1.0)*x6910*x6915))+(((-1.0)*x6907))+(((-1.0)*r12*x6914))+((x6905*x6909)));
evalcond[4]=((((-1.0)*x6907))+(((-1.0)*r02*x6915))+((x6906*x6908))+(((-1.0)*x6913*x6914)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x6915))+(((-1.0)*x6909*x6914))+((x6906*x6910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6916=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6916.valid){
continue;
}
CheckValue<IkReal> x6917 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6916.value)))+(x6917.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6918=IKsin(j4);
IkReal x6919=IKcos(j4);
IkReal x6920=((1.0)*cj0);
IkReal x6921=(cj5*r00);
IkReal x6922=(r11*sj5);
IkReal x6923=(cj5*r10);
IkReal x6924=(r21*sj5);
IkReal x6925=(cj5*r20);
IkReal x6926=(r01*sj5);
IkReal x6927=((1.0)*x6919);
IkReal x6928=((1.0)*x6918);
evalcond[0]=((((-1.0)*r22*x6927))+(((-1.0)*x6925*x6928))+((x6918*x6924)));
evalcond[1]=((((-1.0)*r22*x6928))+(((-1.0)*x6924*x6927))+((x6919*x6925)));
evalcond[2]=(sj0+(((-1.0)*r02*x6927))+(((-1.0)*x6921*x6928))+((x6918*x6926)));
evalcond[3]=((((-1.0)*r12*x6927))+(((-1.0)*x6920))+(((-1.0)*x6923*x6928))+((x6918*x6922)));
evalcond[4]=((((-1.0)*r02*x6928))+((x6919*x6921))+(((-1.0)*x6920))+(((-1.0)*x6926*x6927)));
evalcond[5]=((((-1.0)*sj0))+((x6919*x6923))+(((-1.0)*r12*x6928))+(((-1.0)*x6922*x6927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6929=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6929.valid){
continue;
}
CheckValue<IkReal> x6930 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6929.value)))+(x6930.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6931=IKsin(j4);
IkReal x6932=IKcos(j4);
IkReal x6933=((1.0)*cj0);
IkReal x6934=(cj5*r00);
IkReal x6935=(r11*sj5);
IkReal x6936=(cj5*r10);
IkReal x6937=(r21*sj5);
IkReal x6938=(cj5*r20);
IkReal x6939=(r01*sj5);
IkReal x6940=((1.0)*x6932);
IkReal x6941=((1.0)*x6931);
evalcond[0]=((((-1.0)*r22*x6940))+(((-1.0)*x6938*x6941))+((x6931*x6937)));
evalcond[1]=(((x6932*x6938))+(((-1.0)*r22*x6941))+(((-1.0)*x6937*x6940)));
evalcond[2]=(sj0+(((-1.0)*r02*x6940))+(((-1.0)*x6934*x6941))+((x6931*x6939)));
evalcond[3]=((((-1.0)*r12*x6940))+(((-1.0)*x6933))+((x6931*x6935))+(((-1.0)*x6936*x6941)));
evalcond[4]=(((x6932*x6934))+(((-1.0)*r02*x6941))+(((-1.0)*x6939*x6940))+(((-1.0)*x6933)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x6941))+((x6932*x6936))+(((-1.0)*x6935*x6940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.73273825150958)*py))+(((7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.73273825150958)*px))+(((-7.03596744552376)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.73273825150958)*py))+(((7.03596744552376)*px))))+IKsqr(((((1.73273825150958)*px))+(((-7.03596744552376)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.73273825150958)*py))+(((7.03596744552376)*px))), ((((1.73273825150958)*px))+(((-7.03596744552376)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6942=IKsin(j0);
IkReal x6943=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.033)*x6943))+(((0.134)*x6942)));
evalcond[1]=((((-1.0)*py))+(((0.033)*x6942))+(((-0.134)*x6943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6944=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6944;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6944);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6945=cj5*cj5;
IkReal x6946=((1.0)*r21);
IkReal x6947=(cj5*sj5);
IkReal x6948=((1.0)*r20);
IkReal x6949=(((r00*r20*x6945))+((r01*r21))+(((-1.0)*r01*x6945*x6946))+(((-1.0)*r00*x6946*x6947))+(((-1.0)*r01*x6947*x6948))+((r02*r22)));
j4eval[0]=x6949;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6948)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6949);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6950=cj5*cj5;
IkReal x6951=(r21*sj5);
IkReal x6952=(r11*r21);
IkReal x6953=((1.0)*cj5*r20);
IkReal x6954=((((-1.0)*x6950*x6952))+(((-1.0)*cj5*r10*x6951))+((r12*r22))+(((-1.0)*r11*sj5*x6953))+x6952+((r10*r20*x6950)));
j4eval[0]=x6954;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x6953))+((sj0*x6951))))));
j4eval[2]=IKsign(x6954);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6955=cj5*cj5;
IkReal x6956=(r21*sj5);
IkReal x6957=(r11*r21);
IkReal x6958=((1.0)*cj5*r20);
CheckValue<IkReal> x6959=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x6956))+(((-1.0)*x6955*x6957))+((r12*r22))+(((-1.0)*r11*sj5*x6958))+x6957+((r10*r20*x6955)))),-1);
if(!x6959.valid){
continue;
}
CheckValue<IkReal> x6960 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6958))+((sj0*x6956)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6959.value)))+(x6960.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6961=IKsin(j4);
IkReal x6962=IKcos(j4);
IkReal x6963=(r11*sj5);
IkReal x6964=(cj5*r00);
IkReal x6965=(cj5*r10);
IkReal x6966=(r21*sj5);
IkReal x6967=(cj5*r20);
IkReal x6968=(r01*sj5);
IkReal x6969=((1.0)*x6962);
IkReal x6970=((1.0)*x6961);
evalcond[0]=(((x6961*x6966))+(((-1.0)*x6967*x6970))+(((-1.0)*r22*x6969)));
evalcond[1]=(((x6962*x6967))+(((-1.0)*x6966*x6969))+(((-1.0)*r22*x6970)));
evalcond[2]=((((-1.0)*r02*x6969))+sj0+(((-1.0)*x6964*x6970))+((x6961*x6968)));
evalcond[3]=(((x6962*x6964))+(((-1.0)*r02*x6970))+cj0+(((-1.0)*x6968*x6969)));
evalcond[4]=(((x6962*x6965))+sj0+(((-1.0)*r12*x6970))+(((-1.0)*x6963*x6969)));
evalcond[5]=((((-1.0)*x6965*x6970))+((x6961*x6963))+(((-1.0)*r12*x6969))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6971=cj5*cj5;
IkReal x6972=((1.0)*r21);
IkReal x6973=(cj5*sj5);
IkReal x6974=((1.0)*r20);
CheckValue<IkReal> x6975=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6972*x6973))+(((-1.0)*r01*x6973*x6974))+((r01*r21))+((r00*r20*x6971))+((r02*r22))+(((-1.0)*r01*x6971*x6972)))),-1);
if(!x6975.valid){
continue;
}
CheckValue<IkReal> x6976 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6974)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6976.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6975.value)))+(x6976.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6977=IKsin(j4);
IkReal x6978=IKcos(j4);
IkReal x6979=(r11*sj5);
IkReal x6980=(cj5*r00);
IkReal x6981=(cj5*r10);
IkReal x6982=(r21*sj5);
IkReal x6983=(cj5*r20);
IkReal x6984=(r01*sj5);
IkReal x6985=((1.0)*x6978);
IkReal x6986=((1.0)*x6977);
evalcond[0]=((((-1.0)*r22*x6985))+((x6977*x6982))+(((-1.0)*x6983*x6986)));
evalcond[1]=((((-1.0)*r22*x6986))+((x6978*x6983))+(((-1.0)*x6982*x6985)));
evalcond[2]=(sj0+((x6977*x6984))+(((-1.0)*x6980*x6986))+(((-1.0)*r02*x6985)));
evalcond[3]=(cj0+(((-1.0)*x6984*x6985))+((x6978*x6980))+(((-1.0)*r02*x6986)));
evalcond[4]=(sj0+(((-1.0)*r12*x6986))+(((-1.0)*x6979*x6985))+((x6978*x6981)));
evalcond[5]=((((-1.0)*r12*x6985))+(((-1.0)*x6981*x6986))+((x6977*x6979))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6987=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6987.valid){
continue;
}
CheckValue<IkReal> x6988 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6987.value)))+(x6988.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6989=IKsin(j4);
IkReal x6990=IKcos(j4);
IkReal x6991=(r11*sj5);
IkReal x6992=(cj5*r00);
IkReal x6993=(cj5*r10);
IkReal x6994=(r21*sj5);
IkReal x6995=(cj5*r20);
IkReal x6996=(r01*sj5);
IkReal x6997=((1.0)*x6990);
IkReal x6998=((1.0)*x6989);
evalcond[0]=((((-1.0)*r22*x6997))+(((-1.0)*x6995*x6998))+((x6989*x6994)));
evalcond[1]=((((-1.0)*r22*x6998))+((x6990*x6995))+(((-1.0)*x6994*x6997)));
evalcond[2]=(sj0+((x6989*x6996))+(((-1.0)*x6992*x6998))+(((-1.0)*r02*x6997)));
evalcond[3]=(cj0+(((-1.0)*x6996*x6997))+((x6990*x6992))+(((-1.0)*r02*x6998)));
evalcond[4]=((((-1.0)*r12*x6998))+sj0+((x6990*x6993))+(((-1.0)*x6991*x6997)));
evalcond[5]=((((-1.0)*x6993*x6998))+(((-1.0)*r12*x6997))+((x6989*x6991))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6999=((1.0)*sj5);
IkReal x7000=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x7000))+(((-1.0)*r10*x6999)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x6999))+(((-1.0)*r01*x7000)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7000))+(((-1.0)*r10*x6999))))+IKsqr(((((-1.0)*r00*x6999))+(((-1.0)*r01*x7000))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7000))+(((-1.0)*r10*x6999))), ((((-1.0)*r00*x6999))+(((-1.0)*r01*x7000))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7001=IKsin(j0);
IkReal x7002=IKcos(j0);
IkReal x7003=((0.1)*sj5);
IkReal x7004=(cj5*r11);
IkReal x7005=(cj5*r01);
IkReal x7006=((1.0)*sj5);
evalcond[0]=((((-1.0)*x7002))+(((-1.0)*x7005))+(((-1.0)*r00*x7006)));
evalcond[1]=((((-1.0)*x7004))+(((-1.0)*x7001))+(((-1.0)*r10*x7006)));
evalcond[2]=((((0.134)*x7001))+(((-0.1)*x7005))+(((-1.0)*r00*x7003))+(((-1.0)*px)));
evalcond[3]=((((-0.1)*x7004))+(((-1.0)*r10*x7003))+(((-0.134)*x7002))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7007=((1.0)*sj5);
IkReal x7008=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7007)));
j4eval[0]=x7008;
j4eval[1]=IKsign(x7008);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7007))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7009=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7009;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7009);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7010=r21*r21;
IkReal x7011=cj5*cj5;
IkReal x7012=(r21*sj5);
IkReal x7013=(cj5*r20);
IkReal x7014=(((x7010*x7011))+(((2.0)*x7012*x7013))+(((-1.0)*(r22*r22)))+(((-1.0)*x7011*(r20*r20)))+(((-1.0)*x7010)));
j4eval[0]=x7014;
j4eval[1]=((IKabs(r22))+(IKabs((x7012+(((-1.0)*x7013))))));
j4eval[2]=IKsign(x7014);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7015=r21*r21;
IkReal x7016=cj5*cj5;
IkReal x7017=(r21*sj5);
IkReal x7018=(cj5*r20);
CheckValue<IkReal> x7019=IKPowWithIntegerCheck(IKsign((((x7015*x7016))+(((-1.0)*x7016*(r20*r20)))+(((-1.0)*(r22*r22)))+(((2.0)*x7017*x7018))+(((-1.0)*x7015)))),-1);
if(!x7019.valid){
continue;
}
CheckValue<IkReal> x7020 = IKatan2WithCheck(IkReal(r22),IkReal((x7017+(((-1.0)*x7018)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7019.value)))+(x7020.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7021=IKsin(j4);
IkReal x7022=IKcos(j4);
IkReal x7023=(r11*sj5);
IkReal x7024=(r21*sj5);
IkReal x7025=(cj5*r00);
IkReal x7026=(cj5*r10);
IkReal x7027=(cj5*r20);
IkReal x7028=(r01*sj5);
IkReal x7029=((1.0)*x7022);
IkReal x7030=((1.0)*x7021);
evalcond[0]=((((-1.0)*r22*x7029))+(((-1.0)*x7027*x7030))+((x7021*x7024)));
evalcond[1]=((((-1.0)*r02*x7030))+((x7022*x7025))+(((-1.0)*x7028*x7029)));
evalcond[2]=((((-1.0)*r12*x7030))+((x7022*x7026))+(((-1.0)*x7023*x7029)));
evalcond[3]=(sj0+(((-1.0)*r02*x7029))+((x7021*x7028))+(((-1.0)*x7025*x7030)));
evalcond[4]=((-1.0)+(((-1.0)*x7024*x7029))+(((-1.0)*r22*x7030))+((x7022*x7027)));
evalcond[5]=((((-1.0)*r12*x7029))+(((-1.0)*x7026*x7030))+((x7021*x7023))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7031=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7031.valid){
continue;
}
CheckValue<IkReal> x7032 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7031.value)))+(x7032.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7033=IKsin(j4);
IkReal x7034=IKcos(j4);
IkReal x7035=(r11*sj5);
IkReal x7036=(r21*sj5);
IkReal x7037=(cj5*r00);
IkReal x7038=(cj5*r10);
IkReal x7039=(cj5*r20);
IkReal x7040=(r01*sj5);
IkReal x7041=((1.0)*x7034);
IkReal x7042=((1.0)*x7033);
evalcond[0]=((((-1.0)*r22*x7041))+((x7033*x7036))+(((-1.0)*x7039*x7042)));
evalcond[1]=((((-1.0)*r02*x7042))+(((-1.0)*x7040*x7041))+((x7034*x7037)));
evalcond[2]=((((-1.0)*r12*x7042))+(((-1.0)*x7035*x7041))+((x7034*x7038)));
evalcond[3]=(sj0+(((-1.0)*r02*x7041))+(((-1.0)*x7037*x7042))+((x7033*x7040)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7042))+(((-1.0)*x7036*x7041))+((x7034*x7039)));
evalcond[5]=((((-1.0)*r12*x7041))+((x7033*x7035))+(((-1.0)*x7038*x7042))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7043=((1.0)*sj5);
CheckValue<IkReal> x7044=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7043)))),-1);
if(!x7044.valid){
continue;
}
CheckValue<IkReal> x7045 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7043))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7044.value)))+(x7045.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7046=IKsin(j4);
IkReal x7047=IKcos(j4);
IkReal x7048=(r11*sj5);
IkReal x7049=(r21*sj5);
IkReal x7050=(cj5*r00);
IkReal x7051=(cj5*r10);
IkReal x7052=(cj5*r20);
IkReal x7053=(r01*sj5);
IkReal x7054=((1.0)*x7047);
IkReal x7055=((1.0)*x7046);
evalcond[0]=(((x7046*x7049))+(((-1.0)*r22*x7054))+(((-1.0)*x7052*x7055)));
evalcond[1]=((((-1.0)*x7053*x7054))+((x7047*x7050))+(((-1.0)*r02*x7055)));
evalcond[2]=((((-1.0)*x7048*x7054))+((x7047*x7051))+(((-1.0)*r12*x7055)));
evalcond[3]=(sj0+((x7046*x7053))+(((-1.0)*x7050*x7055))+(((-1.0)*r02*x7054)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7055))+(((-1.0)*x7049*x7054))+((x7047*x7052)));
evalcond[5]=(((x7046*x7048))+(((-1.0)*r12*x7054))+(((-1.0)*x7051*x7055))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.780794779163268)*px))+(((-2.28411607038807)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.28411607038807)*px))+(((-0.780794779163268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.780794779163268)*px))+(((-2.28411607038807)*py))))+IKsqr(((((-2.28411607038807)*px))+(((-0.780794779163268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.780794779163268)*px))+(((-2.28411607038807)*py))), ((((-2.28411607038807)*px))+(((-0.780794779163268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7056=IKsin(j0);
IkReal x7057=IKcos(j0);
evalcond[0]=((((-0.392)*x7057))+(((-1.0)*px))+(((0.134)*x7056)));
evalcond[1]=((((-0.134)*x7057))+(((-0.392)*x7056))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7058=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7058;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7058);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7059=cj5*cj5;
IkReal x7060=((1.0)*r21);
IkReal x7061=(cj5*sj5);
IkReal x7062=((1.0)*r20);
IkReal x7063=(((r00*r20*x7059))+(((-1.0)*r01*x7059*x7060))+(((-1.0)*r01*x7061*x7062))+((r01*r21))+(((-1.0)*r00*x7060*x7061))+((r02*r22)));
j4eval[0]=x7063;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7062))))));
j4eval[2]=IKsign(x7063);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7064=cj5*cj5;
IkReal x7065=(r21*sj5);
IkReal x7066=(r11*r21);
IkReal x7067=((1.0)*cj5*r20);
IkReal x7068=(x7066+(((-1.0)*x7064*x7066))+((r12*r22))+(((-1.0)*r11*sj5*x7067))+(((-1.0)*cj5*r10*x7065))+((r10*r20*x7064)));
j4eval[0]=x7068;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x7067))+((sj0*x7065))))));
j4eval[2]=IKsign(x7068);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7069=cj5*cj5;
IkReal x7070=(r21*sj5);
IkReal x7071=(r11*r21);
IkReal x7072=((1.0)*cj5*r20);
CheckValue<IkReal> x7073 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x7072))+((sj0*x7070)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7073.valid){
continue;
}
CheckValue<IkReal> x7074=IKPowWithIntegerCheck(IKsign((x7071+((r12*r22))+(((-1.0)*cj5*r10*x7070))+(((-1.0)*x7069*x7071))+(((-1.0)*r11*sj5*x7072))+((r10*r20*x7069)))),-1);
if(!x7074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7073.value)+(((1.5707963267949)*(x7074.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7075=IKsin(j4);
IkReal x7076=IKcos(j4);
IkReal x7077=(r11*sj5);
IkReal x7078=(cj5*r00);
IkReal x7079=(cj5*r10);
IkReal x7080=(r21*sj5);
IkReal x7081=(cj5*r20);
IkReal x7082=(r01*sj5);
IkReal x7083=((1.0)*x7076);
IkReal x7084=((1.0)*x7075);
evalcond[0]=(((x7075*x7080))+(((-1.0)*r22*x7083))+(((-1.0)*x7081*x7084)));
evalcond[1]=(((x7076*x7081))+(((-1.0)*r22*x7084))+(((-1.0)*x7080*x7083)));
evalcond[2]=(sj0+((x7075*x7082))+(((-1.0)*r02*x7083))+(((-1.0)*x7078*x7084)));
evalcond[3]=(cj0+(((-1.0)*x7082*x7083))+((x7076*x7078))+(((-1.0)*r02*x7084)));
evalcond[4]=(sj0+(((-1.0)*r12*x7084))+((x7076*x7079))+(((-1.0)*x7077*x7083)));
evalcond[5]=((((-1.0)*x7079*x7084))+(((-1.0)*r12*x7083))+((x7075*x7077))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7085=cj5*cj5;
IkReal x7086=((1.0)*r21);
IkReal x7087=(cj5*sj5);
IkReal x7088=((1.0)*r20);
CheckValue<IkReal> x7089 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7088)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7089.valid){
continue;
}
CheckValue<IkReal> x7090=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7085*x7086))+((r01*r21))+(((-1.0)*r00*x7086*x7087))+((r00*r20*x7085))+((r02*r22))+(((-1.0)*r01*x7087*x7088)))),-1);
if(!x7090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7089.value)+(((1.5707963267949)*(x7090.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7091=IKsin(j4);
IkReal x7092=IKcos(j4);
IkReal x7093=(r11*sj5);
IkReal x7094=(cj5*r00);
IkReal x7095=(cj5*r10);
IkReal x7096=(r21*sj5);
IkReal x7097=(cj5*r20);
IkReal x7098=(r01*sj5);
IkReal x7099=((1.0)*x7092);
IkReal x7100=((1.0)*x7091);
evalcond[0]=((((-1.0)*r22*x7099))+((x7091*x7096))+(((-1.0)*x7097*x7100)));
evalcond[1]=(((x7092*x7097))+(((-1.0)*x7096*x7099))+(((-1.0)*r22*x7100)));
evalcond[2]=(sj0+(((-1.0)*x7094*x7100))+((x7091*x7098))+(((-1.0)*r02*x7099)));
evalcond[3]=(((x7092*x7094))+cj0+(((-1.0)*x7098*x7099))+(((-1.0)*r02*x7100)));
evalcond[4]=((((-1.0)*x7093*x7099))+sj0+((x7092*x7095))+(((-1.0)*r12*x7100)));
evalcond[5]=((((-1.0)*r12*x7099))+(((-1.0)*x7095*x7100))+((x7091*x7093))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7101=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7101.valid){
continue;
}
CheckValue<IkReal> x7102 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7101.value)))+(x7102.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7103=IKsin(j4);
IkReal x7104=IKcos(j4);
IkReal x7105=(r11*sj5);
IkReal x7106=(cj5*r00);
IkReal x7107=(cj5*r10);
IkReal x7108=(r21*sj5);
IkReal x7109=(cj5*r20);
IkReal x7110=(r01*sj5);
IkReal x7111=((1.0)*x7104);
IkReal x7112=((1.0)*x7103);
evalcond[0]=((((-1.0)*r22*x7111))+(((-1.0)*x7109*x7112))+((x7103*x7108)));
evalcond[1]=((((-1.0)*r22*x7112))+((x7104*x7109))+(((-1.0)*x7108*x7111)));
evalcond[2]=(sj0+(((-1.0)*r02*x7111))+(((-1.0)*x7106*x7112))+((x7103*x7110)));
evalcond[3]=(cj0+(((-1.0)*x7110*x7111))+(((-1.0)*r02*x7112))+((x7104*x7106)));
evalcond[4]=(sj0+(((-1.0)*r12*x7112))+((x7104*x7107))+(((-1.0)*x7105*x7111)));
evalcond[5]=((((-1.0)*x7107*x7112))+(((-1.0)*r12*x7111))+((x7103*x7105))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7113=IKsin(j0);
IkReal x7114=IKcos(j0);
IkReal x7115=((0.1)*sj5);
IkReal x7116=(cj5*r11);
IkReal x7117=(cj5*r01);
IkReal x7118=((1.0)*sj5);
evalcond[0]=(x7114+(((-1.0)*x7117))+(((-1.0)*r00*x7118)));
evalcond[1]=(x7113+(((-1.0)*x7116))+(((-1.0)*r10*x7118)));
evalcond[2]=((((-0.1)*x7117))+(((-1.0)*px))+(((0.134)*x7113))+(((-1.0)*r00*x7115)));
evalcond[3]=((((-0.1)*x7116))+(((-1.0)*r10*x7115))+(((-0.134)*x7114))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7119=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7119;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7119);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7120=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7120;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7120);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7121=cj5*cj5;
IkReal x7122=r21*r21;
IkReal x7123=(r21*sj5);
IkReal x7124=(cj5*r20);
IkReal x7125=(x7122+(r22*r22)+((x7121*(r20*r20)))+(((-2.0)*x7123*x7124))+(((-1.0)*x7121*x7122)));
j4eval[0]=x7125;
j4eval[1]=IKsign(x7125);
j4eval[2]=((IKabs(r22))+(IKabs((x7123+(((-1.0)*x7124))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7126=cj5*cj5;
IkReal x7127=r21*r21;
IkReal x7128=(r21*sj5);
IkReal x7129=(cj5*r20);
CheckValue<IkReal> x7130 = IKatan2WithCheck(IkReal(r22),IkReal((x7128+(((-1.0)*x7129)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7130.valid){
continue;
}
CheckValue<IkReal> x7131=IKPowWithIntegerCheck(IKsign((x7127+(r22*r22)+((x7126*(r20*r20)))+(((-2.0)*x7128*x7129))+(((-1.0)*x7126*x7127)))),-1);
if(!x7131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7130.value)+(((1.5707963267949)*(x7131.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7132=IKsin(j4);
IkReal x7133=IKcos(j4);
IkReal x7134=(r11*sj5);
IkReal x7135=(r21*sj5);
IkReal x7136=(cj5*r00);
IkReal x7137=(cj5*r10);
IkReal x7138=(cj5*r20);
IkReal x7139=(r01*sj5);
IkReal x7140=((1.0)*x7133);
IkReal x7141=((1.0)*x7132);
evalcond[0]=((((-1.0)*r22*x7140))+(((-1.0)*x7138*x7141))+((x7132*x7135)));
evalcond[1]=(((x7133*x7136))+(((-1.0)*x7139*x7140))+(((-1.0)*r02*x7141)));
evalcond[2]=(((x7133*x7137))+(((-1.0)*x7134*x7140))+(((-1.0)*r12*x7141)));
evalcond[3]=(sj0+(((-1.0)*x7136*x7141))+((x7132*x7139))+(((-1.0)*r02*x7140)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7141))+((x7133*x7138))+(((-1.0)*x7135*x7140)));
evalcond[5]=(((x7132*x7134))+(((-1.0)*x7137*x7141))+(((-1.0)*r12*x7140))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7142=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7142.valid){
continue;
}
CheckValue<IkReal> x7143 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7142.value)))+(x7143.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7144=IKsin(j4);
IkReal x7145=IKcos(j4);
IkReal x7146=(r11*sj5);
IkReal x7147=(r21*sj5);
IkReal x7148=(cj5*r00);
IkReal x7149=(cj5*r10);
IkReal x7150=(cj5*r20);
IkReal x7151=(r01*sj5);
IkReal x7152=((1.0)*x7145);
IkReal x7153=((1.0)*x7144);
evalcond[0]=((((-1.0)*r22*x7152))+((x7144*x7147))+(((-1.0)*x7150*x7153)));
evalcond[1]=((((-1.0)*x7151*x7152))+((x7145*x7148))+(((-1.0)*r02*x7153)));
evalcond[2]=((((-1.0)*x7146*x7152))+(((-1.0)*r12*x7153))+((x7145*x7149)));
evalcond[3]=(sj0+(((-1.0)*x7148*x7153))+((x7144*x7151))+(((-1.0)*r02*x7152)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7153))+((x7145*x7150))+(((-1.0)*x7147*x7152)));
evalcond[5]=((((-1.0)*r12*x7152))+((x7144*x7146))+(((-1.0)*x7149*x7153))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7154 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7154.valid){
continue;
}
CheckValue<IkReal> x7155=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7154.value)+(((1.5707963267949)*(x7155.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7156=IKsin(j4);
IkReal x7157=IKcos(j4);
IkReal x7158=(r11*sj5);
IkReal x7159=(r21*sj5);
IkReal x7160=(cj5*r00);
IkReal x7161=(cj5*r10);
IkReal x7162=(cj5*r20);
IkReal x7163=(r01*sj5);
IkReal x7164=((1.0)*x7157);
IkReal x7165=((1.0)*x7156);
evalcond[0]=((((-1.0)*r22*x7164))+((x7156*x7159))+(((-1.0)*x7162*x7165)));
evalcond[1]=((((-1.0)*r02*x7165))+(((-1.0)*x7163*x7164))+((x7157*x7160)));
evalcond[2]=((((-1.0)*x7158*x7164))+((x7157*x7161))+(((-1.0)*r12*x7165)));
evalcond[3]=((((-1.0)*r02*x7164))+sj0+(((-1.0)*x7160*x7165))+((x7156*x7163)));
evalcond[4]=((1.0)+(((-1.0)*x7159*x7164))+(((-1.0)*r22*x7165))+((x7157*x7162)));
evalcond[5]=((((-1.0)*x7161*x7165))+((x7156*x7158))+(((-1.0)*r12*x7164))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.780794779163268)*px))+(((2.28411607038807)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.28411607038807)*px))+(((-0.780794779163268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.780794779163268)*px))+(((2.28411607038807)*py))))+IKsqr(((((2.28411607038807)*px))+(((-0.780794779163268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.780794779163268)*px))+(((2.28411607038807)*py))), ((((2.28411607038807)*px))+(((-0.780794779163268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7166=IKsin(j0);
IkReal x7167=IKcos(j0);
evalcond[0]=((((0.134)*x7166))+(((-1.0)*px))+(((0.392)*x7167)));
evalcond[1]=((((-1.0)*py))+(((-0.134)*x7167))+(((0.392)*x7166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7168=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7168;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7168);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7169=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7169;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7169);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7170=cj5*cj5;
IkReal x7171=((1.0)*r21);
IkReal x7172=(cj5*r20);
IkReal x7173=((((-1.0)*r01*x7170*x7171))+((r01*r21))+((r00*r20*x7170))+(((-1.0)*cj5*r00*sj5*x7171))+((r02*r22))+(((-1.0)*r01*sj5*x7172)));
j4eval[0]=x7173;
j4eval[1]=IKsign(x7173);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7172))+(((-1.0)*sj0*sj5*x7171))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7174=cj5*cj5;
IkReal x7175=((1.0)*r21);
IkReal x7176=(cj5*r20);
CheckValue<IkReal> x7177 = IKatan2WithCheck(IkReal((((sj0*x7176))+(((-1.0)*sj0*sj5*x7175)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7177.valid){
continue;
}
CheckValue<IkReal> x7178=IKPowWithIntegerCheck(IKsign((((r01*r21))+((r00*r20*x7174))+(((-1.0)*cj5*r00*sj5*x7175))+((r02*r22))+(((-1.0)*r01*x7174*x7175))+(((-1.0)*r01*sj5*x7176)))),-1);
if(!x7178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7177.value)+(((1.5707963267949)*(x7178.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7179=IKsin(j4);
IkReal x7180=IKcos(j4);
IkReal x7181=((1.0)*cj0);
IkReal x7182=(cj5*r00);
IkReal x7183=(r11*sj5);
IkReal x7184=(cj5*r10);
IkReal x7185=(r21*sj5);
IkReal x7186=(cj5*r20);
IkReal x7187=(r01*sj5);
IkReal x7188=((1.0)*x7180);
IkReal x7189=((1.0)*x7179);
evalcond[0]=(((x7179*x7185))+(((-1.0)*x7186*x7189))+(((-1.0)*r22*x7188)));
evalcond[1]=((((-1.0)*x7185*x7188))+((x7180*x7186))+(((-1.0)*r22*x7189)));
evalcond[2]=(sj0+((x7179*x7187))+(((-1.0)*x7182*x7189))+(((-1.0)*r02*x7188)));
evalcond[3]=(((x7179*x7183))+(((-1.0)*x7184*x7189))+(((-1.0)*x7181))+(((-1.0)*r12*x7188)));
evalcond[4]=((((-1.0)*x7187*x7188))+(((-1.0)*x7181))+((x7180*x7182))+(((-1.0)*r02*x7189)));
evalcond[5]=((((-1.0)*sj0))+((x7180*x7184))+(((-1.0)*x7183*x7188))+(((-1.0)*r12*x7189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7190=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7190.valid){
continue;
}
CheckValue<IkReal> x7191 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7190.value)))+(x7191.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7192=IKsin(j4);
IkReal x7193=IKcos(j4);
IkReal x7194=((1.0)*cj0);
IkReal x7195=(cj5*r00);
IkReal x7196=(r11*sj5);
IkReal x7197=(cj5*r10);
IkReal x7198=(r21*sj5);
IkReal x7199=(cj5*r20);
IkReal x7200=(r01*sj5);
IkReal x7201=((1.0)*x7193);
IkReal x7202=((1.0)*x7192);
evalcond[0]=((((-1.0)*x7199*x7202))+((x7192*x7198))+(((-1.0)*r22*x7201)));
evalcond[1]=((((-1.0)*x7198*x7201))+((x7193*x7199))+(((-1.0)*r22*x7202)));
evalcond[2]=(sj0+(((-1.0)*x7195*x7202))+((x7192*x7200))+(((-1.0)*r02*x7201)));
evalcond[3]=((((-1.0)*x7194))+(((-1.0)*x7197*x7202))+((x7192*x7196))+(((-1.0)*r12*x7201)));
evalcond[4]=((((-1.0)*x7194))+((x7193*x7195))+(((-1.0)*x7200*x7201))+(((-1.0)*r02*x7202)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7196*x7201))+((x7193*x7197))+(((-1.0)*r12*x7202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7203=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7203.valid){
continue;
}
CheckValue<IkReal> x7204 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7203.value)))+(x7204.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7205=IKsin(j4);
IkReal x7206=IKcos(j4);
IkReal x7207=((1.0)*cj0);
IkReal x7208=(cj5*r00);
IkReal x7209=(r11*sj5);
IkReal x7210=(cj5*r10);
IkReal x7211=(r21*sj5);
IkReal x7212=(cj5*r20);
IkReal x7213=(r01*sj5);
IkReal x7214=((1.0)*x7206);
IkReal x7215=((1.0)*x7205);
evalcond[0]=((((-1.0)*x7212*x7215))+((x7205*x7211))+(((-1.0)*r22*x7214)));
evalcond[1]=(((x7206*x7212))+(((-1.0)*x7211*x7214))+(((-1.0)*r22*x7215)));
evalcond[2]=(sj0+((x7205*x7213))+(((-1.0)*r02*x7214))+(((-1.0)*x7208*x7215)));
evalcond[3]=((((-1.0)*r12*x7214))+((x7205*x7209))+(((-1.0)*x7210*x7215))+(((-1.0)*x7207)));
evalcond[4]=((((-1.0)*x7213*x7214))+((x7206*x7208))+(((-1.0)*r02*x7215))+(((-1.0)*x7207)));
evalcond[5]=((((-1.0)*sj0))+((x7206*x7210))+(((-1.0)*r12*x7215))+(((-1.0)*x7209*x7214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7216=cj1*cj1;
IkReal x7217=(cj1*sj2);
IkReal x7218=((500.0)*py);
IkReal x7219=(cj2*sj2);
IkReal x7220=(cj5*r01);
IkReal x7221=(cj2*sj1);
IkReal x7222=(cj1*sj1);
IkReal x7223=(r00*sj5);
IkReal x7224=((50.0)*r10*sj5);
IkReal x7225=((50.0)*cj5*r11);
CheckValue<IkReal> x7226=IKPowWithIntegerCheck(((((196.0)*x7219))+(((-392.0)*x7216*x7219))+(((-212.5)*cj1*x7221))+(((-392.0)*cj1*cj2*x7221))+(((-212.5)*sj2*x7216))+(((196.0)*x7222))),-1);
if(!x7226.valid){
continue;
}
CheckValue<IkReal> x7227=IKPowWithIntegerCheck((x7217+x7221),-1);
if(!x7227.valid){
continue;
}
if( IKabs(((x7226.value)*((((x7221*x7225))+((x7221*x7224))+((x7218*x7221))+(((67.0)*x7223))+(((67.0)*x7220))+((x7217*x7225))+((x7217*x7224))+((x7217*x7218)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7227.value)*((x7220+x7223)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7226.value)*((((x7221*x7225))+((x7221*x7224))+((x7218*x7221))+(((67.0)*x7223))+(((67.0)*x7220))+((x7217*x7225))+((x7217*x7224))+((x7217*x7218))))))+IKsqr(((x7227.value)*((x7220+x7223))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7226.value)*((((x7221*x7225))+((x7221*x7224))+((x7218*x7221))+(((67.0)*x7223))+(((67.0)*x7220))+((x7217*x7225))+((x7217*x7224))+((x7217*x7218))))), ((x7227.value)*((x7220+x7223))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7228=IKcos(j0);
IkReal x7229=IKsin(j0);
IkReal x7230=((0.1)*sj5);
IkReal x7231=(sj1*sj2);
IkReal x7232=(cj5*r11);
IkReal x7233=(cj1*cj2);
IkReal x7234=(cj2*sj1);
IkReal x7235=((1.0)*sj5);
IkReal x7236=(cj5*r01);
IkReal x7237=((0.425)*cj1);
IkReal x7238=(cj1*sj2);
IkReal x7239=((0.392)*x7229);
IkReal x7240=((0.392)*x7228);
evalcond[0]=(((x7228*x7234))+((x7228*x7238))+(((-1.0)*x7236))+(((-1.0)*r00*x7235)));
evalcond[1]=((((-1.0)*r10*x7235))+((x7229*x7234))+((x7229*x7238))+(((-1.0)*x7232)));
evalcond[2]=((((-1.0)*x7233*x7240))+(((-1.0)*x7228*x7237))+((x7231*x7240))+(((-0.1)*x7236))+(((-1.0)*px))+(((0.134)*x7229))+(((-1.0)*r00*x7230)));
evalcond[3]=((((-1.0)*r10*x7230))+(((-0.134)*x7228))+((x7231*x7239))+(((-1.0)*x7229*x7237))+(((-0.1)*x7232))+(((-1.0)*py))+(((-1.0)*x7233*x7239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7241=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7241;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7241);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7242=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7242;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7242);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7243=((1.0)*cj5);
IkReal x7244=((((-1.0)*r21*x7243))+(((-1.0)*r20*sj5)));
j4eval[0]=x7244;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x7243))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x7243))))));
j4eval[2]=IKsign(x7244);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7245=((-1.0)*r20);
IkReal x7247 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7247)==0){
continue;
}
IkReal x7246=pow(x7247,-0.5);
CheckValue<IkReal> x7248 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7245),IKFAST_ATAN2_MAGTHRESH);
if(!x7248.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7248.value));
IkReal gconst133=(r21*x7246);
IkReal gconst134=(x7245*x7246);
CheckValue<IkReal> x7249 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7249.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7249.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7250=((-1.0)*r20);
IkReal x7251=x7246;
CheckValue<IkReal> x7253 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7250),IKFAST_ATAN2_MAGTHRESH);
if(!x7253.valid){
continue;
}
IkReal x7252=((-1.0)*(x7253.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7252;
IkReal gconst132=x7252;
IkReal gconst133=(r21*x7251);
IkReal gconst134=(x7250*x7251);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7254=((-1.0)*r20);
IkReal x7255=x7246;
CheckValue<IkReal> x7257 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7254),IKFAST_ATAN2_MAGTHRESH);
if(!x7257.valid){
continue;
}
IkReal x7256=((-1.0)*(x7257.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7256;
IkReal gconst132=x7256;
IkReal gconst133=(r21*x7255);
IkReal gconst134=(x7254*x7255);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7258=((-1.0)*r20);
IkReal x7259=x7246;
CheckValue<IkReal> x7261 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7258),IKFAST_ATAN2_MAGTHRESH);
if(!x7261.valid){
continue;
}
IkReal x7260=((-1.0)*(x7261.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7260;
IkReal gconst132=x7260;
IkReal gconst133=(r21*x7259);
IkReal gconst134=(x7258*x7259);
IkReal x7262=r22*r22;
CheckValue<IkReal> x7265=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7262))),-1);
if(!x7265.valid){
continue;
}
IkReal x7263=x7265.value;
IkReal x7264=(x7262+(((2.0)*x7263*(r20*r20)*(r21*r21)))+((x7263*(r21*r21*r21*r21)))+((x7263*(r20*r20*r20*r20))));
j4eval[0]=x7264;
j4eval[1]=IKsign(x7264);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7266=(gconst133*r21);
IkReal x7267=(cj1*sj2);
IkReal x7268=(gconst134*r20);
IkReal x7269=(cj2*sj1);
CheckValue<IkReal> x7270=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7266*x7266)+(((-2.0)*x7266*x7268))+(x7268*x7268))),-1);
if(!x7270.valid){
continue;
}
CheckValue<IkReal> x7271 = IKatan2WithCheck(IkReal((((r22*x7269))+((r22*x7267)))),IkReal(((((-1.0)*x7268*x7269))+(((-1.0)*x7267*x7268))+((x7266*x7269))+((x7266*x7267)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7270.value)))+(x7271.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7272=IKsin(j4);
IkReal x7273=IKcos(j4);
IkReal x7274=(cj1*cj2);
IkReal x7275=(gconst133*r11);
IkReal x7276=(gconst133*r21);
IkReal x7277=(gconst133*r01);
IkReal x7278=((1.0)*cj0);
IkReal x7279=(sj1*sj2);
IkReal x7280=((1.0)*x7273);
IkReal x7281=(gconst134*x7273);
IkReal x7282=((1.0)*x7272);
evalcond[0]=((((-1.0)*gconst134*r20*x7282))+((x7272*x7276))+(((-1.0)*r22*x7280)));
evalcond[1]=(sj0+((x7272*x7277))+(((-1.0)*gconst134*r00*x7282))+(((-1.0)*r02*x7280)));
evalcond[2]=((((-1.0)*gconst134*r10*x7282))+(((-1.0)*r12*x7280))+((x7272*x7275))+(((-1.0)*x7278)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7276*x7280))+((r20*x7281))+(((-1.0)*r22*x7282)));
evalcond[4]=((((-1.0)*x7277*x7280))+(((-1.0)*x7278*x7279))+((r00*x7281))+(((-1.0)*r02*x7282))+((cj0*x7274)));
evalcond[5]=((((-1.0)*sj0*x7279))+(((-1.0)*r12*x7282))+(((-1.0)*x7275*x7280))+((r10*x7281))+((sj0*x7274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7283=IKPowWithIntegerCheck(IKsign((((gconst134*r01))+((gconst133*r00)))),-1);
if(!x7283.valid){
continue;
}
CheckValue<IkReal> x7284 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*gconst134*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7283.value)))+(x7284.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7285=IKsin(j4);
IkReal x7286=IKcos(j4);
IkReal x7287=(cj1*cj2);
IkReal x7288=(gconst133*r11);
IkReal x7289=(gconst133*r21);
IkReal x7290=(gconst133*r01);
IkReal x7291=((1.0)*cj0);
IkReal x7292=(sj1*sj2);
IkReal x7293=((1.0)*x7286);
IkReal x7294=(gconst134*x7286);
IkReal x7295=((1.0)*x7285);
evalcond[0]=((((-1.0)*r22*x7293))+(((-1.0)*gconst134*r20*x7295))+((x7285*x7289)));
evalcond[1]=(sj0+((x7285*x7290))+(((-1.0)*gconst134*r00*x7295))+(((-1.0)*r02*x7293)));
evalcond[2]=((((-1.0)*x7291))+((x7285*x7288))+(((-1.0)*r12*x7293))+(((-1.0)*gconst134*r10*x7295)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7295))+(((-1.0)*x7289*x7293))+((cj1*sj2))+((r20*x7294)));
evalcond[4]=((((-1.0)*x7291*x7292))+(((-1.0)*x7290*x7293))+((cj0*x7287))+(((-1.0)*r02*x7295))+((r00*x7294)));
evalcond[5]=((((-1.0)*sj0*x7292))+(((-1.0)*x7288*x7293))+((sj0*x7287))+((r10*x7294))+(((-1.0)*r12*x7295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7296 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst134*r20*sj0))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7296.valid){
continue;
}
CheckValue<IkReal> x7297=IKPowWithIntegerCheck(IKsign((((gconst134*r11))+((gconst133*r10)))),-1);
if(!x7297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7296.value)+(((1.5707963267949)*(x7297.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7298=IKsin(j4);
IkReal x7299=IKcos(j4);
IkReal x7300=(cj1*cj2);
IkReal x7301=(gconst133*r11);
IkReal x7302=(gconst133*r21);
IkReal x7303=(gconst133*r01);
IkReal x7304=((1.0)*cj0);
IkReal x7305=(sj1*sj2);
IkReal x7306=((1.0)*x7299);
IkReal x7307=(gconst134*x7299);
IkReal x7308=((1.0)*x7298);
evalcond[0]=((((-1.0)*gconst134*r20*x7308))+(((-1.0)*r22*x7306))+((x7298*x7302)));
evalcond[1]=((((-1.0)*r02*x7306))+sj0+(((-1.0)*gconst134*r00*x7308))+((x7298*x7303)));
evalcond[2]=((((-1.0)*r12*x7306))+(((-1.0)*gconst134*r10*x7308))+(((-1.0)*x7304))+((x7298*x7301)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7302*x7306))+((r20*x7307))+(((-1.0)*r22*x7308)));
evalcond[4]=((((-1.0)*r02*x7308))+(((-1.0)*x7303*x7306))+((r00*x7307))+(((-1.0)*x7304*x7305))+((cj0*x7300)));
evalcond[5]=(((r10*x7307))+(((-1.0)*x7301*x7306))+((sj0*x7300))+(((-1.0)*r12*x7308))+(((-1.0)*sj0*x7305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7309=((-1.0)*r21);
IkReal x7311 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7311)==0){
continue;
}
IkReal x7310=pow(x7311,-0.5);
CheckValue<IkReal> x7312 = IKatan2WithCheck(IkReal(x7309),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7312.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7312.value))));
IkReal gconst136=(x7309*x7310);
IkReal gconst137=((1.0)*r20*x7310);
CheckValue<IkReal> x7313 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7313.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7313.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7314=((-1.0)*r21);
CheckValue<IkReal> x7317 = IKatan2WithCheck(IkReal(x7314),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7317.valid){
continue;
}
IkReal x7315=((1.0)*(x7317.value));
IkReal x7316=x7310;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7315)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7315)));
IkReal gconst136=(x7314*x7316);
IkReal gconst137=((1.0)*r20*x7316);
IkReal x7318=r22*r22;
IkReal x7319=((1.0)*x7318);
CheckValue<IkReal> x7323=IKPowWithIntegerCheck(((-1.0)+x7318),-1);
if(!x7323.valid){
continue;
}
IkReal x7320=x7323.value;
if((((1.0)+(((-1.0)*x7319)))) < -0.00001)
continue;
IkReal x7321=IKsqrt(((1.0)+(((-1.0)*x7319))));
IkReal x7322=(sj0*x7320*x7321);
j4eval[0]=((IKabs((x7322+(((-1.0)*x7319*x7322)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7324=((-1.0)*r21);
CheckValue<IkReal> x7327 = IKatan2WithCheck(IkReal(x7324),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7327.valid){
continue;
}
IkReal x7325=((1.0)*(x7327.value));
IkReal x7326=x7310;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7325)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7325)));
IkReal gconst136=(x7324*x7326);
IkReal gconst137=((1.0)*r20*x7326);
IkReal x7328=r22*r22;
IkReal x7329=((1.0)*x7328);
CheckValue<IkReal> x7333=IKPowWithIntegerCheck(((-1.0)+x7328),-1);
if(!x7333.valid){
continue;
}
IkReal x7330=x7333.value;
if((((1.0)+(((-1.0)*x7329)))) < -0.00001)
continue;
IkReal x7331=IKsqrt(((1.0)+(((-1.0)*x7329))));
IkReal x7332=(cj0*x7330*x7331);
j4eval[0]=((IKabs((x7332+(((-1.0)*x7329*x7332)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7334=((-1.0)*r21);
CheckValue<IkReal> x7337 = IKatan2WithCheck(IkReal(x7334),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7337.valid){
continue;
}
IkReal x7335=((1.0)*(x7337.value));
IkReal x7336=x7310;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7335)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7335)));
IkReal gconst136=(x7334*x7336);
IkReal gconst137=((1.0)*r20*x7336);
IkReal x7338=r22*r22;
IkReal x7339=(cj0*r02);
IkReal x7340=(r12*sj0);
CheckValue<IkReal> x7344=IKPowWithIntegerCheck(((-1.0)+x7338),-1);
if(!x7344.valid){
continue;
}
IkReal x7341=x7344.value;
if((((1.0)+(((-1.0)*x7338)))) < -0.00001)
continue;
IkReal x7342=IKsqrt(((1.0)+(((-1.0)*x7338))));
IkReal x7343=((1.0)*r22*x7341*x7342);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7340*x7343))+(((-1.0)*x7339*x7343)))))+(IKabs((x7340+x7339))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7345=((1.0)*gconst137);
CheckValue<IkReal> x7346 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x7345))+((gconst136*r11*sj0))+(((-1.0)*cj0*r00*x7345))+((cj0*gconst136*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7346.valid){
continue;
}
CheckValue<IkReal> x7347=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*r21*x7345)))),-1);
if(!x7347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7346.value)+(((1.5707963267949)*(x7347.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7348=IKsin(j4);
IkReal x7349=IKcos(j4);
IkReal x7350=(gconst136*r01);
IkReal x7351=(gconst137*r10);
IkReal x7352=(cj1*cj2);
IkReal x7353=(gconst137*r20);
IkReal x7354=(gconst136*r11);
IkReal x7355=(gconst136*r21);
IkReal x7356=(gconst137*r00);
IkReal x7357=((1.0)*cj0);
IkReal x7358=(sj1*sj2);
IkReal x7359=((1.0)*x7349);
IkReal x7360=((1.0)*x7348);
evalcond[0]=(((x7348*x7355))+(((-1.0)*r22*x7359))+(((-1.0)*x7353*x7360)));
evalcond[1]=(((x7348*x7350))+sj0+(((-1.0)*r02*x7359))+(((-1.0)*x7356*x7360)));
evalcond[2]=(((x7348*x7354))+(((-1.0)*x7351*x7360))+(((-1.0)*r12*x7359))+(((-1.0)*x7357)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7360))+(((-1.0)*x7355*x7359))+((x7349*x7353)));
evalcond[4]=((((-1.0)*x7357*x7358))+((cj0*x7352))+(((-1.0)*r02*x7360))+(((-1.0)*x7350*x7359))+((x7349*x7356)));
evalcond[5]=((((-1.0)*sj0*x7358))+(((-1.0)*r12*x7360))+((sj0*x7352))+(((-1.0)*x7354*x7359))+((x7349*x7351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7361 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst137*r20))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7361.valid){
continue;
}
CheckValue<IkReal> x7362=IKPowWithIntegerCheck(IKsign((((gconst136*r00))+((gconst137*r01)))),-1);
if(!x7362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7361.value)+(((1.5707963267949)*(x7362.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7363=IKsin(j4);
IkReal x7364=IKcos(j4);
IkReal x7365=(gconst136*r01);
IkReal x7366=(gconst137*r10);
IkReal x7367=(cj1*cj2);
IkReal x7368=(gconst137*r20);
IkReal x7369=(gconst136*r11);
IkReal x7370=(gconst136*r21);
IkReal x7371=(gconst137*r00);
IkReal x7372=((1.0)*cj0);
IkReal x7373=(sj1*sj2);
IkReal x7374=((1.0)*x7364);
IkReal x7375=((1.0)*x7363);
evalcond[0]=(((x7363*x7370))+(((-1.0)*r22*x7374))+(((-1.0)*x7368*x7375)));
evalcond[1]=(sj0+((x7363*x7365))+(((-1.0)*r02*x7374))+(((-1.0)*x7371*x7375)));
evalcond[2]=(((x7363*x7369))+(((-1.0)*r12*x7374))+(((-1.0)*x7372))+(((-1.0)*x7366*x7375)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7375))+((x7364*x7368))+((cj1*sj2))+(((-1.0)*x7370*x7374)));
evalcond[4]=(((x7364*x7371))+((cj0*x7367))+(((-1.0)*r02*x7375))+(((-1.0)*x7372*x7373))+(((-1.0)*x7365*x7374)));
evalcond[5]=(((sj0*x7367))+((x7364*x7366))+(((-1.0)*r12*x7375))+(((-1.0)*x7369*x7374))+(((-1.0)*sj0*x7373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7376=IKPowWithIntegerCheck(IKsign((((gconst137*r11))+((gconst136*r10)))),-1);
if(!x7376.valid){
continue;
}
CheckValue<IkReal> x7377 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*gconst137*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7376.value)))+(x7377.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7378=IKsin(j4);
IkReal x7379=IKcos(j4);
IkReal x7380=(gconst136*r01);
IkReal x7381=(gconst137*r10);
IkReal x7382=(cj1*cj2);
IkReal x7383=(gconst137*r20);
IkReal x7384=(gconst136*r11);
IkReal x7385=(gconst136*r21);
IkReal x7386=(gconst137*r00);
IkReal x7387=((1.0)*cj0);
IkReal x7388=(sj1*sj2);
IkReal x7389=((1.0)*x7379);
IkReal x7390=((1.0)*x7378);
evalcond[0]=((((-1.0)*r22*x7389))+((x7378*x7385))+(((-1.0)*x7383*x7390)));
evalcond[1]=((((-1.0)*r02*x7389))+sj0+((x7378*x7380))+(((-1.0)*x7386*x7390)));
evalcond[2]=(((x7378*x7384))+(((-1.0)*x7387))+(((-1.0)*x7381*x7390))+(((-1.0)*r12*x7389)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7390))+((cj1*sj2))+(((-1.0)*x7385*x7389))+((x7379*x7383)));
evalcond[4]=((((-1.0)*x7380*x7389))+(((-1.0)*r02*x7390))+((x7379*x7386))+((cj0*x7382))+(((-1.0)*x7387*x7388)));
evalcond[5]=((((-1.0)*r12*x7390))+((sj0*x7382))+(((-1.0)*sj0*x7388))+((x7379*x7381))+(((-1.0)*x7384*x7389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7392 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7392)==0){
continue;
}
IkReal x7391=pow(x7392,-0.5);
CheckValue<IkReal> x7393 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7393.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7393.value));
IkReal gconst139=((-1.0)*r01*x7391);
IkReal gconst140=(r00*x7391);
CheckValue<IkReal> x7394 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7394.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7394.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7397 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7397.valid){
continue;
}
IkReal x7395=((-1.0)*(x7397.value));
IkReal x7396=x7391;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7395;
IkReal gconst138=x7395;
IkReal gconst139=((-1.0)*r01*x7396);
IkReal gconst140=(r00*x7396);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7398=((1.0)*gconst140);
CheckValue<IkReal> x7399=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7398))+(((-1.0)*gconst139*r20)))),-1);
if(!x7399.valid){
continue;
}
CheckValue<IkReal> x7400 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x7398))+((gconst139*r11*sj0))+((cj0*gconst139*r01))+(((-1.0)*r10*sj0*x7398)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7399.value)))+(x7400.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7401=IKsin(j4);
IkReal x7402=IKcos(j4);
IkReal x7403=(gconst140*r00);
IkReal x7404=(cj1*cj2);
IkReal x7405=(gconst139*r11);
IkReal x7406=(gconst139*r01);
IkReal x7407=((1.0)*cj0);
IkReal x7408=(gconst139*r21);
IkReal x7409=(sj1*sj2);
IkReal x7410=((1.0)*x7402);
IkReal x7411=((1.0)*x7401);
IkReal x7412=(gconst140*x7402);
evalcond[0]=(((x7401*x7408))+(((-1.0)*r22*x7410))+(((-1.0)*gconst140*r20*x7411)));
evalcond[1]=(sj0+((x7401*x7406))+(((-1.0)*r02*x7410))+(((-1.0)*x7403*x7411)));
evalcond[2]=((((-1.0)*r12*x7410))+((x7401*x7405))+(((-1.0)*x7407))+(((-1.0)*gconst140*r10*x7411)));
evalcond[3]=(((cj2*sj1))+((r20*x7412))+((cj1*sj2))+(((-1.0)*x7408*x7410))+(((-1.0)*r22*x7411)));
evalcond[4]=(((x7402*x7403))+(((-1.0)*x7407*x7409))+(((-1.0)*x7406*x7410))+(((-1.0)*r02*x7411))+((cj0*x7404)));
evalcond[5]=((((-1.0)*r12*x7411))+(((-1.0)*sj0*x7409))+(((-1.0)*x7405*x7410))+((r10*x7412))+((sj0*x7404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7413 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst139*r21*sj0))+(((-1.0)*gconst140*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7413.valid){
continue;
}
CheckValue<IkReal> x7414=IKPowWithIntegerCheck(IKsign((((gconst140*r11))+((gconst139*r10)))),-1);
if(!x7414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7413.value)+(((1.5707963267949)*(x7414.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7415=IKsin(j4);
IkReal x7416=IKcos(j4);
IkReal x7417=(gconst140*r00);
IkReal x7418=(cj1*cj2);
IkReal x7419=(gconst139*r11);
IkReal x7420=(gconst139*r01);
IkReal x7421=((1.0)*cj0);
IkReal x7422=(gconst139*r21);
IkReal x7423=(sj1*sj2);
IkReal x7424=((1.0)*x7416);
IkReal x7425=((1.0)*x7415);
IkReal x7426=(gconst140*x7416);
evalcond[0]=((((-1.0)*r22*x7424))+(((-1.0)*gconst140*r20*x7425))+((x7415*x7422)));
evalcond[1]=(sj0+(((-1.0)*r02*x7424))+((x7415*x7420))+(((-1.0)*x7417*x7425)));
evalcond[2]=(((x7415*x7419))+(((-1.0)*gconst140*r10*x7425))+(((-1.0)*r12*x7424))+(((-1.0)*x7421)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7422*x7424))+(((-1.0)*r22*x7425))+((cj1*sj2))+((r20*x7426)));
evalcond[4]=(((cj0*x7418))+(((-1.0)*x7421*x7423))+(((-1.0)*r02*x7425))+((x7416*x7417))+(((-1.0)*x7420*x7424)));
evalcond[5]=(((sj0*x7418))+(((-1.0)*sj0*x7423))+(((-1.0)*r12*x7425))+((r10*x7426))+(((-1.0)*x7419*x7424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7428 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7428)==0){
continue;
}
IkReal x7427=pow(x7428,-0.5);
CheckValue<IkReal> x7429 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7429.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7429.value))));
IkReal gconst142=((1.0)*r01*x7427);
IkReal gconst143=((-1.0)*r00*x7427);
CheckValue<IkReal> x7430 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7430.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7430.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7433 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7433.valid){
continue;
}
IkReal x7431=((1.0)*(x7433.value));
IkReal x7432=x7427;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7431)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7431)));
IkReal gconst142=((1.0)*r01*x7432);
IkReal gconst143=((-1.0)*r00*x7432);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x7436 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7436.valid){
continue;
}
IkReal x7434=((1.0)*(x7436.value));
IkReal x7435=x7427;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7434)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7434)));
IkReal gconst142=((1.0)*r01*x7435);
IkReal gconst143=((-1.0)*r00*x7435);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7439 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7439.valid){
continue;
}
IkReal x7437=((1.0)*(x7439.value));
IkReal x7438=x7427;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7437)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7437)));
IkReal gconst142=((1.0)*r01*x7438);
IkReal gconst143=((-1.0)*r00*x7438);
IkReal x7440=r02*r02;
IkReal x7441=(r12*sj0);
IkReal x7442=x7427;
IkReal x7443=(cj0*x7442);
j4eval[0]=((IKabs(((((-1.0)*x7443))+((r02*x7441*x7442))+((x7440*x7443)))))+(IKabs((x7441+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7444=((1.0)*gconst143);
CheckValue<IkReal> x7445 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst142*r01))+(((-1.0)*cj0*r00*x7444))+((gconst142*r11*sj0))+(((-1.0)*r10*sj0*x7444)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7445.valid){
continue;
}
CheckValue<IkReal> x7446=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r20))+(((-1.0)*r21*x7444)))),-1);
if(!x7446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7445.value)+(((1.5707963267949)*(x7446.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7447=IKsin(j4);
IkReal x7448=IKcos(j4);
IkReal x7449=(cj1*cj2);
IkReal x7450=(gconst143*r20);
IkReal x7451=((1.0)*cj0);
IkReal x7452=(sj1*sj2);
IkReal x7453=((1.0)*x7448);
IkReal x7454=((1.0)*x7447);
IkReal x7455=(gconst142*x7447);
IkReal x7456=(gconst143*x7448);
evalcond[0]=((((-1.0)*x7450*x7454))+((r21*x7455))+(((-1.0)*r22*x7453)));
evalcond[1]=(sj0+(((-1.0)*gconst143*r00*x7454))+((r01*x7455))+(((-1.0)*r02*x7453)));
evalcond[2]=(((r11*x7455))+(((-1.0)*gconst143*r10*x7454))+(((-1.0)*x7451))+(((-1.0)*r12*x7453)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x7453))+((cj1*sj2))+((x7448*x7450))+(((-1.0)*r22*x7454)));
evalcond[4]=((((-1.0)*x7451*x7452))+((r00*x7456))+(((-1.0)*gconst142*r01*x7453))+(((-1.0)*r02*x7454))+((cj0*x7449)));
evalcond[5]=((((-1.0)*gconst142*r11*x7453))+((sj0*x7449))+(((-1.0)*sj0*x7452))+((r10*x7456))+(((-1.0)*r12*x7454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7457=IKPowWithIntegerCheck(IKsign((((gconst143*r01))+((gconst142*r00)))),-1);
if(!x7457.valid){
continue;
}
CheckValue<IkReal> x7458 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst143*r20))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7457.value)))+(x7458.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7459=IKsin(j4);
IkReal x7460=IKcos(j4);
IkReal x7461=(cj1*cj2);
IkReal x7462=(gconst143*r20);
IkReal x7463=((1.0)*cj0);
IkReal x7464=(sj1*sj2);
IkReal x7465=((1.0)*x7460);
IkReal x7466=((1.0)*x7459);
IkReal x7467=(gconst142*x7459);
IkReal x7468=(gconst143*x7460);
evalcond[0]=(((r21*x7467))+(((-1.0)*r22*x7465))+(((-1.0)*x7462*x7466)));
evalcond[1]=(sj0+(((-1.0)*r02*x7465))+(((-1.0)*gconst143*r00*x7466))+((r01*x7467)));
evalcond[2]=((((-1.0)*r12*x7465))+((r11*x7467))+(((-1.0)*x7463))+(((-1.0)*gconst143*r10*x7466)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7466))+(((-1.0)*gconst142*r21*x7465))+((x7460*x7462)));
evalcond[4]=((((-1.0)*r02*x7466))+((cj0*x7461))+(((-1.0)*x7463*x7464))+((r00*x7468))+(((-1.0)*gconst142*r01*x7465)));
evalcond[5]=(((r10*x7468))+(((-1.0)*r12*x7466))+(((-1.0)*gconst142*r11*x7465))+((sj0*x7461))+(((-1.0)*sj0*x7464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7469=IKPowWithIntegerCheck(IKsign((((gconst143*r11))+((gconst142*r10)))),-1);
if(!x7469.valid){
continue;
}
CheckValue<IkReal> x7470 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst142*r21*sj0))+(((-1.0)*gconst143*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7469.value)))+(x7470.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7471=IKsin(j4);
IkReal x7472=IKcos(j4);
IkReal x7473=(cj1*cj2);
IkReal x7474=(gconst143*r20);
IkReal x7475=((1.0)*cj0);
IkReal x7476=(sj1*sj2);
IkReal x7477=((1.0)*x7472);
IkReal x7478=((1.0)*x7471);
IkReal x7479=(gconst142*x7471);
IkReal x7480=(gconst143*x7472);
evalcond[0]=((((-1.0)*x7474*x7478))+(((-1.0)*r22*x7477))+((r21*x7479)));
evalcond[1]=(sj0+(((-1.0)*r02*x7477))+(((-1.0)*gconst143*r00*x7478))+((r01*x7479)));
evalcond[2]=((((-1.0)*x7475))+(((-1.0)*gconst143*r10*x7478))+((r11*x7479))+(((-1.0)*r12*x7477)));
evalcond[3]=(((cj2*sj1))+((x7472*x7474))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7477))+(((-1.0)*r22*x7478)));
evalcond[4]=(((cj0*x7473))+(((-1.0)*r02*x7478))+((r00*x7480))+(((-1.0)*gconst142*r01*x7477))+(((-1.0)*x7475*x7476)));
evalcond[5]=(((sj0*x7473))+(((-1.0)*sj0*x7476))+((r10*x7480))+(((-1.0)*gconst142*r11*x7477))+(((-1.0)*r12*x7478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7481=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7481;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7481);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7482=((1.0)*cj5);
IkReal x7483=((((-1.0)*r21*x7482))+(((-1.0)*r20*sj5)));
j4eval[0]=x7483;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x7482))))));
j4eval[2]=IKsign(x7483);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7484=cj5*cj5;
IkReal x7485=r01*r01;
IkReal x7486=(cj5*r00);
IkReal x7487=(r01*sj5);
IkReal x7488=((((-2.0)*x7486*x7487))+((x7484*(r00*r00)))+(r02*r02)+x7485+(((-1.0)*x7484*x7485)));
j4eval[0]=x7488;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x7487))+x7486))));
j4eval[2]=IKsign(x7488);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7489=cj5*cj5;
IkReal x7490=r01*r01;
IkReal x7491=(r01*sj5);
IkReal x7492=(cj5*r00);
CheckValue<IkReal> x7493 = IKatan2WithCheck(IkReal(((((-1.0)*x7491))+x7492)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7493.valid){
continue;
}
CheckValue<IkReal> x7494=IKPowWithIntegerCheck(IKsign((((x7489*(r00*r00)))+(((-1.0)*x7489*x7490))+(r02*r02)+x7490+(((-2.0)*x7491*x7492)))),-1);
if(!x7494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7493.value)+(((1.5707963267949)*(x7494.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7495=IKsin(j4);
IkReal x7496=IKcos(j4);
IkReal x7497=(cj5*r10);
IkReal x7498=(r01*sj5);
IkReal x7499=(cj5*r00);
IkReal x7500=(cj5*r20);
IkReal x7501=((1.0)*x7496);
IkReal x7502=((1.0)*x7495);
IkReal x7503=(sj5*x7495);
evalcond[0]=((((-1.0)*r22*x7501))+(((-1.0)*x7500*x7502))+((r21*x7503)));
evalcond[1]=((((-1.0)*x7497*x7502))+((r11*x7503))+(((-1.0)*r12*x7501)));
evalcond[2]=(((x7496*x7499))+(((-1.0)*x7498*x7501))+(((-1.0)*r02*x7502)));
evalcond[3]=((1.0)+(((-1.0)*x7499*x7502))+(((-1.0)*r02*x7501))+((x7495*x7498)));
evalcond[4]=((((-1.0)*r22*x7502))+((cj2*sj1))+((cj1*sj2))+((x7496*x7500))+(((-1.0)*r21*sj5*x7501)));
evalcond[5]=(((x7496*x7497))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x7501))+(((-1.0)*r12*x7502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7504=((1.0)*cj5);
CheckValue<IkReal> x7505 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x7504)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7505.valid){
continue;
}
CheckValue<IkReal> x7506=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7504))+(((-1.0)*r20*sj5)))),-1);
if(!x7506.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7505.value)+(((1.5707963267949)*(x7506.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7507=IKsin(j4);
IkReal x7508=IKcos(j4);
IkReal x7509=(cj5*r10);
IkReal x7510=(r01*sj5);
IkReal x7511=(cj5*r00);
IkReal x7512=(cj5*r20);
IkReal x7513=((1.0)*x7508);
IkReal x7514=((1.0)*x7507);
IkReal x7515=(sj5*x7507);
evalcond[0]=(((r21*x7515))+(((-1.0)*x7512*x7514))+(((-1.0)*r22*x7513)));
evalcond[1]=(((r11*x7515))+(((-1.0)*x7509*x7514))+(((-1.0)*r12*x7513)));
evalcond[2]=((((-1.0)*x7510*x7513))+(((-1.0)*r02*x7514))+((x7508*x7511)));
evalcond[3]=((1.0)+(((-1.0)*x7511*x7514))+(((-1.0)*r02*x7513))+((x7507*x7510)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x7513))+((x7508*x7512))+(((-1.0)*r22*x7514)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x7513))+((cj1*cj2))+(((-1.0)*r12*x7514))+((x7508*x7509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7516 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7516.valid){
continue;
}
CheckValue<IkReal> x7517=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7516.value)+(((1.5707963267949)*(x7517.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7518=IKsin(j4);
IkReal x7519=IKcos(j4);
IkReal x7520=(cj5*r10);
IkReal x7521=(r01*sj5);
IkReal x7522=(cj5*r00);
IkReal x7523=(cj5*r20);
IkReal x7524=((1.0)*x7519);
IkReal x7525=((1.0)*x7518);
IkReal x7526=(sj5*x7518);
evalcond[0]=(((r21*x7526))+(((-1.0)*x7523*x7525))+(((-1.0)*r22*x7524)));
evalcond[1]=(((r11*x7526))+(((-1.0)*x7520*x7525))+(((-1.0)*r12*x7524)));
evalcond[2]=(((x7519*x7522))+(((-1.0)*r02*x7525))+(((-1.0)*x7521*x7524)));
evalcond[3]=((1.0)+((x7518*x7521))+(((-1.0)*x7522*x7525))+(((-1.0)*r02*x7524)));
evalcond[4]=(((cj2*sj1))+((x7519*x7523))+((cj1*sj2))+(((-1.0)*r21*sj5*x7524))+(((-1.0)*r22*x7525)));
evalcond[5]=(((x7519*x7520))+(((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x7524))+((cj1*cj2))+(((-1.0)*r12*x7525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7527=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7527;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x7527);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7528=((1.0)*cj5);
IkReal x7529=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7528)));
j4eval[0]=x7529;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7528))))));
j4eval[2]=IKsign(x7529);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7530=cj5*cj5;
IkReal x7531=r01*r01;
IkReal x7532=(r01*sj5);
IkReal x7533=(cj5*r00);
IkReal x7534=((((2.0)*x7532*x7533))+((x7530*x7531))+(((-1.0)*(r02*r02)))+(((-1.0)*x7531))+(((-1.0)*x7530*(r00*r00))));
j4eval[0]=x7534;
j4eval[1]=IKsign(x7534);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x7532))+x7533))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7535=cj5*cj5;
IkReal x7536=r01*r01;
IkReal x7537=(r01*sj5);
IkReal x7538=(cj5*r00);
CheckValue<IkReal> x7539=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x7536))+((x7535*x7536))+(((-1.0)*x7535*(r00*r00)))+(((2.0)*x7537*x7538)))),-1);
if(!x7539.valid){
continue;
}
CheckValue<IkReal> x7540 = IKatan2WithCheck(IkReal(((((-1.0)*x7537))+x7538)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7539.value)))+(x7540.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7541=IKsin(j4);
IkReal x7542=IKcos(j4);
IkReal x7543=(cj5*r10);
IkReal x7544=(r01*sj5);
IkReal x7545=(cj5*r00);
IkReal x7546=(cj5*r20);
IkReal x7547=((1.0)*x7542);
IkReal x7548=((1.0)*x7541);
IkReal x7549=(sj5*x7541);
evalcond[0]=(((r21*x7549))+(((-1.0)*r22*x7547))+(((-1.0)*x7546*x7548)));
evalcond[1]=((((-1.0)*x7543*x7548))+((r11*x7549))+(((-1.0)*r12*x7547)));
evalcond[2]=((((-1.0)*x7544*x7547))+((x7542*x7545))+(((-1.0)*r02*x7548)));
evalcond[3]=((-1.0)+((x7541*x7544))+(((-1.0)*x7545*x7548))+(((-1.0)*r02*x7547)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7548))+((x7542*x7546))+(((-1.0)*r21*sj5*x7547)));
evalcond[5]=((((-1.0)*r11*sj5*x7547))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7542*x7543))+(((-1.0)*r12*x7548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7550=((1.0)*cj5);
CheckValue<IkReal> x7551 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7550)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7551.valid){
continue;
}
CheckValue<IkReal> x7552=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7550)))),-1);
if(!x7552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7551.value)+(((1.5707963267949)*(x7552.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7553=IKsin(j4);
IkReal x7554=IKcos(j4);
IkReal x7555=(cj5*r10);
IkReal x7556=(r01*sj5);
IkReal x7557=(cj5*r00);
IkReal x7558=(cj5*r20);
IkReal x7559=((1.0)*x7554);
IkReal x7560=((1.0)*x7553);
IkReal x7561=(sj5*x7553);
evalcond[0]=(((r21*x7561))+(((-1.0)*r22*x7559))+(((-1.0)*x7558*x7560)));
evalcond[1]=((((-1.0)*x7555*x7560))+((r11*x7561))+(((-1.0)*r12*x7559)));
evalcond[2]=((((-1.0)*r02*x7560))+(((-1.0)*x7556*x7559))+((x7554*x7557)));
evalcond[3]=((-1.0)+(((-1.0)*x7557*x7560))+((x7553*x7556))+(((-1.0)*r02*x7559)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7560))+((cj1*sj2))+(((-1.0)*r21*sj5*x7559))+((x7554*x7558)));
evalcond[5]=((((-1.0)*r11*sj5*x7559))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x7560))+((x7554*x7555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7562=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7562.valid){
continue;
}
CheckValue<IkReal> x7563 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7562.value)))+(x7563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7564=IKsin(j4);
IkReal x7565=IKcos(j4);
IkReal x7566=(cj5*r10);
IkReal x7567=(r01*sj5);
IkReal x7568=(cj5*r00);
IkReal x7569=(cj5*r20);
IkReal x7570=((1.0)*x7565);
IkReal x7571=((1.0)*x7564);
IkReal x7572=(sj5*x7564);
evalcond[0]=((((-1.0)*x7569*x7571))+(((-1.0)*r22*x7570))+((r21*x7572)));
evalcond[1]=((((-1.0)*x7566*x7571))+(((-1.0)*r12*x7570))+((r11*x7572)));
evalcond[2]=((((-1.0)*x7567*x7570))+((x7565*x7568))+(((-1.0)*r02*x7571)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7570))+(((-1.0)*x7568*x7571))+((x7564*x7567)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7565*x7569))+(((-1.0)*r22*x7571))+(((-1.0)*r21*sj5*x7570)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x7565*x7566))+(((-1.0)*r11*sj5*x7570))+(((-1.0)*r12*x7571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7574 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7574)==0){
continue;
}
IkReal x7573=pow(x7574,-0.5);
CheckValue<IkReal> x7575 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7575.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7575.value));
IkReal gconst145=((-1.0)*r11*x7573);
IkReal gconst146=(r10*x7573);
CheckValue<IkReal> x7576 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7576.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7576.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7579 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7579.valid){
continue;
}
IkReal x7577=((-1.0)*(x7579.value));
IkReal x7578=x7573;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7577;
IkReal gconst144=x7577;
IkReal gconst145=((-1.0)*r11*x7578);
IkReal gconst146=(r10*x7578);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7580=((1.0)*gconst146);
CheckValue<IkReal> x7581=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r20))+(((-1.0)*r21*x7580)))),-1);
if(!x7581.valid){
continue;
}
CheckValue<IkReal> x7582 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst145*r01))+(((-1.0)*cj0*r00*x7580))+(((-1.0)*r10*sj0*x7580))+((gconst145*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7581.value)))+(x7582.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7583=IKsin(j4);
IkReal x7584=IKcos(j4);
IkReal x7585=(gconst146*r10);
IkReal x7586=(cj1*cj2);
IkReal x7587=(gconst145*r11);
IkReal x7588=(gconst146*r20);
IkReal x7589=(gconst146*r00);
IkReal x7590=((1.0)*cj0);
IkReal x7591=(sj1*sj2);
IkReal x7592=((1.0)*x7584);
IkReal x7593=((1.0)*x7583);
IkReal x7594=(gconst145*x7583);
evalcond[0]=((((-1.0)*r22*x7592))+((r21*x7594))+(((-1.0)*x7588*x7593)));
evalcond[1]=(sj0+(((-1.0)*x7589*x7593))+(((-1.0)*r02*x7592))+((r01*x7594)));
evalcond[2]=(((x7583*x7587))+(((-1.0)*r12*x7592))+(((-1.0)*x7590))+(((-1.0)*x7585*x7593)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7593))+(((-1.0)*gconst145*r21*x7592))+((x7584*x7588)));
evalcond[4]=((((-1.0)*gconst145*r01*x7592))+(((-1.0)*x7590*x7591))+((x7584*x7589))+((cj0*x7586))+(((-1.0)*r02*x7593)));
evalcond[5]=((((-1.0)*sj0*x7591))+(((-1.0)*r12*x7593))+(((-1.0)*x7587*x7592))+((x7584*x7585))+((sj0*x7586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7595 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst146*r20))+((cj0*gconst145*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7595.valid){
continue;
}
CheckValue<IkReal> x7596=IKPowWithIntegerCheck(IKsign((((gconst145*r00))+((gconst146*r01)))),-1);
if(!x7596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7595.value)+(((1.5707963267949)*(x7596.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7597=IKsin(j4);
IkReal x7598=IKcos(j4);
IkReal x7599=(gconst146*r10);
IkReal x7600=(cj1*cj2);
IkReal x7601=(gconst145*r11);
IkReal x7602=(gconst146*r20);
IkReal x7603=(gconst146*r00);
IkReal x7604=((1.0)*cj0);
IkReal x7605=(sj1*sj2);
IkReal x7606=((1.0)*x7598);
IkReal x7607=((1.0)*x7597);
IkReal x7608=(gconst145*x7597);
evalcond[0]=((((-1.0)*r22*x7606))+((r21*x7608))+(((-1.0)*x7602*x7607)));
evalcond[1]=(sj0+((r01*x7608))+(((-1.0)*x7603*x7607))+(((-1.0)*r02*x7606)));
evalcond[2]=((((-1.0)*x7604))+((x7597*x7601))+(((-1.0)*x7599*x7607))+(((-1.0)*r12*x7606)));
evalcond[3]=(((cj2*sj1))+((x7598*x7602))+(((-1.0)*r22*x7607))+(((-1.0)*gconst145*r21*x7606))+((cj1*sj2)));
evalcond[4]=(((x7598*x7603))+(((-1.0)*gconst145*r01*x7606))+(((-1.0)*x7604*x7605))+(((-1.0)*r02*x7607))+((cj0*x7600)));
evalcond[5]=(((x7598*x7599))+(((-1.0)*sj0*x7605))+(((-1.0)*x7601*x7606))+(((-1.0)*r12*x7607))+((sj0*x7600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7610 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7610)==0){
continue;
}
IkReal x7609=pow(x7610,-0.5);
CheckValue<IkReal> x7611 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7611.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7611.value))));
IkReal gconst148=((1.0)*r11*x7609);
IkReal gconst149=((-1.0)*r10*x7609);
CheckValue<IkReal> x7612 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7612.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7612.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7615 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7615.valid){
continue;
}
IkReal x7613=((1.0)*(x7615.value));
IkReal x7614=x7609;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7613)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7613)));
IkReal gconst148=((1.0)*r11*x7614);
IkReal gconst149=((-1.0)*r10*x7614);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7618 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7618.valid){
continue;
}
IkReal x7616=((1.0)*(x7618.value));
IkReal x7617=x7609;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7616)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7616)));
IkReal gconst148=((1.0)*r11*x7617);
IkReal gconst149=((-1.0)*r10*x7617);
IkReal x7619=r12*r12;
IkReal x7620=(cj0*r02);
IkReal x7621=x7609;
IkReal x7622=(sj0*x7621);
j4eval[0]=((IKabs((((r12*sj0))+x7620)))+(IKabs(((((-1.0)*x7622))+((r12*x7620*x7621))+((x7619*x7622))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7625 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7625.valid){
continue;
}
IkReal x7623=((1.0)*(x7625.value));
IkReal x7624=x7609;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7623)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7623)));
IkReal gconst148=((1.0)*r11*x7624);
IkReal gconst149=((-1.0)*r10*x7624);
IkReal x7626=(cj1*r22*sj2);
IkReal x7627=(cj2*r22*sj1);
IkReal x7628=x7609;
IkReal x7629=(r12*x7628);
j4eval[0]=((IKabs((x7627+x7626)))+(IKabs((((x7627*x7629))+((x7626*x7629))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7630=(cj2*sj1);
IkReal x7631=(cj1*sj2);
IkReal x7632=(gconst148*r21);
IkReal x7633=((1.0)*gconst149*r20);
CheckValue<IkReal> x7634 = IKatan2WithCheck(IkReal((((r22*x7630))+((r22*x7631)))),IkReal((((x7630*x7632))+((x7631*x7632))+(((-1.0)*x7630*x7633))+(((-1.0)*x7631*x7633)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7634.valid){
continue;
}
CheckValue<IkReal> x7635=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((gconst149*gconst149)*(r20*r20)))+(x7632*x7632)+(((-2.0)*gconst149*r20*x7632)))),-1);
if(!x7635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7634.value)+(((1.5707963267949)*(x7635.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7636=IKsin(j4);
IkReal x7637=IKcos(j4);
IkReal x7638=(cj1*cj2);
IkReal x7639=(gconst148*r11);
IkReal x7640=((1.0)*cj0);
IkReal x7641=(sj1*sj2);
IkReal x7642=((1.0)*x7637);
IkReal x7643=(gconst149*x7637);
IkReal x7644=((1.0)*x7636);
IkReal x7645=(gconst148*x7636);
evalcond[0]=((((-1.0)*r22*x7642))+(((-1.0)*gconst149*r20*x7644))+((r21*x7645)));
evalcond[1]=(sj0+(((-1.0)*r02*x7642))+(((-1.0)*gconst149*r00*x7644))+((r01*x7645)));
evalcond[2]=((((-1.0)*r12*x7642))+(((-1.0)*x7640))+(((-1.0)*gconst149*r10*x7644))+((x7636*x7639)));
evalcond[3]=((((-1.0)*r22*x7644))+((cj2*sj1))+(((-1.0)*gconst148*r21*x7642))+((cj1*sj2))+((r20*x7643)));
evalcond[4]=((((-1.0)*r02*x7644))+(((-1.0)*gconst148*r01*x7642))+(((-1.0)*x7640*x7641))+((cj0*x7638))+((r00*x7643)));
evalcond[5]=((((-1.0)*sj0*x7641))+(((-1.0)*x7639*x7642))+(((-1.0)*r12*x7644))+((r10*x7643))+((sj0*x7638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7646=((1.0)*gconst149);
CheckValue<IkReal> x7647 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst148*r01))+((gconst148*r11*sj0))+(((-1.0)*r10*sj0*x7646))+(((-1.0)*cj0*r00*x7646)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7647.valid){
continue;
}
CheckValue<IkReal> x7648=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r20))+(((-1.0)*r21*x7646)))),-1);
if(!x7648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7647.value)+(((1.5707963267949)*(x7648.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7649=IKsin(j4);
IkReal x7650=IKcos(j4);
IkReal x7651=(cj1*cj2);
IkReal x7652=(gconst148*r11);
IkReal x7653=((1.0)*cj0);
IkReal x7654=(sj1*sj2);
IkReal x7655=((1.0)*x7650);
IkReal x7656=(gconst149*x7650);
IkReal x7657=((1.0)*x7649);
IkReal x7658=(gconst148*x7649);
evalcond[0]=((((-1.0)*r22*x7655))+((r21*x7658))+(((-1.0)*gconst149*r20*x7657)));
evalcond[1]=(sj0+(((-1.0)*r02*x7655))+(((-1.0)*gconst149*r00*x7657))+((r01*x7658)));
evalcond[2]=(((x7649*x7652))+(((-1.0)*gconst149*r10*x7657))+(((-1.0)*r12*x7655))+(((-1.0)*x7653)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7657))+(((-1.0)*gconst148*r21*x7655))+((cj1*sj2))+((r20*x7656)));
evalcond[4]=((((-1.0)*r02*x7657))+(((-1.0)*x7653*x7654))+(((-1.0)*gconst148*r01*x7655))+((cj0*x7651))+((r00*x7656)));
evalcond[5]=(((r10*x7656))+(((-1.0)*r12*x7657))+(((-1.0)*x7652*x7655))+((sj0*x7651))+(((-1.0)*sj0*x7654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7659=IKPowWithIntegerCheck(IKsign((((gconst148*r00))+((gconst149*r01)))),-1);
if(!x7659.valid){
continue;
}
CheckValue<IkReal> x7660 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst149*r20))+((cj0*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7659.value)))+(x7660.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7661=IKsin(j4);
IkReal x7662=IKcos(j4);
IkReal x7663=(cj1*cj2);
IkReal x7664=(gconst148*r11);
IkReal x7665=((1.0)*cj0);
IkReal x7666=(sj1*sj2);
IkReal x7667=((1.0)*x7662);
IkReal x7668=(gconst149*x7662);
IkReal x7669=((1.0)*x7661);
IkReal x7670=(gconst148*x7661);
evalcond[0]=((((-1.0)*r22*x7667))+((r21*x7670))+(((-1.0)*gconst149*r20*x7669)));
evalcond[1]=((((-1.0)*gconst149*r00*x7669))+sj0+(((-1.0)*r02*x7667))+((r01*x7670)));
evalcond[2]=((((-1.0)*r12*x7667))+(((-1.0)*x7665))+((x7661*x7664))+(((-1.0)*gconst149*r10*x7669)));
evalcond[3]=(((cj2*sj1))+((r20*x7668))+(((-1.0)*gconst148*r21*x7667))+((cj1*sj2))+(((-1.0)*r22*x7669)));
evalcond[4]=(((r00*x7668))+(((-1.0)*gconst148*r01*x7667))+(((-1.0)*r02*x7669))+((cj0*x7663))+(((-1.0)*x7665*x7666)));
evalcond[5]=((((-1.0)*r12*x7669))+(((-1.0)*sj0*x7666))+((r10*x7668))+((sj0*x7663))+(((-1.0)*x7664*x7667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7671=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7671;
j4eval[1]=IKsign(x7671);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7672=((1.0)*cj5);
IkReal x7673=((((-1.0)*r21*x7672))+(((-1.0)*r20*sj5)));
j4eval[0]=x7673;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x7672)))))+(IKabs(r02)));
j4eval[2]=IKsign(x7673);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7674=cj5*cj5;
IkReal x7675=r11*r11;
IkReal x7676=(cj5*r10);
IkReal x7677=(r11*sj5);
IkReal x7678=((((2.0)*x7676*x7677))+(((-1.0)*(r12*r12)))+((x7674*x7675))+(((-1.0)*x7674*(r10*r10)))+(((-1.0)*x7675)));
j4eval[0]=x7678;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x7677))+x7676))));
j4eval[2]=IKsign(x7678);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7679=cj5*cj5;
IkReal x7680=r11*r11;
IkReal x7681=(cj5*r10);
IkReal x7682=(r11*sj5);
CheckValue<IkReal> x7683 = IKatan2WithCheck(IkReal(((((-1.0)*x7682))+x7681)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7683.valid){
continue;
}
CheckValue<IkReal> x7684=IKPowWithIntegerCheck(IKsign((((x7679*x7680))+(((-1.0)*x7680))+(((-1.0)*(r12*r12)))+(((-1.0)*x7679*(r10*r10)))+(((2.0)*x7681*x7682)))),-1);
if(!x7684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7683.value)+(((1.5707963267949)*(x7684.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7685=IKsin(j4);
IkReal x7686=IKcos(j4);
IkReal x7687=(cj5*r10);
IkReal x7688=(r01*sj5);
IkReal x7689=(cj5*r00);
IkReal x7690=(cj5*r20);
IkReal x7691=((1.0)*x7686);
IkReal x7692=((1.0)*x7685);
IkReal x7693=(sj5*x7685);
evalcond[0]=((((-1.0)*r22*x7691))+((r21*x7693))+(((-1.0)*x7690*x7692)));
evalcond[1]=((((-1.0)*r02*x7691))+((x7685*x7688))+(((-1.0)*x7689*x7692)));
evalcond[2]=(((x7686*x7687))+(((-1.0)*r11*sj5*x7691))+(((-1.0)*r12*x7692)));
evalcond[3]=((-1.0)+(((-1.0)*x7687*x7692))+((r11*x7693))+(((-1.0)*r12*x7691)));
evalcond[4]=(((cj2*sj1))+((x7686*x7690))+((cj1*sj2))+(((-1.0)*r21*sj5*x7691))+(((-1.0)*r22*x7692)));
evalcond[5]=((((-1.0)*r02*x7692))+((x7686*x7689))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x7688*x7691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7694=((1.0)*cj5);
CheckValue<IkReal> x7695=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7694))+(((-1.0)*r20*sj5)))),-1);
if(!x7695.valid){
continue;
}
CheckValue<IkReal> x7696 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7694)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7695.value)))+(x7696.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7697=IKsin(j4);
IkReal x7698=IKcos(j4);
IkReal x7699=(cj5*r10);
IkReal x7700=(r01*sj5);
IkReal x7701=(cj5*r00);
IkReal x7702=(cj5*r20);
IkReal x7703=((1.0)*x7698);
IkReal x7704=((1.0)*x7697);
IkReal x7705=(sj5*x7697);
evalcond[0]=(((r21*x7705))+(((-1.0)*r22*x7703))+(((-1.0)*x7702*x7704)));
evalcond[1]=((((-1.0)*x7701*x7704))+(((-1.0)*r02*x7703))+((x7697*x7700)));
evalcond[2]=((((-1.0)*r11*sj5*x7703))+(((-1.0)*r12*x7704))+((x7698*x7699)));
evalcond[3]=((-1.0)+((r11*x7705))+(((-1.0)*r12*x7703))+(((-1.0)*x7699*x7704)));
evalcond[4]=((((-1.0)*r21*sj5*x7703))+((x7698*x7702))+((cj2*sj1))+(((-1.0)*r22*x7704))+((cj1*sj2)));
evalcond[5]=(((x7698*x7701))+(((-1.0)*sj1*sj2))+(((-1.0)*x7700*x7703))+((cj1*cj2))+(((-1.0)*r02*x7704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7706 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7706.valid){
continue;
}
CheckValue<IkReal> x7707=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7706.value)+(((1.5707963267949)*(x7707.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7708=IKsin(j4);
IkReal x7709=IKcos(j4);
IkReal x7710=(cj5*r10);
IkReal x7711=(r01*sj5);
IkReal x7712=(cj5*r00);
IkReal x7713=(cj5*r20);
IkReal x7714=((1.0)*x7709);
IkReal x7715=((1.0)*x7708);
IkReal x7716=(sj5*x7708);
evalcond[0]=((((-1.0)*r22*x7714))+((r21*x7716))+(((-1.0)*x7713*x7715)));
evalcond[1]=((((-1.0)*x7712*x7715))+(((-1.0)*r02*x7714))+((x7708*x7711)));
evalcond[2]=((((-1.0)*r12*x7715))+(((-1.0)*r11*sj5*x7714))+((x7709*x7710)));
evalcond[3]=((-1.0)+((r11*x7716))+(((-1.0)*r12*x7714))+(((-1.0)*x7710*x7715)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7715))+((cj1*sj2))+((x7709*x7713))+(((-1.0)*r21*sj5*x7714)));
evalcond[5]=((((-1.0)*x7711*x7714))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r02*x7715))+((x7709*x7712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7717=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7717;
j4eval[1]=IKsign(x7717);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7718=((1.0)*cj5);
IkReal x7719=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7718)));
j4eval[0]=x7719;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7718))))));
j4eval[2]=IKsign(x7719);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7720=cj5*cj5;
IkReal x7721=r11*r11;
IkReal x7722=(r11*sj5);
IkReal x7723=(cj5*r10);
IkReal x7724=((r12*r12)+(((-1.0)*x7720*x7721))+(((-2.0)*x7722*x7723))+((x7720*(r10*r10)))+x7721);
j4eval[0]=x7724;
j4eval[1]=IKsign(x7724);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7722))+x7723))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7725=cj5*cj5;
IkReal x7726=r11*r11;
IkReal x7727=(cj5*r10);
IkReal x7728=(r11*sj5);
CheckValue<IkReal> x7729=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x7727*x7728))+((x7725*(r10*r10)))+x7726+(((-1.0)*x7725*x7726)))),-1);
if(!x7729.valid){
continue;
}
CheckValue<IkReal> x7730 = IKatan2WithCheck(IkReal(((((-1.0)*x7728))+x7727)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7729.value)))+(x7730.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7731=IKsin(j4);
IkReal x7732=IKcos(j4);
IkReal x7733=(cj5*r10);
IkReal x7734=(r01*sj5);
IkReal x7735=(cj5*r00);
IkReal x7736=(cj5*r20);
IkReal x7737=((1.0)*x7732);
IkReal x7738=((1.0)*x7731);
IkReal x7739=(sj5*x7731);
evalcond[0]=(((r21*x7739))+(((-1.0)*x7736*x7738))+(((-1.0)*r22*x7737)));
evalcond[1]=(((x7731*x7734))+(((-1.0)*x7735*x7738))+(((-1.0)*r02*x7737)));
evalcond[2]=((((-1.0)*r11*sj5*x7737))+((x7732*x7733))+(((-1.0)*r12*x7738)));
evalcond[3]=((1.0)+((r11*x7739))+(((-1.0)*r12*x7737))+(((-1.0)*x7733*x7738)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x7737))+((x7732*x7736))+((cj1*sj2))+(((-1.0)*r22*x7738)));
evalcond[5]=(((x7732*x7735))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7734*x7737))+(((-1.0)*r02*x7738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7740=((1.0)*cj5);
CheckValue<IkReal> x7741=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7740)))),-1);
if(!x7741.valid){
continue;
}
CheckValue<IkReal> x7742 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7740)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7741.value)))+(x7742.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7743=IKsin(j4);
IkReal x7744=IKcos(j4);
IkReal x7745=(cj5*r10);
IkReal x7746=(r01*sj5);
IkReal x7747=(cj5*r00);
IkReal x7748=(cj5*r20);
IkReal x7749=((1.0)*x7744);
IkReal x7750=((1.0)*x7743);
IkReal x7751=(sj5*x7743);
evalcond[0]=((((-1.0)*r22*x7749))+(((-1.0)*x7748*x7750))+((r21*x7751)));
evalcond[1]=(((x7743*x7746))+(((-1.0)*r02*x7749))+(((-1.0)*x7747*x7750)));
evalcond[2]=((((-1.0)*r11*sj5*x7749))+(((-1.0)*r12*x7750))+((x7744*x7745)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7749))+((r11*x7751))+(((-1.0)*x7745*x7750)));
evalcond[4]=((((-1.0)*r22*x7750))+((cj2*sj1))+(((-1.0)*r21*sj5*x7749))+((cj1*sj2))+((x7744*x7748)));
evalcond[5]=((((-1.0)*r02*x7750))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7746*x7749))+((x7744*x7747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7752=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7752.valid){
continue;
}
CheckValue<IkReal> x7753 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7752.value)))+(x7753.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7754=IKsin(j4);
IkReal x7755=IKcos(j4);
IkReal x7756=(cj5*r10);
IkReal x7757=(r01*sj5);
IkReal x7758=(cj5*r00);
IkReal x7759=(cj5*r20);
IkReal x7760=((1.0)*x7755);
IkReal x7761=((1.0)*x7754);
IkReal x7762=(sj5*x7754);
evalcond[0]=((((-1.0)*r22*x7760))+(((-1.0)*x7759*x7761))+((r21*x7762)));
evalcond[1]=((((-1.0)*r02*x7760))+(((-1.0)*x7758*x7761))+((x7754*x7757)));
evalcond[2]=(((x7755*x7756))+(((-1.0)*r12*x7761))+(((-1.0)*r11*sj5*x7760)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7760))+(((-1.0)*x7756*x7761))+((r11*x7762)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7761))+((cj1*sj2))+(((-1.0)*r21*sj5*x7760))+((x7755*x7759)));
evalcond[5]=((((-1.0)*r02*x7761))+(((-1.0)*x7757*x7760))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7755*x7758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7763=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7763);
rxp0_2=(py*r00);
rxp1_0=(r21*x7763);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7764=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7764);
rxp0_2=(py*r00);
rxp1_0=(r21*x7764);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7765=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7765);
rxp0_2=(py*r00);
rxp1_0=(r21*x7765);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7768=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x7768.valid){
continue;
}
IkReal x7766=x7768.value;
IkReal x7767=(cj0*x7766);
cj4array[0]=((((-1.0)*cj1*cj2*x7767))+((sj1*sj2*x7767)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7769=IKsin(j4);
IkReal x7770=IKcos(j4);
IkReal x7771=(r21*sj5);
IkReal x7772=((1.0)*x7770);
IkReal x7773=((1.0)*cj5*x7769);
evalcond[0]=((-1.0)*r12*x7769);
evalcond[1]=((((-1.0)*r12*x7772))+(((-1.0)*cj0)));
evalcond[2]=(((x7769*x7771))+(((-1.0)*r20*x7773)));
evalcond[3]=((((-1.0)*r00*x7773))+((r01*sj5*x7769)));
evalcond[4]=((((-1.0)*x7771*x7772))+((cj2*sj1))+((cj1*sj2))+((cj5*r20*x7770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7776=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x7776.valid){
continue;
}
IkReal x7774=x7776.value;
IkReal x7775=((1.0)*x7774);
cj4array[0]=((((-1.0)*cj2*sj1*x7775))+(((-1.0)*cj1*sj2*x7775)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7777=IKsin(j4);
IkReal x7778=IKcos(j4);
IkReal x7779=(cj5*r00);
IkReal x7780=((1.0)*cj0);
IkReal x7781=((1.0)*x7777);
IkReal x7782=(sj5*x7777);
IkReal x7783=((1.0)*x7778);
evalcond[0]=((-1.0)*r12*x7777);
evalcond[1]=((((-1.0)*x7780))+(((-1.0)*r12*x7783)));
evalcond[2]=((((-1.0)*cj5*r20*x7781))+((r21*x7782)));
evalcond[3]=((((-1.0)*x7779*x7781))+((r01*x7782)));
evalcond[4]=((((-1.0)*sj1*sj2*x7780))+((cj0*cj1*cj2))+((x7778*x7779))+(((-1.0)*r01*sj5*x7783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7784=IKPowWithIntegerCheck(r12,-1);
if(!x7784.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x7784.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7785=IKsin(j4);
IkReal x7786=IKcos(j4);
IkReal x7787=(cj5*r00);
IkReal x7788=(r21*sj5);
IkReal x7789=(cj5*r20);
IkReal x7790=(r01*sj5);
IkReal x7791=((1.0)*x7785);
IkReal x7792=((1.0)*x7786);
evalcond[0]=((-1.0)*r12*x7785);
evalcond[1]=(((x7785*x7788))+(((-1.0)*x7789*x7791)));
evalcond[2]=((((-1.0)*x7787*x7791))+((x7785*x7790)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x7786*x7789))+(((-1.0)*x7788*x7792)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+(((-1.0)*x7790*x7792))+((cj0*cj1*cj2))+((x7786*x7787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7793=((1.0)*cj5);
CheckValue<IkReal> x7794=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7793))+(((-1.0)*r20*sj5)))),-1);
if(!x7794.valid){
continue;
}
CheckValue<IkReal> x7795 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x7793))+(((-1.0)*cj0*r00*x7793))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7794.value)))+(x7795.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7796=IKsin(j4);
IkReal x7797=IKcos(j4);
IkReal x7798=(cj1*cj2);
IkReal x7799=(cj5*r10);
IkReal x7800=(r01*sj5);
IkReal x7801=(cj5*r00);
IkReal x7802=(cj5*r20);
IkReal x7803=((1.0)*cj0);
IkReal x7804=(sj1*sj2);
IkReal x7805=((1.0)*x7797);
IkReal x7806=((1.0)*x7796);
IkReal x7807=(sj5*x7796);
evalcond[0]=(((r21*x7807))+(((-1.0)*x7802*x7806))+(((-1.0)*r22*x7805)));
evalcond[1]=(sj0+(((-1.0)*x7801*x7806))+(((-1.0)*r02*x7805))+((x7796*x7800)));
evalcond[2]=(((r11*x7807))+(((-1.0)*r12*x7805))+(((-1.0)*x7803))+(((-1.0)*x7799*x7806)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x7805))+((cj1*sj2))+(((-1.0)*r22*x7806))+((x7797*x7802)));
evalcond[4]=((((-1.0)*r02*x7806))+(((-1.0)*x7800*x7805))+(((-1.0)*x7803*x7804))+((x7797*x7801))+((cj0*x7798)));
evalcond[5]=((((-1.0)*r12*x7806))+(((-1.0)*sj0*x7804))+((x7797*x7799))+(((-1.0)*r11*sj5*x7805))+((sj0*x7798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7808=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7808.valid){
continue;
}
CheckValue<IkReal> x7809 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7808.value)))+(x7809.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7810=IKsin(j4);
IkReal x7811=IKcos(j4);
IkReal x7812=(cj1*cj2);
IkReal x7813=(cj5*r10);
IkReal x7814=(r01*sj5);
IkReal x7815=(cj5*r00);
IkReal x7816=(cj5*r20);
IkReal x7817=((1.0)*cj0);
IkReal x7818=(sj1*sj2);
IkReal x7819=((1.0)*x7811);
IkReal x7820=((1.0)*x7810);
IkReal x7821=(sj5*x7810);
evalcond[0]=((((-1.0)*x7816*x7820))+((r21*x7821))+(((-1.0)*r22*x7819)));
evalcond[1]=(sj0+((x7810*x7814))+(((-1.0)*r02*x7819))+(((-1.0)*x7815*x7820)));
evalcond[2]=(((r11*x7821))+(((-1.0)*x7817))+(((-1.0)*r12*x7819))+(((-1.0)*x7813*x7820)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x7819))+((cj1*sj2))+(((-1.0)*r22*x7820))+((x7811*x7816)));
evalcond[4]=((((-1.0)*r02*x7820))+(((-1.0)*x7817*x7818))+(((-1.0)*x7814*x7819))+((x7811*x7815))+((cj0*x7812)));
evalcond[5]=((((-1.0)*sj0*x7818))+((sj0*x7812))+(((-1.0)*r12*x7820))+(((-1.0)*r11*sj5*x7819))+((x7811*x7813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7822=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7822.valid){
continue;
}
CheckValue<IkReal> x7823 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7822.value)))+(x7823.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7824=IKsin(j4);
IkReal x7825=IKcos(j4);
IkReal x7826=(cj1*cj2);
IkReal x7827=(cj5*r10);
IkReal x7828=(r01*sj5);
IkReal x7829=(cj5*r00);
IkReal x7830=(cj5*r20);
IkReal x7831=((1.0)*cj0);
IkReal x7832=(sj1*sj2);
IkReal x7833=((1.0)*x7825);
IkReal x7834=((1.0)*x7824);
IkReal x7835=(sj5*x7824);
evalcond[0]=(((r21*x7835))+(((-1.0)*r22*x7833))+(((-1.0)*x7830*x7834)));
evalcond[1]=(sj0+(((-1.0)*x7829*x7834))+(((-1.0)*r02*x7833))+((x7824*x7828)));
evalcond[2]=((((-1.0)*r12*x7833))+(((-1.0)*x7831))+(((-1.0)*x7827*x7834))+((r11*x7835)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7834))+((cj1*sj2))+(((-1.0)*r21*sj5*x7833))+((x7825*x7830)));
evalcond[4]=((((-1.0)*x7828*x7833))+((x7825*x7829))+(((-1.0)*x7831*x7832))+(((-1.0)*r02*x7834))+((cj0*x7826)));
evalcond[5]=((((-1.0)*sj0*x7832))+((x7825*x7827))+((sj0*x7826))+(((-1.0)*r11*sj5*x7833))+(((-1.0)*r12*x7834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7836=cj5*cj5;
IkReal x7837=r21*r21;
IkReal x7838=(cj2*sj1);
IkReal x7839=(cj1*sj2);
IkReal x7840=(r21*sj5);
IkReal x7841=((1.0)*cj5*r20);
CheckValue<IkReal> x7842 = IKatan2WithCheck(IkReal((((r22*x7838))+((r22*x7839)))),IkReal(((((-1.0)*x7838*x7841))+(((-1.0)*x7839*x7841))+((x7838*x7840))+((x7839*x7840)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7842.valid){
continue;
}
CheckValue<IkReal> x7843=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj5*r20*x7840))+(r22*r22)+x7837+((x7836*(r20*r20)))+(((-1.0)*x7836*x7837)))),-1);
if(!x7843.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7842.value)+(((1.5707963267949)*(x7843.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x7844=IKsin(j4);
IkReal x7845=IKcos(j4);
IkReal x7846=(r21*sj5);
IkReal x7847=(cj5*r20);
IkReal x7848=((1.0)*x7845);
IkReal x7849=((1.0)*x7844);
evalcond[0]=((((-1.0)*r22*x7848))+((x7844*x7846))+(((-1.0)*x7847*x7849)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x7849))+((cj1*sj2))+(((-1.0)*x7846*x7848))+((x7845*x7847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7850=(cj5*sj4);
IkReal x7851=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x7851))+((r00*x7850))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x7851))+(((-1.0)*r10*x7850))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x7851))+((r00*x7850))+((cj4*r02))))+IKsqr((((r11*x7851))+(((-1.0)*r10*x7850))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x7851))+((r00*x7850))+((cj4*r02))), (((r11*x7851))+(((-1.0)*r10*x7850))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7852=IKcos(j0);
IkReal x7853=IKsin(j0);
IkReal x7854=(cj4*cj5);
IkReal x7855=((0.1)*sj5);
IkReal x7856=(cj5*r11);
IkReal x7857=(r11*sj5);
IkReal x7858=(cj1*cj2);
IkReal x7859=((1.0)*sj4);
IkReal x7860=((1.0)*sj5);
IkReal x7861=(cj5*r01);
IkReal x7862=((1.0)*cj4);
IkReal x7863=(cj1*x7853);
IkReal x7864=(sj1*x7852);
IkReal x7865=(cj1*x7852);
IkReal x7866=(sj1*sj2*x7853);
evalcond[0]=((((-1.0)*cj5*r00*x7859))+((r01*sj4*sj5))+x7853+(((-1.0)*r02*x7862)));
evalcond[1]=(((sj4*x7857))+(((-1.0)*cj5*r10*x7859))+(((-1.0)*r12*x7862))+(((-1.0)*x7852)));
evalcond[2]=(((sj2*x7865))+((cj2*x7864))+(((-1.0)*r00*x7860))+(((-1.0)*x7861)));
evalcond[3]=(((sj2*x7863))+((cj2*sj1*x7853))+(((-1.0)*r10*x7860))+(((-1.0)*x7856)));
evalcond[4]=(((x7852*x7858))+(((-1.0)*cj4*r01*x7860))+((r00*x7854))+(((-1.0)*sj2*x7864))+(((-1.0)*r02*x7859)));
evalcond[5]=((((-1.0)*x7866))+((r10*x7854))+((x7853*x7858))+(((-1.0)*x7857*x7862))+(((-1.0)*r12*x7859)));
evalcond[6]=((((-0.1)*x7861))+(((0.134)*x7853))+(((-0.392)*x7852*x7858))+(((-1.0)*px))+(((0.392)*sj2*x7864))+(((-0.425)*x7865))+(((-1.0)*r00*x7855)));
evalcond[7]=((((-0.392)*x7853*x7858))+(((-1.0)*r10*x7855))+(((-1.0)*py))+(((-0.1)*x7856))+(((-0.425)*x7863))+(((-0.134)*x7852))+(((0.392)*x7866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7867=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x7867.valid){
continue;
}
CheckValue<IkReal> x7868 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7868.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7867.value)))+(x7868.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7869=IKcos(j0);
IkReal x7870=IKsin(j0);
IkReal x7871=((0.1)*sj5);
IkReal x7872=(sj1*sj2);
IkReal x7873=(cj5*r11);
IkReal x7874=(cj1*cj2);
IkReal x7875=(cj2*sj1);
IkReal x7876=((1.0)*sj5);
IkReal x7877=(cj5*r01);
IkReal x7878=((0.425)*cj1);
IkReal x7879=(cj1*sj2);
IkReal x7880=((0.392)*x7870);
IkReal x7881=((0.392)*x7869);
evalcond[0]=((((-1.0)*r00*x7876))+(((-1.0)*x7877))+((x7869*x7875))+((x7869*x7879)));
evalcond[1]=((((-1.0)*x7873))+(((-1.0)*r10*x7876))+((x7870*x7879))+((x7870*x7875)));
evalcond[2]=((((-1.0)*r00*x7871))+(((0.134)*x7870))+(((-1.0)*px))+((x7872*x7881))+(((-1.0)*x7869*x7878))+(((-1.0)*x7874*x7881))+(((-0.1)*x7877)));
evalcond[3]=((((-1.0)*x7870*x7878))+(((-0.134)*x7869))+(((-1.0)*py))+((x7872*x7880))+(((-1.0)*r10*x7871))+(((-1.0)*x7874*x7880))+(((-0.1)*x7873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7882=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7882;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7882);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7883=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7883;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7883);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7884=((1.0)*cj5);
IkReal x7885=((((-1.0)*r21*x7884))+(((-1.0)*r20*sj5)));
j4eval[0]=x7885;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x7884))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x7884)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x7885);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7886=((-1.0)*r20);
IkReal x7888 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7888)==0){
continue;
}
IkReal x7887=pow(x7888,-0.5);
CheckValue<IkReal> x7889 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7886),IKFAST_ATAN2_MAGTHRESH);
if(!x7889.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7889.value));
IkReal gconst133=(r21*x7887);
IkReal gconst134=(x7886*x7887);
CheckValue<IkReal> x7890 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7890.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7890.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7891=((-1.0)*r20);
IkReal x7892=x7887;
CheckValue<IkReal> x7894 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7891),IKFAST_ATAN2_MAGTHRESH);
if(!x7894.valid){
continue;
}
IkReal x7893=((-1.0)*(x7894.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7893;
IkReal gconst132=x7893;
IkReal gconst133=(r21*x7892);
IkReal gconst134=(x7891*x7892);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7895=((-1.0)*r20);
IkReal x7896=x7887;
CheckValue<IkReal> x7898 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7895),IKFAST_ATAN2_MAGTHRESH);
if(!x7898.valid){
continue;
}
IkReal x7897=((-1.0)*(x7898.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7897;
IkReal gconst132=x7897;
IkReal gconst133=(r21*x7896);
IkReal gconst134=(x7895*x7896);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7899=((-1.0)*r20);
IkReal x7900=x7887;
CheckValue<IkReal> x7902 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7899),IKFAST_ATAN2_MAGTHRESH);
if(!x7902.valid){
continue;
}
IkReal x7901=((-1.0)*(x7902.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7901;
IkReal gconst132=x7901;
IkReal gconst133=(r21*x7900);
IkReal gconst134=(x7899*x7900);
IkReal x7903=r22*r22;
CheckValue<IkReal> x7906=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7903))),-1);
if(!x7906.valid){
continue;
}
IkReal x7904=x7906.value;
IkReal x7905=((((2.0)*x7904*(r20*r20)*(r21*r21)))+((x7904*(r21*r21*r21*r21)))+((x7904*(r20*r20*r20*r20)))+x7903);
j4eval[0]=x7905;
j4eval[1]=IKsign(x7905);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7907=(gconst133*r21);
IkReal x7908=(cj1*sj2);
IkReal x7909=(gconst134*r20);
IkReal x7910=(cj2*sj1);
CheckValue<IkReal> x7911=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x7907*x7909))+(x7909*x7909)+(x7907*x7907))),-1);
if(!x7911.valid){
continue;
}
CheckValue<IkReal> x7912 = IKatan2WithCheck(IkReal((((r22*x7910))+((r22*x7908)))),IkReal((((x7907*x7910))+(((-1.0)*x7908*x7909))+(((-1.0)*x7909*x7910))+((x7907*x7908)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7911.value)))+(x7912.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7913=IKsin(j4);
IkReal x7914=IKcos(j4);
IkReal x7915=(cj1*cj2);
IkReal x7916=(gconst133*r11);
IkReal x7917=(gconst133*r21);
IkReal x7918=(gconst133*r01);
IkReal x7919=((1.0)*cj0);
IkReal x7920=(sj1*sj2);
IkReal x7921=((1.0)*x7914);
IkReal x7922=(gconst134*x7914);
IkReal x7923=((1.0)*x7913);
evalcond[0]=(((x7913*x7917))+(((-1.0)*r22*x7921))+(((-1.0)*gconst134*r20*x7923)));
evalcond[1]=(((x7913*x7918))+sj0+(((-1.0)*r02*x7921))+(((-1.0)*gconst134*r00*x7923)));
evalcond[2]=(((x7913*x7916))+(((-1.0)*gconst134*r10*x7923))+(((-1.0)*x7919))+(((-1.0)*r12*x7921)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7923))+((r20*x7922))+(((-1.0)*x7917*x7921)));
evalcond[4]=((((-1.0)*r02*x7923))+((r00*x7922))+(((-1.0)*x7918*x7921))+(((-1.0)*x7919*x7920))+((cj0*x7915)));
evalcond[5]=(((sj0*x7915))+(((-1.0)*sj0*x7920))+((r10*x7922))+(((-1.0)*r12*x7923))+(((-1.0)*x7916*x7921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7924=IKPowWithIntegerCheck(IKsign((((gconst134*r01))+((gconst133*r00)))),-1);
if(!x7924.valid){
continue;
}
CheckValue<IkReal> x7925 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*gconst134*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7924.value)))+(x7925.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7926=IKsin(j4);
IkReal x7927=IKcos(j4);
IkReal x7928=(cj1*cj2);
IkReal x7929=(gconst133*r11);
IkReal x7930=(gconst133*r21);
IkReal x7931=(gconst133*r01);
IkReal x7932=((1.0)*cj0);
IkReal x7933=(sj1*sj2);
IkReal x7934=((1.0)*x7927);
IkReal x7935=(gconst134*x7927);
IkReal x7936=((1.0)*x7926);
evalcond[0]=(((x7926*x7930))+(((-1.0)*r22*x7934))+(((-1.0)*gconst134*r20*x7936)));
evalcond[1]=(sj0+((x7926*x7931))+(((-1.0)*r02*x7934))+(((-1.0)*gconst134*r00*x7936)));
evalcond[2]=(((x7926*x7929))+(((-1.0)*gconst134*r10*x7936))+(((-1.0)*r12*x7934))+(((-1.0)*x7932)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7936))+((r20*x7935))+((cj1*sj2))+(((-1.0)*x7930*x7934)));
evalcond[4]=((((-1.0)*x7932*x7933))+(((-1.0)*r02*x7936))+((r00*x7935))+(((-1.0)*x7931*x7934))+((cj0*x7928)));
evalcond[5]=((((-1.0)*sj0*x7933))+(((-1.0)*r12*x7936))+((r10*x7935))+(((-1.0)*x7929*x7934))+((sj0*x7928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7937 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst134*r20*sj0))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7937.valid){
continue;
}
CheckValue<IkReal> x7938=IKPowWithIntegerCheck(IKsign((((gconst134*r11))+((gconst133*r10)))),-1);
if(!x7938.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7937.value)+(((1.5707963267949)*(x7938.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7939=IKsin(j4);
IkReal x7940=IKcos(j4);
IkReal x7941=(cj1*cj2);
IkReal x7942=(gconst133*r11);
IkReal x7943=(gconst133*r21);
IkReal x7944=(gconst133*r01);
IkReal x7945=((1.0)*cj0);
IkReal x7946=(sj1*sj2);
IkReal x7947=((1.0)*x7940);
IkReal x7948=(gconst134*x7940);
IkReal x7949=((1.0)*x7939);
evalcond[0]=((((-1.0)*r22*x7947))+((x7939*x7943))+(((-1.0)*gconst134*r20*x7949)));
evalcond[1]=(sj0+(((-1.0)*r02*x7947))+(((-1.0)*gconst134*r00*x7949))+((x7939*x7944)));
evalcond[2]=((((-1.0)*gconst134*r10*x7949))+(((-1.0)*r12*x7947))+((x7939*x7942))+(((-1.0)*x7945)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7949))+((r20*x7948))+((cj1*sj2))+(((-1.0)*x7943*x7947)));
evalcond[4]=(((cj0*x7941))+(((-1.0)*r02*x7949))+(((-1.0)*x7944*x7947))+(((-1.0)*x7945*x7946))+((r00*x7948)));
evalcond[5]=(((sj0*x7941))+(((-1.0)*sj0*x7946))+(((-1.0)*r12*x7949))+((r10*x7948))+(((-1.0)*x7942*x7947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7950=((-1.0)*r21);
IkReal x7952 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7952)==0){
continue;
}
IkReal x7951=pow(x7952,-0.5);
CheckValue<IkReal> x7953 = IKatan2WithCheck(IkReal(x7950),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7953.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7953.value))));
IkReal gconst136=(x7950*x7951);
IkReal gconst137=((1.0)*r20*x7951);
CheckValue<IkReal> x7954 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7954.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7954.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7955=((-1.0)*r21);
CheckValue<IkReal> x7958 = IKatan2WithCheck(IkReal(x7955),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7958.valid){
continue;
}
IkReal x7956=((1.0)*(x7958.value));
IkReal x7957=x7951;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7956)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7956)));
IkReal gconst136=(x7955*x7957);
IkReal gconst137=((1.0)*r20*x7957);
IkReal x7959=r22*r22;
IkReal x7960=((1.0)*x7959);
CheckValue<IkReal> x7964=IKPowWithIntegerCheck(((-1.0)+x7959),-1);
if(!x7964.valid){
continue;
}
IkReal x7961=x7964.value;
if((((1.0)+(((-1.0)*x7960)))) < -0.00001)
continue;
IkReal x7962=IKsqrt(((1.0)+(((-1.0)*x7960))));
IkReal x7963=(sj0*x7961*x7962);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x7960*x7963))+x7963))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7965=((-1.0)*r21);
CheckValue<IkReal> x7968 = IKatan2WithCheck(IkReal(x7965),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7968.valid){
continue;
}
IkReal x7966=((1.0)*(x7968.value));
IkReal x7967=x7951;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7966)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7966)));
IkReal gconst136=(x7965*x7967);
IkReal gconst137=((1.0)*r20*x7967);
IkReal x7969=r22*r22;
IkReal x7970=((1.0)*x7969);
CheckValue<IkReal> x7974=IKPowWithIntegerCheck(((-1.0)+x7969),-1);
if(!x7974.valid){
continue;
}
IkReal x7971=x7974.value;
if((((1.0)+(((-1.0)*x7970)))) < -0.00001)
continue;
IkReal x7972=IKsqrt(((1.0)+(((-1.0)*x7970))));
IkReal x7973=(cj0*x7971*x7972);
j4eval[0]=((IKabs(((((-1.0)*x7970*x7973))+x7973)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7975=((-1.0)*r21);
CheckValue<IkReal> x7978 = IKatan2WithCheck(IkReal(x7975),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7978.valid){
continue;
}
IkReal x7976=((1.0)*(x7978.value));
IkReal x7977=x7951;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7976)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7976)));
IkReal gconst136=(x7975*x7977);
IkReal gconst137=((1.0)*r20*x7977);
IkReal x7979=r22*r22;
IkReal x7980=(cj0*r02);
IkReal x7981=(r12*sj0);
CheckValue<IkReal> x7985=IKPowWithIntegerCheck(((-1.0)+x7979),-1);
if(!x7985.valid){
continue;
}
IkReal x7982=x7985.value;
if((((1.0)+(((-1.0)*x7979)))) < -0.00001)
continue;
IkReal x7983=IKsqrt(((1.0)+(((-1.0)*x7979))));
IkReal x7984=((1.0)*r22*x7982*x7983);
j4eval[0]=0;
j4eval[1]=((IKabs((x7980+x7981)))+(IKabs(((((-1.0)*x7980*x7984))+(((-1.0)*x7981*x7984))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7986=((1.0)*gconst137);
CheckValue<IkReal> x7987 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x7986))+((gconst136*r11*sj0))+((cj0*gconst136*r01))+(((-1.0)*cj0*r00*x7986)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7987.valid){
continue;
}
CheckValue<IkReal> x7988=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7986))+(((-1.0)*gconst136*r20)))),-1);
if(!x7988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7987.value)+(((1.5707963267949)*(x7988.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7989=IKsin(j4);
IkReal x7990=IKcos(j4);
IkReal x7991=(gconst136*r01);
IkReal x7992=(gconst137*r10);
IkReal x7993=(cj1*cj2);
IkReal x7994=(gconst137*r20);
IkReal x7995=(gconst136*r11);
IkReal x7996=(gconst136*r21);
IkReal x7997=(gconst137*r00);
IkReal x7998=((1.0)*cj0);
IkReal x7999=(sj1*sj2);
IkReal x8000=((1.0)*x7990);
IkReal x8001=((1.0)*x7989);
evalcond[0]=(((x7989*x7996))+(((-1.0)*r22*x8000))+(((-1.0)*x7994*x8001)));
evalcond[1]=(sj0+(((-1.0)*x7997*x8001))+((x7989*x7991))+(((-1.0)*r02*x8000)));
evalcond[2]=(((x7989*x7995))+(((-1.0)*r12*x8000))+(((-1.0)*x7992*x8001))+(((-1.0)*x7998)));
evalcond[3]=(((cj2*sj1))+((x7990*x7994))+(((-1.0)*x7996*x8000))+((cj1*sj2))+(((-1.0)*r22*x8001)));
evalcond[4]=(((x7990*x7997))+(((-1.0)*x7998*x7999))+((cj0*x7993))+(((-1.0)*x7991*x8000))+(((-1.0)*r02*x8001)));
evalcond[5]=(((x7990*x7992))+(((-1.0)*x7995*x8000))+(((-1.0)*sj0*x7999))+((sj0*x7993))+(((-1.0)*r12*x8001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8002 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst137*r20))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8002.valid){
continue;
}
CheckValue<IkReal> x8003=IKPowWithIntegerCheck(IKsign((((gconst136*r00))+((gconst137*r01)))),-1);
if(!x8003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8002.value)+(((1.5707963267949)*(x8003.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8004=IKsin(j4);
IkReal x8005=IKcos(j4);
IkReal x8006=(gconst136*r01);
IkReal x8007=(gconst137*r10);
IkReal x8008=(cj1*cj2);
IkReal x8009=(gconst137*r20);
IkReal x8010=(gconst136*r11);
IkReal x8011=(gconst136*r21);
IkReal x8012=(gconst137*r00);
IkReal x8013=((1.0)*cj0);
IkReal x8014=(sj1*sj2);
IkReal x8015=((1.0)*x8005);
IkReal x8016=((1.0)*x8004);
evalcond[0]=((((-1.0)*r22*x8015))+(((-1.0)*x8009*x8016))+((x8004*x8011)));
evalcond[1]=((((-1.0)*x8012*x8016))+(((-1.0)*r02*x8015))+sj0+((x8004*x8006)));
evalcond[2]=(((x8004*x8010))+(((-1.0)*x8013))+(((-1.0)*r12*x8015))+(((-1.0)*x8007*x8016)));
evalcond[3]=((((-1.0)*x8011*x8015))+(((-1.0)*r22*x8016))+((x8005*x8009))+((cj2*sj1))+((cj1*sj2)));
evalcond[4]=((((-1.0)*r02*x8016))+((cj0*x8008))+((x8005*x8012))+(((-1.0)*x8006*x8015))+(((-1.0)*x8013*x8014)));
evalcond[5]=(((sj0*x8008))+((x8005*x8007))+(((-1.0)*x8010*x8015))+(((-1.0)*sj0*x8014))+(((-1.0)*r12*x8016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8017=IKPowWithIntegerCheck(IKsign((((gconst137*r11))+((gconst136*r10)))),-1);
if(!x8017.valid){
continue;
}
CheckValue<IkReal> x8018 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*gconst137*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8017.value)))+(x8018.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8019=IKsin(j4);
IkReal x8020=IKcos(j4);
IkReal x8021=(gconst136*r01);
IkReal x8022=(gconst137*r10);
IkReal x8023=(cj1*cj2);
IkReal x8024=(gconst137*r20);
IkReal x8025=(gconst136*r11);
IkReal x8026=(gconst136*r21);
IkReal x8027=(gconst137*r00);
IkReal x8028=((1.0)*cj0);
IkReal x8029=(sj1*sj2);
IkReal x8030=((1.0)*x8020);
IkReal x8031=((1.0)*x8019);
evalcond[0]=((((-1.0)*x8024*x8031))+(((-1.0)*r22*x8030))+((x8019*x8026)));
evalcond[1]=(sj0+(((-1.0)*r02*x8030))+(((-1.0)*x8027*x8031))+((x8019*x8021)));
evalcond[2]=((((-1.0)*r12*x8030))+(((-1.0)*x8022*x8031))+(((-1.0)*x8028))+((x8019*x8025)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8026*x8030))+(((-1.0)*r22*x8031))+((x8020*x8024)));
evalcond[4]=((((-1.0)*r02*x8031))+((cj0*x8023))+((x8020*x8027))+(((-1.0)*x8028*x8029))+(((-1.0)*x8021*x8030)));
evalcond[5]=((((-1.0)*sj0*x8029))+(((-1.0)*r12*x8031))+((sj0*x8023))+((x8020*x8022))+(((-1.0)*x8025*x8030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8033 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8033)==0){
continue;
}
IkReal x8032=pow(x8033,-0.5);
CheckValue<IkReal> x8034 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8034.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8034.value));
IkReal gconst139=((-1.0)*r01*x8032);
IkReal gconst140=(r00*x8032);
CheckValue<IkReal> x8035 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8035.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8035.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x8038 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8038.valid){
continue;
}
IkReal x8036=((-1.0)*(x8038.value));
IkReal x8037=x8032;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8036;
IkReal gconst138=x8036;
IkReal gconst139=((-1.0)*r01*x8037);
IkReal gconst140=(r00*x8037);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8039=((1.0)*gconst140);
CheckValue<IkReal> x8040 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x8039))+((gconst139*r11*sj0))+(((-1.0)*r10*sj0*x8039))+((cj0*gconst139*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8040.valid){
continue;
}
CheckValue<IkReal> x8041=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8039))+(((-1.0)*gconst139*r20)))),-1);
if(!x8041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8040.value)+(((1.5707963267949)*(x8041.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8042=IKsin(j4);
IkReal x8043=IKcos(j4);
IkReal x8044=(gconst140*r00);
IkReal x8045=(cj1*cj2);
IkReal x8046=(gconst139*r11);
IkReal x8047=(gconst139*r01);
IkReal x8048=((1.0)*cj0);
IkReal x8049=(gconst139*r21);
IkReal x8050=(sj1*sj2);
IkReal x8051=((1.0)*x8043);
IkReal x8052=((1.0)*x8042);
IkReal x8053=(gconst140*x8043);
evalcond[0]=((((-1.0)*gconst140*r20*x8052))+(((-1.0)*r22*x8051))+((x8042*x8049)));
evalcond[1]=(sj0+(((-1.0)*r02*x8051))+(((-1.0)*x8044*x8052))+((x8042*x8047)));
evalcond[2]=((((-1.0)*r12*x8051))+(((-1.0)*x8048))+(((-1.0)*gconst140*r10*x8052))+((x8042*x8046)));
evalcond[3]=(((cj2*sj1))+((r20*x8053))+((cj1*sj2))+(((-1.0)*r22*x8052))+(((-1.0)*x8049*x8051)));
evalcond[4]=((((-1.0)*x8047*x8051))+(((-1.0)*r02*x8052))+((cj0*x8045))+((x8043*x8044))+(((-1.0)*x8048*x8050)));
evalcond[5]=((((-1.0)*x8046*x8051))+(((-1.0)*r12*x8052))+(((-1.0)*sj0*x8050))+((r10*x8053))+((sj0*x8045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8054 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst139*r21*sj0))+(((-1.0)*gconst140*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8054.valid){
continue;
}
CheckValue<IkReal> x8055=IKPowWithIntegerCheck(IKsign((((gconst140*r11))+((gconst139*r10)))),-1);
if(!x8055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8054.value)+(((1.5707963267949)*(x8055.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8056=IKsin(j4);
IkReal x8057=IKcos(j4);
IkReal x8058=(gconst140*r00);
IkReal x8059=(cj1*cj2);
IkReal x8060=(gconst139*r11);
IkReal x8061=(gconst139*r01);
IkReal x8062=((1.0)*cj0);
IkReal x8063=(gconst139*r21);
IkReal x8064=(sj1*sj2);
IkReal x8065=((1.0)*x8057);
IkReal x8066=((1.0)*x8056);
IkReal x8067=(gconst140*x8057);
evalcond[0]=((((-1.0)*gconst140*r20*x8066))+(((-1.0)*r22*x8065))+((x8056*x8063)));
evalcond[1]=(sj0+(((-1.0)*x8058*x8066))+((x8056*x8061))+(((-1.0)*r02*x8065)));
evalcond[2]=((((-1.0)*x8062))+(((-1.0)*gconst140*r10*x8066))+(((-1.0)*r12*x8065))+((x8056*x8060)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8067))+(((-1.0)*x8063*x8065))+(((-1.0)*r22*x8066)));
evalcond[4]=((((-1.0)*x8061*x8065))+((cj0*x8059))+(((-1.0)*x8062*x8064))+((x8057*x8058))+(((-1.0)*r02*x8066)));
evalcond[5]=(((r10*x8067))+(((-1.0)*sj0*x8064))+((sj0*x8059))+(((-1.0)*r12*x8066))+(((-1.0)*x8060*x8065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8069 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8069)==0){
continue;
}
IkReal x8068=pow(x8069,-0.5);
CheckValue<IkReal> x8070 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8070.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8070.value))));
IkReal gconst142=((1.0)*r01*x8068);
IkReal gconst143=((-1.0)*r00*x8068);
CheckValue<IkReal> x8071 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8071.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8071.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x8074 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8074.valid){
continue;
}
IkReal x8072=((1.0)*(x8074.value));
IkReal x8073=x8068;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8072)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8072)));
IkReal gconst142=((1.0)*r01*x8073);
IkReal gconst143=((-1.0)*r00*x8073);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x8077 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8077.valid){
continue;
}
IkReal x8075=((1.0)*(x8077.value));
IkReal x8076=x8068;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8075)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8075)));
IkReal gconst142=((1.0)*r01*x8076);
IkReal gconst143=((-1.0)*r00*x8076);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8080 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8080.valid){
continue;
}
IkReal x8078=((1.0)*(x8080.value));
IkReal x8079=x8068;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8078)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8078)));
IkReal gconst142=((1.0)*r01*x8079);
IkReal gconst143=((-1.0)*r00*x8079);
IkReal x8081=r02*r02;
IkReal x8082=(r12*sj0);
IkReal x8083=x8068;
IkReal x8084=(cj0*x8083);
j4eval[0]=((IKabs(((((-1.0)*x8084))+((x8081*x8084))+((r02*x8082*x8083)))))+(IKabs((x8082+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8085=((1.0)*gconst143);
CheckValue<IkReal> x8086 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x8085))+(((-1.0)*cj0*r00*x8085))+((cj0*gconst142*r01))+((gconst142*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8086.valid){
continue;
}
CheckValue<IkReal> x8087=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8085))+(((-1.0)*gconst142*r20)))),-1);
if(!x8087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8086.value)+(((1.5707963267949)*(x8087.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8088=IKsin(j4);
IkReal x8089=IKcos(j4);
IkReal x8090=(cj1*cj2);
IkReal x8091=(gconst143*r20);
IkReal x8092=((1.0)*cj0);
IkReal x8093=(sj1*sj2);
IkReal x8094=((1.0)*x8089);
IkReal x8095=((1.0)*x8088);
IkReal x8096=(gconst142*x8088);
IkReal x8097=(gconst143*x8089);
evalcond[0]=((((-1.0)*x8091*x8095))+(((-1.0)*r22*x8094))+((r21*x8096)));
evalcond[1]=(sj0+(((-1.0)*r02*x8094))+(((-1.0)*gconst143*r00*x8095))+((r01*x8096)));
evalcond[2]=((((-1.0)*x8092))+((r11*x8096))+(((-1.0)*r12*x8094))+(((-1.0)*gconst143*r10*x8095)));
evalcond[3]=(((cj2*sj1))+((x8089*x8091))+((cj1*sj2))+(((-1.0)*r22*x8095))+(((-1.0)*gconst142*r21*x8094)));
evalcond[4]=((((-1.0)*x8092*x8093))+(((-1.0)*r02*x8095))+((r00*x8097))+((cj0*x8090))+(((-1.0)*gconst142*r01*x8094)));
evalcond[5]=(((r10*x8097))+((sj0*x8090))+(((-1.0)*r12*x8095))+(((-1.0)*gconst142*r11*x8094))+(((-1.0)*sj0*x8093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8098=IKPowWithIntegerCheck(IKsign((((gconst143*r01))+((gconst142*r00)))),-1);
if(!x8098.valid){
continue;
}
CheckValue<IkReal> x8099 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst143*r20))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8098.value)))+(x8099.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8100=IKsin(j4);
IkReal x8101=IKcos(j4);
IkReal x8102=(cj1*cj2);
IkReal x8103=(gconst143*r20);
IkReal x8104=((1.0)*cj0);
IkReal x8105=(sj1*sj2);
IkReal x8106=((1.0)*x8101);
IkReal x8107=((1.0)*x8100);
IkReal x8108=(gconst142*x8100);
IkReal x8109=(gconst143*x8101);
evalcond[0]=((((-1.0)*x8103*x8107))+(((-1.0)*r22*x8106))+((r21*x8108)));
evalcond[1]=(sj0+((r01*x8108))+(((-1.0)*gconst143*r00*x8107))+(((-1.0)*r02*x8106)));
evalcond[2]=((((-1.0)*x8104))+(((-1.0)*gconst143*r10*x8107))+((r11*x8108))+(((-1.0)*r12*x8106)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x8106))+((x8101*x8103))+((cj1*sj2))+(((-1.0)*r22*x8107)));
evalcond[4]=((((-1.0)*x8104*x8105))+(((-1.0)*gconst142*r01*x8106))+((cj0*x8102))+((r00*x8109))+(((-1.0)*r02*x8107)));
evalcond[5]=(((sj0*x8102))+((r10*x8109))+(((-1.0)*sj0*x8105))+(((-1.0)*gconst142*r11*x8106))+(((-1.0)*r12*x8107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8110=IKPowWithIntegerCheck(IKsign((((gconst143*r11))+((gconst142*r10)))),-1);
if(!x8110.valid){
continue;
}
CheckValue<IkReal> x8111 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst142*r21*sj0))+(((-1.0)*gconst143*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8110.value)))+(x8111.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8112=IKsin(j4);
IkReal x8113=IKcos(j4);
IkReal x8114=(cj1*cj2);
IkReal x8115=(gconst143*r20);
IkReal x8116=((1.0)*cj0);
IkReal x8117=(sj1*sj2);
IkReal x8118=((1.0)*x8113);
IkReal x8119=((1.0)*x8112);
IkReal x8120=(gconst142*x8112);
IkReal x8121=(gconst143*x8113);
evalcond[0]=((((-1.0)*x8115*x8119))+((r21*x8120))+(((-1.0)*r22*x8118)));
evalcond[1]=((((-1.0)*gconst143*r00*x8119))+sj0+(((-1.0)*r02*x8118))+((r01*x8120)));
evalcond[2]=((((-1.0)*x8116))+(((-1.0)*r12*x8118))+(((-1.0)*gconst143*r10*x8119))+((r11*x8120)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8119))+((x8113*x8115))+(((-1.0)*gconst142*r21*x8118)));
evalcond[4]=(((cj0*x8114))+(((-1.0)*x8116*x8117))+(((-1.0)*gconst142*r01*x8118))+((r00*x8121))+(((-1.0)*r02*x8119)));
evalcond[5]=((((-1.0)*r12*x8119))+((r10*x8121))+(((-1.0)*gconst142*r11*x8118))+(((-1.0)*sj0*x8117))+((sj0*x8114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8122=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8122;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8122);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8123=((1.0)*cj5);
IkReal x8124=((((-1.0)*r21*x8123))+(((-1.0)*r20*sj5)));
j4eval[0]=x8124;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x8123)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8124);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8125=cj5*cj5;
IkReal x8126=r01*r01;
IkReal x8127=(cj5*r00);
IkReal x8128=(r01*sj5);
IkReal x8129=(((x8125*(r00*r00)))+(r02*r02)+(((-2.0)*x8127*x8128))+x8126+(((-1.0)*x8125*x8126)));
j4eval[0]=x8129;
j4eval[1]=((IKabs(r02))+(IKabs((x8127+(((-1.0)*x8128))))));
j4eval[2]=IKsign(x8129);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8130=cj5*cj5;
IkReal x8131=r01*r01;
IkReal x8132=(r01*sj5);
IkReal x8133=(cj5*r00);
CheckValue<IkReal> x8134 = IKatan2WithCheck(IkReal(((((-1.0)*x8132))+x8133)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8134.valid){
continue;
}
CheckValue<IkReal> x8135=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8130*x8131))+(((-2.0)*x8132*x8133))+((x8130*(r00*r00)))+(r02*r02)+x8131)),-1);
if(!x8135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8134.value)+(((1.5707963267949)*(x8135.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8136=IKsin(j4);
IkReal x8137=IKcos(j4);
IkReal x8138=(cj5*r10);
IkReal x8139=(r01*sj5);
IkReal x8140=(cj5*r00);
IkReal x8141=(cj5*r20);
IkReal x8142=((1.0)*x8137);
IkReal x8143=((1.0)*x8136);
IkReal x8144=(sj5*x8136);
evalcond[0]=((((-1.0)*x8141*x8143))+(((-1.0)*r22*x8142))+((r21*x8144)));
evalcond[1]=((((-1.0)*x8138*x8143))+((r11*x8144))+(((-1.0)*r12*x8142)));
evalcond[2]=((((-1.0)*x8139*x8142))+(((-1.0)*r02*x8143))+((x8137*x8140)));
evalcond[3]=((1.0)+((x8136*x8139))+(((-1.0)*x8140*x8143))+(((-1.0)*r02*x8142)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8143))+(((-1.0)*r21*sj5*x8142))+((x8137*x8141)));
evalcond[5]=((((-1.0)*r11*sj5*x8142))+(((-1.0)*sj1*sj2))+((x8137*x8138))+(((-1.0)*r12*x8143))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8145=((1.0)*cj5);
CheckValue<IkReal> x8146 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x8145))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8146.valid){
continue;
}
CheckValue<IkReal> x8147=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8145))+(((-1.0)*r20*sj5)))),-1);
if(!x8147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8146.value)+(((1.5707963267949)*(x8147.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8148=IKsin(j4);
IkReal x8149=IKcos(j4);
IkReal x8150=(cj5*r10);
IkReal x8151=(r01*sj5);
IkReal x8152=(cj5*r00);
IkReal x8153=(cj5*r20);
IkReal x8154=((1.0)*x8149);
IkReal x8155=((1.0)*x8148);
IkReal x8156=(sj5*x8148);
evalcond[0]=((((-1.0)*x8153*x8155))+(((-1.0)*r22*x8154))+((r21*x8156)));
evalcond[1]=((((-1.0)*x8150*x8155))+((r11*x8156))+(((-1.0)*r12*x8154)));
evalcond[2]=((((-1.0)*r02*x8155))+((x8149*x8152))+(((-1.0)*x8151*x8154)));
evalcond[3]=((1.0)+((x8148*x8151))+(((-1.0)*r02*x8154))+(((-1.0)*x8152*x8155)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8149*x8153))+(((-1.0)*r21*sj5*x8154))+(((-1.0)*r22*x8155)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8154))+((x8149*x8150))+((cj1*cj2))+(((-1.0)*r12*x8155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8157 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8157.valid){
continue;
}
CheckValue<IkReal> x8158=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8157.value)+(((1.5707963267949)*(x8158.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8159=IKsin(j4);
IkReal x8160=IKcos(j4);
IkReal x8161=(cj5*r10);
IkReal x8162=(r01*sj5);
IkReal x8163=(cj5*r00);
IkReal x8164=(cj5*r20);
IkReal x8165=((1.0)*x8160);
IkReal x8166=((1.0)*x8159);
IkReal x8167=(sj5*x8159);
evalcond[0]=(((r21*x8167))+(((-1.0)*r22*x8165))+(((-1.0)*x8164*x8166)));
evalcond[1]=(((r11*x8167))+(((-1.0)*x8161*x8166))+(((-1.0)*r12*x8165)));
evalcond[2]=(((x8160*x8163))+(((-1.0)*r02*x8166))+(((-1.0)*x8162*x8165)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8165))+((x8159*x8162))+(((-1.0)*x8163*x8166)));
evalcond[4]=(((cj2*sj1))+((x8160*x8164))+(((-1.0)*r21*sj5*x8165))+((cj1*sj2))+(((-1.0)*r22*x8166)));
evalcond[5]=(((x8160*x8161))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8166))+(((-1.0)*r11*sj5*x8165))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8168=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8168;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8168);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8169=((1.0)*cj5);
IkReal x8170=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8169)));
j4eval[0]=x8170;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8169))))));
j4eval[2]=IKsign(x8170);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8171=cj5*cj5;
IkReal x8172=r01*r01;
IkReal x8173=(r01*sj5);
IkReal x8174=(cj5*r00);
IkReal x8175=((((-1.0)*x8172))+(((-1.0)*x8171*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x8173*x8174))+((x8171*x8172)));
j4eval[0]=x8175;
j4eval[1]=IKsign(x8175);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8173))+x8174))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8176=cj5*cj5;
IkReal x8177=r01*r01;
IkReal x8178=(r01*sj5);
IkReal x8179=(cj5*r00);
CheckValue<IkReal> x8180=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8177))+(((2.0)*x8178*x8179))+(((-1.0)*(r02*r02)))+((x8176*x8177))+(((-1.0)*x8176*(r00*r00))))),-1);
if(!x8180.valid){
continue;
}
CheckValue<IkReal> x8181 = IKatan2WithCheck(IkReal(((((-1.0)*x8178))+x8179)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8180.value)))+(x8181.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8182=IKsin(j4);
IkReal x8183=IKcos(j4);
IkReal x8184=(cj5*r10);
IkReal x8185=(r01*sj5);
IkReal x8186=(cj5*r00);
IkReal x8187=(cj5*r20);
IkReal x8188=((1.0)*x8183);
IkReal x8189=((1.0)*x8182);
IkReal x8190=(sj5*x8182);
evalcond[0]=((((-1.0)*r22*x8188))+((r21*x8190))+(((-1.0)*x8187*x8189)));
evalcond[1]=(((r11*x8190))+(((-1.0)*r12*x8188))+(((-1.0)*x8184*x8189)));
evalcond[2]=(((x8183*x8186))+(((-1.0)*r02*x8189))+(((-1.0)*x8185*x8188)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8188))+((x8182*x8185))+(((-1.0)*x8186*x8189)));
evalcond[4]=(((cj2*sj1))+((x8183*x8187))+(((-1.0)*r22*x8189))+((cj1*sj2))+(((-1.0)*r21*sj5*x8188)));
evalcond[5]=(((x8183*x8184))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8189))+(((-1.0)*r11*sj5*x8188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8191=((1.0)*cj5);
CheckValue<IkReal> x8192=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8191)))),-1);
if(!x8192.valid){
continue;
}
CheckValue<IkReal> x8193 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8191)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8192.value)))+(x8193.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8194=IKsin(j4);
IkReal x8195=IKcos(j4);
IkReal x8196=(cj5*r10);
IkReal x8197=(r01*sj5);
IkReal x8198=(cj5*r00);
IkReal x8199=(cj5*r20);
IkReal x8200=((1.0)*x8195);
IkReal x8201=((1.0)*x8194);
IkReal x8202=(sj5*x8194);
evalcond[0]=((((-1.0)*r22*x8200))+((r21*x8202))+(((-1.0)*x8199*x8201)));
evalcond[1]=(((r11*x8202))+(((-1.0)*x8196*x8201))+(((-1.0)*r12*x8200)));
evalcond[2]=(((x8195*x8198))+(((-1.0)*r02*x8201))+(((-1.0)*x8197*x8200)));
evalcond[3]=((-1.0)+(((-1.0)*x8198*x8201))+((x8194*x8197))+(((-1.0)*r02*x8200)));
evalcond[4]=(((cj2*sj1))+((x8195*x8199))+((cj1*sj2))+(((-1.0)*r21*sj5*x8200))+(((-1.0)*r22*x8201)));
evalcond[5]=(((x8195*x8196))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8201))+(((-1.0)*r11*sj5*x8200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8203=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8203.valid){
continue;
}
CheckValue<IkReal> x8204 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8203.value)))+(x8204.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8205=IKsin(j4);
IkReal x8206=IKcos(j4);
IkReal x8207=(cj5*r10);
IkReal x8208=(r01*sj5);
IkReal x8209=(cj5*r00);
IkReal x8210=(cj5*r20);
IkReal x8211=((1.0)*x8206);
IkReal x8212=((1.0)*x8205);
IkReal x8213=(sj5*x8205);
evalcond[0]=((((-1.0)*x8210*x8212))+(((-1.0)*r22*x8211))+((r21*x8213)));
evalcond[1]=(((r11*x8213))+(((-1.0)*r12*x8211))+(((-1.0)*x8207*x8212)));
evalcond[2]=(((x8206*x8209))+(((-1.0)*r02*x8212))+(((-1.0)*x8208*x8211)));
evalcond[3]=((-1.0)+(((-1.0)*x8209*x8212))+((x8205*x8208))+(((-1.0)*r02*x8211)));
evalcond[4]=(((x8206*x8210))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8211))+(((-1.0)*r22*x8212)));
evalcond[5]=(((x8206*x8207))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8212))+(((-1.0)*r11*sj5*x8211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8215 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8215)==0){
continue;
}
IkReal x8214=pow(x8215,-0.5);
CheckValue<IkReal> x8216 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8216.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8216.value));
IkReal gconst145=((-1.0)*r11*x8214);
IkReal gconst146=(r10*x8214);
CheckValue<IkReal> x8217 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8217.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8217.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x8220 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8220.valid){
continue;
}
IkReal x8218=((-1.0)*(x8220.value));
IkReal x8219=x8214;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8218;
IkReal gconst144=x8218;
IkReal gconst145=((-1.0)*r11*x8219);
IkReal gconst146=(r10*x8219);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8221=((1.0)*gconst146);
CheckValue<IkReal> x8222 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst145*r01))+(((-1.0)*r10*sj0*x8221))+(((-1.0)*cj0*r00*x8221))+((gconst145*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8222.valid){
continue;
}
CheckValue<IkReal> x8223=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r20))+(((-1.0)*r21*x8221)))),-1);
if(!x8223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8222.value)+(((1.5707963267949)*(x8223.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8224=IKsin(j4);
IkReal x8225=IKcos(j4);
IkReal x8226=(gconst146*r10);
IkReal x8227=(cj1*cj2);
IkReal x8228=(gconst145*r11);
IkReal x8229=(gconst146*r20);
IkReal x8230=(gconst146*r00);
IkReal x8231=((1.0)*cj0);
IkReal x8232=(sj1*sj2);
IkReal x8233=((1.0)*x8225);
IkReal x8234=((1.0)*x8224);
IkReal x8235=(gconst145*x8224);
evalcond[0]=((((-1.0)*x8229*x8234))+((r21*x8235))+(((-1.0)*r22*x8233)));
evalcond[1]=(sj0+(((-1.0)*r02*x8233))+((r01*x8235))+(((-1.0)*x8230*x8234)));
evalcond[2]=((((-1.0)*x8231))+((x8224*x8228))+(((-1.0)*x8226*x8234))+(((-1.0)*r12*x8233)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst145*r21*x8233))+(((-1.0)*r22*x8234))+((x8225*x8229)));
evalcond[4]=(((cj0*x8227))+(((-1.0)*r02*x8234))+(((-1.0)*gconst145*r01*x8233))+(((-1.0)*x8231*x8232))+((x8225*x8230)));
evalcond[5]=((((-1.0)*sj0*x8232))+(((-1.0)*x8228*x8233))+((x8225*x8226))+(((-1.0)*r12*x8234))+((sj0*x8227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8236 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst146*r20))+((cj0*gconst145*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8236.valid){
continue;
}
CheckValue<IkReal> x8237=IKPowWithIntegerCheck(IKsign((((gconst145*r00))+((gconst146*r01)))),-1);
if(!x8237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8236.value)+(((1.5707963267949)*(x8237.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8238=IKsin(j4);
IkReal x8239=IKcos(j4);
IkReal x8240=(gconst146*r10);
IkReal x8241=(cj1*cj2);
IkReal x8242=(gconst145*r11);
IkReal x8243=(gconst146*r20);
IkReal x8244=(gconst146*r00);
IkReal x8245=((1.0)*cj0);
IkReal x8246=(sj1*sj2);
IkReal x8247=((1.0)*x8239);
IkReal x8248=((1.0)*x8238);
IkReal x8249=(gconst145*x8238);
evalcond[0]=((((-1.0)*x8243*x8248))+(((-1.0)*r22*x8247))+((r21*x8249)));
evalcond[1]=((((-1.0)*x8244*x8248))+sj0+(((-1.0)*r02*x8247))+((r01*x8249)));
evalcond[2]=((((-1.0)*x8240*x8248))+((x8238*x8242))+(((-1.0)*x8245))+(((-1.0)*r12*x8247)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8248))+((x8239*x8243))+(((-1.0)*gconst145*r21*x8247)));
evalcond[4]=((((-1.0)*x8245*x8246))+(((-1.0)*gconst145*r01*x8247))+((cj0*x8241))+((x8239*x8244))+(((-1.0)*r02*x8248)));
evalcond[5]=((((-1.0)*sj0*x8246))+(((-1.0)*x8242*x8247))+((x8239*x8240))+((sj0*x8241))+(((-1.0)*r12*x8248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8251 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8251)==0){
continue;
}
IkReal x8250=pow(x8251,-0.5);
CheckValue<IkReal> x8252 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8252.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8252.value))));
IkReal gconst148=((1.0)*r11*x8250);
IkReal gconst149=((-1.0)*r10*x8250);
CheckValue<IkReal> x8253 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8253.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8253.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x8256 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8256.valid){
continue;
}
IkReal x8254=((1.0)*(x8256.value));
IkReal x8255=x8250;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8254)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8254)));
IkReal gconst148=((1.0)*r11*x8255);
IkReal gconst149=((-1.0)*r10*x8255);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8259 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8259.valid){
continue;
}
IkReal x8257=((1.0)*(x8259.value));
IkReal x8258=x8250;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8257)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8257)));
IkReal gconst148=((1.0)*r11*x8258);
IkReal gconst149=((-1.0)*r10*x8258);
IkReal x8260=r12*r12;
IkReal x8261=(cj0*r02);
IkReal x8262=x8250;
IkReal x8263=(sj0*x8262);
j4eval[0]=((IKabs((((r12*sj0))+x8261)))+(IKabs((((r12*x8261*x8262))+((x8260*x8263))+(((-1.0)*x8263))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8266 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8266.valid){
continue;
}
IkReal x8264=((1.0)*(x8266.value));
IkReal x8265=x8250;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8264)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8264)));
IkReal gconst148=((1.0)*r11*x8265);
IkReal gconst149=((-1.0)*r10*x8265);
IkReal x8267=(cj1*r22*sj2);
IkReal x8268=(cj2*r22*sj1);
IkReal x8269=x8250;
IkReal x8270=(r12*x8269);
j4eval[0]=((IKabs((x8268+x8267)))+(IKabs((((x8268*x8270))+((x8267*x8270))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8271=(cj2*sj1);
IkReal x8272=(cj1*sj2);
IkReal x8273=(gconst148*r21);
IkReal x8274=((1.0)*gconst149*r20);
CheckValue<IkReal> x8275=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((gconst149*gconst149)*(r20*r20)))+(((-2.0)*gconst149*r20*x8273))+(x8273*x8273))),-1);
if(!x8275.valid){
continue;
}
CheckValue<IkReal> x8276 = IKatan2WithCheck(IkReal((((r22*x8271))+((r22*x8272)))),IkReal(((((-1.0)*x8271*x8274))+(((-1.0)*x8272*x8274))+((x8271*x8273))+((x8272*x8273)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8275.value)))+(x8276.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8277=IKsin(j4);
IkReal x8278=IKcos(j4);
IkReal x8279=(cj1*cj2);
IkReal x8280=(gconst148*r11);
IkReal x8281=((1.0)*cj0);
IkReal x8282=(sj1*sj2);
IkReal x8283=((1.0)*x8278);
IkReal x8284=(gconst149*x8278);
IkReal x8285=((1.0)*x8277);
IkReal x8286=(gconst148*x8277);
evalcond[0]=(((r21*x8286))+(((-1.0)*gconst149*r20*x8285))+(((-1.0)*r22*x8283)));
evalcond[1]=((((-1.0)*r02*x8283))+sj0+((r01*x8286))+(((-1.0)*gconst149*r00*x8285)));
evalcond[2]=((((-1.0)*r12*x8283))+((x8277*x8280))+(((-1.0)*x8281))+(((-1.0)*gconst149*r10*x8285)));
evalcond[3]=((((-1.0)*gconst148*r21*x8283))+((cj2*sj1))+((cj1*sj2))+((r20*x8284))+(((-1.0)*r22*x8285)));
evalcond[4]=((((-1.0)*r02*x8285))+((r00*x8284))+(((-1.0)*x8281*x8282))+((cj0*x8279))+(((-1.0)*gconst148*r01*x8283)));
evalcond[5]=((((-1.0)*r12*x8285))+(((-1.0)*sj0*x8282))+((r10*x8284))+(((-1.0)*x8280*x8283))+((sj0*x8279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8287=((1.0)*gconst149);
CheckValue<IkReal> x8288 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x8287))+((cj0*gconst148*r01))+(((-1.0)*r10*sj0*x8287))+((gconst148*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8288.valid){
continue;
}
CheckValue<IkReal> x8289=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8287))+(((-1.0)*gconst148*r20)))),-1);
if(!x8289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8288.value)+(((1.5707963267949)*(x8289.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8290=IKsin(j4);
IkReal x8291=IKcos(j4);
IkReal x8292=(cj1*cj2);
IkReal x8293=(gconst148*r11);
IkReal x8294=((1.0)*cj0);
IkReal x8295=(sj1*sj2);
IkReal x8296=((1.0)*x8291);
IkReal x8297=(gconst149*x8291);
IkReal x8298=((1.0)*x8290);
IkReal x8299=(gconst148*x8290);
evalcond[0]=(((r21*x8299))+(((-1.0)*gconst149*r20*x8298))+(((-1.0)*r22*x8296)));
evalcond[1]=(sj0+((r01*x8299))+(((-1.0)*gconst149*r00*x8298))+(((-1.0)*r02*x8296)));
evalcond[2]=((((-1.0)*r12*x8296))+((x8290*x8293))+(((-1.0)*x8294))+(((-1.0)*gconst149*r10*x8298)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8296))+((r20*x8297))+((cj1*sj2))+(((-1.0)*r22*x8298)));
evalcond[4]=(((r00*x8297))+((cj0*x8292))+(((-1.0)*x8294*x8295))+(((-1.0)*r02*x8298))+(((-1.0)*gconst148*r01*x8296)));
evalcond[5]=((((-1.0)*r12*x8298))+((r10*x8297))+(((-1.0)*sj0*x8295))+(((-1.0)*x8293*x8296))+((sj0*x8292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8300=IKPowWithIntegerCheck(IKsign((((gconst148*r00))+((gconst149*r01)))),-1);
if(!x8300.valid){
continue;
}
CheckValue<IkReal> x8301 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst149*r20))+((cj0*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8300.value)))+(x8301.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8302=IKsin(j4);
IkReal x8303=IKcos(j4);
IkReal x8304=(cj1*cj2);
IkReal x8305=(gconst148*r11);
IkReal x8306=((1.0)*cj0);
IkReal x8307=(sj1*sj2);
IkReal x8308=((1.0)*x8303);
IkReal x8309=(gconst149*x8303);
IkReal x8310=((1.0)*x8302);
IkReal x8311=(gconst148*x8302);
evalcond[0]=((((-1.0)*gconst149*r20*x8310))+(((-1.0)*r22*x8308))+((r21*x8311)));
evalcond[1]=(sj0+((r01*x8311))+(((-1.0)*gconst149*r00*x8310))+(((-1.0)*r02*x8308)));
evalcond[2]=((((-1.0)*r12*x8308))+((x8302*x8305))+(((-1.0)*gconst149*r10*x8310))+(((-1.0)*x8306)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8310))+(((-1.0)*gconst148*r21*x8308))+((r20*x8309)));
evalcond[4]=((((-1.0)*gconst148*r01*x8308))+((r00*x8309))+(((-1.0)*r02*x8310))+((cj0*x8304))+(((-1.0)*x8306*x8307)));
evalcond[5]=(((sj0*x8304))+(((-1.0)*x8305*x8308))+((r10*x8309))+(((-1.0)*sj0*x8307))+(((-1.0)*r12*x8310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8312=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8312;
j4eval[1]=IKsign(x8312);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8313=((1.0)*cj5);
IkReal x8314=((((-1.0)*r21*x8313))+(((-1.0)*r20*sj5)));
j4eval[0]=x8314;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x8313)))))+(IKabs(r02)));
j4eval[2]=IKsign(x8314);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8315=cj5*cj5;
IkReal x8316=r11*r11;
IkReal x8317=(cj5*r10);
IkReal x8318=(r11*sj5);
IkReal x8319=((((-1.0)*x8315*(r10*r10)))+(((2.0)*x8317*x8318))+((x8315*x8316))+(((-1.0)*(r12*r12)))+(((-1.0)*x8316)));
j4eval[0]=x8319;
j4eval[1]=((IKabs(r12))+(IKabs((x8317+(((-1.0)*x8318))))));
j4eval[2]=IKsign(x8319);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8320=cj5*cj5;
IkReal x8321=r11*r11;
IkReal x8322=(cj5*r10);
IkReal x8323=(r11*sj5);
CheckValue<IkReal> x8324 = IKatan2WithCheck(IkReal((x8322+(((-1.0)*x8323)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8324.valid){
continue;
}
CheckValue<IkReal> x8325=IKPowWithIntegerCheck(IKsign(((((2.0)*x8322*x8323))+(((-1.0)*x8320*(r10*r10)))+(((-1.0)*x8321))+(((-1.0)*(r12*r12)))+((x8320*x8321)))),-1);
if(!x8325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8324.value)+(((1.5707963267949)*(x8325.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8326=IKsin(j4);
IkReal x8327=IKcos(j4);
IkReal x8328=(cj5*r10);
IkReal x8329=(r01*sj5);
IkReal x8330=(cj5*r00);
IkReal x8331=(cj5*r20);
IkReal x8332=((1.0)*x8327);
IkReal x8333=((1.0)*x8326);
IkReal x8334=(sj5*x8326);
evalcond[0]=(((r21*x8334))+(((-1.0)*r22*x8332))+(((-1.0)*x8331*x8333)));
evalcond[1]=(((x8326*x8329))+(((-1.0)*x8330*x8333))+(((-1.0)*r02*x8332)));
evalcond[2]=((((-1.0)*r12*x8333))+((x8327*x8328))+(((-1.0)*r11*sj5*x8332)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8332))+((r11*x8334))+(((-1.0)*x8328*x8333)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8333))+((cj1*sj2))+(((-1.0)*r21*sj5*x8332))+((x8327*x8331)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x8333))+(((-1.0)*x8329*x8332))+((x8327*x8330))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8335=((1.0)*cj5);
CheckValue<IkReal> x8336 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x8335)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8336.valid){
continue;
}
CheckValue<IkReal> x8337=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8335))+(((-1.0)*r20*sj5)))),-1);
if(!x8337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8336.value)+(((1.5707963267949)*(x8337.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8338=IKsin(j4);
IkReal x8339=IKcos(j4);
IkReal x8340=(cj5*r10);
IkReal x8341=(r01*sj5);
IkReal x8342=(cj5*r00);
IkReal x8343=(cj5*r20);
IkReal x8344=((1.0)*x8339);
IkReal x8345=((1.0)*x8338);
IkReal x8346=(sj5*x8338);
evalcond[0]=((((-1.0)*x8343*x8345))+((r21*x8346))+(((-1.0)*r22*x8344)));
evalcond[1]=((((-1.0)*x8342*x8345))+(((-1.0)*r02*x8344))+((x8338*x8341)));
evalcond[2]=((((-1.0)*r11*sj5*x8344))+((x8339*x8340))+(((-1.0)*r12*x8345)));
evalcond[3]=((-1.0)+(((-1.0)*x8340*x8345))+((r11*x8346))+(((-1.0)*r12*x8344)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8344))+((cj1*sj2))+(((-1.0)*r22*x8345))+((x8339*x8343)));
evalcond[5]=((((-1.0)*r02*x8345))+(((-1.0)*sj1*sj2))+(((-1.0)*x8341*x8344))+((cj1*cj2))+((x8339*x8342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8347 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8347.valid){
continue;
}
CheckValue<IkReal> x8348=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8347.value)+(((1.5707963267949)*(x8348.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8349=IKsin(j4);
IkReal x8350=IKcos(j4);
IkReal x8351=(cj5*r10);
IkReal x8352=(r01*sj5);
IkReal x8353=(cj5*r00);
IkReal x8354=(cj5*r20);
IkReal x8355=((1.0)*x8350);
IkReal x8356=((1.0)*x8349);
IkReal x8357=(sj5*x8349);
evalcond[0]=((((-1.0)*x8354*x8356))+(((-1.0)*r22*x8355))+((r21*x8357)));
evalcond[1]=((((-1.0)*r02*x8355))+(((-1.0)*x8353*x8356))+((x8349*x8352)));
evalcond[2]=(((x8350*x8351))+(((-1.0)*r11*sj5*x8355))+(((-1.0)*r12*x8356)));
evalcond[3]=((-1.0)+((r11*x8357))+(((-1.0)*r12*x8355))+(((-1.0)*x8351*x8356)));
evalcond[4]=(((x8350*x8354))+((cj2*sj1))+(((-1.0)*r22*x8356))+((cj1*sj2))+(((-1.0)*r21*sj5*x8355)));
evalcond[5]=(((x8350*x8353))+(((-1.0)*r02*x8356))+(((-1.0)*sj1*sj2))+(((-1.0)*x8352*x8355))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8358=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8358;
j4eval[1]=IKsign(x8358);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8359=((1.0)*cj5);
IkReal x8360=((((-1.0)*r01*x8359))+(((-1.0)*r00*sj5)));
j4eval[0]=x8360;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8359))))));
j4eval[2]=IKsign(x8360);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8361=cj5*cj5;
IkReal x8362=r11*r11;
IkReal x8363=(r11*sj5);
IkReal x8364=(cj5*r10);
IkReal x8365=((((-2.0)*x8363*x8364))+x8362+(r12*r12)+(((-1.0)*x8361*x8362))+((x8361*(r10*r10))));
j4eval[0]=x8365;
j4eval[1]=IKsign(x8365);
j4eval[2]=((IKabs(r12))+(IKabs((x8364+(((-1.0)*x8363))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8366=cj5*cj5;
IkReal x8367=r11*r11;
IkReal x8368=(cj5*r10);
IkReal x8369=(r11*sj5);
CheckValue<IkReal> x8370 = IKatan2WithCheck(IkReal((x8368+(((-1.0)*x8369)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8370.valid){
continue;
}
CheckValue<IkReal> x8371=IKPowWithIntegerCheck(IKsign((x8367+(r12*r12)+(((-2.0)*x8368*x8369))+((x8366*(r10*r10)))+(((-1.0)*x8366*x8367)))),-1);
if(!x8371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8370.value)+(((1.5707963267949)*(x8371.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8372=IKsin(j4);
IkReal x8373=IKcos(j4);
IkReal x8374=(cj5*r10);
IkReal x8375=(r01*sj5);
IkReal x8376=(cj5*r00);
IkReal x8377=(cj5*r20);
IkReal x8378=((1.0)*x8373);
IkReal x8379=((1.0)*x8372);
IkReal x8380=(sj5*x8372);
evalcond[0]=((((-1.0)*r22*x8378))+((r21*x8380))+(((-1.0)*x8377*x8379)));
evalcond[1]=((((-1.0)*r02*x8378))+(((-1.0)*x8376*x8379))+((x8372*x8375)));
evalcond[2]=((((-1.0)*r12*x8379))+((x8373*x8374))+(((-1.0)*r11*sj5*x8378)));
evalcond[3]=((1.0)+(((-1.0)*x8374*x8379))+(((-1.0)*r12*x8378))+((r11*x8380)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8378))+((x8373*x8377))+((cj1*sj2))+(((-1.0)*r22*x8379)));
evalcond[5]=((((-1.0)*r02*x8379))+((x8373*x8376))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8375*x8378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8381=((1.0)*cj5);
CheckValue<IkReal> x8382 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8381)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8382.valid){
continue;
}
CheckValue<IkReal> x8383=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8381)))),-1);
if(!x8383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8382.value)+(((1.5707963267949)*(x8383.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8384=IKsin(j4);
IkReal x8385=IKcos(j4);
IkReal x8386=(cj5*r10);
IkReal x8387=(r01*sj5);
IkReal x8388=(cj5*r00);
IkReal x8389=(cj5*r20);
IkReal x8390=((1.0)*x8385);
IkReal x8391=((1.0)*x8384);
IkReal x8392=(sj5*x8384);
evalcond[0]=(((r21*x8392))+(((-1.0)*r22*x8390))+(((-1.0)*x8389*x8391)));
evalcond[1]=((((-1.0)*x8388*x8391))+(((-1.0)*r02*x8390))+((x8384*x8387)));
evalcond[2]=((((-1.0)*r11*sj5*x8390))+((x8385*x8386))+(((-1.0)*r12*x8391)));
evalcond[3]=((1.0)+(((-1.0)*x8386*x8391))+(((-1.0)*r12*x8390))+((r11*x8392)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8390))+((cj1*sj2))+(((-1.0)*r22*x8391))+((x8385*x8389)));
evalcond[5]=((((-1.0)*x8387*x8390))+(((-1.0)*r02*x8391))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8385*x8388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8393=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8393.valid){
continue;
}
CheckValue<IkReal> x8394 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8393.value)))+(x8394.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8395=IKsin(j4);
IkReal x8396=IKcos(j4);
IkReal x8397=(cj5*r10);
IkReal x8398=(r01*sj5);
IkReal x8399=(cj5*r00);
IkReal x8400=(cj5*r20);
IkReal x8401=((1.0)*x8396);
IkReal x8402=((1.0)*x8395);
IkReal x8403=(sj5*x8395);
evalcond[0]=((((-1.0)*x8400*x8402))+(((-1.0)*r22*x8401))+((r21*x8403)));
evalcond[1]=((((-1.0)*r02*x8401))+((x8395*x8398))+(((-1.0)*x8399*x8402)));
evalcond[2]=((((-1.0)*r12*x8402))+((x8396*x8397))+(((-1.0)*r11*sj5*x8401)));
evalcond[3]=((1.0)+((r11*x8403))+(((-1.0)*r12*x8401))+(((-1.0)*x8397*x8402)));
evalcond[4]=(((cj2*sj1))+((x8396*x8400))+((cj1*sj2))+(((-1.0)*r21*sj5*x8401))+(((-1.0)*r22*x8402)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8402))+(((-1.0)*x8398*x8401))+((x8396*x8399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8404=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8404);
rxp0_2=(py*r00);
rxp1_0=(r21*x8404);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8405=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8405);
rxp0_2=(py*r00);
rxp1_0=(r21*x8405);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8406=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8406);
rxp0_2=(py*r00);
rxp1_0=(r21*x8406);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8409=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x8409.valid){
continue;
}
IkReal x8407=x8409.value;
IkReal x8408=(cj0*x8407);
cj4array[0]=(((sj1*sj2*x8408))+(((-1.0)*cj1*cj2*x8408)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8410=IKsin(j4);
IkReal x8411=IKcos(j4);
IkReal x8412=(r21*sj5);
IkReal x8413=((1.0)*x8411);
IkReal x8414=((1.0)*cj5*x8410);
evalcond[0]=((-1.0)*r12*x8410);
evalcond[1]=((((-1.0)*r12*x8413))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x8414))+((x8410*x8412)));
evalcond[3]=((((-1.0)*r00*x8414))+((r01*sj5*x8410)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((cj5*r20*x8411))+(((-1.0)*x8412*x8413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8417=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8417.valid){
continue;
}
IkReal x8415=x8417.value;
IkReal x8416=((1.0)*x8415);
cj4array[0]=((((-1.0)*cj2*sj1*x8416))+(((-1.0)*cj1*sj2*x8416)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8418=IKsin(j4);
IkReal x8419=IKcos(j4);
IkReal x8420=(cj5*r00);
IkReal x8421=((1.0)*cj0);
IkReal x8422=((1.0)*x8418);
IkReal x8423=(sj5*x8418);
IkReal x8424=((1.0)*x8419);
evalcond[0]=((-1.0)*r12*x8418);
evalcond[1]=((((-1.0)*x8421))+(((-1.0)*r12*x8424)));
evalcond[2]=(((r21*x8423))+(((-1.0)*cj5*r20*x8422)));
evalcond[3]=((((-1.0)*x8420*x8422))+((r01*x8423)));
evalcond[4]=(((cj0*cj1*cj2))+((x8419*x8420))+(((-1.0)*r01*sj5*x8424))+(((-1.0)*sj1*sj2*x8421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8425=IKPowWithIntegerCheck(r12,-1);
if(!x8425.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x8425.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8426=IKsin(j4);
IkReal x8427=IKcos(j4);
IkReal x8428=(cj5*r00);
IkReal x8429=(r21*sj5);
IkReal x8430=(cj5*r20);
IkReal x8431=(r01*sj5);
IkReal x8432=((1.0)*x8426);
IkReal x8433=((1.0)*x8427);
evalcond[0]=((-1.0)*r12*x8426);
evalcond[1]=((((-1.0)*x8430*x8432))+((x8426*x8429)));
evalcond[2]=(((x8426*x8431))+(((-1.0)*x8428*x8432)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8429*x8433))+((x8427*x8430))+((cj1*sj2)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+((x8427*x8428))+(((-1.0)*x8431*x8433))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8434=((1.0)*cj5);
CheckValue<IkReal> x8435=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8434))+(((-1.0)*r20*sj5)))),-1);
if(!x8435.valid){
continue;
}
CheckValue<IkReal> x8436 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x8434))+(((-1.0)*cj0*r00*x8434)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8435.value)))+(x8436.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8437=IKsin(j4);
IkReal x8438=IKcos(j4);
IkReal x8439=(cj1*cj2);
IkReal x8440=(cj5*r10);
IkReal x8441=(r01*sj5);
IkReal x8442=(cj5*r00);
IkReal x8443=(cj5*r20);
IkReal x8444=((1.0)*cj0);
IkReal x8445=(sj1*sj2);
IkReal x8446=((1.0)*x8438);
IkReal x8447=((1.0)*x8437);
IkReal x8448=(sj5*x8437);
evalcond[0]=(((r21*x8448))+(((-1.0)*x8443*x8447))+(((-1.0)*r22*x8446)));
evalcond[1]=(sj0+(((-1.0)*x8442*x8447))+((x8437*x8441))+(((-1.0)*r02*x8446)));
evalcond[2]=(((r11*x8448))+(((-1.0)*r12*x8446))+(((-1.0)*x8440*x8447))+(((-1.0)*x8444)));
evalcond[3]=(((cj2*sj1))+((x8438*x8443))+(((-1.0)*r21*sj5*x8446))+((cj1*sj2))+(((-1.0)*r22*x8447)));
evalcond[4]=(((x8438*x8442))+(((-1.0)*x8444*x8445))+(((-1.0)*r02*x8447))+((cj0*x8439))+(((-1.0)*x8441*x8446)));
evalcond[5]=(((x8438*x8440))+(((-1.0)*r12*x8447))+((sj0*x8439))+(((-1.0)*sj0*x8445))+(((-1.0)*r11*sj5*x8446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8449=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8449.valid){
continue;
}
CheckValue<IkReal> x8450 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8449.value)))+(x8450.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8451=IKsin(j4);
IkReal x8452=IKcos(j4);
IkReal x8453=(cj1*cj2);
IkReal x8454=(cj5*r10);
IkReal x8455=(r01*sj5);
IkReal x8456=(cj5*r00);
IkReal x8457=(cj5*r20);
IkReal x8458=((1.0)*cj0);
IkReal x8459=(sj1*sj2);
IkReal x8460=((1.0)*x8452);
IkReal x8461=((1.0)*x8451);
IkReal x8462=(sj5*x8451);
evalcond[0]=((((-1.0)*x8457*x8461))+((r21*x8462))+(((-1.0)*r22*x8460)));
evalcond[1]=(sj0+(((-1.0)*r02*x8460))+((x8451*x8455))+(((-1.0)*x8456*x8461)));
evalcond[2]=((((-1.0)*x8454*x8461))+((r11*x8462))+(((-1.0)*x8458))+(((-1.0)*r12*x8460)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8460))+((x8452*x8457))+(((-1.0)*r22*x8461)));
evalcond[4]=((((-1.0)*x8458*x8459))+(((-1.0)*r02*x8461))+(((-1.0)*x8455*x8460))+((cj0*x8453))+((x8452*x8456)));
evalcond[5]=((((-1.0)*sj0*x8459))+((sj0*x8453))+((x8452*x8454))+(((-1.0)*r12*x8461))+(((-1.0)*r11*sj5*x8460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8463=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8463.valid){
continue;
}
CheckValue<IkReal> x8464 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8463.value)))+(x8464.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8465=IKsin(j4);
IkReal x8466=IKcos(j4);
IkReal x8467=(cj1*cj2);
IkReal x8468=(cj5*r10);
IkReal x8469=(r01*sj5);
IkReal x8470=(cj5*r00);
IkReal x8471=(cj5*r20);
IkReal x8472=((1.0)*cj0);
IkReal x8473=(sj1*sj2);
IkReal x8474=((1.0)*x8466);
IkReal x8475=((1.0)*x8465);
IkReal x8476=(sj5*x8465);
evalcond[0]=((((-1.0)*x8471*x8475))+((r21*x8476))+(((-1.0)*r22*x8474)));
evalcond[1]=(((x8465*x8469))+sj0+(((-1.0)*r02*x8474))+(((-1.0)*x8470*x8475)));
evalcond[2]=((((-1.0)*x8472))+((r11*x8476))+(((-1.0)*x8468*x8475))+(((-1.0)*r12*x8474)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8474))+(((-1.0)*r22*x8475))+((x8466*x8471)));
evalcond[4]=((((-1.0)*r02*x8475))+((cj0*x8467))+(((-1.0)*x8472*x8473))+(((-1.0)*x8469*x8474))+((x8466*x8470)));
evalcond[5]=((((-1.0)*r11*sj5*x8474))+(((-1.0)*sj0*x8473))+(((-1.0)*r12*x8475))+((sj0*x8467))+((x8466*x8468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8477=cj1*cj1;
IkReal x8478=cj2*cj2;
IkReal x8479=(r10*sj5);
IkReal x8480=(cj1*px);
IkReal x8481=((98000.0)*cj2);
IkReal x8482=(r00*sj5);
IkReal x8483=(cj5*r11);
IkReal x8484=(cj5*r01);
IkReal x8485=((10625.0)*cj1);
IkReal x8486=(sj1*sj2);
IkReal x8487=(cj1*py);
IkReal x8488=((9800.0)*x8486);
IkReal x8489=((9800.0)*cj1*cj2);
CheckValue<IkReal> x8490 = IKatan2WithCheck(IkReal(((((106250.0)*x8487))+(((-1.0)*x8483*x8488))+((x8479*x8485))+((x8479*x8489))+((x8483*x8485))+((x8483*x8489))+((x8481*x8487))+(((-1.0)*x8479*x8488))+(((-3350.0)*x8484))+(((-3350.0)*x8482))+(((-33500.0)*px))+(((-98000.0)*py*x8486)))),IkReal((((x8484*x8489))+((x8484*x8485))+(((106250.0)*x8480))+(((3350.0)*x8483))+(((33500.0)*py))+(((-1.0)*x8484*x8488))+(((-1.0)*x8482*x8488))+((x8480*x8481))+(((-98000.0)*px*x8486))+((x8482*x8489))+((x8482*x8485))+(((3350.0)*x8479)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8490.valid){
continue;
}
CheckValue<IkReal> x8491=IKPowWithIntegerCheck(IKsign(((-42905.0)+(((83300.0)*cj1*x8486))+(((-83300.0)*cj2*x8477))+(((-6740.25)*x8477))+(((76832.0)*cj1*cj2*x8486))+(((-76832.0)*x8477*x8478))+(((38416.0)*x8478)))),-1);
if(!x8491.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8490.value)+(((1.5707963267949)*(x8491.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8492=IKcos(j0);
IkReal x8493=IKsin(j0);
IkReal x8494=((0.1)*sj5);
IkReal x8495=((0.425)*cj1);
IkReal x8496=((0.1)*cj5);
IkReal x8497=((0.392)*sj1*sj2);
IkReal x8498=((0.392)*cj1*cj2);
evalcond[0]=((((-1.0)*r00*x8494))+(((0.134)*x8493))+((x8492*x8497))+(((-1.0)*px))+(((-1.0)*x8492*x8495))+(((-1.0)*x8492*x8498))+(((-1.0)*r01*x8496)));
evalcond[1]=((((-1.0)*r10*x8494))+((x8493*x8497))+(((-0.134)*x8492))+(((-1.0)*py))+(((-1.0)*x8493*x8495))+(((-1.0)*x8493*x8498))+(((-1.0)*r11*x8496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8499=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8499;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x8499);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8500=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8500;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8500);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8501=((1.0)*cj5);
IkReal x8502=((((-1.0)*r21*x8501))+(((-1.0)*r20*sj5)));
j4eval[0]=x8502;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x8501))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x8501))))));
j4eval[2]=IKsign(x8502);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8503=((-1.0)*r20);
IkReal x8505 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8505)==0){
continue;
}
IkReal x8504=pow(x8505,-0.5);
CheckValue<IkReal> x8506 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8503),IKFAST_ATAN2_MAGTHRESH);
if(!x8506.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8506.value));
IkReal gconst1=(r21*x8504);
IkReal gconst2=(x8503*x8504);
CheckValue<IkReal> x8507 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8507.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8507.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8508=((-1.0)*r20);
IkReal x8509=x8504;
CheckValue<IkReal> x8511 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8508),IKFAST_ATAN2_MAGTHRESH);
if(!x8511.valid){
continue;
}
IkReal x8510=((-1.0)*(x8511.value));
sj5=gconst1;
cj5=gconst2;
j5=x8510;
IkReal gconst0=x8510;
IkReal gconst1=(r21*x8509);
IkReal gconst2=(x8508*x8509);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8512=((-1.0)*r20);
IkReal x8513=x8504;
CheckValue<IkReal> x8515 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8512),IKFAST_ATAN2_MAGTHRESH);
if(!x8515.valid){
continue;
}
IkReal x8514=((-1.0)*(x8515.value));
sj5=gconst1;
cj5=gconst2;
j5=x8514;
IkReal gconst0=x8514;
IkReal gconst1=(r21*x8513);
IkReal gconst2=(x8512*x8513);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8516=((-1.0)*r20);
IkReal x8517=x8504;
CheckValue<IkReal> x8519 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8516),IKFAST_ATAN2_MAGTHRESH);
if(!x8519.valid){
continue;
}
IkReal x8518=((-1.0)*(x8519.value));
sj5=gconst1;
cj5=gconst2;
j5=x8518;
IkReal gconst0=x8518;
IkReal gconst1=(r21*x8517);
IkReal gconst2=(x8516*x8517);
IkReal x8520=r22*r22;
CheckValue<IkReal> x8524=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8520))),-1);
if(!x8524.valid){
continue;
}
IkReal x8521=x8524.value;
IkReal x8522=(sj3*x8521);
IkReal x8523=((((2.0)*x8522*(r20*r20)*(r21*r21)))+((x8522*(r20*r20*r20*r20)))+((sj3*x8520))+((x8522*(r21*r21*r21*r21))));
j4eval[0]=x8523;
j4eval[1]=IKsign(x8523);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8525=((-1.0)*r20);
IkReal x8526=x8504;
CheckValue<IkReal> x8528 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8525),IKFAST_ATAN2_MAGTHRESH);
if(!x8528.valid){
continue;
}
IkReal x8527=((-1.0)*(x8528.value));
sj5=gconst1;
cj5=gconst2;
j5=x8527;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8527;
IkReal gconst1=(r21*x8526);
IkReal gconst2=(x8525*x8526);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8529=((-1.0)*r20);
IkReal x8530=x8504;
CheckValue<IkReal> x8532 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8529),IKFAST_ATAN2_MAGTHRESH);
if(!x8532.valid){
continue;
}
IkReal x8531=((-1.0)*(x8532.value));
sj5=gconst1;
cj5=gconst2;
j5=x8531;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8531;
IkReal gconst1=(r21*x8530);
IkReal gconst2=(x8529*x8530);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8533=((-1.0)*r20);
IkReal x8534=x8504;
CheckValue<IkReal> x8536 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8533),IKFAST_ATAN2_MAGTHRESH);
if(!x8536.valid){
continue;
}
IkReal x8535=((-1.0)*(x8536.value));
sj5=gconst1;
cj5=gconst2;
j5=x8535;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8535;
IkReal gconst1=(r21*x8534);
IkReal gconst2=(x8533*x8534);
IkReal x8537=((1.0)*(r22*r22));
CheckValue<IkReal> x8541=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8537))),-1);
if(!x8541.valid){
continue;
}
IkReal x8538=x8541.value;
IkReal x8539=((1.0)*x8538);
IkReal x8540=((((-1.0)*x8537))+(((-2.0)*x8538*(r20*r20)*(r21*r21)))+(((-1.0)*x8539*(r20*r20*r20*r20)))+(((-1.0)*x8539*(r21*r21*r21*r21))));
j4eval[0]=x8540;
j4eval[1]=IKsign(x8540);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8542=((-1.0)*r20);
IkReal x8543=x8504;
CheckValue<IkReal> x8545 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8542),IKFAST_ATAN2_MAGTHRESH);
if(!x8545.valid){
continue;
}
IkReal x8544=((-1.0)*(x8545.value));
sj5=gconst1;
cj5=gconst2;
j5=x8544;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8544;
IkReal gconst1=(r21*x8543);
IkReal gconst2=(x8542*x8543);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8546=((-1.0)*r20);
IkReal x8547=x8504;
CheckValue<IkReal> x8549 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8546),IKFAST_ATAN2_MAGTHRESH);
if(!x8549.valid){
continue;
}
IkReal x8548=((-1.0)*(x8549.value));
sj5=gconst1;
cj5=gconst2;
j5=x8548;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8548;
IkReal gconst1=(r21*x8547);
IkReal gconst2=(x8546*x8547);
IkReal x8550=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8554=IKPowWithIntegerCheck(x8550,-1);
if(!x8554.valid){
continue;
}
IkReal x8551=x8554.value;
IkReal x8552=((1.0)*x8551);
IkReal x8553=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x8551))+(((-1.0)*x8552*(r01*r01)*(r21*r21)))+(((-1.0)*x8552*(r00*r00)*(r20*r20))));
j4eval[0]=x8553;
j4eval[1]=IKsign(x8553);
j4eval[2]=r02;
j4eval[3]=x8550;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8555=((-1.0)*r20);
IkReal x8556=x8504;
CheckValue<IkReal> x8558 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8555),IKFAST_ATAN2_MAGTHRESH);
if(!x8558.valid){
continue;
}
IkReal x8557=((-1.0)*(x8558.value));
sj5=gconst1;
cj5=gconst2;
j5=x8557;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8557;
IkReal gconst1=(r21*x8556);
IkReal gconst2=(x8555*x8556);
IkReal x8559=r22*r22;
IkReal x8560=((1.0)*r02);
IkReal x8561=(cj1*sj2);
IkReal x8562=(cj2*sj1);
CheckValue<IkReal> x8566=IKPowWithIntegerCheck(((-1.0)+x8559),-1);
if(!x8566.valid){
continue;
}
IkReal x8563=x8566.value;
if((((1.0)+(((-1.0)*x8559)))) < -0.00001)
continue;
IkReal x8564=IKsqrt(((1.0)+(((-1.0)*x8559))));
IkReal x8565=(r02*r22*x8563*x8564);
j4eval[0]=((IKabs((((x8562*x8565))+((x8561*x8565)))))+(IKabs(((((-1.0)*x8560*x8561))+(((-1.0)*x8560*x8562))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8567=(cj1*sj2);
IkReal x8568=(gconst1*r01);
IkReal x8569=((1.0)*r02);
IkReal x8570=(cj2*sj1);
IkReal x8571=((1.0)*gconst2*r00);
CheckValue<IkReal> x8572 = IKatan2WithCheck(IkReal((((x8567*x8568))+(((-1.0)*x8567*x8571))+(((-1.0)*x8570*x8571))+((x8568*x8570)))),IkReal(((((-1.0)*x8569*x8570))+(((-1.0)*x8567*x8569)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8572.valid){
continue;
}
CheckValue<IkReal> x8573=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8572.value)+(((1.5707963267949)*(x8573.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8574=IKcos(j4);
IkReal x8575=IKsin(j4);
IkReal x8576=((1.0)*x8574);
IkReal x8577=(gconst1*x8574);
IkReal x8578=(gconst1*x8575);
IkReal x8579=((1.0)*gconst2*x8575);
evalcond[0]=(((r02*x8575))+(((-1.0)*gconst2*r00*x8576))+((r01*x8577)));
evalcond[1]=((((-1.0)*r20*x8579))+((r21*x8578))+(((-1.0)*r22*x8576)));
evalcond[2]=(((r11*x8578))+(((-1.0)*r10*x8579))+(((-1.0)*r12*x8576)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8576))+((r01*x8578))+(((-1.0)*r00*x8579)));
evalcond[4]=(((cj2*sj1))+((r22*x8575))+((cj1*sj2))+((r21*x8577))+(((-1.0)*gconst2*r20*x8576)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x8575))+((r11*x8577))+((cj1*cj2))+(((-1.0)*gconst2*r10*x8576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8580=(gconst1*r01);
IkReal x8581=(gconst2*r00);
CheckValue<IkReal> x8582=IKPowWithIntegerCheck(IKsign(((((2.0)*x8580*x8581))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8581*x8581)))+(((-1.0)*(x8580*x8580))))),-1);
if(!x8582.valid){
continue;
}
CheckValue<IkReal> x8583 = IKatan2WithCheck(IkReal((x8580+(((-1.0)*x8581)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8582.value)))+(x8583.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8584=IKcos(j4);
IkReal x8585=IKsin(j4);
IkReal x8586=((1.0)*x8584);
IkReal x8587=(gconst1*x8584);
IkReal x8588=(gconst1*x8585);
IkReal x8589=((1.0)*gconst2*x8585);
evalcond[0]=(((r02*x8585))+(((-1.0)*gconst2*r00*x8586))+((r01*x8587)));
evalcond[1]=((((-1.0)*r22*x8586))+(((-1.0)*r20*x8589))+((r21*x8588)));
evalcond[2]=(((r11*x8588))+(((-1.0)*r12*x8586))+(((-1.0)*r10*x8589)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8586))+((r01*x8588))+(((-1.0)*r00*x8589)));
evalcond[4]=(((cj2*sj1))+((r22*x8585))+((cj1*sj2))+((r21*x8587))+(((-1.0)*gconst2*r20*x8586)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x8585))+((r11*x8587))+((cj1*cj2))+(((-1.0)*gconst2*r10*x8586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8590 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8590.valid){
continue;
}
CheckValue<IkReal> x8591=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8590.value)+(((1.5707963267949)*(x8591.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8592=IKcos(j4);
IkReal x8593=IKsin(j4);
IkReal x8594=((1.0)*x8592);
IkReal x8595=(gconst1*x8592);
IkReal x8596=(gconst1*x8593);
IkReal x8597=((1.0)*gconst2*x8593);
evalcond[0]=(((r01*x8595))+(((-1.0)*gconst2*r00*x8594))+((r02*x8593)));
evalcond[1]=((((-1.0)*r20*x8597))+(((-1.0)*r22*x8594))+((r21*x8596)));
evalcond[2]=((((-1.0)*r10*x8597))+(((-1.0)*r12*x8594))+((r11*x8596)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8594))+(((-1.0)*r00*x8597))+((r01*x8596)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x8595))+((r22*x8593))+(((-1.0)*gconst2*r20*x8594)));
evalcond[5]=((((-1.0)*gconst2*r10*x8594))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r11*x8595))+((r12*x8593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8598=((-1.0)*r20);
IkReal x8599=x8504;
CheckValue<IkReal> x8601 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8598),IKFAST_ATAN2_MAGTHRESH);
if(!x8601.valid){
continue;
}
IkReal x8600=((-1.0)*(x8601.value));
sj5=gconst1;
cj5=gconst2;
j5=x8600;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8600;
IkReal gconst1=(r21*x8599);
IkReal gconst2=(x8598*x8599);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8602=((-1.0)*r20);
IkReal x8603=x8504;
CheckValue<IkReal> x8605 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8602),IKFAST_ATAN2_MAGTHRESH);
if(!x8605.valid){
continue;
}
IkReal x8604=((-1.0)*(x8605.value));
sj5=gconst1;
cj5=gconst2;
j5=x8604;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8604;
IkReal gconst1=(r21*x8603);
IkReal gconst2=(x8602*x8603);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8606=((-1.0)*r20);
IkReal x8607=x8504;
CheckValue<IkReal> x8609 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8606),IKFAST_ATAN2_MAGTHRESH);
if(!x8609.valid){
continue;
}
IkReal x8608=((-1.0)*(x8609.value));
sj5=gconst1;
cj5=gconst2;
j5=x8608;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8608;
IkReal gconst1=(r21*x8607);
IkReal gconst2=(x8606*x8607);
IkReal x8610=r22*r22;
IkReal x8611=((1.0)*r02);
IkReal x8612=(cj1*sj2);
IkReal x8613=(cj2*sj1);
CheckValue<IkReal> x8617=IKPowWithIntegerCheck(((-1.0)+x8610),-1);
if(!x8617.valid){
continue;
}
IkReal x8614=x8617.value;
if((((1.0)+(((-1.0)*x8610)))) < -0.00001)
continue;
IkReal x8615=IKsqrt(((1.0)+(((-1.0)*x8610))));
IkReal x8616=(r02*r22*x8614*x8615);
j4eval[0]=((IKabs((((x8613*x8616))+((x8612*x8616)))))+(IKabs(((((-1.0)*x8611*x8612))+(((-1.0)*x8611*x8613))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8618=(cj1*sj2);
IkReal x8619=(gconst1*r01);
IkReal x8620=((1.0)*r02);
IkReal x8621=(cj2*sj1);
IkReal x8622=((1.0)*gconst2*r00);
CheckValue<IkReal> x8623=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8623.valid){
continue;
}
CheckValue<IkReal> x8624 = IKatan2WithCheck(IkReal(((((-1.0)*x8618*x8622))+((x8618*x8619))+(((-1.0)*x8621*x8622))+((x8619*x8621)))),IkReal(((((-1.0)*x8618*x8620))+(((-1.0)*x8620*x8621)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8623.value)))+(x8624.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8625=IKcos(j4);
IkReal x8626=IKsin(j4);
IkReal x8627=((1.0)*x8625);
IkReal x8628=(gconst1*x8625);
IkReal x8629=(gconst1*x8626);
IkReal x8630=((1.0)*gconst2*x8626);
evalcond[0]=(((r02*x8626))+(((-1.0)*gconst2*r00*x8627))+((r01*x8628)));
evalcond[1]=(((r21*x8629))+(((-1.0)*r22*x8627))+(((-1.0)*r20*x8630)));
evalcond[2]=((((-1.0)*r12*x8627))+(((-1.0)*r10*x8630))+((r11*x8629)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x8630))+((r01*x8629))+(((-1.0)*r02*x8627)));
evalcond[4]=(((cj2*sj1))+((r21*x8628))+((cj1*sj2))+((r22*x8626))+(((-1.0)*gconst2*r20*x8627)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x8627))+((r12*x8626))+((r11*x8628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8631=(gconst1*r01);
IkReal x8632=(gconst2*r00);
CheckValue<IkReal> x8633=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8631*x8632))+(r02*r02)+(x8631*x8631)+(x8632*x8632))),-1);
if(!x8633.valid){
continue;
}
CheckValue<IkReal> x8634 = IKatan2WithCheck(IkReal((x8631+(((-1.0)*x8632)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8634.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8633.value)))+(x8634.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8635=IKcos(j4);
IkReal x8636=IKsin(j4);
IkReal x8637=((1.0)*x8635);
IkReal x8638=(gconst1*x8635);
IkReal x8639=(gconst1*x8636);
IkReal x8640=((1.0)*gconst2*x8636);
evalcond[0]=(((r02*x8636))+(((-1.0)*gconst2*r00*x8637))+((r01*x8638)));
evalcond[1]=(((r21*x8639))+(((-1.0)*r22*x8637))+(((-1.0)*r20*x8640)));
evalcond[2]=((((-1.0)*r12*x8637))+(((-1.0)*r10*x8640))+((r11*x8639)));
evalcond[3]=((-1.0)+((r01*x8639))+(((-1.0)*r02*x8637))+(((-1.0)*r00*x8640)));
evalcond[4]=(((cj2*sj1))+((r21*x8638))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8637))+((r22*x8636)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x8637))+((r12*x8636))+((r11*x8638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8641=((1.0)*gconst2);
CheckValue<IkReal> x8642=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x8641)))),-1);
if(!x8642.valid){
continue;
}
CheckValue<IkReal> x8643 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8641)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8642.value)))+(x8643.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8644=IKcos(j4);
IkReal x8645=IKsin(j4);
IkReal x8646=((1.0)*x8644);
IkReal x8647=(gconst1*x8644);
IkReal x8648=(gconst1*x8645);
IkReal x8649=((1.0)*gconst2*x8645);
evalcond[0]=((((-1.0)*gconst2*r00*x8646))+((r02*x8645))+((r01*x8647)));
evalcond[1]=((((-1.0)*r22*x8646))+((r21*x8648))+(((-1.0)*r20*x8649)));
evalcond[2]=(((r11*x8648))+(((-1.0)*r10*x8649))+(((-1.0)*r12*x8646)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8646))+((r01*x8648))+(((-1.0)*r00*x8649)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x8647))+(((-1.0)*gconst2*r20*x8646))+((r22*x8645)));
evalcond[5]=(((r12*x8645))+((r11*x8647))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x8646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8650=((-1.0)*r20);
IkReal x8651=x8504;
CheckValue<IkReal> x8653 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8650),IKFAST_ATAN2_MAGTHRESH);
if(!x8653.valid){
continue;
}
IkReal x8652=((-1.0)*(x8653.value));
sj5=gconst1;
cj5=gconst2;
j5=x8652;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8652;
IkReal gconst1=(r21*x8651);
IkReal gconst2=(x8650*x8651);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8654=((-1.0)*r20);
IkReal x8655=x8504;
CheckValue<IkReal> x8657 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8654),IKFAST_ATAN2_MAGTHRESH);
if(!x8657.valid){
continue;
}
IkReal x8656=((-1.0)*(x8657.value));
sj5=gconst1;
cj5=gconst2;
j5=x8656;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8656;
IkReal gconst1=(r21*x8655);
IkReal gconst2=(x8654*x8655);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8658=((-1.0)*r20);
IkReal x8659=x8504;
CheckValue<IkReal> x8661 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8658),IKFAST_ATAN2_MAGTHRESH);
if(!x8661.valid){
continue;
}
IkReal x8660=((-1.0)*(x8661.value));
sj5=gconst1;
cj5=gconst2;
j5=x8660;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8660;
IkReal gconst1=(r21*x8659);
IkReal gconst2=(x8658*x8659);
IkReal x8662=r22*r22;
IkReal x8663=(cj1*r12*sj2);
IkReal x8664=(cj2*r12*sj1);
CheckValue<IkReal> x8668=IKPowWithIntegerCheck(((-1.0)+x8662),-1);
if(!x8668.valid){
continue;
}
IkReal x8665=x8668.value;
if((((1.0)+(((-1.0)*x8662)))) < -0.00001)
continue;
IkReal x8666=IKsqrt(((1.0)+(((-1.0)*x8662))));
IkReal x8667=(r22*x8665*x8666);
j4eval[0]=((IKabs((((x8664*x8667))+((x8663*x8667)))))+(IKabs(((((-1.0)*x8663))+(((-1.0)*x8664))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8669=(cj1*sj2);
IkReal x8670=(cj2*sj1);
IkReal x8671=((1.0)*r12);
IkReal x8672=(gconst1*r11);
IkReal x8673=((1.0)*gconst2*r10);
CheckValue<IkReal> x8674=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8674.valid){
continue;
}
CheckValue<IkReal> x8675 = IKatan2WithCheck(IkReal((((x8669*x8672))+((x8670*x8672))+(((-1.0)*x8669*x8673))+(((-1.0)*x8670*x8673)))),IkReal(((((-1.0)*x8669*x8671))+(((-1.0)*x8670*x8671)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8674.value)))+(x8675.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8676=IKcos(j4);
IkReal x8677=IKsin(j4);
IkReal x8678=((1.0)*x8676);
IkReal x8679=(gconst1*x8676);
IkReal x8680=(gconst1*x8677);
IkReal x8681=((1.0)*gconst2*x8677);
evalcond[0]=(((r11*x8679))+((r12*x8677))+(((-1.0)*gconst2*r10*x8678)));
evalcond[1]=((((-1.0)*r22*x8678))+(((-1.0)*r20*x8681))+((r21*x8680)));
evalcond[2]=((((-1.0)*r00*x8681))+(((-1.0)*r02*x8678))+((r01*x8680)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8678))+((r11*x8680))+(((-1.0)*r10*x8681)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x8677))+(((-1.0)*gconst2*r20*x8678))+((r21*x8679)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r00*x8678))+((r01*x8679))+((r02*x8677))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8682=(gconst1*r11);
IkReal x8683=(gconst2*r10);
CheckValue<IkReal> x8684=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8682*x8682)+(x8683*x8683)+(((-2.0)*x8682*x8683)))),-1);
if(!x8684.valid){
continue;
}
CheckValue<IkReal> x8685 = IKatan2WithCheck(IkReal((x8682+(((-1.0)*x8683)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8684.value)))+(x8685.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8686=IKcos(j4);
IkReal x8687=IKsin(j4);
IkReal x8688=((1.0)*x8686);
IkReal x8689=(gconst1*x8686);
IkReal x8690=(gconst1*x8687);
IkReal x8691=((1.0)*gconst2*x8687);
evalcond[0]=(((r12*x8687))+((r11*x8689))+(((-1.0)*gconst2*r10*x8688)));
evalcond[1]=(((r21*x8690))+(((-1.0)*r22*x8688))+(((-1.0)*r20*x8691)));
evalcond[2]=((((-1.0)*r02*x8688))+((r01*x8690))+(((-1.0)*r00*x8691)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8688))+(((-1.0)*r10*x8691))+((r11*x8690)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x8687))+((r21*x8689))+(((-1.0)*gconst2*r20*x8688)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x8689))+(((-1.0)*gconst2*r00*x8688))+((cj1*cj2))+((r02*x8687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8692 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8692.valid){
continue;
}
CheckValue<IkReal> x8693=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8692.value)+(((1.5707963267949)*(x8693.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8694=IKcos(j4);
IkReal x8695=IKsin(j4);
IkReal x8696=((1.0)*x8694);
IkReal x8697=(gconst1*x8694);
IkReal x8698=(gconst1*x8695);
IkReal x8699=((1.0)*gconst2*x8695);
evalcond[0]=((((-1.0)*gconst2*r10*x8696))+((r12*x8695))+((r11*x8697)));
evalcond[1]=(((r21*x8698))+(((-1.0)*r22*x8696))+(((-1.0)*r20*x8699)));
evalcond[2]=((((-1.0)*r02*x8696))+((r01*x8698))+(((-1.0)*r00*x8699)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8696))+(((-1.0)*r10*x8699))+((r11*x8698)));
evalcond[4]=((((-1.0)*gconst2*r20*x8696))+((cj2*sj1))+((r21*x8697))+((r22*x8695))+((cj1*sj2)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r00*x8696))+((r02*x8695))+((r01*x8697))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8700=((-1.0)*r20);
IkReal x8701=x8504;
CheckValue<IkReal> x8703 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8700),IKFAST_ATAN2_MAGTHRESH);
if(!x8703.valid){
continue;
}
IkReal x8702=((-1.0)*(x8703.value));
sj5=gconst1;
cj5=gconst2;
j5=x8702;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8702;
IkReal gconst1=(r21*x8701);
IkReal gconst2=(x8700*x8701);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8704=((-1.0)*r20);
IkReal x8705=x8504;
CheckValue<IkReal> x8707 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8704),IKFAST_ATAN2_MAGTHRESH);
if(!x8707.valid){
continue;
}
IkReal x8706=((-1.0)*(x8707.value));
sj5=gconst1;
cj5=gconst2;
j5=x8706;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8706;
IkReal gconst1=(r21*x8705);
IkReal gconst2=(x8704*x8705);
IkReal x8708=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8712=IKPowWithIntegerCheck(x8708,-1);
if(!x8712.valid){
continue;
}
IkReal x8709=x8712.value;
IkReal x8710=((1.0)*x8709);
IkReal x8711=((((-1.0)*x8710*(r11*r11)*(r21*r21)))+(((-1.0)*x8710*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x8709))+(((-1.0)*(r12*r12))));
j4eval[0]=x8711;
j4eval[1]=r12;
j4eval[2]=x8708;
j4eval[3]=IKsign(x8711);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8713=((-1.0)*r20);
IkReal x8714=x8504;
CheckValue<IkReal> x8716 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8713),IKFAST_ATAN2_MAGTHRESH);
if(!x8716.valid){
continue;
}
IkReal x8715=((-1.0)*(x8716.value));
sj5=gconst1;
cj5=gconst2;
j5=x8715;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8715;
IkReal gconst1=(r21*x8714);
IkReal gconst2=(x8713*x8714);
IkReal x8717=r22*r22;
IkReal x8718=(cj1*r12*sj2);
IkReal x8719=(cj2*r12*sj1);
CheckValue<IkReal> x8723=IKPowWithIntegerCheck(((-1.0)+x8717),-1);
if(!x8723.valid){
continue;
}
IkReal x8720=x8723.value;
if((((1.0)+(((-1.0)*x8717)))) < -0.00001)
continue;
IkReal x8721=IKsqrt(((1.0)+(((-1.0)*x8717))));
IkReal x8722=(r22*x8720*x8721);
j4eval[0]=((IKabs(((((-1.0)*x8719))+(((-1.0)*x8718)))))+(IKabs((((x8718*x8722))+((x8719*x8722))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8724=(cj1*sj2);
IkReal x8725=(cj2*sj1);
IkReal x8726=((1.0)*r12);
IkReal x8727=(gconst1*r11);
IkReal x8728=((1.0)*gconst2*r10);
CheckValue<IkReal> x8729 = IKatan2WithCheck(IkReal((((x8724*x8727))+((x8725*x8727))+(((-1.0)*x8724*x8728))+(((-1.0)*x8725*x8728)))),IkReal(((((-1.0)*x8724*x8726))+(((-1.0)*x8725*x8726)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8729.valid){
continue;
}
CheckValue<IkReal> x8730=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8729.value)+(((1.5707963267949)*(x8730.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8731=IKcos(j4);
IkReal x8732=IKsin(j4);
IkReal x8733=((1.0)*x8731);
IkReal x8734=(gconst1*x8731);
IkReal x8735=(gconst1*x8732);
IkReal x8736=((1.0)*gconst2*x8732);
evalcond[0]=(((r11*x8734))+((r12*x8732))+(((-1.0)*gconst2*r10*x8733)));
evalcond[1]=(((r21*x8735))+(((-1.0)*r20*x8736))+(((-1.0)*r22*x8733)));
evalcond[2]=((((-1.0)*r00*x8736))+(((-1.0)*r02*x8733))+((r01*x8735)));
evalcond[3]=((1.0)+((r11*x8735))+(((-1.0)*r10*x8736))+(((-1.0)*r12*x8733)));
evalcond[4]=(((cj2*sj1))+((r21*x8734))+((cj1*sj2))+((r22*x8732))+(((-1.0)*gconst2*r20*x8733)));
evalcond[5]=(((r02*x8732))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x8733))+((r01*x8734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8737=(gconst2*r10);
IkReal x8738=(gconst1*r11);
CheckValue<IkReal> x8739 = IKatan2WithCheck(IkReal((x8738+(((-1.0)*x8737)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8739.valid){
continue;
}
CheckValue<IkReal> x8740=IKPowWithIntegerCheck(IKsign(((((2.0)*x8737*x8738))+(((-1.0)*(x8738*x8738)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x8737*x8737))))),-1);
if(!x8740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8739.value)+(((1.5707963267949)*(x8740.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8741=IKcos(j4);
IkReal x8742=IKsin(j4);
IkReal x8743=((1.0)*x8741);
IkReal x8744=(gconst1*x8741);
IkReal x8745=(gconst1*x8742);
IkReal x8746=((1.0)*gconst2*x8742);
evalcond[0]=(((r12*x8742))+(((-1.0)*gconst2*r10*x8743))+((r11*x8744)));
evalcond[1]=((((-1.0)*r22*x8743))+((r21*x8745))+(((-1.0)*r20*x8746)));
evalcond[2]=(((r01*x8745))+(((-1.0)*r00*x8746))+(((-1.0)*r02*x8743)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8743))+(((-1.0)*r10*x8746))+((r11*x8745)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8743))+((r22*x8742))+((r21*x8744)));
evalcond[5]=(((r01*x8744))+(((-1.0)*gconst2*r00*x8743))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x8742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8747=((1.0)*gconst2);
CheckValue<IkReal> x8748 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8747)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8748.valid){
continue;
}
CheckValue<IkReal> x8749=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8747)))),-1);
if(!x8749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8748.value)+(((1.5707963267949)*(x8749.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8750=IKcos(j4);
IkReal x8751=IKsin(j4);
IkReal x8752=((1.0)*x8750);
IkReal x8753=(gconst1*x8750);
IkReal x8754=(gconst1*x8751);
IkReal x8755=((1.0)*gconst2*x8751);
evalcond[0]=((((-1.0)*gconst2*r10*x8752))+((r11*x8753))+((r12*x8751)));
evalcond[1]=((((-1.0)*r22*x8752))+(((-1.0)*r20*x8755))+((r21*x8754)));
evalcond[2]=((((-1.0)*r02*x8752))+(((-1.0)*r00*x8755))+((r01*x8754)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8755))+((r11*x8754))+(((-1.0)*r12*x8752)));
evalcond[4]=(((r22*x8751))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8752))+((r21*x8753)));
evalcond[5]=(((r02*x8751))+(((-1.0)*gconst2*r00*x8752))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8756=((-1.0)*r20);
IkReal x8757=((-1.0)*r21);
CheckValue<IkReal> x8759 = IKatan2WithCheck(IkReal(x8757),IkReal(x8756),IKFAST_ATAN2_MAGTHRESH);
if(!x8759.valid){
continue;
}
IkReal x8758=((-1.0)*(x8759.value));
sj5=gconst1;
cj5=gconst2;
j5=x8758;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8756);
rxp0_2=(py*r00);
rxp1_0=(py*x8757);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8758;
IkReal gconst1=r21;
IkReal gconst2=x8756;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8760=((-1.0)*r20);
IkReal x8761=((-1.0)*r21);
CheckValue<IkReal> x8763 = IKatan2WithCheck(IkReal(x8761),IkReal(x8760),IKFAST_ATAN2_MAGTHRESH);
if(!x8763.valid){
continue;
}
IkReal x8762=((-1.0)*(x8763.value));
sj5=gconst1;
cj5=gconst2;
j5=x8762;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8760);
rxp0_2=(py*r00);
rxp1_0=(py*x8761);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8762;
IkReal gconst1=r21;
IkReal gconst2=x8760;
j4eval[0]=((1.0)+(((-1.0)*(r00*r00)))+(r21*r21));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8764=((-1.0)*r20);
IkReal x8765=((-1.0)*r21);
CheckValue<IkReal> x8767 = IKatan2WithCheck(IkReal(x8765),IkReal(x8764),IKFAST_ATAN2_MAGTHRESH);
if(!x8767.valid){
continue;
}
IkReal x8766=((-1.0)*(x8767.value));
sj5=gconst1;
cj5=gconst2;
j5=x8766;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8764);
rxp0_2=(py*r00);
rxp1_0=(py*x8765);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8766;
IkReal gconst1=r21;
IkReal gconst2=x8764;
j4eval[0]=(((r00*r20))+((r01*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8770=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*gconst2*r00))),-1);
if(!x8770.valid){
continue;
}
IkReal x8768=x8770.value;
IkReal x8769=(cj0*x8768);
cj4array[0]=((((-1.0)*cj1*cj2*x8769))+((sj1*sj2*x8769)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8771=IKsin(j4);
IkReal x8772=IKcos(j4);
IkReal x8773=(gconst1*r21);
IkReal x8774=(gconst2*r20);
IkReal x8775=((1.0)*x8772);
IkReal x8776=((1.0)*x8771);
evalcond[0]=(r12*x8771);
evalcond[1]=((((-1.0)*r12*x8775))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x8774*x8776))+((x8771*x8773)));
evalcond[3]=((((-1.0)*gconst2*r00*x8776))+((gconst1*r01*x8771)));
evalcond[4]=(((x8772*x8773))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8774*x8775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8779=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x8779.valid){
continue;
}
IkReal x8777=x8779.value;
IkReal x8778=((1.0)*x8777);
cj4array[0]=((((-1.0)*cj2*sj1*x8778))+(((-1.0)*cj1*sj2*x8778)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8780=IKsin(j4);
IkReal x8781=IKcos(j4);
IkReal x8782=((1.0)*cj0);
IkReal x8783=(gconst1*r01);
IkReal x8784=((1.0)*x8781);
IkReal x8785=((1.0)*gconst2*x8780);
evalcond[0]=(r12*x8780);
evalcond[1]=((((-1.0)*x8782))+(((-1.0)*r12*x8784)));
evalcond[2]=(((gconst1*r21*x8780))+(((-1.0)*r20*x8785)));
evalcond[3]=(((x8780*x8783))+(((-1.0)*r00*x8785)));
evalcond[4]=((((-1.0)*gconst2*r00*x8784))+((cj0*cj1*cj2))+((x8781*x8783))+(((-1.0)*sj1*sj2*x8782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8786=IKPowWithIntegerCheck(r12,-1);
if(!x8786.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x8786.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8787=IKsin(j4);
IkReal x8788=IKcos(j4);
IkReal x8789=(gconst1*x8788);
IkReal x8790=(gconst1*x8787);
IkReal x8791=((1.0)*gconst2*r20);
IkReal x8792=((1.0)*gconst2*r00);
evalcond[0]=(r12*x8787);
evalcond[1]=(((r21*x8790))+(((-1.0)*x8787*x8791)));
evalcond[2]=(((r01*x8790))+(((-1.0)*x8787*x8792)));
evalcond[3]=(((cj2*sj1))+((r21*x8789))+(((-1.0)*x8788*x8791))+((cj1*sj2)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+(((-1.0)*x8788*x8792))+((cj0*cj1*cj2))+((r01*x8789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8793=(cj2*sj1);
IkReal x8794=(cj1*sj2);
IkReal x8795=(gconst1*r21);
IkReal x8796=((1.0)*gconst2*r20);
CheckValue<IkReal> x8797=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r20*x8796))+(((2.0)*gconst2*r20*x8795))+(((-1.0)*(x8795*x8795)))+(((-1.0)*(r22*r22))))),-1);
if(!x8797.valid){
continue;
}
CheckValue<IkReal> x8798 = IKatan2WithCheck(IkReal((((r22*x8793))+((r22*x8794)))),IkReal(((((-1.0)*x8793*x8796))+(((-1.0)*x8794*x8796))+((x8793*x8795))+((x8794*x8795)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8797.value)))+(x8798.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8799=IKsin(j4);
IkReal x8800=IKcos(j4);
IkReal x8801=(cj1*cj2);
IkReal x8802=((1.0)*cj0);
IkReal x8803=(sj1*sj2);
IkReal x8804=((1.0)*x8800);
IkReal x8805=(gconst1*x8800);
IkReal x8806=(gconst1*x8799);
IkReal x8807=((1.0)*gconst2*x8799);
evalcond[0]=(((r21*x8806))+(((-1.0)*r22*x8804))+(((-1.0)*r20*x8807)));
evalcond[1]=(sj0+(((-1.0)*r02*x8804))+(((-1.0)*r00*x8807))+((r01*x8806)));
evalcond[2]=((((-1.0)*r12*x8804))+(((-1.0)*r10*x8807))+((r11*x8806))+(((-1.0)*x8802)));
evalcond[3]=(((cj2*sj1))+((r21*x8805))+(((-1.0)*gconst2*r20*x8804))+((cj1*sj2))+((r22*x8799)));
evalcond[4]=(((cj0*x8801))+((r02*x8799))+(((-1.0)*gconst2*r00*x8804))+((r01*x8805))+(((-1.0)*x8802*x8803)));
evalcond[5]=(((r12*x8799))+((r11*x8805))+((sj0*x8801))+(((-1.0)*gconst2*r10*x8804))+(((-1.0)*sj0*x8803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8808=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8808.valid){
continue;
}
CheckValue<IkReal> x8809 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8808.value)))+(x8809.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8810=IKsin(j4);
IkReal x8811=IKcos(j4);
IkReal x8812=(cj1*cj2);
IkReal x8813=((1.0)*cj0);
IkReal x8814=(sj1*sj2);
IkReal x8815=((1.0)*x8811);
IkReal x8816=(gconst1*x8811);
IkReal x8817=(gconst1*x8810);
IkReal x8818=((1.0)*gconst2*x8810);
evalcond[0]=(((r21*x8817))+(((-1.0)*r22*x8815))+(((-1.0)*r20*x8818)));
evalcond[1]=(sj0+(((-1.0)*r02*x8815))+((r01*x8817))+(((-1.0)*r00*x8818)));
evalcond[2]=((((-1.0)*r10*x8818))+(((-1.0)*r12*x8815))+((r11*x8817))+(((-1.0)*x8813)));
evalcond[3]=(((r21*x8816))+((cj2*sj1))+(((-1.0)*gconst2*r20*x8815))+((r22*x8810))+((cj1*sj2)));
evalcond[4]=(((r02*x8810))+(((-1.0)*x8813*x8814))+((r01*x8816))+(((-1.0)*gconst2*r00*x8815))+((cj0*x8812)));
evalcond[5]=(((r12*x8810))+((sj0*x8812))+((r11*x8816))+(((-1.0)*gconst2*r10*x8815))+(((-1.0)*sj0*x8814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8819=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8819.valid){
continue;
}
CheckValue<IkReal> x8820 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8819.value)))+(x8820.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8821=IKsin(j4);
IkReal x8822=IKcos(j4);
IkReal x8823=(cj1*cj2);
IkReal x8824=((1.0)*cj0);
IkReal x8825=(sj1*sj2);
IkReal x8826=((1.0)*x8822);
IkReal x8827=(gconst1*x8822);
IkReal x8828=(gconst1*x8821);
IkReal x8829=((1.0)*gconst2*x8821);
evalcond[0]=(((r21*x8828))+(((-1.0)*r20*x8829))+(((-1.0)*r22*x8826)));
evalcond[1]=(sj0+(((-1.0)*r02*x8826))+((r01*x8828))+(((-1.0)*r00*x8829)));
evalcond[2]=((((-1.0)*r12*x8826))+((r11*x8828))+(((-1.0)*x8824))+(((-1.0)*r10*x8829)));
evalcond[3]=((((-1.0)*gconst2*r20*x8826))+((r21*x8827))+((cj2*sj1))+((r22*x8821))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x8824*x8825))+((r02*x8821))+((r01*x8827))+(((-1.0)*gconst2*r00*x8826))+((cj0*x8823)));
evalcond[5]=(((r12*x8821))+((r11*x8827))+((sj0*x8823))+(((-1.0)*gconst2*r10*x8826))+(((-1.0)*sj0*x8825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8830=((-1.0)*r20);
IkReal x8831=x8504;
CheckValue<IkReal> x8833 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8830),IKFAST_ATAN2_MAGTHRESH);
if(!x8833.valid){
continue;
}
IkReal x8832=((-1.0)*(x8833.value));
sj5=gconst1;
cj5=gconst2;
j5=x8832;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8832;
IkReal gconst1=(r21*x8831);
IkReal gconst2=(x8830*x8831);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8834=((-1.0)*r20);
IkReal x8835=x8504;
CheckValue<IkReal> x8837 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8834),IKFAST_ATAN2_MAGTHRESH);
if(!x8837.valid){
continue;
}
IkReal x8836=((-1.0)*(x8837.value));
sj5=gconst1;
cj5=gconst2;
j5=x8836;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8836;
IkReal gconst1=(r21*x8835);
IkReal gconst2=(x8834*x8835);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8838=((-1.0)*r20);
IkReal x8839=x8504;
CheckValue<IkReal> x8841 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8838),IKFAST_ATAN2_MAGTHRESH);
if(!x8841.valid){
continue;
}
IkReal x8840=((-1.0)*(x8841.value));
sj5=gconst1;
cj5=gconst2;
j5=x8840;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8840;
IkReal gconst1=(r21*x8839);
IkReal gconst2=(x8838*x8839);
IkReal x8842=r22*r22;
CheckValue<IkReal> x8845=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8842))),-1);
if(!x8845.valid){
continue;
}
IkReal x8843=x8845.value;
IkReal x8844=(((x8843*(r21*r21*r21*r21)))+((x8843*(r20*r20*r20*r20)))+x8842+(((2.0)*x8843*(r20*r20)*(r21*r21))));
j4eval[0]=x8844;
j4eval[1]=IKsign(x8844);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8846=((-1.0)*r20);
IkReal x8847=x8504;
CheckValue<IkReal> x8849 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8846),IKFAST_ATAN2_MAGTHRESH);
if(!x8849.valid){
continue;
}
IkReal x8848=((-1.0)*(x8849.value));
sj5=gconst1;
cj5=gconst2;
j5=x8848;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8848;
IkReal gconst1=(r21*x8847);
IkReal gconst2=(x8846*x8847);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8850=((-1.0)*r20);
IkReal x8851=x8504;
CheckValue<IkReal> x8853 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8850),IKFAST_ATAN2_MAGTHRESH);
if(!x8853.valid){
continue;
}
IkReal x8852=((-1.0)*(x8853.value));
sj5=gconst1;
cj5=gconst2;
j5=x8852;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8852;
IkReal gconst1=(r21*x8851);
IkReal gconst2=(x8850*x8851);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8854=((-1.0)*r20);
IkReal x8855=x8504;
CheckValue<IkReal> x8857 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8854),IKFAST_ATAN2_MAGTHRESH);
if(!x8857.valid){
continue;
}
IkReal x8856=((-1.0)*(x8857.value));
sj5=gconst1;
cj5=gconst2;
j5=x8856;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8856;
IkReal gconst1=(r21*x8855);
IkReal gconst2=(x8854*x8855);
IkReal x8858=r22*r22;
IkReal x8859=(cj1*r02*sj2);
IkReal x8860=(cj2*r02*sj1);
CheckValue<IkReal> x8864=IKPowWithIntegerCheck(((-1.0)+x8858),-1);
if(!x8864.valid){
continue;
}
IkReal x8861=x8864.value;
if((((1.0)+(((-1.0)*x8858)))) < -0.00001)
continue;
IkReal x8862=IKsqrt(((1.0)+(((-1.0)*x8858))));
IkReal x8863=((1.0)*r22*x8861*x8862);
j4eval[0]=((IKabs((x8859+x8860)))+(IKabs(((((-1.0)*x8860*x8863))+(((-1.0)*x8859*x8863))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8865=(cj2*sj1);
IkReal x8866=(cj1*sj2);
IkReal x8867=(gconst2*r00);
IkReal x8868=((1.0)*gconst1*r01);
CheckValue<IkReal> x8869 = IKatan2WithCheck(IkReal(((((-1.0)*x8866*x8868))+(((-1.0)*x8865*x8868))+((x8865*x8867))+((x8866*x8867)))),IkReal((((r02*x8865))+((r02*x8866)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8869.valid){
continue;
}
CheckValue<IkReal> x8870=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8869.value)+(((1.5707963267949)*(x8870.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8871=IKsin(j4);
IkReal x8872=IKcos(j4);
IkReal x8873=(gconst1*r11);
IkReal x8874=(gconst1*r21);
IkReal x8875=(gconst1*r01);
IkReal x8876=((1.0)*x8872);
IkReal x8877=(gconst2*x8872);
IkReal x8878=((1.0)*x8871);
evalcond[0]=((((-1.0)*r22*x8876))+(((-1.0)*gconst2*r20*x8878))+((x8871*x8874)));
evalcond[1]=((((-1.0)*gconst2*r10*x8878))+(((-1.0)*r12*x8876))+((x8871*x8873)));
evalcond[2]=((((-1.0)*x8875*x8876))+(((-1.0)*r02*x8878))+((r00*x8877)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8876))+((x8871*x8875))+(((-1.0)*gconst2*r00*x8878)));
evalcond[4]=(((cj2*sj1))+((r20*x8877))+(((-1.0)*r22*x8878))+((cj1*sj2))+(((-1.0)*x8874*x8876)));
evalcond[5]=(((r10*x8877))+(((-1.0)*x8873*x8876))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8878))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8879=(gconst1*r01);
IkReal x8880=(gconst2*r00);
CheckValue<IkReal> x8881 = IKatan2WithCheck(IkReal(((((-1.0)*x8879))+x8880)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8881.valid){
continue;
}
CheckValue<IkReal> x8882=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8879*x8880))+(x8880*x8880)+(x8879*x8879)+(r02*r02))),-1);
if(!x8882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8881.value)+(((1.5707963267949)*(x8882.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8883=IKsin(j4);
IkReal x8884=IKcos(j4);
IkReal x8885=(gconst1*r11);
IkReal x8886=(gconst1*r21);
IkReal x8887=(gconst1*r01);
IkReal x8888=((1.0)*x8884);
IkReal x8889=(gconst2*x8884);
IkReal x8890=((1.0)*x8883);
evalcond[0]=((((-1.0)*r22*x8888))+(((-1.0)*gconst2*r20*x8890))+((x8883*x8886)));
evalcond[1]=((((-1.0)*r12*x8888))+(((-1.0)*gconst2*r10*x8890))+((x8883*x8885)));
evalcond[2]=(((r00*x8889))+(((-1.0)*r02*x8890))+(((-1.0)*x8887*x8888)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x8890))+(((-1.0)*r02*x8888))+((x8883*x8887)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8886*x8888))+((r20*x8889))+(((-1.0)*r22*x8890)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r10*x8889))+(((-1.0)*r12*x8890))+((cj1*cj2))+(((-1.0)*x8885*x8888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8891 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8891.valid){
continue;
}
CheckValue<IkReal> x8892=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8891.value)+(((1.5707963267949)*(x8892.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8893=IKsin(j4);
IkReal x8894=IKcos(j4);
IkReal x8895=(gconst1*r11);
IkReal x8896=(gconst1*r21);
IkReal x8897=(gconst1*r01);
IkReal x8898=((1.0)*x8894);
IkReal x8899=(gconst2*x8894);
IkReal x8900=((1.0)*x8893);
evalcond[0]=((((-1.0)*gconst2*r20*x8900))+((x8893*x8896))+(((-1.0)*r22*x8898)));
evalcond[1]=(((x8893*x8895))+(((-1.0)*r12*x8898))+(((-1.0)*gconst2*r10*x8900)));
evalcond[2]=(((r00*x8899))+(((-1.0)*x8897*x8898))+(((-1.0)*r02*x8900)));
evalcond[3]=((1.0)+((x8893*x8897))+(((-1.0)*gconst2*r00*x8900))+(((-1.0)*r02*x8898)));
evalcond[4]=(((cj2*sj1))+((r20*x8899))+(((-1.0)*x8896*x8898))+((cj1*sj2))+(((-1.0)*r22*x8900)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x8895*x8898))+((r10*x8899))+((cj1*cj2))+(((-1.0)*r12*x8900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8901=((-1.0)*r20);
IkReal x8902=x8504;
CheckValue<IkReal> x8904 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8901),IKFAST_ATAN2_MAGTHRESH);
if(!x8904.valid){
continue;
}
IkReal x8903=((-1.0)*(x8904.value));
sj5=gconst1;
cj5=gconst2;
j5=x8903;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8903;
IkReal gconst1=(r21*x8902);
IkReal gconst2=(x8901*x8902);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8905=((-1.0)*r20);
IkReal x8906=x8504;
CheckValue<IkReal> x8908 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8905),IKFAST_ATAN2_MAGTHRESH);
if(!x8908.valid){
continue;
}
IkReal x8907=((-1.0)*(x8908.value));
sj5=gconst1;
cj5=gconst2;
j5=x8907;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8907;
IkReal gconst1=(r21*x8906);
IkReal gconst2=(x8905*x8906);
IkReal x8909=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8913=IKPowWithIntegerCheck(x8909,-1);
if(!x8913.valid){
continue;
}
IkReal x8910=x8913.value;
IkReal x8911=((1.0)*x8910);
IkReal x8912=((((-1.0)*x8911*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x8911*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x8910)));
j4eval[0]=x8912;
j4eval[1]=IKsign(x8912);
j4eval[2]=r02;
j4eval[3]=x8909;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8914=((-1.0)*r20);
IkReal x8915=x8504;
CheckValue<IkReal> x8917 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8914),IKFAST_ATAN2_MAGTHRESH);
if(!x8917.valid){
continue;
}
IkReal x8916=((-1.0)*(x8917.value));
sj5=gconst1;
cj5=gconst2;
j5=x8916;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8916;
IkReal gconst1=(r21*x8915);
IkReal gconst2=(x8914*x8915);
IkReal x8918=r22*r22;
IkReal x8919=(cj1*r02*sj2);
IkReal x8920=(cj2*r02*sj1);
CheckValue<IkReal> x8924=IKPowWithIntegerCheck(((-1.0)+x8918),-1);
if(!x8924.valid){
continue;
}
IkReal x8921=x8924.value;
if((((1.0)+(((-1.0)*x8918)))) < -0.00001)
continue;
IkReal x8922=IKsqrt(((1.0)+(((-1.0)*x8918))));
IkReal x8923=((1.0)*r22*x8921*x8922);
j4eval[0]=((IKabs(((((-1.0)*x8919*x8923))+(((-1.0)*x8920*x8923)))))+(IKabs((x8920+x8919))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8925=(cj2*sj1);
IkReal x8926=(cj1*sj2);
IkReal x8927=(gconst2*r00);
IkReal x8928=((1.0)*gconst1*r01);
CheckValue<IkReal> x8929=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8929.valid){
continue;
}
CheckValue<IkReal> x8930 = IKatan2WithCheck(IkReal((((x8925*x8927))+(((-1.0)*x8926*x8928))+(((-1.0)*x8925*x8928))+((x8926*x8927)))),IkReal((((r02*x8926))+((r02*x8925)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8929.value)))+(x8930.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8931=IKsin(j4);
IkReal x8932=IKcos(j4);
IkReal x8933=(gconst1*r11);
IkReal x8934=(gconst1*r21);
IkReal x8935=(gconst1*r01);
IkReal x8936=((1.0)*x8932);
IkReal x8937=(gconst2*x8932);
IkReal x8938=((1.0)*x8931);
evalcond[0]=((((-1.0)*r22*x8936))+(((-1.0)*gconst2*r20*x8938))+((x8931*x8934)));
evalcond[1]=((((-1.0)*r12*x8936))+(((-1.0)*gconst2*r10*x8938))+((x8931*x8933)));
evalcond[2]=((((-1.0)*x8935*x8936))+(((-1.0)*r02*x8938))+((r00*x8937)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r00*x8938))+(((-1.0)*r02*x8936))+((x8931*x8935)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8938))+((cj1*sj2))+((r20*x8937))+(((-1.0)*x8934*x8936)));
evalcond[5]=((((-1.0)*r12*x8938))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8933*x8936))+((r10*x8937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8939=(gconst2*r00);
IkReal x8940=(gconst1*r01);
CheckValue<IkReal> x8941 = IKatan2WithCheck(IkReal((x8939+(((-1.0)*x8940)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8941.valid){
continue;
}
CheckValue<IkReal> x8942=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x8939*x8939)))+(((-1.0)*(x8940*x8940)))+(((2.0)*x8939*x8940)))),-1);
if(!x8942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8941.value)+(((1.5707963267949)*(x8942.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8943=IKsin(j4);
IkReal x8944=IKcos(j4);
IkReal x8945=(gconst1*r11);
IkReal x8946=(gconst1*r21);
IkReal x8947=(gconst1*r01);
IkReal x8948=((1.0)*x8944);
IkReal x8949=(gconst2*x8944);
IkReal x8950=((1.0)*x8943);
evalcond[0]=((((-1.0)*r22*x8948))+((x8943*x8946))+(((-1.0)*gconst2*r20*x8950)));
evalcond[1]=((((-1.0)*r12*x8948))+(((-1.0)*gconst2*r10*x8950))+((x8943*x8945)));
evalcond[2]=((((-1.0)*x8947*x8948))+((r00*x8949))+(((-1.0)*r02*x8950)));
evalcond[3]=((-1.0)+((x8943*x8947))+(((-1.0)*r02*x8948))+(((-1.0)*gconst2*r00*x8950)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8946*x8948))+((cj1*sj2))+(((-1.0)*r22*x8950))+((r20*x8949)));
evalcond[5]=((((-1.0)*r12*x8950))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r10*x8949))+(((-1.0)*x8945*x8948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8951=((1.0)*gconst2);
CheckValue<IkReal> x8952=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8951))+(((-1.0)*gconst1*r10)))),-1);
if(!x8952.valid){
continue;
}
CheckValue<IkReal> x8953 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8951)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8952.value)))+(x8953.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8954=IKsin(j4);
IkReal x8955=IKcos(j4);
IkReal x8956=(gconst1*r11);
IkReal x8957=(gconst1*r21);
IkReal x8958=(gconst1*r01);
IkReal x8959=((1.0)*x8955);
IkReal x8960=(gconst2*x8955);
IkReal x8961=((1.0)*x8954);
evalcond[0]=((((-1.0)*r22*x8959))+((x8954*x8957))+(((-1.0)*gconst2*r20*x8961)));
evalcond[1]=((((-1.0)*r12*x8959))+((x8954*x8956))+(((-1.0)*gconst2*r10*x8961)));
evalcond[2]=((((-1.0)*x8958*x8959))+((r00*x8960))+(((-1.0)*r02*x8961)));
evalcond[3]=((-1.0)+((x8954*x8958))+(((-1.0)*r02*x8959))+(((-1.0)*gconst2*r00*x8961)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8961))+(((-1.0)*x8957*x8959))+((r20*x8960)));
evalcond[5]=((((-1.0)*r12*x8961))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r10*x8960))+(((-1.0)*x8956*x8959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8962=((-1.0)*r20);
IkReal x8963=x8504;
CheckValue<IkReal> x8965 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8962),IKFAST_ATAN2_MAGTHRESH);
if(!x8965.valid){
continue;
}
IkReal x8964=((-1.0)*(x8965.value));
sj5=gconst1;
cj5=gconst2;
j5=x8964;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8964;
IkReal gconst1=(r21*x8963);
IkReal gconst2=(x8962*x8963);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8966=((-1.0)*r20);
IkReal x8967=x8504;
CheckValue<IkReal> x8969 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8966),IKFAST_ATAN2_MAGTHRESH);
if(!x8969.valid){
continue;
}
IkReal x8968=((-1.0)*(x8969.value));
sj5=gconst1;
cj5=gconst2;
j5=x8968;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8968;
IkReal gconst1=(r21*x8967);
IkReal gconst2=(x8966*x8967);
IkReal x8970=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8974=IKPowWithIntegerCheck(x8970,-1);
if(!x8974.valid){
continue;
}
IkReal x8971=x8974.value;
IkReal x8972=((1.0)*x8971);
IkReal x8973=((((-2.0)*r10*r11*r20*r21*x8971))+(((-1.0)*(r12*r12)))+(((-1.0)*x8972*(r11*r11)*(r21*r21)))+(((-1.0)*x8972*(r10*r10)*(r20*r20))));
j4eval[0]=x8973;
j4eval[1]=r12;
j4eval[2]=x8970;
j4eval[3]=IKsign(x8973);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8975=((-1.0)*r20);
IkReal x8976=x8504;
CheckValue<IkReal> x8978 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8975),IKFAST_ATAN2_MAGTHRESH);
if(!x8978.valid){
continue;
}
IkReal x8977=((-1.0)*(x8978.value));
sj5=gconst1;
cj5=gconst2;
j5=x8977;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8977;
IkReal gconst1=(r21*x8976);
IkReal gconst2=(x8975*x8976);
IkReal x8979=r22*r22;
IkReal x8980=(cj1*r12*sj2);
IkReal x8981=(cj2*r12*sj1);
CheckValue<IkReal> x8985=IKPowWithIntegerCheck(((-1.0)+x8979),-1);
if(!x8985.valid){
continue;
}
IkReal x8982=x8985.value;
if((((1.0)+(((-1.0)*x8979)))) < -0.00001)
continue;
IkReal x8983=IKsqrt(((1.0)+(((-1.0)*x8979))));
IkReal x8984=((1.0)*r22*x8982*x8983);
j4eval[0]=((IKabs(((((-1.0)*x8980*x8984))+(((-1.0)*x8981*x8984)))))+(IKabs((x8981+x8980))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8986=((1.0)*gconst1);
IkReal x8987=(cj2*sj1);
IkReal x8988=(gconst2*r10);
IkReal x8989=(cj1*sj2);
CheckValue<IkReal> x8990=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x8986)))),-1);
if(!x8990.valid){
continue;
}
CheckValue<IkReal> x8991 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x8986*x8987))+(((-1.0)*r11*x8986*x8989))+((x8987*x8988))+((x8988*x8989)))),IkReal((((r12*x8989))+((r12*x8987)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8990.value)))+(x8991.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8992=IKsin(j4);
IkReal x8993=IKcos(j4);
IkReal x8994=((1.0)*x8993);
IkReal x8995=(gconst2*x8993);
IkReal x8996=(gconst1*x8992);
IkReal x8997=((1.0)*x8992);
evalcond[0]=(((r21*x8996))+(((-1.0)*gconst2*r20*x8997))+(((-1.0)*r22*x8994)));
evalcond[1]=(((r01*x8996))+(((-1.0)*r02*x8994))+(((-1.0)*gconst2*r00*x8997)));
evalcond[2]=((((-1.0)*r12*x8997))+((r10*x8995))+(((-1.0)*gconst1*r11*x8994)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8994))+((r11*x8996))+(((-1.0)*gconst2*r10*x8997)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x8994))+((cj1*sj2))+((r20*x8995))+(((-1.0)*r22*x8997)));
evalcond[5]=((((-1.0)*gconst1*r01*x8994))+(((-1.0)*sj1*sj2))+((r00*x8995))+(((-1.0)*r02*x8997))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8998=(gconst1*r11);
IkReal x8999=(gconst2*r10);
CheckValue<IkReal> x9000 = IKatan2WithCheck(IkReal((x8999+(((-1.0)*x8998)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9000.valid){
continue;
}
CheckValue<IkReal> x9001=IKPowWithIntegerCheck(IKsign(((((2.0)*x8998*x8999))+(((-1.0)*(x8999*x8999)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x8998*x8998))))),-1);
if(!x9001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9000.value)+(((1.5707963267949)*(x9001.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9002=IKsin(j4);
IkReal x9003=IKcos(j4);
IkReal x9004=((1.0)*x9003);
IkReal x9005=(gconst2*x9003);
IkReal x9006=(gconst1*x9002);
IkReal x9007=((1.0)*x9002);
evalcond[0]=((((-1.0)*r22*x9004))+((r21*x9006))+(((-1.0)*gconst2*r20*x9007)));
evalcond[1]=((((-1.0)*r02*x9004))+(((-1.0)*gconst2*r00*x9007))+((r01*x9006)));
evalcond[2]=((((-1.0)*gconst1*r11*x9004))+(((-1.0)*r12*x9007))+((r10*x9005)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9007))+(((-1.0)*r12*x9004))+((r11*x9006)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9007))+(((-1.0)*gconst1*r21*x9004))+((cj1*sj2))+((r20*x9005)));
evalcond[5]=((((-1.0)*r02*x9007))+(((-1.0)*gconst1*r01*x9004))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r00*x9005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9008 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9008.valid){
continue;
}
CheckValue<IkReal> x9009=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9008.value)+(((1.5707963267949)*(x9009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9010=IKsin(j4);
IkReal x9011=IKcos(j4);
IkReal x9012=((1.0)*x9011);
IkReal x9013=(gconst2*x9011);
IkReal x9014=(gconst1*x9010);
IkReal x9015=((1.0)*x9010);
evalcond[0]=((((-1.0)*gconst2*r20*x9015))+(((-1.0)*r22*x9012))+((r21*x9014)));
evalcond[1]=((((-1.0)*r02*x9012))+((r01*x9014))+(((-1.0)*gconst2*r00*x9015)));
evalcond[2]=((((-1.0)*gconst1*r11*x9012))+(((-1.0)*r12*x9015))+((r10*x9013)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9012))+(((-1.0)*gconst2*r10*x9015))+((r11*x9014)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9015))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9012))+((r20*x9013)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r02*x9015))+((r00*x9013))+(((-1.0)*gconst1*r01*x9012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9016=((-1.0)*r20);
IkReal x9017=x8504;
CheckValue<IkReal> x9019 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9016),IKFAST_ATAN2_MAGTHRESH);
if(!x9019.valid){
continue;
}
IkReal x9018=((-1.0)*(x9019.value));
sj5=gconst1;
cj5=gconst2;
j5=x9018;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9018;
IkReal gconst1=(r21*x9017);
IkReal gconst2=(x9016*x9017);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9020=((-1.0)*r20);
IkReal x9021=x8504;
CheckValue<IkReal> x9023 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9020),IKFAST_ATAN2_MAGTHRESH);
if(!x9023.valid){
continue;
}
IkReal x9022=((-1.0)*(x9023.value));
sj5=gconst1;
cj5=gconst2;
j5=x9022;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9022;
IkReal gconst1=(r21*x9021);
IkReal gconst2=(x9020*x9021);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9024=((-1.0)*r20);
IkReal x9025=x8504;
CheckValue<IkReal> x9027 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9024),IKFAST_ATAN2_MAGTHRESH);
if(!x9027.valid){
continue;
}
IkReal x9026=((-1.0)*(x9027.value));
sj5=gconst1;
cj5=gconst2;
j5=x9026;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9026;
IkReal gconst1=(r21*x9025);
IkReal gconst2=(x9024*x9025);
IkReal x9028=r22*r22;
IkReal x9029=(cj1*r12*sj2);
IkReal x9030=(cj2*r12*sj1);
CheckValue<IkReal> x9034=IKPowWithIntegerCheck(((-1.0)+x9028),-1);
if(!x9034.valid){
continue;
}
IkReal x9031=x9034.value;
if((((1.0)+(((-1.0)*x9028)))) < -0.00001)
continue;
IkReal x9032=IKsqrt(((1.0)+(((-1.0)*x9028))));
IkReal x9033=((1.0)*r22*x9031*x9032);
j4eval[0]=((IKabs(((((-1.0)*x9029*x9033))+(((-1.0)*x9030*x9033)))))+(IKabs((x9030+x9029))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9035=((1.0)*gconst1);
IkReal x9036=(cj2*sj1);
IkReal x9037=(gconst2*r10);
IkReal x9038=(cj1*sj2);
CheckValue<IkReal> x9039=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9035)))),-1);
if(!x9039.valid){
continue;
}
CheckValue<IkReal> x9040 = IKatan2WithCheck(IkReal((((x9036*x9037))+((x9037*x9038))+(((-1.0)*r11*x9035*x9038))+(((-1.0)*r11*x9035*x9036)))),IkReal((((r12*x9038))+((r12*x9036)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9039.value)))+(x9040.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9041=IKsin(j4);
IkReal x9042=IKcos(j4);
IkReal x9043=((1.0)*x9042);
IkReal x9044=(gconst2*x9042);
IkReal x9045=(gconst1*x9041);
IkReal x9046=((1.0)*x9041);
evalcond[0]=((((-1.0)*r22*x9043))+((r21*x9045))+(((-1.0)*gconst2*r20*x9046)));
evalcond[1]=(((r01*x9045))+(((-1.0)*gconst2*r00*x9046))+(((-1.0)*r02*x9043)));
evalcond[2]=((((-1.0)*gconst1*r11*x9043))+(((-1.0)*r12*x9046))+((r10*x9044)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9043))+((r11*x9045))+(((-1.0)*gconst2*r10*x9046)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9043))+((cj1*sj2))+((r20*x9044))+(((-1.0)*r22*x9046)));
evalcond[5]=((((-1.0)*gconst1*r01*x9043))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x9044))+(((-1.0)*r02*x9046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9047=(gconst1*r11);
IkReal x9048=(gconst2*r10);
CheckValue<IkReal> x9049=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9048*x9048)+(x9047*x9047)+(((-2.0)*x9047*x9048)))),-1);
if(!x9049.valid){
continue;
}
CheckValue<IkReal> x9050 = IKatan2WithCheck(IkReal(((((-1.0)*x9047))+x9048)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9049.value)))+(x9050.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9051=IKsin(j4);
IkReal x9052=IKcos(j4);
IkReal x9053=((1.0)*x9052);
IkReal x9054=(gconst2*x9052);
IkReal x9055=(gconst1*x9051);
IkReal x9056=((1.0)*x9051);
evalcond[0]=((((-1.0)*r22*x9053))+(((-1.0)*gconst2*r20*x9056))+((r21*x9055)));
evalcond[1]=((((-1.0)*r02*x9053))+((r01*x9055))+(((-1.0)*gconst2*r00*x9056)));
evalcond[2]=((((-1.0)*gconst1*r11*x9053))+(((-1.0)*r12*x9056))+((r10*x9054)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9056))+(((-1.0)*r12*x9053))+((r11*x9055)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9053))+((cj1*sj2))+((r20*x9054))+(((-1.0)*r22*x9056)));
evalcond[5]=((((-1.0)*gconst1*r01*x9053))+(((-1.0)*r02*x9056))+((r00*x9054))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9057=((1.0)*gconst2);
CheckValue<IkReal> x9058=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9057)))),-1);
if(!x9058.valid){
continue;
}
CheckValue<IkReal> x9059 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9057)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9058.value)))+(x9059.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9060=IKsin(j4);
IkReal x9061=IKcos(j4);
IkReal x9062=((1.0)*x9061);
IkReal x9063=(gconst2*x9061);
IkReal x9064=(gconst1*x9060);
IkReal x9065=((1.0)*x9060);
evalcond[0]=((((-1.0)*gconst2*r20*x9065))+((r21*x9064))+(((-1.0)*r22*x9062)));
evalcond[1]=(((r01*x9064))+(((-1.0)*gconst2*r00*x9065))+(((-1.0)*r02*x9062)));
evalcond[2]=(((r10*x9063))+(((-1.0)*gconst1*r11*x9062))+(((-1.0)*r12*x9065)));
evalcond[3]=((1.0)+((r11*x9064))+(((-1.0)*gconst2*r10*x9065))+(((-1.0)*r12*x9062)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9062))+((r20*x9063))+(((-1.0)*r22*x9065)));
evalcond[5]=(((r00*x9063))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9065))+(((-1.0)*gconst1*r01*x9062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9066=((-1.0)*r20);
IkReal x9067=((-1.0)*r21);
CheckValue<IkReal> x9069 = IKatan2WithCheck(IkReal(x9067),IkReal(x9066),IKFAST_ATAN2_MAGTHRESH);
if(!x9069.valid){
continue;
}
IkReal x9068=((-1.0)*(x9069.value));
sj5=gconst1;
cj5=gconst2;
j5=x9068;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9066);
rxp0_2=(py*r00);
rxp1_0=(py*x9067);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9068;
IkReal gconst1=r21;
IkReal gconst2=x9066;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9070=((-1.0)*r20);
IkReal x9071=((-1.0)*r21);
CheckValue<IkReal> x9073 = IKatan2WithCheck(IkReal(x9071),IkReal(x9070),IKFAST_ATAN2_MAGTHRESH);
if(!x9073.valid){
continue;
}
IkReal x9072=((-1.0)*(x9073.value));
sj5=gconst1;
cj5=gconst2;
j5=x9072;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9070);
rxp0_2=(py*r00);
rxp1_0=(py*x9071);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9072;
IkReal gconst1=r21;
IkReal gconst2=x9070;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r00*r00));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9074=((-1.0)*r20);
IkReal x9075=((-1.0)*r21);
CheckValue<IkReal> x9077 = IKatan2WithCheck(IkReal(x9075),IkReal(x9074),IKFAST_ATAN2_MAGTHRESH);
if(!x9077.valid){
continue;
}
IkReal x9076=((-1.0)*(x9077.value));
sj5=gconst1;
cj5=gconst2;
j5=x9076;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9074);
rxp0_2=(py*r00);
rxp1_0=(py*x9075);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9076;
IkReal gconst1=r21;
IkReal gconst2=x9074;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9080=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x9080.valid){
continue;
}
IkReal x9078=x9080.value;
IkReal x9079=(cj0*x9078);
cj4array[0]=((((-1.0)*cj1*cj2*x9079))+((sj1*sj2*x9079)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9081=IKsin(j4);
IkReal x9082=IKcos(j4);
IkReal x9083=(gconst2*r20);
IkReal x9084=(gconst1*x9081);
IkReal x9085=((1.0)*x9082);
IkReal x9086=((1.0)*x9081);
evalcond[0]=((-1.0)*r12*x9081);
evalcond[1]=((((-1.0)*r12*x9085))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x9084))+(((-1.0)*x9083*x9086)));
evalcond[3]=((((-1.0)*gconst2*r00*x9086))+((r01*x9084)));
evalcond[4]=(((cj2*sj1))+((x9082*x9083))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9089=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9089.valid){
continue;
}
IkReal x9087=x9089.value;
IkReal x9088=((1.0)*x9087);
cj4array[0]=((((-1.0)*cj1*sj2*x9088))+(((-1.0)*cj2*sj1*x9088)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9090=IKsin(j4);
IkReal x9091=IKcos(j4);
IkReal x9092=(gconst2*r00);
IkReal x9093=(gconst1*r01);
IkReal x9094=((1.0)*cj0);
IkReal x9095=((1.0)*x9091);
IkReal x9096=((1.0)*x9090);
evalcond[0]=((-1.0)*r12*x9090);
evalcond[1]=((((-1.0)*x9094))+(((-1.0)*r12*x9095)));
evalcond[2]=((((-1.0)*gconst2*r20*x9096))+((gconst1*r21*x9090)));
evalcond[3]=((((-1.0)*x9092*x9096))+((x9090*x9093)));
evalcond[4]=((((-1.0)*sj1*sj2*x9094))+((x9091*x9092))+((cj0*cj1*cj2))+(((-1.0)*x9093*x9095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9097=IKPowWithIntegerCheck(r12,-1);
if(!x9097.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x9097.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9098=IKsin(j4);
IkReal x9099=IKcos(j4);
IkReal x9100=(gconst2*x9099);
IkReal x9101=(gconst1*x9098);
IkReal x9102=((1.0)*gconst1*x9099);
IkReal x9103=((1.0)*gconst2*x9098);
evalcond[0]=((-1.0)*r12*x9098);
evalcond[1]=(((r21*x9101))+(((-1.0)*r20*x9103)));
evalcond[2]=((((-1.0)*r00*x9103))+((r01*x9101)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x9102))+((r20*x9100)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+(((-1.0)*r01*x9102))+((cj0*cj1*cj2))+((r00*x9100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9104=(cj2*sj1);
IkReal x9105=(cj1*sj2);
IkReal x9106=(gconst1*r21);
IkReal x9107=((1.0)*gconst2*r20);
CheckValue<IkReal> x9108=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*gconst2*r20*x9106))+(((gconst2*gconst2)*(r20*r20)))+(x9106*x9106))),-1);
if(!x9108.valid){
continue;
}
CheckValue<IkReal> x9109 = IKatan2WithCheck(IkReal((((r22*x9104))+((r22*x9105)))),IkReal((((x9105*x9106))+((x9104*x9106))+(((-1.0)*x9105*x9107))+(((-1.0)*x9104*x9107)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9108.value)))+(x9109.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9110=IKsin(j4);
IkReal x9111=IKcos(j4);
IkReal x9112=(cj1*cj2);
IkReal x9113=(gconst1*r11);
IkReal x9114=(gconst1*r21);
IkReal x9115=(gconst1*r01);
IkReal x9116=((1.0)*cj0);
IkReal x9117=(sj1*sj2);
IkReal x9118=((1.0)*x9111);
IkReal x9119=(gconst2*x9111);
IkReal x9120=((1.0)*x9110);
evalcond[0]=((((-1.0)*gconst2*r20*x9120))+((x9110*x9114))+(((-1.0)*r22*x9118)));
evalcond[1]=((((-1.0)*gconst2*r00*x9120))+sj0+((x9110*x9115))+(((-1.0)*r02*x9118)));
evalcond[2]=((((-1.0)*x9116))+((x9110*x9113))+(((-1.0)*gconst2*r10*x9120))+(((-1.0)*r12*x9118)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9114*x9118))+((cj1*sj2))+(((-1.0)*r22*x9120))+((r20*x9119)));
evalcond[4]=(((cj0*x9112))+(((-1.0)*r02*x9120))+(((-1.0)*x9115*x9118))+(((-1.0)*x9116*x9117))+((r00*x9119)));
evalcond[5]=((((-1.0)*r12*x9120))+(((-1.0)*x9113*x9118))+(((-1.0)*sj0*x9117))+((sj0*x9112))+((r10*x9119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9121=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9121.valid){
continue;
}
CheckValue<IkReal> x9122 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9121.value)))+(x9122.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9123=IKsin(j4);
IkReal x9124=IKcos(j4);
IkReal x9125=(cj1*cj2);
IkReal x9126=(gconst1*r11);
IkReal x9127=(gconst1*r21);
IkReal x9128=(gconst1*r01);
IkReal x9129=((1.0)*cj0);
IkReal x9130=(sj1*sj2);
IkReal x9131=((1.0)*x9124);
IkReal x9132=(gconst2*x9124);
IkReal x9133=((1.0)*x9123);
evalcond[0]=((((-1.0)*r22*x9131))+((x9123*x9127))+(((-1.0)*gconst2*r20*x9133)));
evalcond[1]=(sj0+(((-1.0)*r02*x9131))+((x9123*x9128))+(((-1.0)*gconst2*r00*x9133)));
evalcond[2]=((((-1.0)*gconst2*r10*x9133))+(((-1.0)*r12*x9131))+(((-1.0)*x9129))+((x9123*x9126)));
evalcond[3]=(((r20*x9132))+(((-1.0)*x9127*x9131))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9133)));
evalcond[4]=((((-1.0)*x9128*x9131))+((cj0*x9125))+(((-1.0)*r02*x9133))+(((-1.0)*x9129*x9130))+((r00*x9132)));
evalcond[5]=((((-1.0)*sj0*x9130))+((r10*x9132))+(((-1.0)*x9126*x9131))+(((-1.0)*r12*x9133))+((sj0*x9125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9134=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9134.valid){
continue;
}
CheckValue<IkReal> x9135 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9134.value)))+(x9135.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9136=IKsin(j4);
IkReal x9137=IKcos(j4);
IkReal x9138=(cj1*cj2);
IkReal x9139=(gconst1*r11);
IkReal x9140=(gconst1*r21);
IkReal x9141=(gconst1*r01);
IkReal x9142=((1.0)*cj0);
IkReal x9143=(sj1*sj2);
IkReal x9144=((1.0)*x9137);
IkReal x9145=(gconst2*x9137);
IkReal x9146=((1.0)*x9136);
evalcond[0]=((((-1.0)*gconst2*r20*x9146))+((x9136*x9140))+(((-1.0)*r22*x9144)));
evalcond[1]=((((-1.0)*gconst2*r00*x9146))+sj0+((x9136*x9141))+(((-1.0)*r02*x9144)));
evalcond[2]=((((-1.0)*gconst2*r10*x9146))+(((-1.0)*x9142))+(((-1.0)*r12*x9144))+((x9136*x9139)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9140*x9144))+((cj1*sj2))+((r20*x9145))+(((-1.0)*r22*x9146)));
evalcond[4]=((((-1.0)*x9142*x9143))+(((-1.0)*x9141*x9144))+((r00*x9145))+((cj0*x9138))+(((-1.0)*r02*x9146)));
evalcond[5]=(((r10*x9145))+(((-1.0)*sj0*x9143))+((sj0*x9138))+(((-1.0)*r12*x9146))+(((-1.0)*x9139*x9144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9147=((-1.0)*r20);
IkReal x9148=x8504;
CheckValue<IkReal> x9150 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9147),IKFAST_ATAN2_MAGTHRESH);
if(!x9150.valid){
continue;
}
IkReal x9149=((-1.0)*(x9150.value));
sj5=gconst1;
cj5=gconst2;
j5=x9149;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9149;
IkReal gconst1=(r21*x9148);
IkReal gconst2=(x9147*x9148);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9151=((-1.0)*r20);
IkReal x9152=x8504;
CheckValue<IkReal> x9154 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9151),IKFAST_ATAN2_MAGTHRESH);
if(!x9154.valid){
continue;
}
IkReal x9153=((-1.0)*(x9154.value));
sj5=gconst1;
cj5=gconst2;
j5=x9153;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9153;
IkReal gconst1=(r21*x9152);
IkReal gconst2=(x9151*x9152);
CheckValue<IkReal> x9162=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9162.valid){
continue;
}
IkReal x9155=x9162.value;
IkReal x9156=(sj3*x9155);
IkReal x9157=(r11*x9156);
IkReal x9158=(r00*x9156);
IkReal x9159=(r01*x9156);
IkReal x9160=(r10*x9156);
IkReal x9161=(r20*r21*x9156);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9157*(r21*r21)))+((r10*r20*r21*x9159))+((r10*x9158*(r20*r20)))+((r00*r20*r21*x9157))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9163=gconst1*gconst1;
IkReal x9164=gconst2*gconst2;
IkReal x9165=((1.0)*cj3);
IkReal x9166=(gconst2*r10);
IkReal x9167=(r01*sj3);
IkReal x9168=(gconst1*r00*sj3);
IkReal x9169=(gconst1*gconst2*r11);
IkReal x9170=(r10*x9164);
IkReal x9171=(r11*x9163);
CheckValue<IkReal> x9172 = IKatan2WithCheck(IkReal((((gconst2*r12*x9167))+((r12*x9168)))),IkReal(((((-1.0)*x9167*x9170))+(((-1.0)*x9166*x9168))+((r00*sj3*x9171))+((x9167*x9169)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9172.valid){
continue;
}
CheckValue<IkReal> x9173=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9165*x9170))+(((-1.0)*r01*x9165*x9171))+(((-1.0)*r02*r12*x9165))+((cj3*gconst1*r01*x9166))+((cj3*r00*x9169)))),-1);
if(!x9173.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9172.value)+(((1.5707963267949)*(x9173.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9174=IKsin(j4);
IkReal x9175=IKcos(j4);
IkReal x9176=(cj2*sj1);
IkReal x9177=(cj1*sj2);
IkReal x9178=(gconst1*sj3);
IkReal x9179=(cj3*gconst1);
IkReal x9180=(sj1*sj2);
IkReal x9181=(cj3*gconst2);
IkReal x9182=(cj1*cj2);
IkReal x9183=(gconst2*sj3);
IkReal x9184=((1.0)*x9175);
IkReal x9185=((1.0)*x9174);
IkReal x9186=(gconst1*x9174);
IkReal x9187=(cj3*x9174);
IkReal x9188=(x9177+x9176);
IkReal x9189=(x9175*x9183);
evalcond[0]=((((-1.0)*gconst2*r20*x9185))+(((-1.0)*r22*x9184))+((r21*x9186)));
evalcond[1]=((((-1.0)*r12*x9184))+((r11*x9186))+(((-1.0)*gconst2*r10*x9185)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9185))+(((-1.0)*r02*x9184))+((r01*x9186)));
evalcond[3]=((((-1.0)*r00*x9181*x9184))+((r02*x9187))+((r01*x9175*x9179))+((r00*x9178))+((r01*x9183)));
evalcond[4]=(((r00*x9189))+(((-1.0)*r01*x9178*x9184))+((r00*x9179))+(((-1.0)*r02*sj3*x9185))+((r01*x9181)));
evalcond[5]=(x9188+(((-1.0)*r20*x9181*x9184))+((r20*x9178))+((r22*x9187))+((r21*x9175*x9179))+((r21*x9183)));
evalcond[6]=(((r10*x9179))+((r11*x9181))+(((-1.0)*r11*x9178*x9184))+x9188+((r10*x9189))+(((-1.0)*r12*sj3*x9185)));
evalcond[7]=(((r10*x9178))+((r11*x9175*x9179))+((r11*x9183))+((r12*x9187))+x9182+(((-1.0)*x9180))+(((-1.0)*r10*x9181*x9184)));
evalcond[8]=((((-1.0)*r22*sj3*x9185))+x9180+((r20*x9189))+((r20*x9179))+(((-1.0)*r21*x9178*x9184))+(((-1.0)*x9182))+((r21*x9181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9190=gconst2*gconst2;
IkReal x9191=gconst1*gconst1;
IkReal x9192=(gconst1*r00);
IkReal x9193=(r11*sj3);
IkReal x9194=((1.0)*gconst2);
IkReal x9195=(cj3*r12);
IkReal x9196=(cj3*r11);
IkReal x9197=(gconst2*r01);
IkReal x9198=(cj3*r10);
IkReal x9199=(r10*sj3);
CheckValue<IkReal> x9200 = IKatan2WithCheck(IkReal((((x9195*x9197))+((x9192*x9195)))),IkReal((((gconst1*x9196*x9197))+(((-1.0)*r01*x9190*x9198))+(((-1.0)*x9192*x9194*x9198))+((r00*x9191*x9196)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9200.valid){
continue;
}
CheckValue<IkReal> x9201=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x9192*x9193*x9194))+(((-1.0)*gconst1*r01*x9194*x9199))+((r01*x9191*x9193))+((r00*x9190*x9199)))),-1);
if(!x9201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9200.value)+(((1.5707963267949)*(x9201.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9202=IKsin(j4);
IkReal x9203=IKcos(j4);
IkReal x9204=(cj2*sj1);
IkReal x9205=(cj1*sj2);
IkReal x9206=(gconst1*sj3);
IkReal x9207=(cj3*gconst1);
IkReal x9208=(sj1*sj2);
IkReal x9209=(cj3*gconst2);
IkReal x9210=(cj1*cj2);
IkReal x9211=(gconst2*sj3);
IkReal x9212=((1.0)*x9203);
IkReal x9213=((1.0)*x9202);
IkReal x9214=(gconst1*x9202);
IkReal x9215=(cj3*x9202);
IkReal x9216=(x9205+x9204);
IkReal x9217=(x9203*x9211);
evalcond[0]=((((-1.0)*gconst2*r20*x9213))+((r21*x9214))+(((-1.0)*r22*x9212)));
evalcond[1]=((((-1.0)*gconst2*r10*x9213))+((r11*x9214))+(((-1.0)*r12*x9212)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9212))+(((-1.0)*gconst2*r00*x9213))+((r01*x9214)));
evalcond[3]=(((r01*x9203*x9207))+((r00*x9206))+((r02*x9215))+(((-1.0)*r00*x9209*x9212))+((r01*x9211)));
evalcond[4]=(((r00*x9217))+((r00*x9207))+((r01*x9209))+(((-1.0)*r01*x9206*x9212))+(((-1.0)*r02*sj3*x9213)));
evalcond[5]=(((r20*x9206))+(((-1.0)*r20*x9209*x9212))+((r21*x9211))+x9216+((r22*x9215))+((r21*x9203*x9207)));
evalcond[6]=((((-1.0)*r11*x9206*x9212))+((r10*x9217))+((r10*x9207))+(((-1.0)*r12*sj3*x9213))+x9216+((r11*x9209)));
evalcond[7]=(((r10*x9206))+x9210+((r12*x9215))+(((-1.0)*r10*x9209*x9212))+((r11*x9211))+((r11*x9203*x9207))+(((-1.0)*x9208)));
evalcond[8]=(((r20*x9207))+((r20*x9217))+(((-1.0)*r22*sj3*x9213))+x9208+(((-1.0)*r21*x9206*x9212))+((r21*x9209))+(((-1.0)*x9210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9218 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9218.valid){
continue;
}
CheckValue<IkReal> x9219=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9218.value)+(((1.5707963267949)*(x9219.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9220=IKsin(j4);
IkReal x9221=IKcos(j4);
IkReal x9222=(cj2*sj1);
IkReal x9223=(cj1*sj2);
IkReal x9224=(gconst1*sj3);
IkReal x9225=(cj3*gconst1);
IkReal x9226=(sj1*sj2);
IkReal x9227=(cj3*gconst2);
IkReal x9228=(cj1*cj2);
IkReal x9229=(gconst2*sj3);
IkReal x9230=((1.0)*x9221);
IkReal x9231=((1.0)*x9220);
IkReal x9232=(gconst1*x9220);
IkReal x9233=(cj3*x9220);
IkReal x9234=(x9223+x9222);
IkReal x9235=(x9221*x9229);
evalcond[0]=(((r21*x9232))+(((-1.0)*gconst2*r20*x9231))+(((-1.0)*r22*x9230)));
evalcond[1]=((((-1.0)*r12*x9230))+(((-1.0)*gconst2*r10*x9231))+((r11*x9232)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9231))+((r01*x9232))+(((-1.0)*r02*x9230)));
evalcond[3]=(((r00*x9224))+((r01*x9229))+((r02*x9233))+(((-1.0)*r00*x9227*x9230))+((r01*x9221*x9225)));
evalcond[4]=(((r00*x9225))+((r01*x9227))+(((-1.0)*r02*sj3*x9231))+(((-1.0)*r01*x9224*x9230))+((r00*x9235)));
evalcond[5]=(((r20*x9224))+x9234+(((-1.0)*r20*x9227*x9230))+((r21*x9229))+((r22*x9233))+((r21*x9221*x9225)));
evalcond[6]=(x9234+(((-1.0)*r11*x9224*x9230))+((r11*x9227))+((r10*x9235))+(((-1.0)*r12*sj3*x9231))+((r10*x9225)));
evalcond[7]=((((-1.0)*r10*x9227*x9230))+x9228+((r11*x9221*x9225))+((r11*x9229))+(((-1.0)*x9226))+((r12*x9233))+((r10*x9224)));
evalcond[8]=(((r20*x9225))+x9226+((r21*x9227))+(((-1.0)*r21*x9224*x9230))+(((-1.0)*r22*sj3*x9231))+((r20*x9235))+(((-1.0)*x9228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9236=((-1.0)*r20);
IkReal x9237=x8504;
CheckValue<IkReal> x9239 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9236),IKFAST_ATAN2_MAGTHRESH);
if(!x9239.valid){
continue;
}
IkReal x9238=((-1.0)*(x9239.value));
sj5=gconst1;
cj5=gconst2;
j5=x9238;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9238;
IkReal gconst1=(r21*x9237);
IkReal gconst2=(x9236*x9237);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9240=((-1.0)*r20);
IkReal x9241=x8504;
CheckValue<IkReal> x9243 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9240),IKFAST_ATAN2_MAGTHRESH);
if(!x9243.valid){
continue;
}
IkReal x9242=((-1.0)*(x9243.value));
sj5=gconst1;
cj5=gconst2;
j5=x9242;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9242;
IkReal gconst1=(r21*x9241);
IkReal gconst2=(x9240*x9241);
CheckValue<IkReal> x9251=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9251.valid){
continue;
}
IkReal x9244=x9251.value;
IkReal x9245=(sj3*x9244);
IkReal x9246=(r11*x9245);
IkReal x9247=(r00*x9245);
IkReal x9248=(r01*x9245);
IkReal x9249=(r10*x9245);
IkReal x9250=(r20*r21*x9245);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9247*(r20*r20)))+((r01*x9246*(r21*r21)))+((r10*r20*r21*x9248))+((r00*r20*r21*x9246))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9252=gconst1*gconst1;
IkReal x9253=gconst2*gconst2;
IkReal x9254=((1.0)*cj3);
IkReal x9255=(gconst2*r10);
IkReal x9256=(r01*sj3);
IkReal x9257=(gconst1*r00*sj3);
IkReal x9258=(gconst1*gconst2*r11);
IkReal x9259=(r10*x9253);
IkReal x9260=(r11*x9252);
CheckValue<IkReal> x9261=IKPowWithIntegerCheck(IKsign((((cj3*gconst1*r01*x9255))+(((-1.0)*r00*x9254*x9259))+((cj3*r00*x9258))+(((-1.0)*r02*r12*x9254))+(((-1.0)*r01*x9254*x9260)))),-1);
if(!x9261.valid){
continue;
}
CheckValue<IkReal> x9262 = IKatan2WithCheck(IkReal((((gconst2*r12*x9256))+((r12*x9257)))),IkReal(((((-1.0)*x9255*x9257))+((r00*sj3*x9260))+(((-1.0)*x9256*x9259))+((x9256*x9258)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9261.value)))+(x9262.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9263=IKsin(j4);
IkReal x9264=IKcos(j4);
IkReal x9265=(sj1*sj2);
IkReal x9266=(gconst1*sj3);
IkReal x9267=(cj3*gconst1);
IkReal x9268=(cj3*gconst2);
IkReal x9269=((1.0)*cj2);
IkReal x9270=(cj1*sj2);
IkReal x9271=(gconst2*sj3);
IkReal x9272=(cj1*x9269);
IkReal x9273=((1.0)*x9264);
IkReal x9274=((1.0)*x9263);
IkReal x9275=(gconst1*x9263);
IkReal x9276=(cj3*x9263);
IkReal x9277=(x9264*x9271);
evalcond[0]=((((-1.0)*gconst2*r20*x9274))+(((-1.0)*r22*x9273))+((r21*x9275)));
evalcond[1]=(((r11*x9275))+(((-1.0)*r12*x9273))+(((-1.0)*gconst2*r10*x9274)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9274))+((r01*x9275))+(((-1.0)*r02*x9273)));
evalcond[3]=(((r02*x9276))+(((-1.0)*r00*x9268*x9273))+((r00*x9266))+((r01*x9271))+((r01*x9264*x9267)));
evalcond[4]=((((-1.0)*r01*x9266*x9273))+(((-1.0)*r02*sj3*x9274))+((r00*x9277))+((r01*x9268))+((r00*x9267)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x9268*x9273))+x9270+((r20*x9266))+((r21*x9264*x9267))+((r21*x9271))+((r22*x9276)));
evalcond[6]=(((r12*x9276))+(((-1.0)*x9272))+x9265+((r10*x9266))+((r11*x9264*x9267))+(((-1.0)*r10*x9268*x9273))+((r11*x9271)));
evalcond[7]=((((-1.0)*x9272))+(((-1.0)*r22*sj3*x9274))+x9265+((r20*x9267))+((r20*x9277))+((r21*x9268))+(((-1.0)*r21*x9266*x9273)));
evalcond[8]=((((-1.0)*r11*x9266*x9273))+(((-1.0)*r12*sj3*x9274))+((r10*x9277))+((r10*x9267))+(((-1.0)*x9270))+(((-1.0)*sj1*x9269))+((r11*x9268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9278=gconst2*gconst2;
IkReal x9279=gconst1*gconst1;
IkReal x9280=(gconst1*r00);
IkReal x9281=(r11*sj3);
IkReal x9282=((1.0)*gconst2);
IkReal x9283=(cj3*r12);
IkReal x9284=(cj3*r11);
IkReal x9285=(gconst2*r01);
IkReal x9286=(cj3*r10);
IkReal x9287=(r10*sj3);
CheckValue<IkReal> x9288 = IKatan2WithCheck(IkReal((((x9283*x9285))+((x9280*x9283)))),IkReal((((gconst1*x9284*x9285))+((r00*x9279*x9284))+(((-1.0)*r01*x9278*x9286))+(((-1.0)*x9280*x9282*x9286)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9288.valid){
continue;
}
CheckValue<IkReal> x9289=IKPowWithIntegerCheck(IKsign((((r00*x9278*x9287))+((r02*r12*sj3))+(((-1.0)*x9280*x9281*x9282))+((r01*x9279*x9281))+(((-1.0)*gconst1*r01*x9282*x9287)))),-1);
if(!x9289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9288.value)+(((1.5707963267949)*(x9289.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9290=IKsin(j4);
IkReal x9291=IKcos(j4);
IkReal x9292=(sj1*sj2);
IkReal x9293=(gconst1*sj3);
IkReal x9294=(cj3*gconst1);
IkReal x9295=(cj3*gconst2);
IkReal x9296=((1.0)*cj2);
IkReal x9297=(cj1*sj2);
IkReal x9298=(gconst2*sj3);
IkReal x9299=(cj1*x9296);
IkReal x9300=((1.0)*x9291);
IkReal x9301=((1.0)*x9290);
IkReal x9302=(gconst1*x9290);
IkReal x9303=(cj3*x9290);
IkReal x9304=(x9291*x9298);
evalcond[0]=(((r21*x9302))+(((-1.0)*r22*x9300))+(((-1.0)*gconst2*r20*x9301)));
evalcond[1]=((((-1.0)*gconst2*r10*x9301))+((r11*x9302))+(((-1.0)*r12*x9300)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9301))+((r01*x9302))+(((-1.0)*r02*x9300)));
evalcond[3]=(((r02*x9303))+(((-1.0)*r00*x9295*x9300))+((r00*x9293))+((r01*x9298))+((r01*x9291*x9294)));
evalcond[4]=((((-1.0)*r02*sj3*x9301))+(((-1.0)*r01*x9293*x9300))+((r00*x9294))+((r01*x9295))+((r00*x9304)));
evalcond[5]=(((cj2*sj1))+((r22*x9303))+x9297+(((-1.0)*r20*x9295*x9300))+((r20*x9293))+((r21*x9291*x9294))+((r21*x9298)));
evalcond[6]=(((r11*x9298))+x9292+((r10*x9293))+(((-1.0)*x9299))+((r11*x9291*x9294))+(((-1.0)*r10*x9295*x9300))+((r12*x9303)));
evalcond[7]=(x9292+(((-1.0)*x9299))+(((-1.0)*r21*x9293*x9300))+((r20*x9294))+((r21*x9295))+((r20*x9304))+(((-1.0)*r22*sj3*x9301)));
evalcond[8]=(((r11*x9295))+(((-1.0)*sj1*x9296))+((r10*x9294))+(((-1.0)*x9297))+(((-1.0)*r12*sj3*x9301))+(((-1.0)*r11*x9293*x9300))+((r10*x9304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9305=((1.0)*gconst2);
CheckValue<IkReal> x9306 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9305))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9306.valid){
continue;
}
CheckValue<IkReal> x9307=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9305)))),-1);
if(!x9307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9306.value)+(((1.5707963267949)*(x9307.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9308=IKsin(j4);
IkReal x9309=IKcos(j4);
IkReal x9310=(sj1*sj2);
IkReal x9311=(gconst1*sj3);
IkReal x9312=(cj3*gconst1);
IkReal x9313=(cj3*gconst2);
IkReal x9314=((1.0)*cj2);
IkReal x9315=(cj1*sj2);
IkReal x9316=(gconst2*sj3);
IkReal x9317=(cj1*x9314);
IkReal x9318=((1.0)*x9309);
IkReal x9319=((1.0)*x9308);
IkReal x9320=(gconst1*x9308);
IkReal x9321=(cj3*x9308);
IkReal x9322=(x9309*x9316);
evalcond[0]=((((-1.0)*r22*x9318))+(((-1.0)*gconst2*r20*x9319))+((r21*x9320)));
evalcond[1]=(((r11*x9320))+(((-1.0)*gconst2*r10*x9319))+(((-1.0)*r12*x9318)));
evalcond[2]=((-1.0)+((r01*x9320))+(((-1.0)*gconst2*r00*x9319))+(((-1.0)*r02*x9318)));
evalcond[3]=((((-1.0)*r00*x9313*x9318))+((r01*x9309*x9312))+((r02*x9321))+((r01*x9316))+((r00*x9311)));
evalcond[4]=((((-1.0)*r01*x9311*x9318))+(((-1.0)*r02*sj3*x9319))+((r00*x9322))+((r01*x9313))+((r00*x9312)));
evalcond[5]=(((cj2*sj1))+x9315+(((-1.0)*r20*x9313*x9318))+((r21*x9316))+((r22*x9321))+((r20*x9311))+((r21*x9309*x9312)));
evalcond[6]=(x9310+((r12*x9321))+((r11*x9309*x9312))+(((-1.0)*x9317))+((r11*x9316))+((r10*x9311))+(((-1.0)*r10*x9313*x9318)));
evalcond[7]=(((r20*x9322))+x9310+((r21*x9313))+(((-1.0)*r21*x9311*x9318))+(((-1.0)*x9317))+((r20*x9312))+(((-1.0)*r22*sj3*x9319)));
evalcond[8]=(((r10*x9322))+(((-1.0)*sj1*x9314))+(((-1.0)*r12*sj3*x9319))+(((-1.0)*x9315))+((r11*x9313))+((r10*x9312))+(((-1.0)*r11*x9311*x9318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9323=((-1.0)*r20);
IkReal x9324=x8504;
CheckValue<IkReal> x9326 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9323),IKFAST_ATAN2_MAGTHRESH);
if(!x9326.valid){
continue;
}
IkReal x9325=((-1.0)*(x9326.value));
sj5=gconst1;
cj5=gconst2;
j5=x9325;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9325;
IkReal gconst1=(r21*x9324);
IkReal gconst2=(x9323*x9324);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9327=((-1.0)*r20);
IkReal x9328=x8504;
CheckValue<IkReal> x9330 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9327),IKFAST_ATAN2_MAGTHRESH);
if(!x9330.valid){
continue;
}
IkReal x9329=((-1.0)*(x9330.value));
sj5=gconst1;
cj5=gconst2;
j5=x9329;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9329;
IkReal gconst1=(r21*x9328);
IkReal gconst2=(x9327*x9328);
CheckValue<IkReal> x9338=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9338.valid){
continue;
}
IkReal x9331=x9338.value;
IkReal x9332=(sj3*x9331);
IkReal x9333=(r11*x9332);
IkReal x9334=(r00*x9332);
IkReal x9335=(r01*x9332);
IkReal x9336=(r10*x9332);
IkReal x9337=(r20*r21*x9332);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9333))+((r01*x9333*(r21*r21)))+((r10*r20*r21*x9335))+((r10*x9334*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9339=gconst2*gconst2;
IkReal x9340=gconst1*gconst1;
IkReal x9341=((1.0)*cj3);
IkReal x9342=((1.0)*sj3);
IkReal x9343=(r11*sj3);
IkReal x9344=(r10*sj3);
IkReal x9345=(gconst1*gconst2*r00);
IkReal x9346=(gconst1*gconst2*r01);
IkReal x9347=(r00*x9339);
IkReal x9348=(r01*x9340);
CheckValue<IkReal> x9349=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9341*x9347))+((cj3*r11*x9345))+(((-1.0)*r11*x9341*x9348))+(((-1.0)*r02*r12*x9341))+((cj3*r10*x9346)))),-1);
if(!x9349.valid){
continue;
}
CheckValue<IkReal> x9350 = IKatan2WithCheck(IkReal((((gconst2*r02*x9343))+((gconst1*r02*x9344)))),IkReal((((x9343*x9346))+(((-1.0)*r11*x9342*x9347))+((x9344*x9348))+(((-1.0)*r10*x9342*x9345)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9349.value)))+(x9350.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9351=IKsin(j4);
IkReal x9352=IKcos(j4);
IkReal x9353=(cj2*sj1);
IkReal x9354=(cj1*sj2);
IkReal x9355=(gconst1*sj3);
IkReal x9356=(cj3*gconst1);
IkReal x9357=(sj1*sj2);
IkReal x9358=(cj3*gconst2);
IkReal x9359=(cj1*cj2);
IkReal x9360=(gconst2*sj3);
IkReal x9361=((1.0)*x9352);
IkReal x9362=((1.0)*x9351);
IkReal x9363=(gconst1*x9351);
IkReal x9364=(cj3*x9351);
IkReal x9365=(x9353+x9354);
IkReal x9366=(x9352*x9360);
evalcond[0]=(((r21*x9363))+(((-1.0)*r22*x9361))+(((-1.0)*gconst2*r20*x9362)));
evalcond[1]=((((-1.0)*r02*x9361))+((r01*x9363))+(((-1.0)*gconst2*r00*x9362)));
evalcond[2]=((-1.0)+((r11*x9363))+(((-1.0)*gconst2*r10*x9362))+(((-1.0)*r12*x9361)));
evalcond[3]=(((r11*x9352*x9356))+((r12*x9364))+((r11*x9360))+((r10*x9355))+(((-1.0)*r10*x9358*x9361)));
evalcond[4]=(((r11*x9358))+((r10*x9356))+(((-1.0)*r12*sj3*x9362))+(((-1.0)*r11*x9355*x9361))+((r10*x9366)));
evalcond[5]=((((-1.0)*r20*x9358*x9361))+((r21*x9360))+((r21*x9352*x9356))+x9365+((r20*x9355))+((r22*x9364)));
evalcond[6]=(x9365+((r01*x9358))+((r00*x9356))+((r00*x9366))+(((-1.0)*r02*sj3*x9362))+(((-1.0)*r01*x9355*x9361)));
evalcond[7]=(x9359+(((-1.0)*r00*x9358*x9361))+((r00*x9355))+((r02*x9364))+((r01*x9352*x9356))+(((-1.0)*x9357))+((r01*x9360)));
evalcond[8]=((((-1.0)*r22*sj3*x9362))+x9357+(((-1.0)*r21*x9355*x9361))+(((-1.0)*x9359))+((r20*x9356))+((r21*x9358))+((r20*x9366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9367=gconst2*gconst2;
IkReal x9368=gconst1*gconst1;
IkReal x9369=(gconst2*r11);
IkReal x9370=(cj3*r02);
IkReal x9371=(gconst1*r01);
IkReal x9372=(cj3*r10);
IkReal x9373=(r10*sj3);
IkReal x9374=((1.0)*gconst1*r00);
IkReal x9375=(r01*x9368);
IkReal x9376=(r00*x9367);
CheckValue<IkReal> x9377=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r11*sj3*x9375))+(((-1.0)*sj3*x9369*x9374))+(((-1.0)*gconst2*x9371*x9373))+((x9373*x9376)))),-1);
if(!x9377.valid){
continue;
}
CheckValue<IkReal> x9378 = IKatan2WithCheck(IkReal((((x9369*x9370))+((gconst1*r10*x9370)))),IkReal((((cj3*x9369*x9371))+((x9372*x9375))+(((-1.0)*gconst2*x9372*x9374))+(((-1.0)*cj3*r11*x9376)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9377.value)))+(x9378.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9379=IKsin(j4);
IkReal x9380=IKcos(j4);
IkReal x9381=(cj2*sj1);
IkReal x9382=(cj1*sj2);
IkReal x9383=(gconst1*sj3);
IkReal x9384=(cj3*gconst1);
IkReal x9385=(sj1*sj2);
IkReal x9386=(cj3*gconst2);
IkReal x9387=(cj1*cj2);
IkReal x9388=(gconst2*sj3);
IkReal x9389=((1.0)*x9380);
IkReal x9390=((1.0)*x9379);
IkReal x9391=(gconst1*x9379);
IkReal x9392=(cj3*x9379);
IkReal x9393=(x9381+x9382);
IkReal x9394=(x9380*x9388);
evalcond[0]=((((-1.0)*gconst2*r20*x9390))+(((-1.0)*r22*x9389))+((r21*x9391)));
evalcond[1]=(((r01*x9391))+(((-1.0)*gconst2*r00*x9390))+(((-1.0)*r02*x9389)));
evalcond[2]=((-1.0)+((r11*x9391))+(((-1.0)*gconst2*r10*x9390))+(((-1.0)*r12*x9389)));
evalcond[3]=(((r11*x9380*x9384))+((r12*x9392))+((r10*x9383))+((r11*x9388))+(((-1.0)*r10*x9386*x9389)));
evalcond[4]=(((r10*x9384))+((r10*x9394))+((r11*x9386))+(((-1.0)*r11*x9383*x9389))+(((-1.0)*r12*sj3*x9390)));
evalcond[5]=(x9393+((r21*x9388))+((r21*x9380*x9384))+(((-1.0)*r20*x9386*x9389))+((r22*x9392))+((r20*x9383)));
evalcond[6]=(x9393+(((-1.0)*r02*sj3*x9390))+((r01*x9386))+((r00*x9384))+(((-1.0)*r01*x9383*x9389))+((r00*x9394)));
evalcond[7]=(x9387+((r01*x9380*x9384))+(((-1.0)*x9385))+((r02*x9392))+(((-1.0)*r00*x9386*x9389))+((r01*x9388))+((r00*x9383)));
evalcond[8]=(x9385+((r21*x9386))+((r20*x9394))+(((-1.0)*r22*sj3*x9390))+(((-1.0)*x9387))+(((-1.0)*r21*x9383*x9389))+((r20*x9384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9395 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9395.valid){
continue;
}
CheckValue<IkReal> x9396=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9395.value)+(((1.5707963267949)*(x9396.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9397=IKsin(j4);
IkReal x9398=IKcos(j4);
IkReal x9399=(cj2*sj1);
IkReal x9400=(cj1*sj2);
IkReal x9401=(gconst1*sj3);
IkReal x9402=(cj3*gconst1);
IkReal x9403=(sj1*sj2);
IkReal x9404=(cj3*gconst2);
IkReal x9405=(cj1*cj2);
IkReal x9406=(gconst2*sj3);
IkReal x9407=((1.0)*x9398);
IkReal x9408=((1.0)*x9397);
IkReal x9409=(gconst1*x9397);
IkReal x9410=(cj3*x9397);
IkReal x9411=(x9399+x9400);
IkReal x9412=(x9398*x9406);
evalcond[0]=((((-1.0)*r22*x9407))+((r21*x9409))+(((-1.0)*gconst2*r20*x9408)));
evalcond[1]=(((r01*x9409))+(((-1.0)*r02*x9407))+(((-1.0)*gconst2*r00*x9408)));
evalcond[2]=((-1.0)+((r11*x9409))+(((-1.0)*gconst2*r10*x9408))+(((-1.0)*r12*x9407)));
evalcond[3]=((((-1.0)*r10*x9404*x9407))+((r11*x9406))+((r12*x9410))+((r11*x9398*x9402))+((r10*x9401)));
evalcond[4]=((((-1.0)*r12*sj3*x9408))+((r11*x9404))+(((-1.0)*r11*x9401*x9407))+((r10*x9412))+((r10*x9402)));
evalcond[5]=(((r20*x9401))+((r22*x9410))+(((-1.0)*r20*x9404*x9407))+((r21*x9406))+x9411+((r21*x9398*x9402)));
evalcond[6]=(((r01*x9404))+((r00*x9412))+x9411+(((-1.0)*r02*sj3*x9408))+((r00*x9402))+(((-1.0)*r01*x9401*x9407)));
evalcond[7]=(((r01*x9406))+(((-1.0)*r00*x9404*x9407))+(((-1.0)*x9403))+((r02*x9410))+((r01*x9398*x9402))+x9405+((r00*x9401)));
evalcond[8]=(((r20*x9412))+(((-1.0)*x9405))+((r20*x9402))+((r21*x9404))+x9403+(((-1.0)*r21*x9401*x9407))+(((-1.0)*r22*sj3*x9408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9413=((-1.0)*r20);
IkReal x9414=x8504;
CheckValue<IkReal> x9416 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9413),IKFAST_ATAN2_MAGTHRESH);
if(!x9416.valid){
continue;
}
IkReal x9415=((-1.0)*(x9416.value));
sj5=gconst1;
cj5=gconst2;
j5=x9415;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9415;
IkReal gconst1=(r21*x9414);
IkReal gconst2=(x9413*x9414);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9417=((-1.0)*r20);
IkReal x9418=x8504;
CheckValue<IkReal> x9420 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9417),IKFAST_ATAN2_MAGTHRESH);
if(!x9420.valid){
continue;
}
IkReal x9419=((-1.0)*(x9420.value));
sj5=gconst1;
cj5=gconst2;
j5=x9419;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9419;
IkReal gconst1=(r21*x9418);
IkReal gconst2=(x9417*x9418);
CheckValue<IkReal> x9428=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9428.valid){
continue;
}
IkReal x9421=x9428.value;
IkReal x9422=(sj3*x9421);
IkReal x9423=(r11*x9422);
IkReal x9424=(r00*x9422);
IkReal x9425=(r01*x9422);
IkReal x9426=(r10*x9422);
IkReal x9427=(r20*r21*x9422);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9423))+((r10*x9424*(r20*r20)))+((r01*x9423*(r21*r21)))+((r10*r20*r21*x9425))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9429=gconst2*gconst2;
IkReal x9430=gconst1*gconst1;
IkReal x9431=((1.0)*cj3);
IkReal x9432=((1.0)*sj3);
IkReal x9433=(r11*sj3);
IkReal x9434=(r10*sj3);
IkReal x9435=(gconst1*gconst2*r00);
IkReal x9436=(gconst1*gconst2*r01);
IkReal x9437=(r00*x9429);
IkReal x9438=(r01*x9430);
CheckValue<IkReal> x9439=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9431*x9438))+(((-1.0)*r02*r12*x9431))+(((-1.0)*r10*x9431*x9437))+((cj3*r11*x9435))+((cj3*r10*x9436)))),-1);
if(!x9439.valid){
continue;
}
CheckValue<IkReal> x9440 = IKatan2WithCheck(IkReal((((gconst1*r02*x9434))+((gconst2*r02*x9433)))),IkReal(((((-1.0)*r11*x9432*x9437))+(((-1.0)*r10*x9432*x9435))+((x9434*x9438))+((x9433*x9436)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9439.value)))+(x9440.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9441=IKsin(j4);
IkReal x9442=IKcos(j4);
IkReal x9443=(sj1*sj2);
IkReal x9444=(gconst1*sj3);
IkReal x9445=(cj3*gconst1);
IkReal x9446=(cj3*gconst2);
IkReal x9447=((1.0)*cj2);
IkReal x9448=(cj1*sj2);
IkReal x9449=(gconst2*sj3);
IkReal x9450=(cj1*x9447);
IkReal x9451=((1.0)*x9442);
IkReal x9452=((1.0)*x9441);
IkReal x9453=(gconst1*x9441);
IkReal x9454=(cj3*x9441);
IkReal x9455=(x9442*x9449);
evalcond[0]=(((r21*x9453))+(((-1.0)*gconst2*r20*x9452))+(((-1.0)*r22*x9451)));
evalcond[1]=(((r01*x9453))+(((-1.0)*gconst2*r00*x9452))+(((-1.0)*r02*x9451)));
evalcond[2]=((1.0)+((r11*x9453))+(((-1.0)*gconst2*r10*x9452))+(((-1.0)*r12*x9451)));
evalcond[3]=(((r10*x9444))+(((-1.0)*r10*x9446*x9451))+((r11*x9442*x9445))+((r12*x9454))+((r11*x9449)));
evalcond[4]=(((r10*x9455))+((r10*x9445))+(((-1.0)*r12*sj3*x9452))+(((-1.0)*r11*x9444*x9451))+((r11*x9446)));
evalcond[5]=(((cj2*sj1))+((r22*x9454))+((r21*x9449))+x9448+((r20*x9444))+(((-1.0)*r20*x9446*x9451))+((r21*x9442*x9445)));
evalcond[6]=(((r00*x9444))+((r01*x9449))+((r01*x9442*x9445))+(((-1.0)*x9450))+x9443+(((-1.0)*r00*x9446*x9451))+((r02*x9454)));
evalcond[7]=((((-1.0)*r22*sj3*x9452))+(((-1.0)*x9450))+((r21*x9446))+x9443+((r20*x9445))+(((-1.0)*r21*x9444*x9451))+((r20*x9455)));
evalcond[8]=(((r00*x9445))+((r00*x9455))+((r01*x9446))+(((-1.0)*r02*sj3*x9452))+(((-1.0)*x9448))+(((-1.0)*sj1*x9447))+(((-1.0)*r01*x9444*x9451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9456=gconst2*gconst2;
IkReal x9457=gconst1*gconst1;
IkReal x9458=(gconst2*r11);
IkReal x9459=(cj3*r02);
IkReal x9460=(gconst1*r01);
IkReal x9461=(cj3*r10);
IkReal x9462=(r10*sj3);
IkReal x9463=((1.0)*gconst1*r00);
IkReal x9464=(r01*x9457);
IkReal x9465=(r00*x9456);
CheckValue<IkReal> x9466 = IKatan2WithCheck(IkReal((((x9458*x9459))+((gconst1*r10*x9459)))),IkReal(((((-1.0)*gconst2*x9461*x9463))+((cj3*x9458*x9460))+((x9461*x9464))+(((-1.0)*cj3*r11*x9465)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9466.valid){
continue;
}
CheckValue<IkReal> x9467=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r11*sj3*x9464))+(((-1.0)*gconst2*x9460*x9462))+(((-1.0)*sj3*x9458*x9463))+((x9462*x9465)))),-1);
if(!x9467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9466.value)+(((1.5707963267949)*(x9467.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9468=IKsin(j4);
IkReal x9469=IKcos(j4);
IkReal x9470=(sj1*sj2);
IkReal x9471=(gconst1*sj3);
IkReal x9472=(cj3*gconst1);
IkReal x9473=(cj3*gconst2);
IkReal x9474=((1.0)*cj2);
IkReal x9475=(cj1*sj2);
IkReal x9476=(gconst2*sj3);
IkReal x9477=(cj1*x9474);
IkReal x9478=((1.0)*x9469);
IkReal x9479=((1.0)*x9468);
IkReal x9480=(gconst1*x9468);
IkReal x9481=(cj3*x9468);
IkReal x9482=(x9469*x9476);
evalcond[0]=(((r21*x9480))+(((-1.0)*gconst2*r20*x9479))+(((-1.0)*r22*x9478)));
evalcond[1]=((((-1.0)*r02*x9478))+((r01*x9480))+(((-1.0)*gconst2*r00*x9479)));
evalcond[2]=((1.0)+((r11*x9480))+(((-1.0)*r12*x9478))+(((-1.0)*gconst2*r10*x9479)));
evalcond[3]=(((r10*x9471))+((r12*x9481))+((r11*x9476))+(((-1.0)*r10*x9473*x9478))+((r11*x9469*x9472)));
evalcond[4]=((((-1.0)*r11*x9471*x9478))+((r10*x9472))+(((-1.0)*r12*sj3*x9479))+((r11*x9473))+((r10*x9482)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x9473*x9478))+((r21*x9469*x9472))+((r21*x9476))+x9475+((r20*x9471))+((r22*x9481)));
evalcond[6]=((((-1.0)*x9477))+((r01*x9469*x9472))+((r00*x9471))+((r01*x9476))+((r02*x9481))+(((-1.0)*r00*x9473*x9478))+x9470);
evalcond[7]=((((-1.0)*x9477))+((r20*x9482))+(((-1.0)*r22*sj3*x9479))+((r21*x9473))+x9470+((r20*x9472))+(((-1.0)*r21*x9471*x9478)));
evalcond[8]=((((-1.0)*r01*x9471*x9478))+((r00*x9482))+((r00*x9472))+((r01*x9473))+(((-1.0)*sj1*x9474))+(((-1.0)*r02*sj3*x9479))+(((-1.0)*x9475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9483=((1.0)*gconst2);
CheckValue<IkReal> x9484 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9483))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9484.valid){
continue;
}
CheckValue<IkReal> x9485=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9483)))),-1);
if(!x9485.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9484.value)+(((1.5707963267949)*(x9485.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9486=IKsin(j4);
IkReal x9487=IKcos(j4);
IkReal x9488=(sj1*sj2);
IkReal x9489=(gconst1*sj3);
IkReal x9490=(cj3*gconst1);
IkReal x9491=(cj3*gconst2);
IkReal x9492=((1.0)*cj2);
IkReal x9493=(cj1*sj2);
IkReal x9494=(gconst2*sj3);
IkReal x9495=(cj1*x9492);
IkReal x9496=((1.0)*x9487);
IkReal x9497=((1.0)*x9486);
IkReal x9498=(gconst1*x9486);
IkReal x9499=(cj3*x9486);
IkReal x9500=(x9487*x9494);
evalcond[0]=((((-1.0)*gconst2*r20*x9497))+(((-1.0)*r22*x9496))+((r21*x9498)));
evalcond[1]=((((-1.0)*r02*x9496))+(((-1.0)*gconst2*r00*x9497))+((r01*x9498)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x9497))+(((-1.0)*r12*x9496))+((r11*x9498)));
evalcond[3]=(((r12*x9499))+((r11*x9487*x9490))+(((-1.0)*r10*x9491*x9496))+((r10*x9489))+((r11*x9494)));
evalcond[4]=(((r10*x9500))+(((-1.0)*r12*sj3*x9497))+((r10*x9490))+(((-1.0)*r11*x9489*x9496))+((r11*x9491)));
evalcond[5]=(((cj2*sj1))+((r22*x9499))+((r21*x9487*x9490))+((r20*x9489))+(((-1.0)*r20*x9491*x9496))+x9493+((r21*x9494)));
evalcond[6]=(((r02*x9499))+((r00*x9489))+(((-1.0)*r00*x9491*x9496))+x9488+((r01*x9494))+(((-1.0)*x9495))+((r01*x9487*x9490)));
evalcond[7]=(((r20*x9500))+(((-1.0)*r21*x9489*x9496))+(((-1.0)*r22*sj3*x9497))+x9488+((r21*x9491))+((r20*x9490))+(((-1.0)*x9495)));
evalcond[8]=((((-1.0)*r01*x9489*x9496))+((r00*x9490))+((r01*x9491))+(((-1.0)*x9493))+(((-1.0)*r02*sj3*x9497))+(((-1.0)*sj1*x9492))+((r00*x9500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9501=((-1.0)*r20);
IkReal x9502=((-1.0)*r21);
CheckValue<IkReal> x9504 = IKatan2WithCheck(IkReal(x9502),IkReal(x9501),IKFAST_ATAN2_MAGTHRESH);
if(!x9504.valid){
continue;
}
IkReal x9503=((-1.0)*(x9504.value));
sj5=gconst1;
cj5=gconst2;
j5=x9503;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9501);
rxp0_2=(py*r00);
rxp1_0=(py*x9502);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9503;
IkReal gconst1=r21;
IkReal gconst2=x9501;
j4eval[0]=(((r00*r20))+((r01*r21)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9505=((-1.0)*r20);
IkReal x9506=((-1.0)*r21);
CheckValue<IkReal> x9508 = IKatan2WithCheck(IkReal(x9506),IkReal(x9505),IKFAST_ATAN2_MAGTHRESH);
if(!x9508.valid){
continue;
}
IkReal x9507=((-1.0)*(x9508.value));
sj5=gconst1;
cj5=gconst2;
j5=x9507;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9505);
rxp0_2=(py*r00);
rxp1_0=(py*x9506);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9507;
IkReal gconst1=r21;
IkReal gconst2=x9505;
j4eval[0]=(((r00*r20))+((r01*r21)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9509=((-1.0)*r20);
IkReal x9510=((-1.0)*r21);
CheckValue<IkReal> x9512 = IKatan2WithCheck(IkReal(x9510),IkReal(x9509),IKFAST_ATAN2_MAGTHRESH);
if(!x9512.valid){
continue;
}
IkReal x9511=((-1.0)*(x9512.value));
sj5=gconst1;
cj5=gconst2;
j5=x9511;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9509);
rxp0_2=(py*r00);
rxp1_0=(py*x9510);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9511;
IkReal gconst1=r21;
IkReal gconst2=x9509;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9513=((-1.0)*r20);
IkReal x9514=((-1.0)*r21);
CheckValue<IkReal> x9516 = IKatan2WithCheck(IkReal(x9514),IkReal(x9513),IKFAST_ATAN2_MAGTHRESH);
if(!x9516.valid){
continue;
}
IkReal x9515=((-1.0)*(x9516.value));
sj5=gconst1;
cj5=gconst2;
j5=x9515;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9513);
rxp0_2=(py*r00);
rxp1_0=(py*x9514);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9515;
IkReal gconst1=r21;
IkReal gconst2=x9513;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9517=((-1.0)*r20);
IkReal x9518=((-1.0)*r21);
CheckValue<IkReal> x9520 = IKatan2WithCheck(IkReal(x9518),IkReal(x9517),IKFAST_ATAN2_MAGTHRESH);
if(!x9520.valid){
continue;
}
IkReal x9519=((-1.0)*(x9520.value));
sj5=gconst1;
cj5=gconst2;
j5=x9519;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9517);
rxp0_2=(py*r00);
rxp1_0=(py*x9518);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9519;
IkReal gconst1=r21;
IkReal gconst2=x9517;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r00*r00));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9521=((-1.0)*r20);
IkReal x9522=((-1.0)*r21);
CheckValue<IkReal> x9524 = IKatan2WithCheck(IkReal(x9522),IkReal(x9521),IKFAST_ATAN2_MAGTHRESH);
if(!x9524.valid){
continue;
}
IkReal x9523=((-1.0)*(x9524.value));
sj5=gconst1;
cj5=gconst2;
j5=x9523;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9521);
rxp0_2=(py*r00);
rxp1_0=(py*x9522);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9523;
IkReal gconst1=r21;
IkReal gconst2=x9521;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9527=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01))+((gconst2*r00))),-1);
if(!x9527.valid){
continue;
}
IkReal x9525=x9527.value;
IkReal x9526=((1.0)*cj0*x9525);
cj4array[0]=((((-1.0)*cj2*sj1*x9526))+(((-1.0)*cj1*sj2*x9526)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9528=IKsin(j4);
IkReal x9529=IKcos(j4);
IkReal x9530=(gconst2*r20);
IkReal x9531=(gconst1*x9528);
IkReal x9532=((1.0)*x9529);
IkReal x9533=((1.0)*x9528);
evalcond[0]=((-1.0)*r12*x9528);
evalcond[1]=((((-1.0)*r12*x9532))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*x9530*x9533))+((r21*x9531)));
evalcond[3]=((((-1.0)*gconst2*r00*x9533))+((r01*x9531)));
evalcond[4]=(((x9529*x9530))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r21*x9532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9535=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9535.valid){
continue;
}
IkReal x9534=x9535.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9534))+((cj1*cj2*x9534)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9536=IKsin(j4);
IkReal x9537=IKcos(j4);
IkReal x9538=(gconst2*r00);
IkReal x9539=(gconst1*r01);
IkReal x9540=((1.0)*x9537);
IkReal x9541=((1.0)*x9536);
evalcond[0]=((-1.0)*r12*x9536);
evalcond[1]=((((-1.0)*r12*x9540))+(((-1.0)*cj0)));
evalcond[2]=(((gconst1*r21*x9536))+(((-1.0)*gconst2*r20*x9541)));
evalcond[3]=((((-1.0)*x9538*x9541))+((x9536*x9539)));
evalcond[4]=(((x9537*x9538))+(((-1.0)*x9539*x9540))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9542=IKPowWithIntegerCheck(r12,-1);
if(!x9542.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x9542.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9543=IKsin(j4);
IkReal x9544=IKcos(j4);
IkReal x9545=(gconst2*x9544);
IkReal x9546=(gconst1*x9543);
IkReal x9547=((1.0)*gconst1*x9544);
IkReal x9548=((1.0)*gconst2*x9543);
evalcond[0]=((-1.0)*r12*x9543);
evalcond[1]=(((r21*x9546))+(((-1.0)*r20*x9548)));
evalcond[2]=((((-1.0)*r00*x9548))+((r01*x9546)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x9545))+(((-1.0)*r21*x9547)));
evalcond[4]=((((-1.0)*r01*x9547))+((cj0*cj2*sj1))+((r00*x9545))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9549=((-1.0)*r20);
IkReal x9550=((-1.0)*r21);
CheckValue<IkReal> x9552 = IKatan2WithCheck(IkReal(x9550),IkReal(x9549),IKFAST_ATAN2_MAGTHRESH);
if(!x9552.valid){
continue;
}
IkReal x9551=((-1.0)*(x9552.value));
sj5=gconst1;
cj5=gconst2;
j5=x9551;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9549);
rxp0_2=(py*r00);
rxp1_0=(py*x9550);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9551;
IkReal gconst1=r21;
IkReal gconst2=x9549;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9553=((-1.0)*r20);
IkReal x9554=((-1.0)*r21);
CheckValue<IkReal> x9556 = IKatan2WithCheck(IkReal(x9554),IkReal(x9553),IKFAST_ATAN2_MAGTHRESH);
if(!x9556.valid){
continue;
}
IkReal x9555=((-1.0)*(x9556.value));
sj5=gconst1;
cj5=gconst2;
j5=x9555;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9553);
rxp0_2=(py*r00);
rxp1_0=(py*x9554);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9555;
IkReal gconst1=r21;
IkReal gconst2=x9553;
j4eval[0]=((1.0)+(((-1.0)*(r00*r00)))+(r21*r21));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9557=((-1.0)*r20);
IkReal x9558=((-1.0)*r21);
CheckValue<IkReal> x9560 = IKatan2WithCheck(IkReal(x9558),IkReal(x9557),IKFAST_ATAN2_MAGTHRESH);
if(!x9560.valid){
continue;
}
IkReal x9559=((-1.0)*(x9560.value));
sj5=gconst1;
cj5=gconst2;
j5=x9559;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9557);
rxp0_2=(py*r00);
rxp1_0=(py*x9558);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9559;
IkReal gconst1=r21;
IkReal gconst2=x9557;
j4eval[0]=(((r00*r20))+((r01*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9563=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*gconst2*r00))),-1);
if(!x9563.valid){
continue;
}
IkReal x9561=x9563.value;
IkReal x9562=((1.0)*cj0*x9561);
cj4array[0]=((((-1.0)*cj2*sj1*x9562))+(((-1.0)*cj1*sj2*x9562)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9564=IKsin(j4);
IkReal x9565=IKcos(j4);
IkReal x9566=(gconst1*r21);
IkReal x9567=(gconst2*r20);
IkReal x9568=((1.0)*x9565);
IkReal x9569=((1.0)*x9564);
evalcond[0]=(r12*x9564);
evalcond[1]=((((-1.0)*r12*x9568))+(((-1.0)*cj0)));
evalcond[2]=(((x9564*x9566))+(((-1.0)*x9567*x9569)));
evalcond[3]=((((-1.0)*gconst2*r00*x9569))+((gconst1*r01*x9564)));
evalcond[4]=(((x9565*x9566))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9567*x9568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9571=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9571.valid){
continue;
}
IkReal x9570=x9571.value;
cj4array[0]=(((cj1*cj2*x9570))+(((-1.0)*sj1*sj2*x9570)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9572=IKsin(j4);
IkReal x9573=IKcos(j4);
IkReal x9574=(gconst1*r01);
IkReal x9575=((1.0)*x9573);
IkReal x9576=((1.0)*gconst2*x9572);
evalcond[0]=(r12*x9572);
evalcond[1]=((((-1.0)*r12*x9575))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x9576))+((gconst1*r21*x9572)));
evalcond[3]=(((x9572*x9574))+(((-1.0)*r00*x9576)));
evalcond[4]=(((x9573*x9574))+((cj0*cj2*sj1))+(((-1.0)*gconst2*r00*x9575))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9577=IKPowWithIntegerCheck(r12,-1);
if(!x9577.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x9577.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9578=IKsin(j4);
IkReal x9579=IKcos(j4);
IkReal x9580=(gconst1*x9579);
IkReal x9581=(gconst1*x9578);
IkReal x9582=((1.0)*gconst2*r20);
IkReal x9583=((1.0)*gconst2*r00);
evalcond[0]=(r12*x9578);
evalcond[1]=(((r21*x9581))+(((-1.0)*x9578*x9582)));
evalcond[2]=(((r01*x9581))+(((-1.0)*x9578*x9583)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x9580))+(((-1.0)*x9579*x9582)));
evalcond[4]=(((r01*x9580))+((cj0*cj2*sj1))+(((-1.0)*x9579*x9583))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9585=IKPowWithIntegerCheck(r12,-1);
if(!x9585.valid){
continue;
}
IkReal x9584=x9585.value;
CheckValue<IkReal> x9586=IKPowWithIntegerCheck(sj3,-1);
if(!x9586.valid){
continue;
}
if( IKabs((x9584*(x9586.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x9584)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9584*(x9586.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x9584))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x9584*(x9586.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x9584));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9587=IKsin(j4);
IkReal x9588=IKcos(j4);
IkReal x9589=((1.0)*sj3);
IkReal x9590=(gconst1*sj3);
IkReal x9591=(gconst1*r01);
IkReal x9592=(cj2*sj0);
IkReal x9593=(sj1*sj2);
IkReal x9594=((1.0)*cj3);
IkReal x9595=(cj1*cj2);
IkReal x9596=(cj3*gconst1);
IkReal x9597=(cj2*sj1);
IkReal x9598=(gconst1*r21);
IkReal x9599=((1.0)*cj0);
IkReal x9600=(gconst2*r00);
IkReal x9601=(gconst2*r01);
IkReal x9602=(cj1*sj2);
IkReal x9603=(gconst2*r21);
IkReal x9604=(r12*x9587);
IkReal x9605=((1.0)*x9587);
IkReal x9606=(gconst2*r20*x9588);
evalcond[0]=((((-1.0)*r12*x9588))+(((-1.0)*x9599)));
evalcond[1]=((((-1.0)*gconst2*r20*x9605))+((x9587*x9598)));
evalcond[2]=(sj0+((x9587*x9591))+(((-1.0)*x9600*x9605)));
evalcond[3]=((((-1.0)*x9589*x9604))+((sj1*x9592))+((sj0*x9602)));
evalcond[4]=(((cj3*x9604))+((cj1*x9592))+(((-1.0)*sj0*x9593)));
evalcond[5]=(((r20*x9590))+((r21*x9588*x9596))+((sj3*x9603))+x9602+x9597+(((-1.0)*x9594*x9606)));
evalcond[6]=(((r20*x9596))+((cj3*x9603))+((sj3*x9606))+(((-1.0)*x9588*x9589*x9598))+x9593+(((-1.0)*x9595)));
evalcond[7]=(((sj3*x9588*x9600))+((cj3*x9601))+((r00*x9596))+(((-1.0)*x9588*x9589*x9591))+((cj0*x9602))+((cj0*x9597)));
evalcond[8]=((((-1.0)*x9593*x9599))+((sj3*x9601))+((r00*x9590))+(((-1.0)*x9588*x9594*x9600))+((cj0*x9595))+((cj3*x9588*x9591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9607=((1.0)*gconst2);
CheckValue<IkReal> x9608=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*r00*x9607))),-1);
if(!x9608.valid){
continue;
}
CheckValue<IkReal> x9609=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x9607))),-1);
if(!x9609.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x9608.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9609.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*sj3))+(((-1.0)*r21*sj3*x9607)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x9608.value)))+IKsqr(((x9609.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*sj3))+(((-1.0)*r21*sj3*x9607))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x9608.value)), ((x9609.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*sj3))+(((-1.0)*r21*sj3*x9607))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9610=IKsin(j4);
IkReal x9611=IKcos(j4);
IkReal x9612=((1.0)*sj3);
IkReal x9613=(gconst1*sj3);
IkReal x9614=(gconst1*r01);
IkReal x9615=(cj2*sj0);
IkReal x9616=(sj1*sj2);
IkReal x9617=((1.0)*cj3);
IkReal x9618=(cj1*cj2);
IkReal x9619=(cj3*gconst1);
IkReal x9620=(cj2*sj1);
IkReal x9621=(gconst1*r21);
IkReal x9622=((1.0)*cj0);
IkReal x9623=(gconst2*r00);
IkReal x9624=(gconst2*r01);
IkReal x9625=(cj1*sj2);
IkReal x9626=(gconst2*r21);
IkReal x9627=(r12*x9610);
IkReal x9628=((1.0)*x9610);
IkReal x9629=(gconst2*r20*x9611);
evalcond[0]=((((-1.0)*r12*x9611))+(((-1.0)*x9622)));
evalcond[1]=((((-1.0)*gconst2*r20*x9628))+((x9610*x9621)));
evalcond[2]=(sj0+((x9610*x9614))+(((-1.0)*x9623*x9628)));
evalcond[3]=((((-1.0)*x9612*x9627))+((sj0*x9625))+((sj1*x9615)));
evalcond[4]=(((cj1*x9615))+((cj3*x9627))+(((-1.0)*sj0*x9616)));
evalcond[5]=(((sj3*x9626))+((r20*x9613))+(((-1.0)*x9617*x9629))+x9620+x9625+((r21*x9611*x9619)));
evalcond[6]=(((sj3*x9629))+((r20*x9619))+(((-1.0)*x9611*x9612*x9621))+(((-1.0)*x9618))+((cj3*x9626))+x9616);
evalcond[7]=(((cj0*x9620))+((cj0*x9625))+((sj3*x9611*x9623))+((r00*x9619))+(((-1.0)*x9611*x9612*x9614))+((cj3*x9624)));
evalcond[8]=(((sj3*x9624))+((r00*x9613))+((cj0*x9618))+((cj3*x9611*x9614))+(((-1.0)*x9616*x9622))+(((-1.0)*x9611*x9617*x9623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9630=IKPowWithIntegerCheck((((gconst1*r01))+(((-1.0)*gconst2*r00))),-1);
if(!x9630.valid){
continue;
}
CheckValue<IkReal> x9631=IKPowWithIntegerCheck(r12,-1);
if(!x9631.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x9630.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x9631.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x9630.value)))+IKsqr(((-1.0)*cj0*(x9631.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x9630.value)), ((-1.0)*cj0*(x9631.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9632=IKsin(j4);
IkReal x9633=IKcos(j4);
IkReal x9634=((1.0)*sj3);
IkReal x9635=(gconst1*sj3);
IkReal x9636=(gconst1*r01);
IkReal x9637=(cj2*sj0);
IkReal x9638=(sj1*sj2);
IkReal x9639=((1.0)*cj3);
IkReal x9640=(cj1*cj2);
IkReal x9641=(cj3*gconst1);
IkReal x9642=(cj2*sj1);
IkReal x9643=(gconst1*r21);
IkReal x9644=((1.0)*cj0);
IkReal x9645=(gconst2*r00);
IkReal x9646=(gconst2*r01);
IkReal x9647=(cj1*sj2);
IkReal x9648=(gconst2*r21);
IkReal x9649=(r12*x9632);
IkReal x9650=((1.0)*x9632);
IkReal x9651=(gconst2*r20*x9633);
evalcond[0]=((((-1.0)*x9644))+(((-1.0)*r12*x9633)));
evalcond[1]=(((x9632*x9643))+(((-1.0)*gconst2*r20*x9650)));
evalcond[2]=(sj0+((x9632*x9636))+(((-1.0)*x9645*x9650)));
evalcond[3]=(((sj1*x9637))+(((-1.0)*x9634*x9649))+((sj0*x9647)));
evalcond[4]=(((cj1*x9637))+(((-1.0)*sj0*x9638))+((cj3*x9649)));
evalcond[5]=(((r21*x9633*x9641))+((r20*x9635))+((sj3*x9648))+x9647+x9642+(((-1.0)*x9639*x9651)));
evalcond[6]=(((sj3*x9651))+x9638+((r20*x9641))+(((-1.0)*x9633*x9634*x9643))+(((-1.0)*x9640))+((cj3*x9648)));
evalcond[7]=(((sj3*x9633*x9645))+(((-1.0)*x9633*x9634*x9636))+((r00*x9641))+((cj0*x9642))+((cj0*x9647))+((cj3*x9646)));
evalcond[8]=((((-1.0)*x9638*x9644))+((r00*x9635))+((cj3*x9633*x9636))+((sj3*x9646))+((cj0*x9640))+(((-1.0)*x9633*x9639*x9645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9652=gconst1*gconst1;
IkReal x9653=r21*r21;
IkReal x9654=gconst2*gconst2;
IkReal x9655=r20*r20;
IkReal x9656=(gconst2*r20);
IkReal x9657=(cj1*cj2);
IkReal x9658=(sj1*sj2);
IkReal x9659=(gconst1*r21);
IkReal x9660=(cj3*gconst2);
IkReal x9661=(cj3*r20);
CheckValue<IkReal> x9662=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x9654*x9655))+(((-2.0)*sj3*x9656*x9659))+((sj3*x9652*x9653)))),-1);
if(!x9662.valid){
continue;
}
CheckValue<IkReal> x9663 = IKatan2WithCheck(IkReal((((gconst1*r22*x9661))+((r22*x9658))+((r21*r22*x9660))+(((-1.0)*r22*x9657)))),IkReal(((((-1.0)*x9657*x9659))+(((-1.0)*x9656*x9658))+((x9656*x9657))+((gconst1*x9653*x9660))+(((-1.0)*r21*x9654*x9661))+((x9658*x9659))+((r21*x9652*x9661))+(((-1.0)*gconst1*x9655*x9660)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9663.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9662.value)))+(x9663.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9664=IKsin(j4);
IkReal x9665=IKcos(j4);
IkReal x9666=(gconst1*sj3);
IkReal x9667=(cj2*sj0);
IkReal x9668=(cj3*gconst1);
IkReal x9669=(sj1*sj2);
IkReal x9670=(cj3*gconst2);
IkReal x9671=(cj1*cj2);
IkReal x9672=(gconst2*sj3);
IkReal x9673=(cj2*sj1);
IkReal x9674=((1.0)*cj0);
IkReal x9675=(cj1*sj2);
IkReal x9676=((1.0)*x9665);
IkReal x9677=((1.0)*x9664);
IkReal x9678=(gconst1*x9664);
IkReal x9679=(cj3*x9664);
IkReal x9680=(x9665*x9672);
evalcond[0]=(((r21*x9678))+(((-1.0)*gconst2*r20*x9677))+(((-1.0)*r22*x9676)));
evalcond[1]=(sj0+((r01*x9678))+(((-1.0)*r02*x9676))+(((-1.0)*gconst2*r00*x9677)));
evalcond[2]=((((-1.0)*x9674))+((r11*x9678))+(((-1.0)*gconst2*r10*x9677))+(((-1.0)*r12*x9676)));
evalcond[3]=(((r21*x9672))+((r21*x9665*x9668))+(((-1.0)*r20*x9670*x9676))+((r20*x9666))+x9675+x9673+((r22*x9679)));
evalcond[4]=(((r21*x9670))+((r20*x9668))+x9669+(((-1.0)*x9671))+(((-1.0)*r22*sj3*x9677))+((r20*x9680))+(((-1.0)*r21*x9666*x9676)));
evalcond[5]=((((-1.0)*r02*sj3*x9677))+((cj0*x9673))+((cj0*x9675))+((r01*x9670))+((r00*x9668))+((r00*x9680))+(((-1.0)*r01*x9666*x9676)));
evalcond[6]=(((cj0*x9671))+((r01*x9672))+((r00*x9666))+((r02*x9679))+(((-1.0)*x9669*x9674))+((r01*x9665*x9668))+(((-1.0)*r00*x9670*x9676)));
evalcond[7]=(((r11*x9670))+((r10*x9668))+(((-1.0)*r12*sj3*x9677))+(((-1.0)*r11*x9666*x9676))+((sj0*x9675))+((r10*x9680))+((sj1*x9667)));
evalcond[8]=(((r11*x9665*x9668))+((r12*x9679))+(((-1.0)*sj0*x9669))+((r11*x9672))+((r10*x9666))+(((-1.0)*r10*x9670*x9676))+((cj1*x9667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9681=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9681.valid){
continue;
}
CheckValue<IkReal> x9682 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9681.value)))+(x9682.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9683=IKsin(j4);
IkReal x9684=IKcos(j4);
IkReal x9685=(gconst1*sj3);
IkReal x9686=(cj2*sj0);
IkReal x9687=(cj3*gconst1);
IkReal x9688=(sj1*sj2);
IkReal x9689=(cj3*gconst2);
IkReal x9690=(cj1*cj2);
IkReal x9691=(gconst2*sj3);
IkReal x9692=(cj2*sj1);
IkReal x9693=((1.0)*cj0);
IkReal x9694=(cj1*sj2);
IkReal x9695=((1.0)*x9684);
IkReal x9696=((1.0)*x9683);
IkReal x9697=(gconst1*x9683);
IkReal x9698=(cj3*x9683);
IkReal x9699=(x9684*x9691);
evalcond[0]=(((r21*x9697))+(((-1.0)*r22*x9695))+(((-1.0)*gconst2*r20*x9696)));
evalcond[1]=(sj0+(((-1.0)*gconst2*r00*x9696))+(((-1.0)*r02*x9695))+((r01*x9697)));
evalcond[2]=((((-1.0)*gconst2*r10*x9696))+(((-1.0)*r12*x9695))+(((-1.0)*x9693))+((r11*x9697)));
evalcond[3]=(((r22*x9698))+((r21*x9691))+x9694+x9692+((r21*x9684*x9687))+(((-1.0)*r20*x9689*x9695))+((r20*x9685)));
evalcond[4]=((((-1.0)*x9690))+(((-1.0)*r22*sj3*x9696))+(((-1.0)*r21*x9685*x9695))+((r21*x9689))+x9688+((r20*x9687))+((r20*x9699)));
evalcond[5]=((((-1.0)*r01*x9685*x9695))+(((-1.0)*r02*sj3*x9696))+((r01*x9689))+((r00*x9699))+((cj0*x9692))+((cj0*x9694))+((r00*x9687)));
evalcond[6]=(((r02*x9698))+(((-1.0)*x9688*x9693))+(((-1.0)*r00*x9689*x9695))+((r01*x9684*x9687))+((cj0*x9690))+((r01*x9691))+((r00*x9685)));
evalcond[7]=((((-1.0)*r11*x9685*x9695))+((sj1*x9686))+((sj0*x9694))+((r10*x9699))+((r11*x9689))+(((-1.0)*r12*sj3*x9696))+((r10*x9687)));
evalcond[8]=(((cj1*x9686))+(((-1.0)*r10*x9689*x9695))+((r11*x9684*x9687))+((r12*x9698))+(((-1.0)*sj0*x9688))+((r11*x9691))+((r10*x9685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9700=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9700.valid){
continue;
}
CheckValue<IkReal> x9701 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9700.value)))+(x9701.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9702=IKsin(j4);
IkReal x9703=IKcos(j4);
IkReal x9704=(gconst1*sj3);
IkReal x9705=(cj2*sj0);
IkReal x9706=(cj3*gconst1);
IkReal x9707=(sj1*sj2);
IkReal x9708=(cj3*gconst2);
IkReal x9709=(cj1*cj2);
IkReal x9710=(gconst2*sj3);
IkReal x9711=(cj2*sj1);
IkReal x9712=((1.0)*cj0);
IkReal x9713=(cj1*sj2);
IkReal x9714=((1.0)*x9703);
IkReal x9715=((1.0)*x9702);
IkReal x9716=(gconst1*x9702);
IkReal x9717=(cj3*x9702);
IkReal x9718=(x9703*x9710);
evalcond[0]=((((-1.0)*gconst2*r20*x9715))+((r21*x9716))+(((-1.0)*r22*x9714)));
evalcond[1]=((((-1.0)*r02*x9714))+sj0+(((-1.0)*gconst2*r00*x9715))+((r01*x9716)));
evalcond[2]=(((r11*x9716))+(((-1.0)*gconst2*r10*x9715))+(((-1.0)*r12*x9714))+(((-1.0)*x9712)));
evalcond[3]=(((r22*x9717))+(((-1.0)*r20*x9708*x9714))+((r20*x9704))+x9713+x9711+((r21*x9703*x9706))+((r21*x9710)));
evalcond[4]=((((-1.0)*x9709))+(((-1.0)*r21*x9704*x9714))+((r20*x9706))+(((-1.0)*r22*sj3*x9715))+((r21*x9708))+x9707+((r20*x9718)));
evalcond[5]=((((-1.0)*r02*sj3*x9715))+((r01*x9708))+((cj0*x9711))+((cj0*x9713))+((r00*x9706))+((r00*x9718))+(((-1.0)*r01*x9704*x9714)));
evalcond[6]=(((r01*x9703*x9706))+(((-1.0)*x9707*x9712))+((r02*x9717))+((r00*x9704))+((cj0*x9709))+(((-1.0)*r00*x9708*x9714))+((r01*x9710)));
evalcond[7]=(((r10*x9706))+(((-1.0)*r12*sj3*x9715))+((r11*x9708))+((sj1*x9705))+((sj0*x9713))+(((-1.0)*r11*x9704*x9714))+((r10*x9718)));
evalcond[8]=(((r10*x9704))+((r12*x9717))+((cj1*x9705))+((r11*x9710))+(((-1.0)*r10*x9708*x9714))+(((-1.0)*sj0*x9707))+((r11*x9703*x9706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9719=((-1.0)*r21);
IkReal x9721 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x9721)==0){
continue;
}
IkReal x9720=pow(x9721,-0.5);
CheckValue<IkReal> x9722 = IKatan2WithCheck(IkReal(x9719),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9722.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x9722.value))));
IkReal gconst4=(x9719*x9720);
IkReal gconst5=((1.0)*r20*x9720);
CheckValue<IkReal> x9723 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9723.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x9723.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9724=((-1.0)*r21);
CheckValue<IkReal> x9727 = IKatan2WithCheck(IkReal(x9724),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9727.valid){
continue;
}
IkReal x9725=((1.0)*(x9727.value));
IkReal x9726=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9725)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9725)));
IkReal gconst4=(x9724*x9726);
IkReal gconst5=((1.0)*r20*x9726);
IkReal x9728=r22*r22;
IkReal x9729=((1.0)*x9728);
CheckValue<IkReal> x9733=IKPowWithIntegerCheck(((-1.0)+x9728),-1);
if(!x9733.valid){
continue;
}
IkReal x9730=x9733.value;
if((((1.0)+(((-1.0)*x9729)))) < -0.00001)
continue;
IkReal x9731=IKsqrt(((1.0)+(((-1.0)*x9729))));
IkReal x9732=(sj0*x9730*x9731);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x9729*x9732))+x9732))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9734=((-1.0)*r21);
CheckValue<IkReal> x9737 = IKatan2WithCheck(IkReal(x9734),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9737.valid){
continue;
}
IkReal x9735=((1.0)*(x9737.value));
IkReal x9736=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9735)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9735)));
IkReal gconst4=(x9734*x9736);
IkReal gconst5=((1.0)*r20*x9736);
IkReal x9738=r22*r22;
IkReal x9739=((1.0)*x9738);
CheckValue<IkReal> x9743=IKPowWithIntegerCheck(((-1.0)+x9738),-1);
if(!x9743.valid){
continue;
}
IkReal x9740=x9743.value;
if((((1.0)+(((-1.0)*x9739)))) < -0.00001)
continue;
IkReal x9741=IKsqrt(((1.0)+(((-1.0)*x9739))));
IkReal x9742=(cj0*x9740*x9741);
j4eval[0]=((IKabs(((((-1.0)*x9739*x9742))+x9742)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9744=((-1.0)*r21);
CheckValue<IkReal> x9747 = IKatan2WithCheck(IkReal(x9744),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9747.valid){
continue;
}
IkReal x9745=((1.0)*(x9747.value));
IkReal x9746=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9745)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9745)));
IkReal gconst4=(x9744*x9746);
IkReal gconst5=((1.0)*r20*x9746);
IkReal x9748=r22*r22;
IkReal x9749=(cj0*r02);
IkReal x9750=(r12*sj0);
CheckValue<IkReal> x9754=IKPowWithIntegerCheck(((-1.0)+x9748),-1);
if(!x9754.valid){
continue;
}
IkReal x9751=x9754.value;
if((((1.0)+(((-1.0)*x9748)))) < -0.00001)
continue;
IkReal x9752=IKsqrt(((1.0)+(((-1.0)*x9748))));
IkReal x9753=((1.0)*r22*x9751*x9752);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x9749*x9753))+(((-1.0)*x9750*x9753)))))+(IKabs((x9750+x9749))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9755=((-1.0)*r21);
CheckValue<IkReal> x9758 = IKatan2WithCheck(IkReal(x9755),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9758.valid){
continue;
}
IkReal x9756=((1.0)*(x9758.value));
IkReal x9757=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9756)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9756)));
IkReal gconst4=(x9755*x9757);
IkReal gconst5=((1.0)*r20*x9757);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9759=((-1.0)*r21);
CheckValue<IkReal> x9762 = IKatan2WithCheck(IkReal(x9759),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9762.valid){
continue;
}
IkReal x9760=((1.0)*(x9762.value));
IkReal x9761=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9760)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9760)));
IkReal gconst4=(x9759*x9761);
IkReal gconst5=((1.0)*r20*x9761);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9763=((-1.0)*r21);
CheckValue<IkReal> x9766 = IKatan2WithCheck(IkReal(x9763),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9766.valid){
continue;
}
IkReal x9764=((1.0)*(x9766.value));
IkReal x9765=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9764)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9764)));
IkReal gconst4=(x9763*x9765);
IkReal gconst5=((1.0)*r20*x9765);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9767=((-1.0)*r21);
CheckValue<IkReal> x9770 = IKatan2WithCheck(IkReal(x9767),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9770.valid){
continue;
}
IkReal x9768=((1.0)*(x9770.value));
IkReal x9769=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9768)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9768)));
IkReal gconst4=(x9767*x9769);
IkReal gconst5=((1.0)*r20*x9769);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9771=((-1.0)*r21);
CheckValue<IkReal> x9774 = IKatan2WithCheck(IkReal(x9771),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9774.valid){
continue;
}
IkReal x9772=((1.0)*(x9774.value));
IkReal x9773=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9772)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9772)));
IkReal gconst4=(x9771*x9773);
IkReal gconst5=((1.0)*r20*x9773);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9775=((-1.0)*r21);
CheckValue<IkReal> x9778 = IKatan2WithCheck(IkReal(x9775),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9778.valid){
continue;
}
IkReal x9776=((1.0)*(x9778.value));
IkReal x9777=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9776)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9776)));
IkReal gconst4=(x9775*x9777);
IkReal gconst5=((1.0)*r20*x9777);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9779=(gconst5*r00);
IkReal x9780=(gconst4*r01);
CheckValue<IkReal> x9781=IKPowWithIntegerCheck(IKsign(((x9780*x9780)+(((-2.0)*x9779*x9780))+(x9779*x9779)+(r02*r02))),-1);
if(!x9781.valid){
continue;
}
CheckValue<IkReal> x9782 = IKatan2WithCheck(IkReal((x9779+(((-1.0)*x9780)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9781.value)))+(x9782.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9783=IKsin(j4);
IkReal x9784=IKcos(j4);
IkReal x9785=(gconst4*r11);
IkReal x9786=(gconst5*r10);
IkReal x9787=(gconst4*r01);
IkReal x9788=(gconst5*r00);
IkReal x9789=(gconst4*r21);
IkReal x9790=(gconst5*r20);
IkReal x9791=((1.0)*x9784);
IkReal x9792=((1.0)*x9783);
evalcond[0]=((((-1.0)*x9790*x9792))+((x9783*x9789))+(((-1.0)*r22*x9791)));
evalcond[1]=((((-1.0)*r12*x9791))+(((-1.0)*x9786*x9792))+((x9783*x9785)));
evalcond[2]=((((-1.0)*r02*x9792))+(((-1.0)*x9787*x9791))+((x9784*x9788)));
evalcond[3]=((1.0)+(((-1.0)*x9788*x9792))+(((-1.0)*r02*x9791))+((x9783*x9787)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x9792))+(((-1.0)*x9785*x9791))+((x9784*x9786)));
evalcond[5]=((((-1.0)*x9789*x9791))+(((-1.0)*cj1*cj2))+((x9784*x9790))+((sj1*sj2))+(((-1.0)*r22*x9792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9793=((1.0)*gconst5);
CheckValue<IkReal> x9794 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x9793)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9794.valid){
continue;
}
CheckValue<IkReal> x9795=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9793))+(((-1.0)*gconst4*r20)))),-1);
if(!x9795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9794.value)+(((1.5707963267949)*(x9795.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9796=IKsin(j4);
IkReal x9797=IKcos(j4);
IkReal x9798=(gconst4*r11);
IkReal x9799=(gconst5*r10);
IkReal x9800=(gconst4*r01);
IkReal x9801=(gconst5*r00);
IkReal x9802=(gconst4*r21);
IkReal x9803=(gconst5*r20);
IkReal x9804=((1.0)*x9797);
IkReal x9805=((1.0)*x9796);
evalcond[0]=((((-1.0)*r22*x9804))+(((-1.0)*x9803*x9805))+((x9796*x9802)));
evalcond[1]=((((-1.0)*x9799*x9805))+((x9796*x9798))+(((-1.0)*r12*x9804)));
evalcond[2]=((((-1.0)*r02*x9805))+(((-1.0)*x9800*x9804))+((x9797*x9801)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9804))+(((-1.0)*x9801*x9805))+((x9796*x9800)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x9797*x9799))+(((-1.0)*x9798*x9804))+(((-1.0)*r12*x9805)));
evalcond[5]=((((-1.0)*r22*x9805))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x9797*x9803))+(((-1.0)*x9802*x9804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9806=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9806.valid){
continue;
}
CheckValue<IkReal> x9807 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9806.value)))+(x9807.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9808=IKsin(j4);
IkReal x9809=IKcos(j4);
IkReal x9810=(gconst4*r11);
IkReal x9811=(gconst5*r10);
IkReal x9812=(gconst4*r01);
IkReal x9813=(gconst5*r00);
IkReal x9814=(gconst4*r21);
IkReal x9815=(gconst5*r20);
IkReal x9816=((1.0)*x9809);
IkReal x9817=((1.0)*x9808);
evalcond[0]=(((x9808*x9814))+(((-1.0)*r22*x9816))+(((-1.0)*x9815*x9817)));
evalcond[1]=(((x9808*x9810))+(((-1.0)*x9811*x9817))+(((-1.0)*r12*x9816)));
evalcond[2]=(((x9809*x9813))+(((-1.0)*r02*x9817))+(((-1.0)*x9812*x9816)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9816))+((x9808*x9812))+(((-1.0)*x9813*x9817)));
evalcond[4]=(((x9809*x9811))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x9817))+(((-1.0)*x9810*x9816)));
evalcond[5]=(((x9809*x9815))+(((-1.0)*x9814*x9816))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x9817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9818=((-1.0)*r21);
CheckValue<IkReal> x9821 = IKatan2WithCheck(IkReal(x9818),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9821.valid){
continue;
}
IkReal x9819=((1.0)*(x9821.value));
IkReal x9820=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9819)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9819)));
IkReal gconst4=(x9818*x9820);
IkReal gconst5=((1.0)*r20*x9820);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9822=((-1.0)*r21);
CheckValue<IkReal> x9825 = IKatan2WithCheck(IkReal(x9822),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9825.valid){
continue;
}
IkReal x9823=((1.0)*(x9825.value));
IkReal x9824=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9823)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9823)));
IkReal gconst4=(x9822*x9824);
IkReal gconst5=((1.0)*r20*x9824);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9826=((-1.0)*r21);
CheckValue<IkReal> x9829 = IKatan2WithCheck(IkReal(x9826),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9829.valid){
continue;
}
IkReal x9827=((1.0)*(x9829.value));
IkReal x9828=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9827)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9827)));
IkReal gconst4=(x9826*x9828);
IkReal gconst5=((1.0)*r20*x9828);
IkReal x9830=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9834=IKPowWithIntegerCheck(x9830,-1);
if(!x9834.valid){
continue;
}
IkReal x9831=x9834.value;
IkReal x9832=((1.0)*x9831);
IkReal x9833=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9831))+(((-1.0)*x9832*(r01*r01)*(r21*r21)))+(((-1.0)*x9832*(r00*r00)*(r20*r20))));
j4eval[0]=x9833;
j4eval[1]=IKsign(x9833);
j4eval[2]=r02;
j4eval[3]=x9830;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9835=(gconst4*r01);
IkReal x9836=(gconst5*r00);
CheckValue<IkReal> x9837 = IKatan2WithCheck(IkReal(((((-1.0)*x9836))+x9835)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9837.valid){
continue;
}
CheckValue<IkReal> x9838=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x9835*x9836))+(((-1.0)*(x9836*x9836)))+(((-1.0)*(x9835*x9835))))),-1);
if(!x9838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9837.value)+(((1.5707963267949)*(x9838.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9839=IKcos(j4);
IkReal x9840=IKsin(j4);
IkReal x9841=(gconst4*r11);
IkReal x9842=(gconst5*r10);
IkReal x9843=(gconst5*r00);
IkReal x9844=(gconst5*r20);
IkReal x9845=((1.0)*x9839);
IkReal x9846=(gconst4*x9839);
IkReal x9847=((1.0)*x9840);
IkReal x9848=(gconst4*x9840);
evalcond[0]=((((-1.0)*x9843*x9845))+((r02*x9840))+((r01*x9846)));
evalcond[1]=((((-1.0)*x9844*x9847))+(((-1.0)*r22*x9845))+((r21*x9848)));
evalcond[2]=(((x9840*x9841))+(((-1.0)*r12*x9845))+(((-1.0)*x9842*x9847)));
evalcond[3]=((1.0)+(((-1.0)*x9843*x9847))+(((-1.0)*r02*x9845))+((r01*x9848)));
evalcond[4]=(((cj2*sj1))+((x9839*x9841))+((cj1*sj2))+((r12*x9840))+(((-1.0)*x9842*x9845)));
evalcond[5]=((((-1.0)*x9844*x9845))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x9840))+((r21*x9846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9849=((1.0)*gconst5);
CheckValue<IkReal> x9850=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9849))+(((-1.0)*gconst4*r20)))),-1);
if(!x9850.valid){
continue;
}
CheckValue<IkReal> x9851 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x9849)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9851.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9850.value)))+(x9851.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9852=IKcos(j4);
IkReal x9853=IKsin(j4);
IkReal x9854=(gconst4*r11);
IkReal x9855=(gconst5*r10);
IkReal x9856=(gconst5*r00);
IkReal x9857=(gconst5*r20);
IkReal x9858=((1.0)*x9852);
IkReal x9859=(gconst4*x9852);
IkReal x9860=((1.0)*x9853);
IkReal x9861=(gconst4*x9853);
evalcond[0]=(((r02*x9853))+((r01*x9859))+(((-1.0)*x9856*x9858)));
evalcond[1]=((((-1.0)*x9857*x9860))+((r21*x9861))+(((-1.0)*r22*x9858)));
evalcond[2]=((((-1.0)*x9855*x9860))+((x9853*x9854))+(((-1.0)*r12*x9858)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9858))+((r01*x9861))+(((-1.0)*x9856*x9860)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9855*x9858))+((cj1*sj2))+((x9852*x9854))+((r12*x9853)));
evalcond[5]=(((r21*x9859))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x9853))+(((-1.0)*x9857*x9858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9862=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9862.valid){
continue;
}
CheckValue<IkReal> x9863 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9862.value)))+(x9863.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9864=IKcos(j4);
IkReal x9865=IKsin(j4);
IkReal x9866=(gconst4*r11);
IkReal x9867=(gconst5*r10);
IkReal x9868=(gconst5*r00);
IkReal x9869=(gconst5*r20);
IkReal x9870=((1.0)*x9864);
IkReal x9871=(gconst4*x9864);
IkReal x9872=((1.0)*x9865);
IkReal x9873=(gconst4*x9865);
evalcond[0]=(((r02*x9865))+(((-1.0)*x9868*x9870))+((r01*x9871)));
evalcond[1]=(((r21*x9873))+(((-1.0)*r22*x9870))+(((-1.0)*x9869*x9872)));
evalcond[2]=((((-1.0)*x9867*x9872))+((x9865*x9866))+(((-1.0)*r12*x9870)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9870))+(((-1.0)*x9868*x9872))+((r01*x9873)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9867*x9870))+((cj1*sj2))+((x9864*x9866))+((r12*x9865)));
evalcond[5]=(((r22*x9865))+((r21*x9871))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9869*x9870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9874=((-1.0)*r21);
CheckValue<IkReal> x9877 = IKatan2WithCheck(IkReal(x9874),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9877.valid){
continue;
}
IkReal x9875=((1.0)*(x9877.value));
IkReal x9876=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9875)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9875)));
IkReal gconst4=(x9874*x9876);
IkReal gconst5=((1.0)*r20*x9876);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9878=((-1.0)*r21);
CheckValue<IkReal> x9881 = IKatan2WithCheck(IkReal(x9878),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9881.valid){
continue;
}
IkReal x9879=((1.0)*(x9881.value));
IkReal x9880=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9879)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9879)));
IkReal gconst4=(x9878*x9880);
IkReal gconst5=((1.0)*r20*x9880);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9882=((-1.0)*r21);
CheckValue<IkReal> x9885 = IKatan2WithCheck(IkReal(x9882),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9885.valid){
continue;
}
IkReal x9883=((1.0)*(x9885.value));
IkReal x9884=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9883)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9883)));
IkReal gconst4=(x9882*x9884);
IkReal gconst5=((1.0)*r20*x9884);
IkReal x9886=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9890=IKPowWithIntegerCheck(x9886,-1);
if(!x9890.valid){
continue;
}
IkReal x9887=x9890.value;
IkReal x9888=((1.0)*x9887);
IkReal x9889=((((-1.0)*x9888*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9887))+(((-1.0)*x9888*(r01*r01)*(r21*r21))));
j4eval[0]=x9889;
j4eval[1]=IKsign(x9889);
j4eval[2]=r02;
j4eval[3]=x9886;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9891=(gconst4*r01);
IkReal x9892=(gconst5*r00);
CheckValue<IkReal> x9893=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9891*x9891)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9892*x9892)))+(((2.0)*x9891*x9892)))),-1);
if(!x9893.valid){
continue;
}
CheckValue<IkReal> x9894 = IKatan2WithCheck(IkReal(((((-1.0)*x9892))+x9891)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9893.value)))+(x9894.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9895=IKcos(j4);
IkReal x9896=IKsin(j4);
IkReal x9897=(gconst5*r10);
IkReal x9898=(gconst5*r00);
IkReal x9899=(gconst5*r20);
IkReal x9900=((1.0)*x9895);
IkReal x9901=(gconst4*x9896);
IkReal x9902=(gconst4*x9895);
IkReal x9903=((1.0)*x9896);
evalcond[0]=(((r01*x9902))+((r02*x9896))+(((-1.0)*x9898*x9900)));
evalcond[1]=((((-1.0)*r22*x9900))+((r21*x9901))+(((-1.0)*x9899*x9903)));
evalcond[2]=((((-1.0)*r12*x9900))+((r11*x9901))+(((-1.0)*x9897*x9903)));
evalcond[3]=((1.0)+((r01*x9901))+(((-1.0)*x9898*x9903))+(((-1.0)*r02*x9900)));
evalcond[4]=(((cj2*sj1))+((r22*x9896))+((cj1*sj2))+((r21*x9902))+(((-1.0)*x9899*x9900)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x9902))+((r12*x9896))+((cj1*cj2))+(((-1.0)*x9897*x9900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9904=((1.0)*gconst5);
CheckValue<IkReal> x9905=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9904))+(((-1.0)*gconst4*r20)))),-1);
if(!x9905.valid){
continue;
}
CheckValue<IkReal> x9906 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x9904))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9905.value)))+(x9906.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9907=IKcos(j4);
IkReal x9908=IKsin(j4);
IkReal x9909=(gconst5*r10);
IkReal x9910=(gconst5*r00);
IkReal x9911=(gconst5*r20);
IkReal x9912=((1.0)*x9907);
IkReal x9913=(gconst4*x9908);
IkReal x9914=(gconst4*x9907);
IkReal x9915=((1.0)*x9908);
evalcond[0]=(((r02*x9908))+((r01*x9914))+(((-1.0)*x9910*x9912)));
evalcond[1]=((((-1.0)*r22*x9912))+((r21*x9913))+(((-1.0)*x9911*x9915)));
evalcond[2]=((((-1.0)*x9909*x9915))+(((-1.0)*r12*x9912))+((r11*x9913)));
evalcond[3]=((1.0)+((r01*x9913))+(((-1.0)*r02*x9912))+(((-1.0)*x9910*x9915)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9908))+((r21*x9914))+(((-1.0)*x9911*x9912)));
evalcond[5]=((((-1.0)*x9909*x9912))+((r12*x9908))+(((-1.0)*sj1*sj2))+((r11*x9914))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9916=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9916.valid){
continue;
}
CheckValue<IkReal> x9917 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9916.value)))+(x9917.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9918=IKcos(j4);
IkReal x9919=IKsin(j4);
IkReal x9920=(gconst5*r10);
IkReal x9921=(gconst5*r00);
IkReal x9922=(gconst5*r20);
IkReal x9923=((1.0)*x9918);
IkReal x9924=(gconst4*x9919);
IkReal x9925=(gconst4*x9918);
IkReal x9926=((1.0)*x9919);
evalcond[0]=((((-1.0)*x9921*x9923))+((r01*x9925))+((r02*x9919)));
evalcond[1]=((((-1.0)*r22*x9923))+(((-1.0)*x9922*x9926))+((r21*x9924)));
evalcond[2]=((((-1.0)*x9920*x9926))+(((-1.0)*r12*x9923))+((r11*x9924)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9923))+(((-1.0)*x9921*x9926))+((r01*x9924)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9922*x9923))+((r22*x9919))+((r21*x9925)));
evalcond[5]=(((r12*x9919))+(((-1.0)*sj1*sj2))+(((-1.0)*x9920*x9923))+((r11*x9925))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9927=((-1.0)*r21);
CheckValue<IkReal> x9930 = IKatan2WithCheck(IkReal(x9927),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9930.valid){
continue;
}
IkReal x9928=((1.0)*(x9930.value));
IkReal x9929=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9928)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9928)));
IkReal gconst4=(x9927*x9929);
IkReal gconst5=((1.0)*r20*x9929);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9931=((-1.0)*r21);
CheckValue<IkReal> x9934 = IKatan2WithCheck(IkReal(x9931),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9934.valid){
continue;
}
IkReal x9932=((1.0)*(x9934.value));
IkReal x9933=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9932)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9932)));
IkReal gconst4=(x9931*x9933);
IkReal gconst5=((1.0)*r20*x9933);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9935=((-1.0)*r21);
CheckValue<IkReal> x9938 = IKatan2WithCheck(IkReal(x9935),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9938.valid){
continue;
}
IkReal x9936=((1.0)*(x9938.value));
IkReal x9937=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9936)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9936)));
IkReal gconst4=(x9935*x9937);
IkReal gconst5=((1.0)*r20*x9937);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9939=(gconst5*r00);
IkReal x9940=(gconst4*r01);
CheckValue<IkReal> x9941 = IKatan2WithCheck(IkReal(((((-1.0)*x9940))+x9939)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9941.valid){
continue;
}
CheckValue<IkReal> x9942=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9939*x9940))+(x9940*x9940)+(x9939*x9939)+(r02*r02))),-1);
if(!x9942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9941.value)+(((1.5707963267949)*(x9942.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9943=IKsin(j4);
IkReal x9944=IKcos(j4);
IkReal x9945=(gconst4*r11);
IkReal x9946=(gconst5*r10);
IkReal x9947=(gconst5*r00);
IkReal x9948=(gconst5*r20);
IkReal x9949=((1.0)*x9944);
IkReal x9950=(gconst4*x9943);
IkReal x9951=((1.0)*x9943);
evalcond[0]=((((-1.0)*r22*x9949))+(((-1.0)*x9948*x9951))+((r21*x9950)));
evalcond[1]=((((-1.0)*x9946*x9951))+((x9943*x9945))+(((-1.0)*r12*x9949)));
evalcond[2]=((((-1.0)*r02*x9951))+((x9944*x9947))+(((-1.0)*gconst4*r01*x9949)));
evalcond[3]=((1.0)+(((-1.0)*x9947*x9951))+(((-1.0)*r02*x9949))+((r01*x9950)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9951))+((x9944*x9948))+(((-1.0)*gconst4*r21*x9949)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x9951))+(((-1.0)*x9945*x9949))+((cj1*cj2))+((x9944*x9946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9952=((1.0)*gconst5);
CheckValue<IkReal> x9953 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x9952)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9953.valid){
continue;
}
CheckValue<IkReal> x9954=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9952))+(((-1.0)*gconst4*r20)))),-1);
if(!x9954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9953.value)+(((1.5707963267949)*(x9954.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9955=IKsin(j4);
IkReal x9956=IKcos(j4);
IkReal x9957=(gconst4*r11);
IkReal x9958=(gconst5*r10);
IkReal x9959=(gconst5*r00);
IkReal x9960=(gconst5*r20);
IkReal x9961=((1.0)*x9956);
IkReal x9962=(gconst4*x9955);
IkReal x9963=((1.0)*x9955);
evalcond[0]=((((-1.0)*x9960*x9963))+((r21*x9962))+(((-1.0)*r22*x9961)));
evalcond[1]=((((-1.0)*r12*x9961))+((x9955*x9957))+(((-1.0)*x9958*x9963)));
evalcond[2]=(((x9956*x9959))+(((-1.0)*gconst4*r01*x9961))+(((-1.0)*r02*x9963)));
evalcond[3]=((1.0)+((r01*x9962))+(((-1.0)*r02*x9961))+(((-1.0)*x9959*x9963)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x9961))+(((-1.0)*r22*x9963))+((cj1*sj2))+((x9956*x9960)));
evalcond[5]=((((-1.0)*x9957*x9961))+(((-1.0)*r12*x9963))+(((-1.0)*sj1*sj2))+((x9956*x9958))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9964=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9964.valid){
continue;
}
CheckValue<IkReal> x9965 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9964.value)))+(x9965.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9966=IKsin(j4);
IkReal x9967=IKcos(j4);
IkReal x9968=(gconst4*r11);
IkReal x9969=(gconst5*r10);
IkReal x9970=(gconst5*r00);
IkReal x9971=(gconst5*r20);
IkReal x9972=((1.0)*x9967);
IkReal x9973=(gconst4*x9966);
IkReal x9974=((1.0)*x9966);
evalcond[0]=((((-1.0)*x9971*x9974))+(((-1.0)*r22*x9972))+((r21*x9973)));
evalcond[1]=(((x9966*x9968))+(((-1.0)*x9969*x9974))+(((-1.0)*r12*x9972)));
evalcond[2]=((((-1.0)*r02*x9974))+(((-1.0)*gconst4*r01*x9972))+((x9967*x9970)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9972))+(((-1.0)*x9970*x9974))+((r01*x9973)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9974))+((x9967*x9971))+(((-1.0)*gconst4*r21*x9972)));
evalcond[5]=((((-1.0)*x9968*x9972))+((x9967*x9969))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x9974))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9975=((-1.0)*r21);
IkReal x9976=((-1.0)*r20);
CheckValue<IkReal> x9978 = IKatan2WithCheck(IkReal(x9975),IkReal(x9976),IKFAST_ATAN2_MAGTHRESH);
if(!x9978.valid){
continue;
}
IkReal x9977=((1.0)*(x9978.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9977)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9976);
rxp0_2=(py*r00);
rxp1_0=(py*x9975);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9977)));
IkReal gconst4=x9975;
IkReal gconst5=((1.0)*r20);
IkReal x9979=((1.0)*r01*r21);
IkReal x9980=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x9979))+(((-1.0)*x9980)));
j4eval[1]=(((sj3*x9979))+((sj3*x9980)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9981=((-1.0)*r21);
IkReal x9982=((-1.0)*r20);
CheckValue<IkReal> x9984 = IKatan2WithCheck(IkReal(x9981),IkReal(x9982),IKFAST_ATAN2_MAGTHRESH);
if(!x9984.valid){
continue;
}
IkReal x9983=((1.0)*(x9984.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9983)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9982);
rxp0_2=(py*r00);
rxp1_0=(py*x9981);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9983)));
IkReal gconst4=x9981;
IkReal gconst5=((1.0)*r20);
IkReal x9985=((1.0)*r01*r21);
IkReal x9986=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x9985))+(((-1.0)*x9986)));
j4eval[1]=((((-1.0)*cj3*x9986))+(((-1.0)*cj3*x9985)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9987=((-1.0)*r21);
IkReal x9988=((-1.0)*r20);
CheckValue<IkReal> x9990 = IKatan2WithCheck(IkReal(x9987),IkReal(x9988),IKFAST_ATAN2_MAGTHRESH);
if(!x9990.valid){
continue;
}
IkReal x9989=((1.0)*(x9990.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9989)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9988);
rxp0_2=(py*r00);
rxp1_0=(py*x9987);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9989)));
IkReal gconst4=x9987;
IkReal gconst5=((1.0)*r20);
IkReal x9991=((1.0)*sj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((r01*r21*x9991))+((r00*r20*x9991)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9992=((1.0)*r01);
CheckValue<IkReal> x9993=IKPowWithIntegerCheck(r12,-1);
if(!x9993.valid){
continue;
}
CheckValue<IkReal> x9994=IKPowWithIntegerCheck(sj3,-1);
if(!x9994.valid){
continue;
}
CheckValue<IkReal> x9995=IKPowWithIntegerCheck(((((-1.0)*gconst4*sj3*x9992))+((gconst5*r00*sj3))),-1);
if(!x9995.valid){
continue;
}
if( IKabs(((x9993.value)*(x9994.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9995.value)*(((((-1.0)*cj3*gconst4*r00))+(((-1.0)*cj3*gconst5*x9992)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9993.value)*(x9994.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x9995.value)*(((((-1.0)*cj3*gconst4*r00))+(((-1.0)*cj3*gconst5*x9992))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9993.value)*(x9994.value)*((((cj2*sj1))+((cj1*sj2))))), ((x9995.value)*(((((-1.0)*cj3*gconst4*r00))+(((-1.0)*cj3*gconst5*x9992))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9996=IKsin(j4);
IkReal x9997=IKcos(j4);
IkReal x9998=(cj2*sj1);
IkReal x9999=(cj1*sj2);
IkReal x10000=(sj1*sj2);
IkReal x10001=(gconst5*r00);
IkReal x10002=(gconst5*sj3);
IkReal x10003=(cj3*gconst5);
IkReal x10004=(gconst4*sj3);
IkReal x10005=(cj3*gconst4);
IkReal x10006=(cj1*cj2);
IkReal x10007=((1.0)*x9996);
IkReal x10008=(gconst4*x9996);
IkReal x10009=((1.0)*x9997);
IkReal x10010=(x9999+x9998);
IkReal x10011=(x10002*x9997);
IkReal x10012=(x10005*x9997);
evalcond[0]=((-1.0)*r12*x9997);
evalcond[1]=((((-1.0)*gconst5*r20*x10007))+((r21*x10008)));
evalcond[2]=((((-1.0)*r12*sj3*x10007))+x10010);
evalcond[3]=(((cj3*r12*x9996))+(((-1.0)*x10000))+x10006);
evalcond[4]=((1.0)+((r01*x10008))+(((-1.0)*x10001*x10007)));
evalcond[5]=(((r01*x10003))+(((-1.0)*r01*x10004*x10009))+((sj3*x10001*x9997))+((r00*x10005)));
evalcond[6]=((((-1.0)*cj3*x10001*x10009))+((r01*x10002))+((r01*x10012))+((r00*x10004)));
evalcond[7]=(((r21*x10012))+x10010+((r20*x10004))+(((-1.0)*r20*x10003*x10009))+((r21*x10002)));
evalcond[8]=((((-1.0)*x10006))+x10000+(((-1.0)*r21*x10004*x10009))+((r20*x10005))+((r20*x10011))+((r21*x10003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10013=((1.0)*gconst5);
IkReal x10014=(gconst4*r01);
CheckValue<IkReal> x10015=IKPowWithIntegerCheck((x10014+(((-1.0)*r00*x10013))),-1);
if(!x10015.valid){
continue;
}
CheckValue<IkReal> x10016=IKPowWithIntegerCheck((((cj3*x10014))+(((-1.0)*cj3*r00*x10013))),-1);
if(!x10016.valid){
continue;
}
if( IKabs(((-1.0)*(x10015.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10016.value)*(((((-1.0)*r01*sj3*x10013))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10015.value)))+IKsqr(((x10016.value)*(((((-1.0)*r01*sj3*x10013))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10015.value)), ((x10016.value)*(((((-1.0)*r01*sj3*x10013))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10017=IKsin(j4);
IkReal x10018=IKcos(j4);
IkReal x10019=(cj2*sj1);
IkReal x10020=(cj1*sj2);
IkReal x10021=(sj1*sj2);
IkReal x10022=(gconst5*r00);
IkReal x10023=(gconst5*sj3);
IkReal x10024=(cj3*gconst5);
IkReal x10025=(gconst4*sj3);
IkReal x10026=(cj3*gconst4);
IkReal x10027=(cj1*cj2);
IkReal x10028=((1.0)*x10017);
IkReal x10029=(gconst4*x10017);
IkReal x10030=((1.0)*x10018);
IkReal x10031=(x10020+x10019);
IkReal x10032=(x10018*x10023);
IkReal x10033=(x10018*x10026);
evalcond[0]=((-1.0)*r12*x10018);
evalcond[1]=((((-1.0)*gconst5*r20*x10028))+((r21*x10029)));
evalcond[2]=(x10031+(((-1.0)*r12*sj3*x10028)));
evalcond[3]=(((cj3*r12*x10017))+(((-1.0)*x10021))+x10027);
evalcond[4]=((1.0)+((r01*x10029))+(((-1.0)*x10022*x10028)));
evalcond[5]=((((-1.0)*r01*x10025*x10030))+((sj3*x10018*x10022))+((r01*x10024))+((r00*x10026)));
evalcond[6]=((((-1.0)*cj3*x10022*x10030))+((r01*x10023))+((r01*x10033))+((r00*x10025)));
evalcond[7]=(((r21*x10023))+((r21*x10033))+((r20*x10025))+x10031+(((-1.0)*r20*x10024*x10030)));
evalcond[8]=((((-1.0)*x10027))+((r21*x10024))+((r20*x10026))+((r20*x10032))+x10021+(((-1.0)*r21*x10025*x10030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10034=((1.0)*gconst4);
IkReal x10035=(gconst5*r00);
CheckValue<IkReal> x10036=IKPowWithIntegerCheck(((((-1.0)*x10035))+((gconst4*r01))),-1);
if(!x10036.valid){
continue;
}
CheckValue<IkReal> x10037=IKPowWithIntegerCheck(((((-1.0)*r01*sj3*x10034))+((sj3*x10035))),-1);
if(!x10037.valid){
continue;
}
if( IKabs(((-1.0)*(x10036.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10037.value)*(((((-1.0)*cj3*r00*x10034))+(((-1.0)*cj3*gconst5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10036.value)))+IKsqr(((x10037.value)*(((((-1.0)*cj3*r00*x10034))+(((-1.0)*cj3*gconst5*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10036.value)), ((x10037.value)*(((((-1.0)*cj3*r00*x10034))+(((-1.0)*cj3*gconst5*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10038=IKsin(j4);
IkReal x10039=IKcos(j4);
IkReal x10040=(cj2*sj1);
IkReal x10041=(cj1*sj2);
IkReal x10042=(sj1*sj2);
IkReal x10043=(gconst5*r00);
IkReal x10044=(gconst5*sj3);
IkReal x10045=(cj3*gconst5);
IkReal x10046=(gconst4*sj3);
IkReal x10047=(cj3*gconst4);
IkReal x10048=(cj1*cj2);
IkReal x10049=((1.0)*x10038);
IkReal x10050=(gconst4*x10038);
IkReal x10051=((1.0)*x10039);
IkReal x10052=(x10040+x10041);
IkReal x10053=(x10039*x10044);
IkReal x10054=(x10039*x10047);
evalcond[0]=((-1.0)*r12*x10039);
evalcond[1]=((((-1.0)*gconst5*r20*x10049))+((r21*x10050)));
evalcond[2]=((((-1.0)*r12*sj3*x10049))+x10052);
evalcond[3]=((((-1.0)*x10042))+((cj3*r12*x10038))+x10048);
evalcond[4]=((1.0)+((r01*x10050))+(((-1.0)*x10043*x10049)));
evalcond[5]=(((sj3*x10039*x10043))+(((-1.0)*r01*x10046*x10051))+((r00*x10047))+((r01*x10045)));
evalcond[6]=(((r01*x10054))+((r00*x10046))+((r01*x10044))+(((-1.0)*cj3*x10043*x10051)));
evalcond[7]=((((-1.0)*r20*x10045*x10051))+((r21*x10044))+x10052+((r21*x10054))+((r20*x10046)));
evalcond[8]=((((-1.0)*x10048))+((r20*x10053))+((r21*x10045))+x10042+((r20*x10047))+(((-1.0)*r21*x10046*x10051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10055=gconst4*gconst4;
IkReal x10056=gconst5*gconst5;
IkReal x10057=(r01*r20);
IkReal x10058=(gconst4*sj3);
IkReal x10059=(r01*r21);
IkReal x10060=((1.0)*cj3);
IkReal x10061=(r00*r21);
IkReal x10062=(r00*r20);
IkReal x10063=(cj3*gconst4*gconst5);
IkReal x10064=((1.0)*x10056);
CheckValue<IkReal> x10065 = IKatan2WithCheck(IkReal((((r00*r22*x10058))+((gconst5*r01*r22*sj3)))),IkReal((((sj3*x10055*x10061))+(((-1.0)*sj3*x10057*x10064))+((gconst5*x10058*x10059))+(((-1.0)*gconst5*x10058*x10062)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10065.valid){
continue;
}
CheckValue<IkReal> x10066=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10056*x10060*x10062))+(((-1.0)*r02*r22*x10060))+((x10057*x10063))+((x10061*x10063))+(((-1.0)*x10055*x10059*x10060)))),-1);
if(!x10066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10065.value)+(((1.5707963267949)*(x10066.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10067=IKsin(j4);
IkReal x10068=IKcos(j4);
IkReal x10069=(cj2*sj1);
IkReal x10070=(cj1*sj2);
IkReal x10071=(gconst4*r11);
IkReal x10072=(sj1*sj2);
IkReal x10073=(gconst5*r10);
IkReal x10074=(cj1*cj2);
IkReal x10075=(gconst4*r01);
IkReal x10076=(gconst5*sj3);
IkReal x10077=(gconst5*r00);
IkReal x10078=(gconst4*sj3);
IkReal x10079=(cj3*gconst5);
IkReal x10080=(cj3*gconst4);
IkReal x10081=(gconst4*r21);
IkReal x10082=((1.0)*x10068);
IkReal x10083=((1.0)*x10067);
IkReal x10084=(cj3*x10067);
IkReal x10085=(cj3*x10068);
IkReal x10086=(x10070+x10069);
IkReal x10087=(x10068*x10076);
evalcond[0]=(((x10067*x10081))+(((-1.0)*gconst5*r20*x10083))+(((-1.0)*r22*x10082)));
evalcond[1]=(((x10067*x10071))+(((-1.0)*r12*x10082))+(((-1.0)*x10073*x10083)));
evalcond[2]=((1.0)+((x10067*x10075))+(((-1.0)*x10077*x10083))+(((-1.0)*r02*x10082)));
evalcond[3]=((((-1.0)*cj3*x10077*x10082))+((r00*x10078))+((r01*x10076))+((r02*x10084))+((x10075*x10085)));
evalcond[4]=(((r00*x10087))+((r00*x10080))+((r01*x10079))+(((-1.0)*r02*sj3*x10083))+(((-1.0)*sj3*x10075*x10082)));
evalcond[5]=(((r21*x10068*x10080))+((r20*x10078))+x10086+((r21*x10076))+((r22*x10084))+(((-1.0)*r20*x10079*x10082)));
evalcond[6]=((((-1.0)*r12*sj3*x10083))+(((-1.0)*sj3*x10071*x10082))+((sj3*x10068*x10073))+x10086+((r11*x10079))+((r10*x10080)));
evalcond[7]=(((r10*x10078))+((x10071*x10085))+(((-1.0)*cj3*x10073*x10082))+x10074+((r11*x10076))+((r12*x10084))+(((-1.0)*x10072)));
evalcond[8]=(((r20*x10087))+((r20*x10080))+x10072+((r21*x10079))+(((-1.0)*r21*x10078*x10082))+(((-1.0)*x10074))+(((-1.0)*r22*sj3*x10083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10088=((1.0)*gconst5);
CheckValue<IkReal> x10089 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x10088)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10089.valid){
continue;
}
CheckValue<IkReal> x10090=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10088))+(((-1.0)*gconst4*r20)))),-1);
if(!x10090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10089.value)+(((1.5707963267949)*(x10090.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10091=IKsin(j4);
IkReal x10092=IKcos(j4);
IkReal x10093=(cj2*sj1);
IkReal x10094=(cj1*sj2);
IkReal x10095=(gconst4*r11);
IkReal x10096=(sj1*sj2);
IkReal x10097=(gconst5*r10);
IkReal x10098=(cj1*cj2);
IkReal x10099=(gconst4*r01);
IkReal x10100=(gconst5*sj3);
IkReal x10101=(gconst5*r00);
IkReal x10102=(gconst4*sj3);
IkReal x10103=(cj3*gconst5);
IkReal x10104=(cj3*gconst4);
IkReal x10105=(gconst4*r21);
IkReal x10106=((1.0)*x10092);
IkReal x10107=((1.0)*x10091);
IkReal x10108=(cj3*x10091);
IkReal x10109=(cj3*x10092);
IkReal x10110=(x10093+x10094);
IkReal x10111=(x10092*x10100);
evalcond[0]=((((-1.0)*r22*x10106))+(((-1.0)*gconst5*r20*x10107))+((x10091*x10105)));
evalcond[1]=((((-1.0)*r12*x10106))+((x10091*x10095))+(((-1.0)*x10097*x10107)));
evalcond[2]=((1.0)+((x10091*x10099))+(((-1.0)*x10101*x10107))+(((-1.0)*r02*x10106)));
evalcond[3]=(((r01*x10100))+((r00*x10102))+((x10099*x10109))+((r02*x10108))+(((-1.0)*cj3*x10101*x10106)));
evalcond[4]=(((r01*x10103))+((r00*x10104))+((r00*x10111))+(((-1.0)*r02*sj3*x10107))+(((-1.0)*sj3*x10099*x10106)));
evalcond[5]=(((r21*x10100))+((r20*x10102))+x10110+((r21*x10092*x10104))+(((-1.0)*r20*x10103*x10106))+((r22*x10108)));
evalcond[6]=((((-1.0)*r12*sj3*x10107))+x10110+((sj3*x10092*x10097))+((r11*x10103))+((r10*x10104))+(((-1.0)*sj3*x10095*x10106)));
evalcond[7]=(((x10095*x10109))+x10098+(((-1.0)*cj3*x10097*x10106))+((r11*x10100))+((r10*x10102))+((r12*x10108))+(((-1.0)*x10096)));
evalcond[8]=(((r21*x10103))+((r20*x10111))+((r20*x10104))+x10096+(((-1.0)*r21*x10102*x10106))+(((-1.0)*r22*sj3*x10107))+(((-1.0)*x10098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10112=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10112.valid){
continue;
}
CheckValue<IkReal> x10113 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10112.value)))+(x10113.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10114=IKsin(j4);
IkReal x10115=IKcos(j4);
IkReal x10116=(cj2*sj1);
IkReal x10117=(cj1*sj2);
IkReal x10118=(gconst4*r11);
IkReal x10119=(sj1*sj2);
IkReal x10120=(gconst5*r10);
IkReal x10121=(cj1*cj2);
IkReal x10122=(gconst4*r01);
IkReal x10123=(gconst5*sj3);
IkReal x10124=(gconst5*r00);
IkReal x10125=(gconst4*sj3);
IkReal x10126=(cj3*gconst5);
IkReal x10127=(cj3*gconst4);
IkReal x10128=(gconst4*r21);
IkReal x10129=((1.0)*x10115);
IkReal x10130=((1.0)*x10114);
IkReal x10131=(cj3*x10114);
IkReal x10132=(cj3*x10115);
IkReal x10133=(x10116+x10117);
IkReal x10134=(x10115*x10123);
evalcond[0]=(((x10114*x10128))+(((-1.0)*gconst5*r20*x10130))+(((-1.0)*r22*x10129)));
evalcond[1]=((((-1.0)*x10120*x10130))+((x10114*x10118))+(((-1.0)*r12*x10129)));
evalcond[2]=((1.0)+((x10114*x10122))+(((-1.0)*r02*x10129))+(((-1.0)*x10124*x10130)));
evalcond[3]=((((-1.0)*cj3*x10124*x10129))+((x10122*x10132))+((r02*x10131))+((r00*x10125))+((r01*x10123)));
evalcond[4]=((((-1.0)*sj3*x10122*x10129))+((r00*x10127))+((r00*x10134))+((r01*x10126))+(((-1.0)*r02*sj3*x10130)));
evalcond[5]=(((r20*x10125))+((r21*x10123))+((r21*x10115*x10127))+x10133+(((-1.0)*r20*x10126*x10129))+((r22*x10131)));
evalcond[6]=(((sj3*x10115*x10120))+((r10*x10127))+(((-1.0)*sj3*x10118*x10129))+x10133+(((-1.0)*r12*sj3*x10130))+((r11*x10126)));
evalcond[7]=((((-1.0)*x10119))+((r10*x10125))+((x10118*x10132))+x10121+((r12*x10131))+(((-1.0)*cj3*x10120*x10129))+((r11*x10123)));
evalcond[8]=(((r20*x10134))+(((-1.0)*r21*x10125*x10129))+((r20*x10127))+((r21*x10126))+(((-1.0)*r22*sj3*x10130))+x10119+(((-1.0)*x10121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10135=((-1.0)*r21);
CheckValue<IkReal> x10138 = IKatan2WithCheck(IkReal(x10135),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10138.valid){
continue;
}
IkReal x10136=((1.0)*(x10138.value));
IkReal x10137=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10136)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10136)));
IkReal gconst4=(x10135*x10137);
IkReal gconst5=((1.0)*r20*x10137);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10139=((-1.0)*r21);
CheckValue<IkReal> x10142 = IKatan2WithCheck(IkReal(x10139),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10142.valid){
continue;
}
IkReal x10140=((1.0)*(x10142.value));
IkReal x10141=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10140)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10140)));
IkReal gconst4=(x10139*x10141);
IkReal gconst5=((1.0)*r20*x10141);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10143=((-1.0)*r21);
CheckValue<IkReal> x10146 = IKatan2WithCheck(IkReal(x10143),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10146.valid){
continue;
}
IkReal x10144=((1.0)*(x10146.value));
IkReal x10145=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10144)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10144)));
IkReal gconst4=(x10143*x10145);
IkReal gconst5=((1.0)*r20*x10145);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10147=((-1.0)*r21);
CheckValue<IkReal> x10150 = IKatan2WithCheck(IkReal(x10147),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10150.valid){
continue;
}
IkReal x10148=((1.0)*(x10150.value));
IkReal x10149=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10148)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10148)));
IkReal gconst4=(x10147*x10149);
IkReal gconst5=((1.0)*r20*x10149);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10151=((-1.0)*r21);
CheckValue<IkReal> x10154 = IKatan2WithCheck(IkReal(x10151),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10154.valid){
continue;
}
IkReal x10152=((1.0)*(x10154.value));
IkReal x10153=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10152)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10152)));
IkReal gconst4=(x10151*x10153);
IkReal gconst5=((1.0)*r20*x10153);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10155=((-1.0)*r21);
CheckValue<IkReal> x10158 = IKatan2WithCheck(IkReal(x10155),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10158.valid){
continue;
}
IkReal x10156=((1.0)*(x10158.value));
IkReal x10157=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10156)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10156)));
IkReal gconst4=(x10155*x10157);
IkReal gconst5=((1.0)*r20*x10157);
IkReal x10159=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10163=IKPowWithIntegerCheck(x10159,-1);
if(!x10163.valid){
continue;
}
IkReal x10160=x10163.value;
IkReal x10161=((1.0)*x10160);
IkReal x10162=((((-1.0)*x10161*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x10160))+(((-1.0)*(r02*r02)))+(((-1.0)*x10161*(r00*r00)*(r20*r20))));
j4eval[0]=x10162;
j4eval[1]=r02;
j4eval[2]=x10159;
j4eval[3]=IKsign(x10162);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10164=(gconst5*r00);
IkReal x10165=(gconst4*r01);
CheckValue<IkReal> x10166 = IKatan2WithCheck(IkReal(((((-1.0)*x10165))+x10164)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10166.valid){
continue;
}
CheckValue<IkReal> x10167=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10164*x10164)))+(((-1.0)*(x10165*x10165)))+(((2.0)*x10164*x10165))+(((-1.0)*(r02*r02))))),-1);
if(!x10167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10166.value)+(((1.5707963267949)*(x10167.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10168=IKsin(j4);
IkReal x10169=IKcos(j4);
IkReal x10170=(gconst4*r11);
IkReal x10171=((1.0)*cj1);
IkReal x10172=(gconst5*r10);
IkReal x10173=(gconst4*r01);
IkReal x10174=(gconst5*r00);
IkReal x10175=(gconst4*r21);
IkReal x10176=(gconst5*r20);
IkReal x10177=((1.0)*x10169);
IkReal x10178=((1.0)*x10168);
evalcond[0]=((((-1.0)*x10176*x10178))+((x10168*x10175))+(((-1.0)*r22*x10177)));
evalcond[1]=(((x10168*x10170))+(((-1.0)*x10172*x10178))+(((-1.0)*r12*x10177)));
evalcond[2]=((((-1.0)*x10173*x10177))+((x10169*x10174))+(((-1.0)*r02*x10178)));
evalcond[3]=((-1.0)+((x10168*x10173))+(((-1.0)*x10174*x10178))+(((-1.0)*r02*x10177)));
evalcond[4]=((((-1.0)*r22*x10178))+(((-1.0)*cj2*x10171))+((sj1*sj2))+(((-1.0)*x10175*x10177))+((x10169*x10176)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10171))+(((-1.0)*r12*x10178))+(((-1.0)*x10170*x10177))+((x10169*x10172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10179=((1.0)*gconst5);
CheckValue<IkReal> x10180=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10179))+(((-1.0)*gconst4*r10)))),-1);
if(!x10180.valid){
continue;
}
CheckValue<IkReal> x10181 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10179))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10180.value)))+(x10181.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10182=IKsin(j4);
IkReal x10183=IKcos(j4);
IkReal x10184=(gconst4*r11);
IkReal x10185=((1.0)*cj1);
IkReal x10186=(gconst5*r10);
IkReal x10187=(gconst4*r01);
IkReal x10188=(gconst5*r00);
IkReal x10189=(gconst4*r21);
IkReal x10190=(gconst5*r20);
IkReal x10191=((1.0)*x10183);
IkReal x10192=((1.0)*x10182);
evalcond[0]=(((x10182*x10189))+(((-1.0)*x10190*x10192))+(((-1.0)*r22*x10191)));
evalcond[1]=((((-1.0)*x10186*x10192))+(((-1.0)*r12*x10191))+((x10182*x10184)));
evalcond[2]=((((-1.0)*r02*x10192))+(((-1.0)*x10187*x10191))+((x10183*x10188)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10191))+((x10182*x10187))+(((-1.0)*x10188*x10192)));
evalcond[4]=((((-1.0)*cj2*x10185))+((sj1*sj2))+((x10183*x10190))+(((-1.0)*x10189*x10191))+(((-1.0)*r22*x10192)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x10184*x10191))+(((-1.0)*sj2*x10185))+(((-1.0)*r12*x10192))+((x10183*x10186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10193 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10193.valid){
continue;
}
CheckValue<IkReal> x10194=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10193.value)+(((1.5707963267949)*(x10194.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10195=IKsin(j4);
IkReal x10196=IKcos(j4);
IkReal x10197=(gconst4*r11);
IkReal x10198=((1.0)*cj1);
IkReal x10199=(gconst5*r10);
IkReal x10200=(gconst4*r01);
IkReal x10201=(gconst5*r00);
IkReal x10202=(gconst4*r21);
IkReal x10203=(gconst5*r20);
IkReal x10204=((1.0)*x10196);
IkReal x10205=((1.0)*x10195);
evalcond[0]=((((-1.0)*r22*x10204))+((x10195*x10202))+(((-1.0)*x10203*x10205)));
evalcond[1]=((((-1.0)*x10199*x10205))+((x10195*x10197))+(((-1.0)*r12*x10204)));
evalcond[2]=((((-1.0)*x10200*x10204))+(((-1.0)*r02*x10205))+((x10196*x10201)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10204))+((x10195*x10200))+(((-1.0)*x10201*x10205)));
evalcond[4]=((((-1.0)*cj2*x10198))+(((-1.0)*r22*x10205))+((sj1*sj2))+((x10196*x10203))+(((-1.0)*x10202*x10204)));
evalcond[5]=((((-1.0)*x10197*x10204))+((x10196*x10199))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10198))+(((-1.0)*r12*x10205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10206=((-1.0)*r21);
CheckValue<IkReal> x10209 = IKatan2WithCheck(IkReal(x10206),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10209.valid){
continue;
}
IkReal x10207=((1.0)*(x10209.value));
IkReal x10208=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10207)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10207)));
IkReal gconst4=(x10206*x10208);
IkReal gconst5=((1.0)*r20*x10208);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10210=((-1.0)*r21);
CheckValue<IkReal> x10213 = IKatan2WithCheck(IkReal(x10210),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10213.valid){
continue;
}
IkReal x10211=((1.0)*(x10213.value));
IkReal x10212=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10211)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10211)));
IkReal gconst4=(x10210*x10212);
IkReal gconst5=((1.0)*r20*x10212);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10214=((-1.0)*r21);
CheckValue<IkReal> x10217 = IKatan2WithCheck(IkReal(x10214),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10217.valid){
continue;
}
IkReal x10215=((1.0)*(x10217.value));
IkReal x10216=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10215)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10215)));
IkReal gconst4=(x10214*x10216);
IkReal gconst5=((1.0)*r20*x10216);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10218=(gconst4*r01);
IkReal x10219=(gconst5*r00);
CheckValue<IkReal> x10220=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10218*x10219))+(x10219*x10219)+(x10218*x10218)+(r02*r02))),-1);
if(!x10220.valid){
continue;
}
CheckValue<IkReal> x10221 = IKatan2WithCheck(IkReal((x10218+(((-1.0)*x10219)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10220.value)))+(x10221.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10222=IKcos(j4);
IkReal x10223=IKsin(j4);
IkReal x10224=(gconst4*r11);
IkReal x10225=(gconst5*r10);
IkReal x10226=((1.0)*cj1);
IkReal x10227=(gconst5*r00);
IkReal x10228=(gconst5*r20);
IkReal x10229=((1.0)*x10222);
IkReal x10230=(gconst4*x10222);
IkReal x10231=((1.0)*x10223);
IkReal x10232=(gconst4*x10223);
evalcond[0]=((((-1.0)*x10227*x10229))+((r02*x10223))+((r01*x10230)));
evalcond[1]=(((r21*x10232))+(((-1.0)*r22*x10229))+(((-1.0)*x10228*x10231)));
evalcond[2]=(((x10223*x10224))+(((-1.0)*x10225*x10231))+(((-1.0)*r12*x10229)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10229))+(((-1.0)*x10227*x10231))+((r01*x10232)));
evalcond[4]=(((r22*x10223))+(((-1.0)*cj2*x10226))+((sj1*sj2))+((r21*x10230))+(((-1.0)*x10228*x10229)));
evalcond[5]=(((r12*x10223))+(((-1.0)*cj2*sj1))+(((-1.0)*x10225*x10229))+(((-1.0)*sj2*x10226))+((x10222*x10224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10233=((1.0)*gconst5);
CheckValue<IkReal> x10234=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10233))+(((-1.0)*gconst4*r10)))),-1);
if(!x10234.valid){
continue;
}
CheckValue<IkReal> x10235 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10233)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10234.value)))+(x10235.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10236=IKcos(j4);
IkReal x10237=IKsin(j4);
IkReal x10238=(gconst4*r11);
IkReal x10239=(gconst5*r10);
IkReal x10240=((1.0)*cj1);
IkReal x10241=(gconst5*r00);
IkReal x10242=(gconst5*r20);
IkReal x10243=((1.0)*x10236);
IkReal x10244=(gconst4*x10236);
IkReal x10245=((1.0)*x10237);
IkReal x10246=(gconst4*x10237);
evalcond[0]=((((-1.0)*x10241*x10243))+((r02*x10237))+((r01*x10244)));
evalcond[1]=(((r21*x10246))+(((-1.0)*r22*x10243))+(((-1.0)*x10242*x10245)));
evalcond[2]=(((x10237*x10238))+(((-1.0)*r12*x10243))+(((-1.0)*x10239*x10245)));
evalcond[3]=((-1.0)+(((-1.0)*x10241*x10245))+((r01*x10246))+(((-1.0)*r02*x10243)));
evalcond[4]=((((-1.0)*cj2*x10240))+((r22*x10237))+((sj1*sj2))+((r21*x10244))+(((-1.0)*x10242*x10243)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x10239*x10243))+((r12*x10237))+((x10236*x10238))+(((-1.0)*sj2*x10240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10247 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10247.valid){
continue;
}
CheckValue<IkReal> x10248=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10247.value)+(((1.5707963267949)*(x10248.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10249=IKcos(j4);
IkReal x10250=IKsin(j4);
IkReal x10251=(gconst4*r11);
IkReal x10252=(gconst5*r10);
IkReal x10253=((1.0)*cj1);
IkReal x10254=(gconst5*r00);
IkReal x10255=(gconst5*r20);
IkReal x10256=((1.0)*x10249);
IkReal x10257=(gconst4*x10249);
IkReal x10258=((1.0)*x10250);
IkReal x10259=(gconst4*x10250);
evalcond[0]=((((-1.0)*x10254*x10256))+((r02*x10250))+((r01*x10257)));
evalcond[1]=((((-1.0)*x10255*x10258))+((r21*x10259))+(((-1.0)*r22*x10256)));
evalcond[2]=((((-1.0)*x10252*x10258))+(((-1.0)*r12*x10256))+((x10250*x10251)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10256))+(((-1.0)*x10254*x10258))+((r01*x10259)));
evalcond[4]=(((r22*x10250))+(((-1.0)*x10255*x10256))+(((-1.0)*cj2*x10253))+((sj1*sj2))+((r21*x10257)));
evalcond[5]=(((r12*x10250))+(((-1.0)*x10252*x10256))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10253))+((x10249*x10251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10260=((-1.0)*r21);
CheckValue<IkReal> x10263 = IKatan2WithCheck(IkReal(x10260),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10263.valid){
continue;
}
IkReal x10261=((1.0)*(x10263.value));
IkReal x10262=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10261)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10261)));
IkReal gconst4=(x10260*x10262);
IkReal gconst5=((1.0)*r20*x10262);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10264=((-1.0)*r21);
CheckValue<IkReal> x10267 = IKatan2WithCheck(IkReal(x10264),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10267.valid){
continue;
}
IkReal x10265=((1.0)*(x10267.value));
IkReal x10266=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10265)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10265)));
IkReal gconst4=(x10264*x10266);
IkReal gconst5=((1.0)*r20*x10266);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10268=((-1.0)*r21);
CheckValue<IkReal> x10271 = IKatan2WithCheck(IkReal(x10268),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10271.valid){
continue;
}
IkReal x10269=((1.0)*(x10271.value));
IkReal x10270=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10269)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10269)));
IkReal gconst4=(x10268*x10270);
IkReal gconst5=((1.0)*r20*x10270);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10272=(gconst4*r01);
IkReal x10273=(gconst5*r00);
CheckValue<IkReal> x10274 = IKatan2WithCheck(IkReal((x10272+(((-1.0)*x10273)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10274.valid){
continue;
}
CheckValue<IkReal> x10275=IKPowWithIntegerCheck(IKsign(((x10272*x10272)+(((-2.0)*x10272*x10273))+(x10273*x10273)+(r02*r02))),-1);
if(!x10275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10274.value)+(((1.5707963267949)*(x10275.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10276=IKcos(j4);
IkReal x10277=IKsin(j4);
IkReal x10278=(gconst4*r11);
IkReal x10279=(gconst5*r10);
IkReal x10280=(gconst5*r00);
IkReal x10281=(gconst5*r20);
IkReal x10282=((1.0)*x10276);
IkReal x10283=(gconst4*x10276);
IkReal x10284=((1.0)*x10277);
IkReal x10285=(gconst4*x10277);
evalcond[0]=(((r01*x10283))+((r02*x10277))+(((-1.0)*x10280*x10282)));
evalcond[1]=((((-1.0)*x10281*x10284))+(((-1.0)*r22*x10282))+((r21*x10285)));
evalcond[2]=(((x10277*x10278))+(((-1.0)*r12*x10282))+(((-1.0)*x10279*x10284)));
evalcond[3]=((-1.0)+((r01*x10285))+(((-1.0)*r02*x10282))+(((-1.0)*x10280*x10284)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10281*x10282))+((cj1*sj2))+((r21*x10283))+((r22*x10277)));
evalcond[5]=(((r12*x10277))+((x10276*x10278))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10279*x10282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10286=((1.0)*gconst5);
CheckValue<IkReal> x10287 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10286)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10287.valid){
continue;
}
CheckValue<IkReal> x10288=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10286))+(((-1.0)*gconst4*r10)))),-1);
if(!x10288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10287.value)+(((1.5707963267949)*(x10288.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10289=IKcos(j4);
IkReal x10290=IKsin(j4);
IkReal x10291=(gconst4*r11);
IkReal x10292=(gconst5*r10);
IkReal x10293=(gconst5*r00);
IkReal x10294=(gconst5*r20);
IkReal x10295=((1.0)*x10289);
IkReal x10296=(gconst4*x10289);
IkReal x10297=((1.0)*x10290);
IkReal x10298=(gconst4*x10290);
evalcond[0]=((((-1.0)*x10293*x10295))+((r02*x10290))+((r01*x10296)));
evalcond[1]=((((-1.0)*x10294*x10297))+((r21*x10298))+(((-1.0)*r22*x10295)));
evalcond[2]=((((-1.0)*x10292*x10297))+(((-1.0)*r12*x10295))+((x10290*x10291)));
evalcond[3]=((-1.0)+(((-1.0)*x10293*x10297))+(((-1.0)*r02*x10295))+((r01*x10298)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10294*x10295))+((cj1*sj2))+((r21*x10296))+((r22*x10290)));
evalcond[5]=(((x10289*x10291))+(((-1.0)*x10292*x10295))+((r12*x10290))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10299 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10299.valid){
continue;
}
CheckValue<IkReal> x10300=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10299.value)+(((1.5707963267949)*(x10300.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10301=IKcos(j4);
IkReal x10302=IKsin(j4);
IkReal x10303=(gconst4*r11);
IkReal x10304=(gconst5*r10);
IkReal x10305=(gconst5*r00);
IkReal x10306=(gconst5*r20);
IkReal x10307=((1.0)*x10301);
IkReal x10308=(gconst4*x10301);
IkReal x10309=((1.0)*x10302);
IkReal x10310=(gconst4*x10302);
evalcond[0]=(((r02*x10302))+(((-1.0)*x10305*x10307))+((r01*x10308)));
evalcond[1]=((((-1.0)*r22*x10307))+((r21*x10310))+(((-1.0)*x10306*x10309)));
evalcond[2]=((((-1.0)*r12*x10307))+(((-1.0)*x10304*x10309))+((x10302*x10303)));
evalcond[3]=((-1.0)+(((-1.0)*x10305*x10309))+((r01*x10310))+(((-1.0)*r02*x10307)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x10308))+(((-1.0)*x10306*x10307))+((r22*x10302)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10304*x10307))+((r12*x10302))+((x10301*x10303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10311=((-1.0)*r21);
CheckValue<IkReal> x10314 = IKatan2WithCheck(IkReal(x10311),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10314.valid){
continue;
}
IkReal x10312=((1.0)*(x10314.value));
IkReal x10313=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10312)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10312)));
IkReal gconst4=(x10311*x10313);
IkReal gconst5=((1.0)*r20*x10313);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10315=((-1.0)*r21);
CheckValue<IkReal> x10318 = IKatan2WithCheck(IkReal(x10315),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10318.valid){
continue;
}
IkReal x10316=((1.0)*(x10318.value));
IkReal x10317=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10316)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10316)));
IkReal gconst4=(x10315*x10317);
IkReal gconst5=((1.0)*r20*x10317);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10319=((-1.0)*r21);
CheckValue<IkReal> x10322 = IKatan2WithCheck(IkReal(x10319),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10322.valid){
continue;
}
IkReal x10320=((1.0)*(x10322.value));
IkReal x10321=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10320)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10320)));
IkReal gconst4=(x10319*x10321);
IkReal gconst5=((1.0)*r20*x10321);
IkReal x10323=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10327=IKPowWithIntegerCheck(x10323,-1);
if(!x10327.valid){
continue;
}
IkReal x10324=x10327.value;
IkReal x10325=((1.0)*x10324);
IkReal x10326=((((-1.0)*x10325*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10324))+(((-1.0)*x10325*(r00*r00)*(r20*r20))));
j4eval[0]=x10326;
j4eval[1]=r02;
j4eval[2]=x10323;
j4eval[3]=IKsign(x10326);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10328=(gconst5*r00);
IkReal x10329=(gconst4*r01);
CheckValue<IkReal> x10330=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x10328*x10328)))+(((2.0)*x10328*x10329))+(((-1.0)*(x10329*x10329))))),-1);
if(!x10330.valid){
continue;
}
CheckValue<IkReal> x10331 = IKatan2WithCheck(IkReal(((((-1.0)*x10329))+x10328)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10330.value)))+(x10331.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10332=IKsin(j4);
IkReal x10333=IKcos(j4);
IkReal x10334=(gconst4*r11);
IkReal x10335=(gconst5*r10);
IkReal x10336=(gconst4*r01);
IkReal x10337=(gconst5*r00);
IkReal x10338=(gconst4*r21);
IkReal x10339=(gconst5*r20);
IkReal x10340=((1.0)*x10333);
IkReal x10341=((1.0)*x10332);
evalcond[0]=((((-1.0)*x10339*x10341))+(((-1.0)*r22*x10340))+((x10332*x10338)));
evalcond[1]=((((-1.0)*r12*x10340))+(((-1.0)*x10335*x10341))+((x10332*x10334)));
evalcond[2]=((((-1.0)*r02*x10341))+(((-1.0)*x10336*x10340))+((x10333*x10337)));
evalcond[3]=((-1.0)+(((-1.0)*x10337*x10341))+(((-1.0)*r02*x10340))+((x10332*x10336)));
evalcond[4]=((((-1.0)*x10338*x10340))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10341))+((x10333*x10339)));
evalcond[5]=((((-1.0)*r12*x10341))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10334*x10340))+((x10333*x10335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10342=((1.0)*gconst5);
CheckValue<IkReal> x10343 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10342)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10343.valid){
continue;
}
CheckValue<IkReal> x10344=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10342))+(((-1.0)*gconst4*r10)))),-1);
if(!x10344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10343.value)+(((1.5707963267949)*(x10344.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10345=IKsin(j4);
IkReal x10346=IKcos(j4);
IkReal x10347=(gconst4*r11);
IkReal x10348=(gconst5*r10);
IkReal x10349=(gconst4*r01);
IkReal x10350=(gconst5*r00);
IkReal x10351=(gconst4*r21);
IkReal x10352=(gconst5*r20);
IkReal x10353=((1.0)*x10346);
IkReal x10354=((1.0)*x10345);
evalcond[0]=((((-1.0)*r22*x10353))+(((-1.0)*x10352*x10354))+((x10345*x10351)));
evalcond[1]=(((x10345*x10347))+(((-1.0)*x10348*x10354))+(((-1.0)*r12*x10353)));
evalcond[2]=(((x10346*x10350))+(((-1.0)*x10349*x10353))+(((-1.0)*r02*x10354)));
evalcond[3]=((-1.0)+((x10345*x10349))+(((-1.0)*x10350*x10354))+(((-1.0)*r02*x10353)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10354))+(((-1.0)*x10351*x10353))+((x10346*x10352)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10346*x10348))+(((-1.0)*r12*x10354))+(((-1.0)*x10347*x10353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10355 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10355.valid){
continue;
}
CheckValue<IkReal> x10356=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10355.value)+(((1.5707963267949)*(x10356.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10357=IKsin(j4);
IkReal x10358=IKcos(j4);
IkReal x10359=(gconst4*r11);
IkReal x10360=(gconst5*r10);
IkReal x10361=(gconst4*r01);
IkReal x10362=(gconst5*r00);
IkReal x10363=(gconst4*r21);
IkReal x10364=(gconst5*r20);
IkReal x10365=((1.0)*x10358);
IkReal x10366=((1.0)*x10357);
evalcond[0]=(((x10357*x10363))+(((-1.0)*x10364*x10366))+(((-1.0)*r22*x10365)));
evalcond[1]=((((-1.0)*x10360*x10366))+(((-1.0)*r12*x10365))+((x10357*x10359)));
evalcond[2]=((((-1.0)*x10361*x10365))+(((-1.0)*r02*x10366))+((x10358*x10362)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10365))+((x10357*x10361))+(((-1.0)*x10362*x10366)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10363*x10365))+((x10358*x10364))+(((-1.0)*r22*x10366)));
evalcond[5]=((((-1.0)*x10359*x10365))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10358*x10360))+(((-1.0)*r12*x10366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10367=gconst4*gconst4;
IkReal x10368=gconst5*gconst5;
IkReal x10369=(r01*r20);
IkReal x10370=(gconst4*sj3);
IkReal x10371=(r01*r21);
IkReal x10372=((1.0)*cj3);
IkReal x10373=(r00*r21);
IkReal x10374=(r00*r20);
IkReal x10375=(cj3*gconst4*gconst5);
IkReal x10376=((1.0)*x10368);
CheckValue<IkReal> x10377 = IKatan2WithCheck(IkReal((((r00*r22*x10370))+((gconst5*r01*r22*sj3)))),IkReal((((sj3*x10367*x10373))+(((-1.0)*sj3*x10369*x10376))+(((-1.0)*gconst5*x10370*x10374))+((gconst5*x10370*x10371)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10377.valid){
continue;
}
CheckValue<IkReal> x10378=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x10372))+((x10373*x10375))+(((-1.0)*x10368*x10372*x10374))+(((-1.0)*x10367*x10371*x10372))+((x10369*x10375)))),-1);
if(!x10378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10377.value)+(((1.5707963267949)*(x10378.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10379=IKsin(j4);
IkReal x10380=IKcos(j4);
IkReal x10381=(sj1*sj2);
IkReal x10382=(gconst5*sj3);
IkReal x10383=(gconst4*r11);
IkReal x10384=(gconst5*r10);
IkReal x10385=((1.0)*cj1);
IkReal x10386=(gconst4*r01);
IkReal x10387=(cj2*sj1);
IkReal x10388=(gconst5*r00);
IkReal x10389=(gconst4*sj3);
IkReal x10390=(cj3*gconst5);
IkReal x10391=(cj3*gconst4);
IkReal x10392=(gconst4*r21);
IkReal x10393=(cj2*x10385);
IkReal x10394=((1.0)*x10380);
IkReal x10395=((1.0)*x10379);
IkReal x10396=(cj3*x10379);
IkReal x10397=(cj3*x10380);
evalcond[0]=((((-1.0)*gconst5*r20*x10395))+((x10379*x10392))+(((-1.0)*r22*x10394)));
evalcond[1]=((((-1.0)*x10384*x10395))+((x10379*x10383))+(((-1.0)*r12*x10394)));
evalcond[2]=((-1.0)+((x10379*x10386))+(((-1.0)*r02*x10394))+(((-1.0)*x10388*x10395)));
evalcond[3]=(((r02*x10396))+(((-1.0)*cj3*x10388*x10394))+((x10386*x10397))+((r00*x10389))+((r01*x10382)));
evalcond[4]=(((r01*x10390))+((r00*x10380*x10382))+(((-1.0)*sj3*x10386*x10394))+(((-1.0)*r02*sj3*x10395))+((r00*x10391)));
evalcond[5]=(((r21*x10380*x10391))+((r21*x10382))+((cj1*sj2))+((r22*x10396))+x10387+(((-1.0)*r20*x10390*x10394))+((r20*x10389)));
evalcond[6]=((((-1.0)*x10393))+((r11*x10382))+((r12*x10396))+((r10*x10389))+(((-1.0)*cj3*x10384*x10394))+x10381+((x10383*x10397)));
evalcond[7]=((((-1.0)*x10393))+((r21*x10390))+(((-1.0)*r22*sj3*x10395))+x10381+((r20*x10391))+((r20*x10380*x10382))+(((-1.0)*r21*x10389*x10394)));
evalcond[8]=(((r11*x10390))+(((-1.0)*sj3*x10383*x10394))+(((-1.0)*x10387))+((r10*x10391))+((r10*x10380*x10382))+(((-1.0)*r12*sj3*x10395))+(((-1.0)*sj2*x10385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10398=((1.0)*gconst5);
CheckValue<IkReal> x10399=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10398))+(((-1.0)*gconst4*r10)))),-1);
if(!x10399.valid){
continue;
}
CheckValue<IkReal> x10400 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10398))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10399.value)))+(x10400.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10401=IKsin(j4);
IkReal x10402=IKcos(j4);
IkReal x10403=(sj1*sj2);
IkReal x10404=(gconst5*sj3);
IkReal x10405=(gconst4*r11);
IkReal x10406=(gconst5*r10);
IkReal x10407=((1.0)*cj1);
IkReal x10408=(gconst4*r01);
IkReal x10409=(cj2*sj1);
IkReal x10410=(gconst5*r00);
IkReal x10411=(gconst4*sj3);
IkReal x10412=(cj3*gconst5);
IkReal x10413=(cj3*gconst4);
IkReal x10414=(gconst4*r21);
IkReal x10415=(cj2*x10407);
IkReal x10416=((1.0)*x10402);
IkReal x10417=((1.0)*x10401);
IkReal x10418=(cj3*x10401);
IkReal x10419=(cj3*x10402);
evalcond[0]=(((x10401*x10414))+(((-1.0)*gconst5*r20*x10417))+(((-1.0)*r22*x10416)));
evalcond[1]=(((x10401*x10405))+(((-1.0)*r12*x10416))+(((-1.0)*x10406*x10417)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x10416))+((x10401*x10408))+(((-1.0)*x10410*x10417)));
evalcond[3]=(((r00*x10411))+(((-1.0)*cj3*x10410*x10416))+((r01*x10404))+((x10408*x10419))+((r02*x10418)));
evalcond[4]=(((r00*x10413))+((r00*x10402*x10404))+((r01*x10412))+(((-1.0)*r02*sj3*x10417))+(((-1.0)*sj3*x10408*x10416)));
evalcond[5]=(((r21*x10404))+((r22*x10418))+((r21*x10402*x10413))+((cj1*sj2))+(((-1.0)*r20*x10412*x10416))+x10409+((r20*x10411)));
evalcond[6]=(((x10405*x10419))+(((-1.0)*x10415))+((r11*x10404))+(((-1.0)*cj3*x10406*x10416))+x10403+((r10*x10411))+((r12*x10418)));
evalcond[7]=(((r21*x10412))+(((-1.0)*r22*sj3*x10417))+(((-1.0)*x10415))+x10403+((r20*x10413))+((r20*x10402*x10404))+(((-1.0)*r21*x10411*x10416)));
evalcond[8]=((((-1.0)*sj3*x10405*x10416))+(((-1.0)*sj2*x10407))+(((-1.0)*r12*sj3*x10417))+((r11*x10412))+((r10*x10413))+((r10*x10402*x10404))+(((-1.0)*x10409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10420 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10420.valid){
continue;
}
CheckValue<IkReal> x10421=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10420.value)+(((1.5707963267949)*(x10421.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10422=IKsin(j4);
IkReal x10423=IKcos(j4);
IkReal x10424=(sj1*sj2);
IkReal x10425=(gconst5*sj3);
IkReal x10426=(gconst4*r11);
IkReal x10427=(gconst5*r10);
IkReal x10428=((1.0)*cj1);
IkReal x10429=(gconst4*r01);
IkReal x10430=(cj2*sj1);
IkReal x10431=(gconst5*r00);
IkReal x10432=(gconst4*sj3);
IkReal x10433=(cj3*gconst5);
IkReal x10434=(cj3*gconst4);
IkReal x10435=(gconst4*r21);
IkReal x10436=(cj2*x10428);
IkReal x10437=((1.0)*x10423);
IkReal x10438=((1.0)*x10422);
IkReal x10439=(cj3*x10422);
IkReal x10440=(cj3*x10423);
evalcond[0]=(((x10422*x10435))+(((-1.0)*gconst5*r20*x10438))+(((-1.0)*r22*x10437)));
evalcond[1]=((((-1.0)*x10427*x10438))+((x10422*x10426))+(((-1.0)*r12*x10437)));
evalcond[2]=((-1.0)+(((-1.0)*x10431*x10438))+((x10422*x10429))+(((-1.0)*r02*x10437)));
evalcond[3]=(((r01*x10425))+(((-1.0)*cj3*x10431*x10437))+((r02*x10439))+((x10429*x10440))+((r00*x10432)));
evalcond[4]=(((r00*x10423*x10425))+((r01*x10433))+(((-1.0)*r02*sj3*x10438))+(((-1.0)*sj3*x10429*x10437))+((r00*x10434)));
evalcond[5]=(((r22*x10439))+((cj1*sj2))+((r21*x10423*x10434))+x10430+(((-1.0)*r20*x10433*x10437))+((r20*x10432))+((r21*x10425)));
evalcond[6]=(((x10426*x10440))+(((-1.0)*cj3*x10427*x10437))+((r10*x10432))+((r12*x10439))+x10424+(((-1.0)*x10436))+((r11*x10425)));
evalcond[7]=((((-1.0)*r22*sj3*x10438))+(((-1.0)*r21*x10432*x10437))+((r20*x10423*x10425))+x10424+(((-1.0)*x10436))+((r20*x10434))+((r21*x10433)));
evalcond[8]=(((r10*x10423*x10425))+(((-1.0)*sj3*x10426*x10437))+(((-1.0)*r12*sj3*x10438))+(((-1.0)*sj2*x10428))+((r10*x10434))+(((-1.0)*x10430))+((r11*x10433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10441=((-1.0)*r21);
CheckValue<IkReal> x10444 = IKatan2WithCheck(IkReal(x10441),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10444.valid){
continue;
}
IkReal x10442=((1.0)*(x10444.value));
IkReal x10443=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10442)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10442)));
IkReal gconst4=(x10441*x10443);
IkReal gconst5=((1.0)*r20*x10443);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10445=((-1.0)*r21);
CheckValue<IkReal> x10448 = IKatan2WithCheck(IkReal(x10445),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10448.valid){
continue;
}
IkReal x10446=((1.0)*(x10448.value));
IkReal x10447=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10446)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10446)));
IkReal gconst4=(x10445*x10447);
IkReal gconst5=((1.0)*r20*x10447);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10449=((-1.0)*r21);
CheckValue<IkReal> x10452 = IKatan2WithCheck(IkReal(x10449),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10452.valid){
continue;
}
IkReal x10450=((1.0)*(x10452.value));
IkReal x10451=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10450)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10450)));
IkReal gconst4=(x10449*x10451);
IkReal gconst5=((1.0)*r20*x10451);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10453=((-1.0)*r21);
CheckValue<IkReal> x10456 = IKatan2WithCheck(IkReal(x10453),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10456.valid){
continue;
}
IkReal x10454=((1.0)*(x10456.value));
IkReal x10455=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10454)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10454)));
IkReal gconst4=(x10453*x10455);
IkReal gconst5=((1.0)*r20*x10455);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10457=((-1.0)*r21);
CheckValue<IkReal> x10460 = IKatan2WithCheck(IkReal(x10457),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10460.valid){
continue;
}
IkReal x10458=((1.0)*(x10460.value));
IkReal x10459=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10458)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10458)));
IkReal gconst4=(x10457*x10459);
IkReal gconst5=((1.0)*r20*x10459);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10461=((-1.0)*r21);
CheckValue<IkReal> x10464 = IKatan2WithCheck(IkReal(x10461),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10464.valid){
continue;
}
IkReal x10462=((1.0)*(x10464.value));
IkReal x10463=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10462)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10462)));
IkReal gconst4=(x10461*x10463);
IkReal gconst5=((1.0)*r20*x10463);
IkReal x10465=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10469=IKPowWithIntegerCheck(x10465,-1);
if(!x10469.valid){
continue;
}
IkReal x10466=x10469.value;
IkReal x10467=((1.0)*x10466);
IkReal x10468=((((-1.0)*(r12*r12)))+(((-1.0)*x10467*(r10*r10)*(r20*r20)))+(((-1.0)*x10467*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10466)));
j4eval[0]=x10468;
j4eval[1]=r12;
j4eval[2]=x10465;
j4eval[3]=IKsign(x10468);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10470=(gconst5*r10);
IkReal x10471=(gconst4*r11);
CheckValue<IkReal> x10472 = IKatan2WithCheck(IkReal(((((-1.0)*x10471))+x10470)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10472.valid){
continue;
}
CheckValue<IkReal> x10473=IKPowWithIntegerCheck(IKsign(((((2.0)*x10470*x10471))+(((-1.0)*(x10470*x10470)))+(((-1.0)*(x10471*x10471)))+(((-1.0)*(r12*r12))))),-1);
if(!x10473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10472.value)+(((1.5707963267949)*(x10473.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10474=IKsin(j4);
IkReal x10475=IKcos(j4);
IkReal x10476=(gconst4*r11);
IkReal x10477=(gconst5*r10);
IkReal x10478=(gconst4*r01);
IkReal x10479=(gconst5*r00);
IkReal x10480=(gconst4*r21);
IkReal x10481=(gconst5*r20);
IkReal x10482=((1.0)*x10475);
IkReal x10483=((1.0)*x10474);
evalcond[0]=(((x10474*x10480))+(((-1.0)*x10481*x10483))+(((-1.0)*r22*x10482)));
evalcond[1]=(((x10474*x10478))+(((-1.0)*x10479*x10483))+(((-1.0)*r02*x10482)));
evalcond[2]=((((-1.0)*x10476*x10482))+((x10475*x10477))+(((-1.0)*r12*x10483)));
evalcond[3]=((-1.0)+(((-1.0)*x10477*x10483))+((x10474*x10476))+(((-1.0)*r12*x10482)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10478*x10482))+((x10475*x10479))+(((-1.0)*r02*x10483)));
evalcond[5]=(((x10475*x10481))+(((-1.0)*r22*x10483))+(((-1.0)*x10480*x10482))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10484=((1.0)*gconst5);
CheckValue<IkReal> x10485=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10484))+(((-1.0)*gconst4*r20)))),-1);
if(!x10485.valid){
continue;
}
CheckValue<IkReal> x10486 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10484)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10485.value)))+(x10486.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10487=IKsin(j4);
IkReal x10488=IKcos(j4);
IkReal x10489=(gconst4*r11);
IkReal x10490=(gconst5*r10);
IkReal x10491=(gconst4*r01);
IkReal x10492=(gconst5*r00);
IkReal x10493=(gconst4*r21);
IkReal x10494=(gconst5*r20);
IkReal x10495=((1.0)*x10488);
IkReal x10496=((1.0)*x10487);
evalcond[0]=((((-1.0)*r22*x10495))+(((-1.0)*x10494*x10496))+((x10487*x10493)));
evalcond[1]=((((-1.0)*x10492*x10496))+(((-1.0)*r02*x10495))+((x10487*x10491)));
evalcond[2]=((((-1.0)*x10489*x10495))+(((-1.0)*r12*x10496))+((x10488*x10490)));
evalcond[3]=((-1.0)+(((-1.0)*x10490*x10496))+(((-1.0)*r12*x10495))+((x10487*x10489)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10491*x10495))+(((-1.0)*r02*x10496))+((x10488*x10492)));
evalcond[5]=((((-1.0)*r22*x10496))+(((-1.0)*x10493*x10495))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10488*x10494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10497=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10497.valid){
continue;
}
CheckValue<IkReal> x10498 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10497.value)))+(x10498.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10499=IKsin(j4);
IkReal x10500=IKcos(j4);
IkReal x10501=(gconst4*r11);
IkReal x10502=(gconst5*r10);
IkReal x10503=(gconst4*r01);
IkReal x10504=(gconst5*r00);
IkReal x10505=(gconst4*r21);
IkReal x10506=(gconst5*r20);
IkReal x10507=((1.0)*x10500);
IkReal x10508=((1.0)*x10499);
evalcond[0]=((((-1.0)*r22*x10507))+((x10499*x10505))+(((-1.0)*x10506*x10508)));
evalcond[1]=(((x10499*x10503))+(((-1.0)*x10504*x10508))+(((-1.0)*r02*x10507)));
evalcond[2]=((((-1.0)*x10501*x10507))+(((-1.0)*r12*x10508))+((x10500*x10502)));
evalcond[3]=((-1.0)+(((-1.0)*x10502*x10508))+((x10499*x10501))+(((-1.0)*r12*x10507)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10503*x10507))+((cj1*sj2))+((x10500*x10504))+(((-1.0)*r02*x10508)));
evalcond[5]=((((-1.0)*r22*x10508))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10500*x10506))+(((-1.0)*x10505*x10507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10509=((-1.0)*r21);
CheckValue<IkReal> x10512 = IKatan2WithCheck(IkReal(x10509),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10512.valid){
continue;
}
IkReal x10510=((1.0)*(x10512.value));
IkReal x10511=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10510)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10510)));
IkReal gconst4=(x10509*x10511);
IkReal gconst5=((1.0)*r20*x10511);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10513=((-1.0)*r21);
CheckValue<IkReal> x10516 = IKatan2WithCheck(IkReal(x10513),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10516.valid){
continue;
}
IkReal x10514=((1.0)*(x10516.value));
IkReal x10515=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10514)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10514)));
IkReal gconst4=(x10513*x10515);
IkReal gconst5=((1.0)*r20*x10515);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10517=((-1.0)*r21);
CheckValue<IkReal> x10520 = IKatan2WithCheck(IkReal(x10517),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10520.valid){
continue;
}
IkReal x10518=((1.0)*(x10520.value));
IkReal x10519=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10518)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10518)));
IkReal gconst4=(x10517*x10519);
IkReal gconst5=((1.0)*r20*x10519);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10521=(gconst5*r10);
IkReal x10522=(gconst4*r11);
CheckValue<IkReal> x10523=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10522*x10522)+(x10521*x10521)+(((-2.0)*x10521*x10522)))),-1);
if(!x10523.valid){
continue;
}
CheckValue<IkReal> x10524 = IKatan2WithCheck(IkReal(((((-1.0)*x10521))+x10522)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10524.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10523.value)))+(x10524.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10525=IKcos(j4);
IkReal x10526=IKsin(j4);
IkReal x10527=(gconst4*r11);
IkReal x10528=(gconst5*r10);
IkReal x10529=(gconst5*r00);
IkReal x10530=(gconst5*r20);
IkReal x10531=((1.0)*x10525);
IkReal x10532=(gconst4*x10525);
IkReal x10533=((1.0)*x10526);
IkReal x10534=(gconst4*x10526);
evalcond[0]=((((-1.0)*x10528*x10531))+((r12*x10526))+((x10525*x10527)));
evalcond[1]=((((-1.0)*r22*x10531))+((r21*x10534))+(((-1.0)*x10530*x10533)));
evalcond[2]=((((-1.0)*r02*x10531))+(((-1.0)*x10529*x10533))+((r01*x10534)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10531))+((x10526*x10527))+(((-1.0)*x10528*x10533)));
evalcond[4]=(((cj2*sj1))+((r02*x10526))+((cj1*sj2))+(((-1.0)*x10529*x10531))+((r01*x10532)));
evalcond[5]=(((r22*x10526))+((r21*x10532))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10530*x10531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10535=((1.0)*gconst5);
CheckValue<IkReal> x10536=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10535))+(((-1.0)*gconst4*r20)))),-1);
if(!x10536.valid){
continue;
}
CheckValue<IkReal> x10537 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10535)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10536.value)))+(x10537.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10538=IKcos(j4);
IkReal x10539=IKsin(j4);
IkReal x10540=(gconst4*r11);
IkReal x10541=(gconst5*r10);
IkReal x10542=(gconst5*r00);
IkReal x10543=(gconst5*r20);
IkReal x10544=((1.0)*x10538);
IkReal x10545=(gconst4*x10538);
IkReal x10546=((1.0)*x10539);
IkReal x10547=(gconst4*x10539);
evalcond[0]=(((x10538*x10540))+(((-1.0)*x10541*x10544))+((r12*x10539)));
evalcond[1]=((((-1.0)*x10543*x10546))+(((-1.0)*r22*x10544))+((r21*x10547)));
evalcond[2]=((((-1.0)*x10542*x10546))+(((-1.0)*r02*x10544))+((r01*x10547)));
evalcond[3]=((-1.0)+((x10539*x10540))+(((-1.0)*x10541*x10546))+(((-1.0)*r12*x10544)));
evalcond[4]=(((cj2*sj1))+((r02*x10539))+(((-1.0)*x10542*x10544))+((cj1*sj2))+((r01*x10545)));
evalcond[5]=((((-1.0)*x10543*x10544))+((r22*x10539))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10548=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10548.valid){
continue;
}
CheckValue<IkReal> x10549 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10548.value)))+(x10549.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10550=IKcos(j4);
IkReal x10551=IKsin(j4);
IkReal x10552=(gconst4*r11);
IkReal x10553=(gconst5*r10);
IkReal x10554=(gconst5*r00);
IkReal x10555=(gconst5*r20);
IkReal x10556=((1.0)*x10550);
IkReal x10557=(gconst4*x10550);
IkReal x10558=((1.0)*x10551);
IkReal x10559=(gconst4*x10551);
evalcond[0]=(((x10550*x10552))+((r12*x10551))+(((-1.0)*x10553*x10556)));
evalcond[1]=(((r21*x10559))+(((-1.0)*x10555*x10558))+(((-1.0)*r22*x10556)));
evalcond[2]=((((-1.0)*x10554*x10558))+(((-1.0)*r02*x10556))+((r01*x10559)));
evalcond[3]=((-1.0)+((x10551*x10552))+(((-1.0)*r12*x10556))+(((-1.0)*x10553*x10558)));
evalcond[4]=((((-1.0)*x10554*x10556))+((cj2*sj1))+((r02*x10551))+((cj1*sj2))+((r01*x10557)));
evalcond[5]=(((r22*x10551))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10557))+(((-1.0)*x10555*x10556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10560=((-1.0)*r21);
CheckValue<IkReal> x10563 = IKatan2WithCheck(IkReal(x10560),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10563.valid){
continue;
}
IkReal x10561=((1.0)*(x10563.value));
IkReal x10562=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10561)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10561)));
IkReal gconst4=(x10560*x10562);
IkReal gconst5=((1.0)*r20*x10562);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10564=((-1.0)*r21);
CheckValue<IkReal> x10567 = IKatan2WithCheck(IkReal(x10564),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10567.valid){
continue;
}
IkReal x10565=((1.0)*(x10567.value));
IkReal x10566=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10565)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10565)));
IkReal gconst4=(x10564*x10566);
IkReal gconst5=((1.0)*r20*x10566);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10568=((-1.0)*r21);
CheckValue<IkReal> x10571 = IKatan2WithCheck(IkReal(x10568),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10571.valid){
continue;
}
IkReal x10569=((1.0)*(x10571.value));
IkReal x10570=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10569)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10569)));
IkReal gconst4=(x10568*x10570);
IkReal gconst5=((1.0)*r20*x10570);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10572=(gconst5*r10);
IkReal x10573=(gconst4*r11);
CheckValue<IkReal> x10574 = IKatan2WithCheck(IkReal(((((-1.0)*x10572))+x10573)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10574.valid){
continue;
}
CheckValue<IkReal> x10575=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10572*x10573))+(r12*r12)+(x10573*x10573)+(x10572*x10572))),-1);
if(!x10575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10574.value)+(((1.5707963267949)*(x10575.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10576=IKcos(j4);
IkReal x10577=IKsin(j4);
IkReal x10578=(gconst5*r10);
IkReal x10579=(gconst5*r00);
IkReal x10580=(gconst5*r20);
IkReal x10581=((1.0)*x10576);
IkReal x10582=(gconst4*x10577);
IkReal x10583=(gconst4*x10576);
IkReal x10584=((1.0)*x10577);
evalcond[0]=((((-1.0)*x10578*x10581))+((r11*x10583))+((r12*x10577)));
evalcond[1]=((((-1.0)*r22*x10581))+((r21*x10582))+(((-1.0)*x10580*x10584)));
evalcond[2]=((((-1.0)*r02*x10581))+(((-1.0)*x10579*x10584))+((r01*x10582)));
evalcond[3]=((-1.0)+(((-1.0)*x10578*x10584))+((r11*x10582))+(((-1.0)*r12*x10581)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x10583))+((r22*x10577))+(((-1.0)*x10580*x10581)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x10577))+((cj1*cj2))+(((-1.0)*x10579*x10581))+((r01*x10583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10585=((1.0)*gconst5);
CheckValue<IkReal> x10586=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10585))+(((-1.0)*gconst4*r20)))),-1);
if(!x10586.valid){
continue;
}
CheckValue<IkReal> x10587 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10585))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10586.value)))+(x10587.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10588=IKcos(j4);
IkReal x10589=IKsin(j4);
IkReal x10590=(gconst5*r10);
IkReal x10591=(gconst5*r00);
IkReal x10592=(gconst5*r20);
IkReal x10593=((1.0)*x10588);
IkReal x10594=(gconst4*x10589);
IkReal x10595=(gconst4*x10588);
IkReal x10596=((1.0)*x10589);
evalcond[0]=(((r12*x10589))+((r11*x10595))+(((-1.0)*x10590*x10593)));
evalcond[1]=(((r21*x10594))+(((-1.0)*x10592*x10596))+(((-1.0)*r22*x10593)));
evalcond[2]=((((-1.0)*r02*x10593))+((r01*x10594))+(((-1.0)*x10591*x10596)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10593))+((r11*x10594))+(((-1.0)*x10590*x10596)));
evalcond[4]=(((r21*x10595))+(((-1.0)*x10592*x10593))+((cj2*sj1))+((cj1*sj2))+((r22*x10589)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x10595))+(((-1.0)*x10591*x10593))+((r02*x10589))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10597=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10597.valid){
continue;
}
CheckValue<IkReal> x10598 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10597.value)))+(x10598.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10599=IKcos(j4);
IkReal x10600=IKsin(j4);
IkReal x10601=(gconst5*r10);
IkReal x10602=(gconst5*r00);
IkReal x10603=(gconst5*r20);
IkReal x10604=((1.0)*x10599);
IkReal x10605=(gconst4*x10600);
IkReal x10606=(gconst4*x10599);
IkReal x10607=((1.0)*x10600);
evalcond[0]=(((r11*x10606))+((r12*x10600))+(((-1.0)*x10601*x10604)));
evalcond[1]=(((r21*x10605))+(((-1.0)*r22*x10604))+(((-1.0)*x10603*x10607)));
evalcond[2]=(((r01*x10605))+(((-1.0)*r02*x10604))+(((-1.0)*x10602*x10607)));
evalcond[3]=((-1.0)+((r11*x10605))+(((-1.0)*r12*x10604))+(((-1.0)*x10601*x10607)));
evalcond[4]=(((cj2*sj1))+((r21*x10606))+((cj1*sj2))+((r22*x10600))+(((-1.0)*x10603*x10604)));
evalcond[5]=(((r01*x10606))+((r02*x10600))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x10602*x10604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10608=((-1.0)*r21);
CheckValue<IkReal> x10611 = IKatan2WithCheck(IkReal(x10608),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10611.valid){
continue;
}
IkReal x10609=((1.0)*(x10611.value));
IkReal x10610=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10609)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10609)));
IkReal gconst4=(x10608*x10610);
IkReal gconst5=((1.0)*r20*x10610);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10612=((-1.0)*r21);
CheckValue<IkReal> x10615 = IKatan2WithCheck(IkReal(x10612),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10615.valid){
continue;
}
IkReal x10613=((1.0)*(x10615.value));
IkReal x10614=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10613)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10613)));
IkReal gconst4=(x10612*x10614);
IkReal gconst5=((1.0)*r20*x10614);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10616=((-1.0)*r21);
CheckValue<IkReal> x10619 = IKatan2WithCheck(IkReal(x10616),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10619.valid){
continue;
}
IkReal x10617=((1.0)*(x10619.value));
IkReal x10618=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10617)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10617)));
IkReal gconst4=(x10616*x10618);
IkReal gconst5=((1.0)*r20*x10618);
IkReal x10620=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10624=IKPowWithIntegerCheck(x10620,-1);
if(!x10624.valid){
continue;
}
IkReal x10621=x10624.value;
IkReal x10622=((1.0)*x10621);
IkReal x10623=((((-1.0)*x10622*(r10*r10)*(r20*r20)))+(((-1.0)*x10622*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10621))+(((-1.0)*(r12*r12))));
j4eval[0]=x10623;
j4eval[1]=r12;
j4eval[2]=x10620;
j4eval[3]=IKsign(x10623);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10625=(gconst5*r10);
IkReal x10626=(gconst4*r11);
CheckValue<IkReal> x10627 = IKatan2WithCheck(IkReal(((((-1.0)*x10626))+x10625)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10627.valid){
continue;
}
CheckValue<IkReal> x10628=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10625*x10625)))+(((-1.0)*(x10626*x10626)))+(((-1.0)*(r12*r12)))+(((2.0)*x10625*x10626)))),-1);
if(!x10628.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10627.value)+(((1.5707963267949)*(x10628.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10629=IKsin(j4);
IkReal x10630=IKcos(j4);
IkReal x10631=(gconst4*r11);
IkReal x10632=(gconst5*r10);
IkReal x10633=(gconst5*r00);
IkReal x10634=(gconst5*r20);
IkReal x10635=((1.0)*x10630);
IkReal x10636=(gconst4*x10629);
IkReal x10637=((1.0)*x10629);
evalcond[0]=((((-1.0)*x10634*x10637))+(((-1.0)*r22*x10635))+((r21*x10636)));
evalcond[1]=((((-1.0)*r02*x10635))+((r01*x10636))+(((-1.0)*x10633*x10637)));
evalcond[2]=((((-1.0)*x10631*x10635))+(((-1.0)*r12*x10637))+((x10630*x10632)));
evalcond[3]=((-1.0)+(((-1.0)*x10632*x10637))+(((-1.0)*r12*x10635))+((x10629*x10631)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10635))+(((-1.0)*r22*x10637))+((x10630*x10634)));
evalcond[5]=((((-1.0)*r02*x10637))+(((-1.0)*gconst4*r01*x10635))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x10630*x10633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10638=((1.0)*gconst5);
CheckValue<IkReal> x10639 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10638))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10639.valid){
continue;
}
CheckValue<IkReal> x10640=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10638))+(((-1.0)*gconst4*r20)))),-1);
if(!x10640.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10639.value)+(((1.5707963267949)*(x10640.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10641=IKsin(j4);
IkReal x10642=IKcos(j4);
IkReal x10643=(gconst4*r11);
IkReal x10644=(gconst5*r10);
IkReal x10645=(gconst5*r00);
IkReal x10646=(gconst5*r20);
IkReal x10647=((1.0)*x10642);
IkReal x10648=(gconst4*x10641);
IkReal x10649=((1.0)*x10641);
evalcond[0]=(((r21*x10648))+(((-1.0)*r22*x10647))+(((-1.0)*x10646*x10649)));
evalcond[1]=((((-1.0)*r02*x10647))+((r01*x10648))+(((-1.0)*x10645*x10649)));
evalcond[2]=(((x10642*x10644))+(((-1.0)*r12*x10649))+(((-1.0)*x10643*x10647)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10647))+(((-1.0)*x10644*x10649))+((x10641*x10643)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10642*x10646))+(((-1.0)*r22*x10649))+(((-1.0)*gconst4*r21*x10647)));
evalcond[5]=((((-1.0)*r02*x10649))+(((-1.0)*sj1*sj2))+((x10642*x10645))+(((-1.0)*gconst4*r01*x10647))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10650=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10650.valid){
continue;
}
CheckValue<IkReal> x10651 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10650.value)))+(x10651.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10652=IKsin(j4);
IkReal x10653=IKcos(j4);
IkReal x10654=(gconst4*r11);
IkReal x10655=(gconst5*r10);
IkReal x10656=(gconst5*r00);
IkReal x10657=(gconst5*r20);
IkReal x10658=((1.0)*x10653);
IkReal x10659=(gconst4*x10652);
IkReal x10660=((1.0)*x10652);
evalcond[0]=((((-1.0)*r22*x10658))+(((-1.0)*x10657*x10660))+((r21*x10659)));
evalcond[1]=((((-1.0)*r02*x10658))+(((-1.0)*x10656*x10660))+((r01*x10659)));
evalcond[2]=(((x10653*x10655))+(((-1.0)*x10654*x10658))+(((-1.0)*r12*x10660)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10658))+(((-1.0)*x10655*x10660))+((x10652*x10654)));
evalcond[4]=((((-1.0)*gconst4*r21*x10658))+((cj2*sj1))+((x10653*x10657))+((cj1*sj2))+(((-1.0)*r22*x10660)));
evalcond[5]=(((x10653*x10656))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x10660))+(((-1.0)*gconst4*r01*x10658))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10661=((-1.0)*r21);
IkReal x10662=((-1.0)*px);
CheckValue<IkReal> x10664 = IKatan2WithCheck(IkReal(x10661),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10664.valid){
continue;
}
IkReal x10663=((1.0)*(x10664.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10663)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10662);
rxp1_1=(px*r21);
rxp1_2=(r11*x10662);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10663)));
IkReal gconst4=x10661;
IkReal gconst5=((1.0)*r20);
IkReal x10665=((1.0)*r11*r21);
IkReal x10666=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10665))+(((-1.0)*x10666)));
j4eval[1]=(((sj3*x10666))+((sj3*x10665)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10667=((-1.0)*r21);
IkReal x10668=((-1.0)*px);
CheckValue<IkReal> x10670 = IKatan2WithCheck(IkReal(x10667),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10670.valid){
continue;
}
IkReal x10669=((1.0)*(x10670.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10669)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10668);
rxp1_1=(px*r21);
rxp1_2=(r11*x10668);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10669)));
IkReal gconst4=x10667;
IkReal gconst5=((1.0)*r20);
IkReal x10671=((1.0)*cj3);
IkReal x10672=(r10*r20);
IkReal x10673=(r11*r21);
j4eval[0]=((((-1.0)*x10673))+(((-1.0)*x10672)));
j4eval[1]=((((-1.0)*x10671*x10673))+(((-1.0)*x10671*x10672)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10674=((-1.0)*r21);
IkReal x10675=((-1.0)*px);
CheckValue<IkReal> x10677 = IKatan2WithCheck(IkReal(x10674),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10677.valid){
continue;
}
IkReal x10676=((1.0)*(x10677.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10676)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10675);
rxp1_1=(px*r21);
rxp1_2=(r11*x10675);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10676)));
IkReal gconst4=x10674;
IkReal gconst5=((1.0)*r20);
IkReal x10678=((1.0)*sj3);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=(((r11*r21*x10678))+((r10*r20*x10678)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10679=((1.0)*r11);
CheckValue<IkReal> x10680=IKPowWithIntegerCheck(r02,-1);
if(!x10680.valid){
continue;
}
CheckValue<IkReal> x10681=IKPowWithIntegerCheck(sj3,-1);
if(!x10681.valid){
continue;
}
CheckValue<IkReal> x10682=IKPowWithIntegerCheck(((((-1.0)*gconst4*sj3*x10679))+((gconst5*r10*sj3))),-1);
if(!x10682.valid){
continue;
}
if( IKabs(((x10680.value)*(x10681.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10682.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*gconst5*x10679)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10680.value)*(x10681.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x10682.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*gconst5*x10679))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10680.value)*(x10681.value)*((((cj2*sj1))+((cj1*sj2))))), ((x10682.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*gconst5*x10679))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10683=IKsin(j4);
IkReal x10684=IKcos(j4);
IkReal x10685=(cj2*sj1);
IkReal x10686=(cj1*sj2);
IkReal x10687=(gconst5*sj3);
IkReal x10688=(gconst4*r11);
IkReal x10689=(sj1*sj2);
IkReal x10690=((1.0)*gconst5);
IkReal x10691=(cj1*cj2);
IkReal x10692=(gconst4*r21);
IkReal x10693=(cj3*gconst4);
IkReal x10694=(gconst4*sj3);
IkReal x10695=(cj3*gconst5);
IkReal x10696=(r20*x10684);
IkReal x10697=(r10*x10684);
IkReal x10698=(cj3*x10684);
IkReal x10699=(r02*x10683);
IkReal x10700=(x10685+x10686);
IkReal x10701=((1.0)*sj3*x10684);
evalcond[0]=((-1.0)*r02*x10684);
evalcond[1]=((((-1.0)*r20*x10683*x10690))+((x10683*x10692)));
evalcond[2]=((((-1.0)*sj3*x10699))+x10700);
evalcond[3]=(((cj3*x10699))+(((-1.0)*x10689))+x10691);
evalcond[4]=((-1.0)+((x10683*x10688))+(((-1.0)*r10*x10683*x10690)));
evalcond[5]=(((r10*x10693))+((r11*x10695))+(((-1.0)*x10688*x10701))+((x10687*x10697)));
evalcond[6]=(((r10*x10694))+((r11*x10687))+(((-1.0)*cj3*x10690*x10697))+((x10688*x10698)));
evalcond[7]=(((x10692*x10698))+x10700+((r21*x10687))+(((-1.0)*cj3*x10690*x10696))+((r20*x10694)));
evalcond[8]=(((r21*x10695))+(((-1.0)*x10691))+(((-1.0)*x10692*x10701))+x10689+((r20*x10693))+((x10687*x10696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10702=((1.0)*sj3);
IkReal x10703=(gconst4*r11);
IkReal x10704=((1.0)*gconst5*r10);
CheckValue<IkReal> x10705=IKPowWithIntegerCheck((x10703+(((-1.0)*x10704))),-1);
if(!x10705.valid){
continue;
}
CheckValue<IkReal> x10706=IKPowWithIntegerCheck(((((-1.0)*cj3*x10704))+((cj3*x10703))),-1);
if(!x10706.valid){
continue;
}
if( IKabs(x10705.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10706.value)*(((((-1.0)*gconst5*r11*x10702))+(((-1.0)*gconst4*r10*x10702)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10705.value)+IKsqr(((x10706.value)*(((((-1.0)*gconst5*r11*x10702))+(((-1.0)*gconst4*r10*x10702))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10705.value, ((x10706.value)*(((((-1.0)*gconst5*r11*x10702))+(((-1.0)*gconst4*r10*x10702))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10707=IKsin(j4);
IkReal x10708=IKcos(j4);
IkReal x10709=(cj2*sj1);
IkReal x10710=(cj1*sj2);
IkReal x10711=(gconst5*sj3);
IkReal x10712=(gconst4*r11);
IkReal x10713=(sj1*sj2);
IkReal x10714=((1.0)*gconst5);
IkReal x10715=(cj1*cj2);
IkReal x10716=(gconst4*r21);
IkReal x10717=(cj3*gconst4);
IkReal x10718=(gconst4*sj3);
IkReal x10719=(cj3*gconst5);
IkReal x10720=(r20*x10708);
IkReal x10721=(r10*x10708);
IkReal x10722=(cj3*x10708);
IkReal x10723=(r02*x10707);
IkReal x10724=(x10709+x10710);
IkReal x10725=((1.0)*sj3*x10708);
evalcond[0]=((-1.0)*r02*x10708);
evalcond[1]=((((-1.0)*r20*x10707*x10714))+((x10707*x10716)));
evalcond[2]=(x10724+(((-1.0)*sj3*x10723)));
evalcond[3]=((((-1.0)*x10713))+x10715+((cj3*x10723)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x10707*x10714))+((x10707*x10712)));
evalcond[5]=(((r11*x10719))+((x10711*x10721))+((r10*x10717))+(((-1.0)*x10712*x10725)));
evalcond[6]=(((r11*x10711))+((x10712*x10722))+((r10*x10718))+(((-1.0)*cj3*x10714*x10721)));
evalcond[7]=(((x10716*x10722))+((r20*x10718))+((r21*x10711))+x10724+(((-1.0)*cj3*x10714*x10720)));
evalcond[8]=((((-1.0)*x10716*x10725))+(((-1.0)*x10715))+((r20*x10717))+((r21*x10719))+((x10711*x10720))+x10713);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10726=((1.0)*gconst5);
IkReal x10727=(gconst4*r11);
CheckValue<IkReal> x10728=IKPowWithIntegerCheck(((((-1.0)*r10*x10726))+x10727),-1);
if(!x10728.valid){
continue;
}
CheckValue<IkReal> x10729=IKPowWithIntegerCheck((((gconst5*r10*sj3))+(((-1.0)*sj3*x10727))),-1);
if(!x10729.valid){
continue;
}
if( IKabs(x10728.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10729.value)*(((((-1.0)*cj3*r11*x10726))+(((-1.0)*cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10728.value)+IKsqr(((x10729.value)*(((((-1.0)*cj3*r11*x10726))+(((-1.0)*cj3*gconst4*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10728.value, ((x10729.value)*(((((-1.0)*cj3*r11*x10726))+(((-1.0)*cj3*gconst4*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10730=IKsin(j4);
IkReal x10731=IKcos(j4);
IkReal x10732=(cj2*sj1);
IkReal x10733=(cj1*sj2);
IkReal x10734=(gconst5*sj3);
IkReal x10735=(gconst4*r11);
IkReal x10736=(sj1*sj2);
IkReal x10737=((1.0)*gconst5);
IkReal x10738=(cj1*cj2);
IkReal x10739=(gconst4*r21);
IkReal x10740=(cj3*gconst4);
IkReal x10741=(gconst4*sj3);
IkReal x10742=(cj3*gconst5);
IkReal x10743=(r20*x10731);
IkReal x10744=(r10*x10731);
IkReal x10745=(cj3*x10731);
IkReal x10746=(r02*x10730);
IkReal x10747=(x10732+x10733);
IkReal x10748=((1.0)*sj3*x10731);
evalcond[0]=((-1.0)*r02*x10731);
evalcond[1]=((((-1.0)*r20*x10730*x10737))+((x10730*x10739)));
evalcond[2]=((((-1.0)*sj3*x10746))+x10747);
evalcond[3]=(((cj3*x10746))+(((-1.0)*x10736))+x10738);
evalcond[4]=((-1.0)+((x10730*x10735))+(((-1.0)*r10*x10730*x10737)));
evalcond[5]=(((r10*x10740))+(((-1.0)*x10735*x10748))+((x10734*x10744))+((r11*x10742)));
evalcond[6]=(((r10*x10741))+((x10735*x10745))+(((-1.0)*cj3*x10737*x10744))+((r11*x10734)));
evalcond[7]=(((r21*x10734))+(((-1.0)*cj3*x10737*x10743))+((r20*x10741))+((x10739*x10745))+x10747);
evalcond[8]=(((x10734*x10743))+(((-1.0)*x10739*x10748))+((r20*x10740))+(((-1.0)*x10738))+x10736+((r21*x10742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10749=gconst4*gconst4;
IkReal x10750=gconst5*gconst5;
IkReal x10751=(r10*r21);
IkReal x10752=((1.0)*cj3);
IkReal x10753=(r11*r21);
IkReal x10754=(r11*r20);
IkReal x10755=(r22*sj3);
IkReal x10756=(gconst4*r10);
IkReal x10757=((1.0)*sj3);
IkReal x10758=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10759 = IKatan2WithCheck(IkReal((((gconst5*r11*x10755))+((x10755*x10756)))),IkReal((((sj3*x10749*x10751))+(((-1.0)*gconst5*r20*x10756*x10757))+(((-1.0)*x10750*x10754*x10757))+((gconst4*gconst5*sj3*x10753)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10759.valid){
continue;
}
CheckValue<IkReal> x10760=IKPowWithIntegerCheck(IKsign((((x10751*x10758))+(((-1.0)*x10749*x10752*x10753))+((x10754*x10758))+(((-1.0)*r12*r22*x10752))+(((-1.0)*r10*r20*x10750*x10752)))),-1);
if(!x10760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10759.value)+(((1.5707963267949)*(x10760.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10761=IKsin(j4);
IkReal x10762=IKcos(j4);
IkReal x10763=(cj2*sj1);
IkReal x10764=(cj1*sj2);
IkReal x10765=(gconst5*sj3);
IkReal x10766=(gconst4*r11);
IkReal x10767=(sj1*sj2);
IkReal x10768=(gconst5*r10);
IkReal x10769=(cj1*cj2);
IkReal x10770=(gconst4*r01);
IkReal x10771=(gconst4*r21);
IkReal x10772=(gconst5*r00);
IkReal x10773=(cj3*gconst5);
IkReal x10774=(gconst4*sj3);
IkReal x10775=(cj3*gconst4);
IkReal x10776=((1.0)*x10762);
IkReal x10777=((1.0)*x10761);
IkReal x10778=(cj3*x10761);
IkReal x10779=(cj3*x10762);
IkReal x10780=(x10763+x10764);
evalcond[0]=((((-1.0)*gconst5*r20*x10777))+((x10761*x10771))+(((-1.0)*r22*x10776)));
evalcond[1]=((((-1.0)*r02*x10776))+((x10761*x10770))+(((-1.0)*x10772*x10777)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10776))+((x10761*x10766))+(((-1.0)*x10768*x10777)));
evalcond[3]=(((r12*x10778))+((r11*x10765))+(((-1.0)*cj3*x10768*x10776))+((x10766*x10779))+((r10*x10774)));
evalcond[4]=(((r11*x10773))+(((-1.0)*sj3*x10766*x10776))+((r10*x10762*x10765))+(((-1.0)*r12*sj3*x10777))+((r10*x10775)));
evalcond[5]=((((-1.0)*r20*x10773*x10776))+((r20*x10774))+((x10771*x10779))+((r21*x10765))+((r22*x10778))+x10780);
evalcond[6]=((((-1.0)*sj3*x10770*x10776))+((r00*x10762*x10765))+(((-1.0)*r02*sj3*x10777))+((r00*x10775))+((r01*x10773))+x10780);
evalcond[7]=((((-1.0)*x10767))+((r01*x10765))+((r00*x10774))+((x10770*x10779))+(((-1.0)*cj3*x10772*x10776))+x10769+((r02*x10778)));
evalcond[8]=(((r20*x10762*x10765))+(((-1.0)*x10769))+((r20*x10775))+((r21*x10773))+(((-1.0)*sj3*x10771*x10776))+x10767+(((-1.0)*r22*sj3*x10777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10781=((1.0)*gconst5);
CheckValue<IkReal> x10782 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10781))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10782.valid){
continue;
}
CheckValue<IkReal> x10783=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10781))+(((-1.0)*gconst4*r20)))),-1);
if(!x10783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10782.value)+(((1.5707963267949)*(x10783.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10784=IKsin(j4);
IkReal x10785=IKcos(j4);
IkReal x10786=(cj2*sj1);
IkReal x10787=(cj1*sj2);
IkReal x10788=(gconst5*sj3);
IkReal x10789=(gconst4*r11);
IkReal x10790=(sj1*sj2);
IkReal x10791=(gconst5*r10);
IkReal x10792=(cj1*cj2);
IkReal x10793=(gconst4*r01);
IkReal x10794=(gconst4*r21);
IkReal x10795=(gconst5*r00);
IkReal x10796=(cj3*gconst5);
IkReal x10797=(gconst4*sj3);
IkReal x10798=(cj3*gconst4);
IkReal x10799=((1.0)*x10785);
IkReal x10800=((1.0)*x10784);
IkReal x10801=(cj3*x10784);
IkReal x10802=(cj3*x10785);
IkReal x10803=(x10787+x10786);
evalcond[0]=(((x10784*x10794))+(((-1.0)*gconst5*r20*x10800))+(((-1.0)*r22*x10799)));
evalcond[1]=((((-1.0)*x10795*x10800))+(((-1.0)*r02*x10799))+((x10784*x10793)));
evalcond[2]=((-1.0)+(((-1.0)*x10791*x10800))+(((-1.0)*r12*x10799))+((x10784*x10789)));
evalcond[3]=(((r10*x10797))+((r11*x10788))+(((-1.0)*cj3*x10791*x10799))+((r12*x10801))+((x10789*x10802)));
evalcond[4]=(((r10*x10798))+(((-1.0)*r12*sj3*x10800))+(((-1.0)*sj3*x10789*x10799))+((r11*x10796))+((r10*x10785*x10788)));
evalcond[5]=(((r21*x10788))+((r20*x10797))+((r22*x10801))+(((-1.0)*r20*x10796*x10799))+((x10794*x10802))+x10803);
evalcond[6]=(((r00*x10785*x10788))+(((-1.0)*r02*sj3*x10800))+(((-1.0)*sj3*x10793*x10799))+((r00*x10798))+((r01*x10796))+x10803);
evalcond[7]=((((-1.0)*cj3*x10795*x10799))+((r02*x10801))+((r01*x10788))+((x10793*x10802))+(((-1.0)*x10790))+((r00*x10797))+x10792);
evalcond[8]=(((r20*x10785*x10788))+(((-1.0)*sj3*x10794*x10799))+((r21*x10796))+((r20*x10798))+(((-1.0)*x10792))+x10790+(((-1.0)*r22*sj3*x10800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10804=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10804.valid){
continue;
}
CheckValue<IkReal> x10805 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10804.value)))+(x10805.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10806=IKsin(j4);
IkReal x10807=IKcos(j4);
IkReal x10808=(cj2*sj1);
IkReal x10809=(cj1*sj2);
IkReal x10810=(gconst5*sj3);
IkReal x10811=(gconst4*r11);
IkReal x10812=(sj1*sj2);
IkReal x10813=(gconst5*r10);
IkReal x10814=(cj1*cj2);
IkReal x10815=(gconst4*r01);
IkReal x10816=(gconst4*r21);
IkReal x10817=(gconst5*r00);
IkReal x10818=(cj3*gconst5);
IkReal x10819=(gconst4*sj3);
IkReal x10820=(cj3*gconst4);
IkReal x10821=((1.0)*x10807);
IkReal x10822=((1.0)*x10806);
IkReal x10823=(cj3*x10806);
IkReal x10824=(cj3*x10807);
IkReal x10825=(x10808+x10809);
evalcond[0]=(((x10806*x10816))+(((-1.0)*gconst5*r20*x10822))+(((-1.0)*r22*x10821)));
evalcond[1]=((((-1.0)*r02*x10821))+((x10806*x10815))+(((-1.0)*x10817*x10822)));
evalcond[2]=((-1.0)+(((-1.0)*x10813*x10822))+(((-1.0)*r12*x10821))+((x10806*x10811)));
evalcond[3]=(((r12*x10823))+((x10811*x10824))+(((-1.0)*cj3*x10813*x10821))+((r10*x10819))+((r11*x10810)));
evalcond[4]=(((r10*x10807*x10810))+((r10*x10820))+(((-1.0)*r12*sj3*x10822))+(((-1.0)*sj3*x10811*x10821))+((r11*x10818)));
evalcond[5]=(((x10816*x10824))+(((-1.0)*r20*x10818*x10821))+((r20*x10819))+((r22*x10823))+((r21*x10810))+x10825);
evalcond[6]=(((r00*x10807*x10810))+(((-1.0)*r02*sj3*x10822))+(((-1.0)*sj3*x10815*x10821))+((r01*x10818))+((r00*x10820))+x10825);
evalcond[7]=((((-1.0)*x10812))+((r02*x10823))+((x10815*x10824))+((r01*x10810))+((r00*x10819))+(((-1.0)*cj3*x10817*x10821))+x10814);
evalcond[8]=((((-1.0)*x10814))+(((-1.0)*sj3*x10816*x10821))+((r20*x10807*x10810))+(((-1.0)*r22*sj3*x10822))+((r20*x10820))+((r21*x10818))+x10812);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10826=((-1.0)*r21);
CheckValue<IkReal> x10829 = IKatan2WithCheck(IkReal(x10826),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10829.valid){
continue;
}
IkReal x10827=((1.0)*(x10829.value));
IkReal x10828=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10827)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10827)));
IkReal gconst4=(x10826*x10828);
IkReal gconst5=((1.0)*r20*x10828);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10830=((-1.0)*r21);
CheckValue<IkReal> x10833 = IKatan2WithCheck(IkReal(x10830),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10833.valid){
continue;
}
IkReal x10831=((1.0)*(x10833.value));
IkReal x10832=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10831)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10831)));
IkReal gconst4=(x10830*x10832);
IkReal gconst5=((1.0)*r20*x10832);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10834=((-1.0)*r21);
CheckValue<IkReal> x10837 = IKatan2WithCheck(IkReal(x10834),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10837.valid){
continue;
}
IkReal x10835=((1.0)*(x10837.value));
IkReal x10836=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10835)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10835)));
IkReal gconst4=(x10834*x10836);
IkReal gconst5=((1.0)*r20*x10836);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10838=((-1.0)*r21);
CheckValue<IkReal> x10841 = IKatan2WithCheck(IkReal(x10838),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10841.valid){
continue;
}
IkReal x10839=((1.0)*(x10841.value));
IkReal x10840=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10839)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10839)));
IkReal gconst4=(x10838*x10840);
IkReal gconst5=((1.0)*r20*x10840);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10842=((-1.0)*r21);
CheckValue<IkReal> x10845 = IKatan2WithCheck(IkReal(x10842),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10845.valid){
continue;
}
IkReal x10843=((1.0)*(x10845.value));
IkReal x10844=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10843)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10843)));
IkReal gconst4=(x10842*x10844);
IkReal gconst5=((1.0)*r20*x10844);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10846=((-1.0)*r21);
CheckValue<IkReal> x10849 = IKatan2WithCheck(IkReal(x10846),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10849.valid){
continue;
}
IkReal x10847=((1.0)*(x10849.value));
IkReal x10848=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10847)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10847)));
IkReal gconst4=(x10846*x10848);
IkReal gconst5=((1.0)*r20*x10848);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10850=(gconst5*r10);
IkReal x10851=(gconst4*r11);
CheckValue<IkReal> x10852 = IKatan2WithCheck(IkReal(((((-1.0)*x10851))+x10850)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10852.valid){
continue;
}
CheckValue<IkReal> x10853=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10850*x10851))+(x10850*x10850)+(x10851*x10851))),-1);
if(!x10853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10852.value)+(((1.5707963267949)*(x10853.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10854=IKsin(j4);
IkReal x10855=IKcos(j4);
IkReal x10856=(gconst4*r11);
IkReal x10857=((1.0)*cj1);
IkReal x10858=(gconst5*r10);
IkReal x10859=(gconst4*r01);
IkReal x10860=(gconst5*r00);
IkReal x10861=(gconst4*r21);
IkReal x10862=(gconst5*r20);
IkReal x10863=((1.0)*x10855);
IkReal x10864=((1.0)*x10854);
evalcond[0]=((((-1.0)*r22*x10863))+((x10854*x10861))+(((-1.0)*x10862*x10864)));
evalcond[1]=(((x10854*x10859))+(((-1.0)*x10860*x10864))+(((-1.0)*r02*x10863)));
evalcond[2]=((((-1.0)*r12*x10864))+((x10855*x10858))+(((-1.0)*x10856*x10863)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10863))+(((-1.0)*x10858*x10864))+((x10854*x10856)));
evalcond[4]=((((-1.0)*r22*x10864))+((x10855*x10862))+((sj1*sj2))+(((-1.0)*x10861*x10863))+(((-1.0)*cj2*x10857)));
evalcond[5]=((((-1.0)*x10859*x10863))+(((-1.0)*cj2*sj1))+((x10855*x10860))+(((-1.0)*sj2*x10857))+(((-1.0)*r02*x10864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10865=((1.0)*gconst5);
CheckValue<IkReal> x10866=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10865)))),-1);
if(!x10866.valid){
continue;
}
CheckValue<IkReal> x10867 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10865))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10866.value)))+(x10867.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10868=IKsin(j4);
IkReal x10869=IKcos(j4);
IkReal x10870=(gconst4*r11);
IkReal x10871=((1.0)*cj1);
IkReal x10872=(gconst5*r10);
IkReal x10873=(gconst4*r01);
IkReal x10874=(gconst5*r00);
IkReal x10875=(gconst4*r21);
IkReal x10876=(gconst5*r20);
IkReal x10877=((1.0)*x10869);
IkReal x10878=((1.0)*x10868);
evalcond[0]=((((-1.0)*r22*x10877))+(((-1.0)*x10876*x10878))+((x10868*x10875)));
evalcond[1]=((((-1.0)*x10874*x10878))+(((-1.0)*r02*x10877))+((x10868*x10873)));
evalcond[2]=((((-1.0)*x10870*x10877))+(((-1.0)*r12*x10878))+((x10869*x10872)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10877))+((x10868*x10870))+(((-1.0)*x10872*x10878)));
evalcond[4]=((((-1.0)*r22*x10878))+((sj1*sj2))+(((-1.0)*x10875*x10877))+((x10869*x10876))+(((-1.0)*cj2*x10871)));
evalcond[5]=((((-1.0)*x10873*x10877))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x10878))+(((-1.0)*sj2*x10871))+((x10869*x10874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10879 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10879.valid){
continue;
}
CheckValue<IkReal> x10880=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10879.value)+(((1.5707963267949)*(x10880.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10881=IKsin(j4);
IkReal x10882=IKcos(j4);
IkReal x10883=(gconst4*r11);
IkReal x10884=((1.0)*cj1);
IkReal x10885=(gconst5*r10);
IkReal x10886=(gconst4*r01);
IkReal x10887=(gconst5*r00);
IkReal x10888=(gconst4*r21);
IkReal x10889=(gconst5*r20);
IkReal x10890=((1.0)*x10882);
IkReal x10891=((1.0)*x10881);
evalcond[0]=((((-1.0)*x10889*x10891))+((x10881*x10888))+(((-1.0)*r22*x10890)));
evalcond[1]=((((-1.0)*r02*x10890))+((x10881*x10886))+(((-1.0)*x10887*x10891)));
evalcond[2]=(((x10882*x10885))+(((-1.0)*x10883*x10890))+(((-1.0)*r12*x10891)));
evalcond[3]=((1.0)+((x10881*x10883))+(((-1.0)*x10885*x10891))+(((-1.0)*r12*x10890)));
evalcond[4]=(((x10882*x10889))+(((-1.0)*x10888*x10890))+((sj1*sj2))+(((-1.0)*cj2*x10884))+(((-1.0)*r22*x10891)));
evalcond[5]=(((x10882*x10887))+(((-1.0)*sj2*x10884))+(((-1.0)*r02*x10891))+(((-1.0)*x10886*x10890))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10892=((-1.0)*r21);
CheckValue<IkReal> x10895 = IKatan2WithCheck(IkReal(x10892),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10895.valid){
continue;
}
IkReal x10893=((1.0)*(x10895.value));
IkReal x10894=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10893)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10893)));
IkReal gconst4=(x10892*x10894);
IkReal gconst5=((1.0)*r20*x10894);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10896=((-1.0)*r21);
CheckValue<IkReal> x10899 = IKatan2WithCheck(IkReal(x10896),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10899.valid){
continue;
}
IkReal x10897=((1.0)*(x10899.value));
IkReal x10898=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10897)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10897)));
IkReal gconst4=(x10896*x10898);
IkReal gconst5=((1.0)*r20*x10898);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10900=((-1.0)*r21);
CheckValue<IkReal> x10903 = IKatan2WithCheck(IkReal(x10900),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10903.valid){
continue;
}
IkReal x10901=((1.0)*(x10903.value));
IkReal x10902=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10901)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10901)));
IkReal gconst4=(x10900*x10902);
IkReal gconst5=((1.0)*r20*x10902);
IkReal x10904=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10908=IKPowWithIntegerCheck(x10904,-1);
if(!x10908.valid){
continue;
}
IkReal x10905=x10908.value;
IkReal x10906=((1.0)*x10905);
IkReal x10907=((((-1.0)*(r12*r12)))+(((-1.0)*x10906*(r10*r10)*(r20*r20)))+(((-1.0)*x10906*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10905)));
j4eval[0]=x10907;
j4eval[1]=r12;
j4eval[2]=x10904;
j4eval[3]=IKsign(x10907);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10909=(gconst5*r10);
IkReal x10910=(gconst4*r11);
CheckValue<IkReal> x10911=IKPowWithIntegerCheck(IKsign(((((2.0)*x10909*x10910))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10910*x10910)))+(((-1.0)*(x10909*x10909))))),-1);
if(!x10911.valid){
continue;
}
CheckValue<IkReal> x10912 = IKatan2WithCheck(IkReal(((((-1.0)*x10909))+x10910)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10911.value)))+(x10912.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10913=IKcos(j4);
IkReal x10914=IKsin(j4);
IkReal x10915=(gconst4*r11);
IkReal x10916=(gconst5*r10);
IkReal x10917=((1.0)*cj1);
IkReal x10918=(gconst5*r00);
IkReal x10919=(gconst5*r20);
IkReal x10920=((1.0)*x10913);
IkReal x10921=(gconst4*x10913);
IkReal x10922=((1.0)*x10914);
IkReal x10923=(gconst4*x10914);
evalcond[0]=(((x10913*x10915))+((r12*x10914))+(((-1.0)*x10916*x10920)));
evalcond[1]=((((-1.0)*r22*x10920))+(((-1.0)*x10919*x10922))+((r21*x10923)));
evalcond[2]=((((-1.0)*r02*x10920))+(((-1.0)*x10918*x10922))+((r01*x10923)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10920))+((x10914*x10915))+(((-1.0)*x10916*x10922)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x10919*x10920))+((r21*x10921))+((r22*x10914))+(((-1.0)*cj2*x10917)));
evalcond[5]=((((-1.0)*sj2*x10917))+(((-1.0)*cj2*sj1))+((r02*x10914))+(((-1.0)*x10918*x10920))+((r01*x10921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10924=((1.0)*gconst5);
CheckValue<IkReal> x10925=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10924)))),-1);
if(!x10925.valid){
continue;
}
CheckValue<IkReal> x10926 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10924))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10925.value)))+(x10926.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10927=IKcos(j4);
IkReal x10928=IKsin(j4);
IkReal x10929=(gconst4*r11);
IkReal x10930=(gconst5*r10);
IkReal x10931=((1.0)*cj1);
IkReal x10932=(gconst5*r00);
IkReal x10933=(gconst5*r20);
IkReal x10934=((1.0)*x10927);
IkReal x10935=(gconst4*x10927);
IkReal x10936=((1.0)*x10928);
IkReal x10937=(gconst4*x10928);
evalcond[0]=(((x10927*x10929))+((r12*x10928))+(((-1.0)*x10930*x10934)));
evalcond[1]=((((-1.0)*r22*x10934))+((r21*x10937))+(((-1.0)*x10933*x10936)));
evalcond[2]=((((-1.0)*r02*x10934))+((r01*x10937))+(((-1.0)*x10932*x10936)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10934))+((x10928*x10929))+(((-1.0)*x10930*x10936)));
evalcond[4]=(((sj1*sj2))+((r21*x10935))+(((-1.0)*cj2*x10931))+((r22*x10928))+(((-1.0)*x10933*x10934)));
evalcond[5]=(((r02*x10928))+(((-1.0)*cj2*sj1))+((r01*x10935))+(((-1.0)*x10932*x10934))+(((-1.0)*sj2*x10931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10938 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10938.valid){
continue;
}
CheckValue<IkReal> x10939=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10939.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10938.value)+(((1.5707963267949)*(x10939.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10940=IKcos(j4);
IkReal x10941=IKsin(j4);
IkReal x10942=(gconst4*r11);
IkReal x10943=(gconst5*r10);
IkReal x10944=((1.0)*cj1);
IkReal x10945=(gconst5*r00);
IkReal x10946=(gconst5*r20);
IkReal x10947=((1.0)*x10940);
IkReal x10948=(gconst4*x10940);
IkReal x10949=((1.0)*x10941);
IkReal x10950=(gconst4*x10941);
evalcond[0]=(((r12*x10941))+(((-1.0)*x10943*x10947))+((x10940*x10942)));
evalcond[1]=((((-1.0)*r22*x10947))+(((-1.0)*x10946*x10949))+((r21*x10950)));
evalcond[2]=((((-1.0)*x10945*x10949))+((r01*x10950))+(((-1.0)*r02*x10947)));
evalcond[3]=((1.0)+((x10941*x10942))+(((-1.0)*r12*x10947))+(((-1.0)*x10943*x10949)));
evalcond[4]=(((r21*x10948))+((sj1*sj2))+(((-1.0)*x10946*x10947))+((r22*x10941))+(((-1.0)*cj2*x10944)));
evalcond[5]=((((-1.0)*x10945*x10947))+((r01*x10948))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10944))+((r02*x10941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10951=((-1.0)*r21);
CheckValue<IkReal> x10954 = IKatan2WithCheck(IkReal(x10951),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10954.valid){
continue;
}
IkReal x10952=((1.0)*(x10954.value));
IkReal x10953=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10952)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10952)));
IkReal gconst4=(x10951*x10953);
IkReal gconst5=((1.0)*r20*x10953);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10955=((-1.0)*r21);
CheckValue<IkReal> x10958 = IKatan2WithCheck(IkReal(x10955),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10958.valid){
continue;
}
IkReal x10956=((1.0)*(x10958.value));
IkReal x10957=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10956)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10956)));
IkReal gconst4=(x10955*x10957);
IkReal gconst5=((1.0)*r20*x10957);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10959=((-1.0)*r21);
CheckValue<IkReal> x10962 = IKatan2WithCheck(IkReal(x10959),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10962.valid){
continue;
}
IkReal x10960=((1.0)*(x10962.value));
IkReal x10961=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10960)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10960)));
IkReal gconst4=(x10959*x10961);
IkReal gconst5=((1.0)*r20*x10961);
IkReal x10963=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10967=IKPowWithIntegerCheck(x10963,-1);
if(!x10967.valid){
continue;
}
IkReal x10964=x10967.value;
IkReal x10965=((1.0)*x10964);
IkReal x10966=((((-1.0)*x10965*(r10*r10)*(r20*r20)))+(((-1.0)*x10965*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10964)));
j4eval[0]=x10966;
j4eval[1]=r12;
j4eval[2]=x10963;
j4eval[3]=IKsign(x10966);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10968=(gconst5*r10);
IkReal x10969=(gconst4*r11);
CheckValue<IkReal> x10970=IKPowWithIntegerCheck(IKsign(((((2.0)*x10968*x10969))+(((-1.0)*(x10969*x10969)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10968*x10968))))),-1);
if(!x10970.valid){
continue;
}
CheckValue<IkReal> x10971 = IKatan2WithCheck(IkReal(((((-1.0)*x10968))+x10969)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10970.value)))+(x10971.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10972=IKcos(j4);
IkReal x10973=IKsin(j4);
IkReal x10974=(gconst4*r11);
IkReal x10975=(gconst5*r10);
IkReal x10976=(gconst5*r00);
IkReal x10977=(gconst5*r20);
IkReal x10978=((1.0)*x10972);
IkReal x10979=(gconst4*x10972);
IkReal x10980=((1.0)*x10973);
IkReal x10981=(gconst4*x10973);
evalcond[0]=(((x10972*x10974))+((r12*x10973))+(((-1.0)*x10975*x10978)));
evalcond[1]=(((r21*x10981))+(((-1.0)*r22*x10978))+(((-1.0)*x10977*x10980)));
evalcond[2]=(((r01*x10981))+(((-1.0)*r02*x10978))+(((-1.0)*x10976*x10980)));
evalcond[3]=((1.0)+(((-1.0)*x10975*x10980))+((x10973*x10974))+(((-1.0)*r12*x10978)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10973))+((r21*x10979))+(((-1.0)*x10977*x10978)));
evalcond[5]=(((r02*x10973))+(((-1.0)*x10976*x10978))+((r01*x10979))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10982=((1.0)*gconst5);
CheckValue<IkReal> x10983=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10982)))),-1);
if(!x10983.valid){
continue;
}
CheckValue<IkReal> x10984 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10982))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10983.value)))+(x10984.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10985=IKcos(j4);
IkReal x10986=IKsin(j4);
IkReal x10987=(gconst4*r11);
IkReal x10988=(gconst5*r10);
IkReal x10989=(gconst5*r00);
IkReal x10990=(gconst5*r20);
IkReal x10991=((1.0)*x10985);
IkReal x10992=(gconst4*x10985);
IkReal x10993=((1.0)*x10986);
IkReal x10994=(gconst4*x10986);
evalcond[0]=(((r12*x10986))+((x10985*x10987))+(((-1.0)*x10988*x10991)));
evalcond[1]=(((r21*x10994))+(((-1.0)*r22*x10991))+(((-1.0)*x10990*x10993)));
evalcond[2]=(((r01*x10994))+(((-1.0)*x10989*x10993))+(((-1.0)*r02*x10991)));
evalcond[3]=((1.0)+((x10986*x10987))+(((-1.0)*x10988*x10993))+(((-1.0)*r12*x10991)));
evalcond[4]=(((r22*x10986))+((cj2*sj1))+((r21*x10992))+((cj1*sj2))+(((-1.0)*x10990*x10991)));
evalcond[5]=(((r01*x10992))+(((-1.0)*x10989*x10991))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10995 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10995.valid){
continue;
}
CheckValue<IkReal> x10996=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10995.value)+(((1.5707963267949)*(x10996.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10997=IKcos(j4);
IkReal x10998=IKsin(j4);
IkReal x10999=(gconst4*r11);
IkReal x11000=(gconst5*r10);
IkReal x11001=(gconst5*r00);
IkReal x11002=(gconst5*r20);
IkReal x11003=((1.0)*x10997);
IkReal x11004=(gconst4*x10997);
IkReal x11005=((1.0)*x10998);
IkReal x11006=(gconst4*x10998);
evalcond[0]=(((r12*x10998))+(((-1.0)*x11000*x11003))+((x10997*x10999)));
evalcond[1]=((((-1.0)*r22*x11003))+((r21*x11006))+(((-1.0)*x11002*x11005)));
evalcond[2]=((((-1.0)*r02*x11003))+((r01*x11006))+(((-1.0)*x11001*x11005)));
evalcond[3]=((1.0)+(((-1.0)*x11000*x11005))+(((-1.0)*r12*x11003))+((x10998*x10999)));
evalcond[4]=(((cj2*sj1))+((r22*x10998))+((cj1*sj2))+((r21*x11004))+(((-1.0)*x11002*x11003)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x11004))+(((-1.0)*x11001*x11003))+((r02*x10998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11007=((-1.0)*r21);
CheckValue<IkReal> x11010 = IKatan2WithCheck(IkReal(x11007),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11010.valid){
continue;
}
IkReal x11008=((1.0)*(x11010.value));
IkReal x11009=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11008)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11008)));
IkReal gconst4=(x11007*x11009);
IkReal gconst5=((1.0)*r20*x11009);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11011=((-1.0)*r21);
CheckValue<IkReal> x11014 = IKatan2WithCheck(IkReal(x11011),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11014.valid){
continue;
}
IkReal x11012=((1.0)*(x11014.value));
IkReal x11013=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11012)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11012)));
IkReal gconst4=(x11011*x11013);
IkReal gconst5=((1.0)*r20*x11013);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11015=((-1.0)*r21);
CheckValue<IkReal> x11018 = IKatan2WithCheck(IkReal(x11015),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11018.valid){
continue;
}
IkReal x11016=((1.0)*(x11018.value));
IkReal x11017=x9720;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11016)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11016)));
IkReal gconst4=(x11015*x11017);
IkReal gconst5=((1.0)*r20*x11017);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11019=(gconst5*r10);
IkReal x11020=(gconst4*r11);
CheckValue<IkReal> x11021=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11020*x11020)+(((-2.0)*x11019*x11020))+(x11019*x11019))),-1);
if(!x11021.valid){
continue;
}
CheckValue<IkReal> x11022 = IKatan2WithCheck(IkReal(((((-1.0)*x11020))+x11019)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x11022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11021.value)))+(x11022.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11023=IKsin(j4);
IkReal x11024=IKcos(j4);
IkReal x11025=(gconst4*r11);
IkReal x11026=(gconst5*r10);
IkReal x11027=(gconst4*r01);
IkReal x11028=(gconst5*r00);
IkReal x11029=(gconst4*r21);
IkReal x11030=(gconst5*r20);
IkReal x11031=((1.0)*x11024);
IkReal x11032=((1.0)*x11023);
evalcond[0]=((((-1.0)*r22*x11031))+(((-1.0)*x11030*x11032))+((x11023*x11029)));
evalcond[1]=((((-1.0)*r02*x11031))+(((-1.0)*x11028*x11032))+((x11023*x11027)));
evalcond[2]=(((x11024*x11026))+(((-1.0)*r12*x11032))+(((-1.0)*x11025*x11031)));
evalcond[3]=((1.0)+(((-1.0)*x11026*x11032))+(((-1.0)*r12*x11031))+((x11023*x11025)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11029*x11031))+((x11024*x11030))+(((-1.0)*r22*x11032)));
evalcond[5]=((((-1.0)*r02*x11032))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11024*x11028))+(((-1.0)*x11027*x11031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11033=((1.0)*gconst5);
CheckValue<IkReal> x11034 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11033))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11034.valid){
continue;
}
CheckValue<IkReal> x11035=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11033)))),-1);
if(!x11035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11034.value)+(((1.5707963267949)*(x11035.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11036=IKsin(j4);
IkReal x11037=IKcos(j4);
IkReal x11038=(gconst4*r11);
IkReal x11039=(gconst5*r10);
IkReal x11040=(gconst4*r01);
IkReal x11041=(gconst5*r00);
IkReal x11042=(gconst4*r21);
IkReal x11043=(gconst5*r20);
IkReal x11044=((1.0)*x11037);
IkReal x11045=((1.0)*x11036);
evalcond[0]=((((-1.0)*r22*x11044))+((x11036*x11042))+(((-1.0)*x11043*x11045)));
evalcond[1]=((((-1.0)*x11041*x11045))+((x11036*x11040))+(((-1.0)*r02*x11044)));
evalcond[2]=(((x11037*x11039))+(((-1.0)*r12*x11045))+(((-1.0)*x11038*x11044)));
evalcond[3]=((1.0)+((x11036*x11038))+(((-1.0)*r12*x11044))+(((-1.0)*x11039*x11045)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11045))+((cj1*sj2))+((x11037*x11043))+(((-1.0)*x11042*x11044)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11037*x11041))+(((-1.0)*r02*x11045))+(((-1.0)*x11040*x11044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11046 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11046.valid){
continue;
}
CheckValue<IkReal> x11047=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11046.value)+(((1.5707963267949)*(x11047.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11048=IKsin(j4);
IkReal x11049=IKcos(j4);
IkReal x11050=(gconst4*r11);
IkReal x11051=(gconst5*r10);
IkReal x11052=(gconst4*r01);
IkReal x11053=(gconst5*r00);
IkReal x11054=(gconst4*r21);
IkReal x11055=(gconst5*r20);
IkReal x11056=((1.0)*x11049);
IkReal x11057=((1.0)*x11048);
evalcond[0]=((((-1.0)*r22*x11056))+(((-1.0)*x11055*x11057))+((x11048*x11054)));
evalcond[1]=((((-1.0)*x11053*x11057))+(((-1.0)*r02*x11056))+((x11048*x11052)));
evalcond[2]=((((-1.0)*r12*x11057))+(((-1.0)*x11050*x11056))+((x11049*x11051)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11056))+(((-1.0)*x11051*x11057))+((x11048*x11050)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11054*x11056))+(((-1.0)*r22*x11057))+((cj1*sj2))+((x11049*x11055)));
evalcond[5]=((((-1.0)*x11052*x11056))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11049*x11053))+(((-1.0)*r02*x11057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11058=gconst4*gconst4;
IkReal x11059=gconst5*gconst5;
IkReal x11060=(r10*r21);
IkReal x11061=((1.0)*cj3);
IkReal x11062=(r11*r21);
IkReal x11063=(r11*r20);
IkReal x11064=(r22*sj3);
IkReal x11065=(gconst4*r10);
IkReal x11066=((1.0)*sj3);
IkReal x11067=(cj3*gconst4*gconst5);
CheckValue<IkReal> x11068 = IKatan2WithCheck(IkReal((((x11064*x11065))+((gconst5*r11*x11064)))),IkReal((((gconst4*gconst5*sj3*x11062))+(((-1.0)*gconst5*r20*x11065*x11066))+(((-1.0)*x11059*x11063*x11066))+((sj3*x11058*x11060)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11068.valid){
continue;
}
CheckValue<IkReal> x11069=IKPowWithIntegerCheck(IKsign((((x11063*x11067))+(((-1.0)*x11058*x11061*x11062))+((x11060*x11067))+(((-1.0)*r10*r20*x11059*x11061))+(((-1.0)*r12*r22*x11061)))),-1);
if(!x11069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11068.value)+(((1.5707963267949)*(x11069.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11070=IKsin(j4);
IkReal x11071=IKcos(j4);
IkReal x11072=(sj1*sj2);
IkReal x11073=(gconst5*sj3);
IkReal x11074=(cj3*gconst5);
IkReal x11075=(gconst4*r11);
IkReal x11076=((1.0)*cj1);
IkReal x11077=(gconst4*r01);
IkReal x11078=(cj2*sj1);
IkReal x11079=(gconst4*r21);
IkReal x11080=(gconst4*sj3);
IkReal x11081=(cj3*gconst4);
IkReal x11082=(cj2*x11076);
IkReal x11083=((1.0)*x11071);
IkReal x11084=((1.0)*x11070);
IkReal x11085=(cj3*x11070);
IkReal x11086=(cj3*x11071);
evalcond[0]=((((-1.0)*r22*x11083))+(((-1.0)*gconst5*r20*x11084))+((x11070*x11079)));
evalcond[1]=((((-1.0)*gconst5*r00*x11084))+(((-1.0)*r02*x11083))+((x11070*x11077)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x11084))+(((-1.0)*r12*x11083))+((x11070*x11075)));
evalcond[3]=(((r11*x11073))+(((-1.0)*r10*x11074*x11083))+((r10*x11080))+((x11075*x11086))+((r12*x11085)));
evalcond[4]=((((-1.0)*r12*sj3*x11084))+(((-1.0)*sj3*x11075*x11083))+((r11*x11074))+((r10*x11081))+((r10*x11071*x11073)));
evalcond[5]=(((x11079*x11086))+((r21*x11073))+((cj1*sj2))+x11078+(((-1.0)*r20*x11074*x11083))+((r22*x11085))+((r20*x11080)));
evalcond[6]=(((r00*x11080))+x11072+((x11077*x11086))+((r02*x11085))+(((-1.0)*x11082))+((r01*x11073))+(((-1.0)*r00*x11074*x11083)));
evalcond[7]=(((r21*x11074))+((r20*x11071*x11073))+(((-1.0)*sj3*x11079*x11083))+(((-1.0)*r22*sj3*x11084))+x11072+(((-1.0)*x11082))+((r20*x11081)));
evalcond[8]=((((-1.0)*sj3*x11077*x11083))+((r00*x11081))+(((-1.0)*r02*sj3*x11084))+((r01*x11074))+(((-1.0)*sj2*x11076))+((r00*x11071*x11073))+(((-1.0)*x11078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11087=((1.0)*gconst5);
CheckValue<IkReal> x11088 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11087))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11088.valid){
continue;
}
CheckValue<IkReal> x11089=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11087)))),-1);
if(!x11089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11088.value)+(((1.5707963267949)*(x11089.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11090=IKsin(j4);
IkReal x11091=IKcos(j4);
IkReal x11092=(sj1*sj2);
IkReal x11093=(gconst5*sj3);
IkReal x11094=(cj3*gconst5);
IkReal x11095=(gconst4*r11);
IkReal x11096=((1.0)*cj1);
IkReal x11097=(gconst4*r01);
IkReal x11098=(cj2*sj1);
IkReal x11099=(gconst4*r21);
IkReal x11100=(gconst4*sj3);
IkReal x11101=(cj3*gconst4);
IkReal x11102=(cj2*x11096);
IkReal x11103=((1.0)*x11091);
IkReal x11104=((1.0)*x11090);
IkReal x11105=(cj3*x11090);
IkReal x11106=(cj3*x11091);
evalcond[0]=((((-1.0)*gconst5*r20*x11104))+(((-1.0)*r22*x11103))+((x11090*x11099)));
evalcond[1]=((((-1.0)*gconst5*r00*x11104))+(((-1.0)*r02*x11103))+((x11090*x11097)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x11104))+(((-1.0)*r12*x11103))+((x11090*x11095)));
evalcond[3]=(((x11095*x11106))+((r11*x11093))+((r10*x11100))+(((-1.0)*r10*x11094*x11103))+((r12*x11105)));
evalcond[4]=(((r10*x11091*x11093))+(((-1.0)*r12*sj3*x11104))+((r11*x11094))+((r10*x11101))+(((-1.0)*sj3*x11095*x11103)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*r20*x11094*x11103))+x11098+((r20*x11100))+((x11099*x11106))+((r22*x11105))+((r21*x11093)));
evalcond[6]=(((r02*x11105))+x11092+((r01*x11093))+(((-1.0)*r00*x11094*x11103))+(((-1.0)*x11102))+((x11097*x11106))+((r00*x11100)));
evalcond[7]=(x11092+((r20*x11091*x11093))+(((-1.0)*r22*sj3*x11104))+((r20*x11101))+(((-1.0)*x11102))+(((-1.0)*sj3*x11099*x11103))+((r21*x11094)));
evalcond[8]=((((-1.0)*sj3*x11097*x11103))+(((-1.0)*r02*sj3*x11104))+(((-1.0)*x11098))+((r00*x11091*x11093))+((r01*x11094))+(((-1.0)*sj2*x11096))+((r00*x11101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11107 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11107.valid){
continue;
}
CheckValue<IkReal> x11108=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11107.value)+(((1.5707963267949)*(x11108.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11109=IKsin(j4);
IkReal x11110=IKcos(j4);
IkReal x11111=(sj1*sj2);
IkReal x11112=(gconst5*sj3);
IkReal x11113=(cj3*gconst5);
IkReal x11114=(gconst4*r11);
IkReal x11115=((1.0)*cj1);
IkReal x11116=(gconst4*r01);
IkReal x11117=(cj2*sj1);
IkReal x11118=(gconst4*r21);
IkReal x11119=(gconst4*sj3);
IkReal x11120=(cj3*gconst4);
IkReal x11121=(cj2*x11115);
IkReal x11122=((1.0)*x11110);
IkReal x11123=((1.0)*x11109);
IkReal x11124=(cj3*x11109);
IkReal x11125=(cj3*x11110);
evalcond[0]=((((-1.0)*gconst5*r20*x11123))+(((-1.0)*r22*x11122))+((x11109*x11118)));
evalcond[1]=((((-1.0)*gconst5*r00*x11123))+(((-1.0)*r02*x11122))+((x11109*x11116)));
evalcond[2]=((1.0)+(((-1.0)*r12*x11122))+(((-1.0)*gconst5*r10*x11123))+((x11109*x11114)));
evalcond[3]=(((x11114*x11125))+(((-1.0)*r10*x11113*x11122))+((r10*x11119))+((r12*x11124))+((r11*x11112)));
evalcond[4]=(((r10*x11110*x11112))+(((-1.0)*r12*sj3*x11123))+(((-1.0)*sj3*x11114*x11122))+((r10*x11120))+((r11*x11113)));
evalcond[5]=(((cj1*sj2))+((r22*x11124))+(((-1.0)*r20*x11113*x11122))+x11117+((r21*x11112))+((x11118*x11125))+((r20*x11119)));
evalcond[6]=((((-1.0)*x11121))+(((-1.0)*r00*x11113*x11122))+x11111+((r02*x11124))+((x11116*x11125))+((r00*x11119))+((r01*x11112)));
evalcond[7]=((((-1.0)*x11121))+(((-1.0)*sj3*x11118*x11122))+x11111+((r21*x11113))+(((-1.0)*r22*sj3*x11123))+((r20*x11110*x11112))+((r20*x11120)));
evalcond[8]=((((-1.0)*x11117))+(((-1.0)*r02*sj3*x11123))+(((-1.0)*sj3*x11116*x11122))+((r00*x11110*x11112))+(((-1.0)*sj2*x11115))+((r00*x11120))+((r01*x11113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11126=((-1.0)*r21);
IkReal x11127=((-1.0)*r20);
CheckValue<IkReal> x11129 = IKatan2WithCheck(IkReal(x11126),IkReal(x11127),IKFAST_ATAN2_MAGTHRESH);
if(!x11129.valid){
continue;
}
IkReal x11128=((1.0)*(x11129.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11128)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11127);
rxp0_2=(py*r00);
rxp1_0=(py*x11126);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11128)));
IkReal gconst4=x11126;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11130=((-1.0)*r21);
IkReal x11131=((-1.0)*r20);
CheckValue<IkReal> x11133 = IKatan2WithCheck(IkReal(x11130),IkReal(x11131),IKFAST_ATAN2_MAGTHRESH);
if(!x11133.valid){
continue;
}
IkReal x11132=((1.0)*(x11133.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11132)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11131);
rxp0_2=(py*r00);
rxp1_0=(py*x11130);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11132)));
IkReal gconst4=x11130;
IkReal gconst5=((1.0)*r20);
IkReal x11134=((1.0)*cj3);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
j4eval[1]=((((-1.0)*x11134*(r21*r21)))+((x11134*(r00*r00)))+(((-1.0)*x11134)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11135=((-1.0)*r21);
IkReal x11136=((-1.0)*r20);
CheckValue<IkReal> x11138 = IKatan2WithCheck(IkReal(x11135),IkReal(x11136),IKFAST_ATAN2_MAGTHRESH);
if(!x11138.valid){
continue;
}
IkReal x11137=((1.0)*(x11138.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11137)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11136);
rxp0_2=(py*r00);
rxp1_0=(py*x11135);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11137)));
IkReal gconst4=x11135;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11139=((-1.0)*r21);
IkReal x11140=((-1.0)*r20);
CheckValue<IkReal> x11142 = IKatan2WithCheck(IkReal(x11139),IkReal(x11140),IKFAST_ATAN2_MAGTHRESH);
if(!x11142.valid){
continue;
}
IkReal x11141=((1.0)*(x11142.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11141)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11140);
rxp0_2=(py*r00);
rxp1_0=(py*x11139);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11141)));
IkReal gconst4=x11139;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11143=((-1.0)*r21);
IkReal x11144=((-1.0)*r20);
CheckValue<IkReal> x11146 = IKatan2WithCheck(IkReal(x11143),IkReal(x11144),IKFAST_ATAN2_MAGTHRESH);
if(!x11146.valid){
continue;
}
IkReal x11145=((1.0)*(x11146.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11145)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11144);
rxp0_2=(py*r00);
rxp1_0=(py*x11143);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11145)));
IkReal gconst4=x11143;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11147=((-1.0)*r21);
IkReal x11148=((-1.0)*r20);
CheckValue<IkReal> x11150 = IKatan2WithCheck(IkReal(x11147),IkReal(x11148),IKFAST_ATAN2_MAGTHRESH);
if(!x11150.valid){
continue;
}
IkReal x11149=((1.0)*(x11150.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11149)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11148);
rxp0_2=(py*r00);
rxp1_0=(py*x11147);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11149)));
IkReal gconst4=x11147;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11153=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*gconst5*r00))),-1);
if(!x11153.valid){
continue;
}
IkReal x11151=x11153.value;
IkReal x11152=(cj0*x11151);
cj4array[0]=(((sj1*sj2*x11152))+(((-1.0)*cj1*cj2*x11152)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11154=IKsin(j4);
IkReal x11155=IKcos(j4);
IkReal x11156=(gconst4*x11154);
IkReal x11157=((1.0)*x11155);
IkReal x11158=((1.0)*gconst5*x11154);
evalcond[0]=(r12*x11154);
evalcond[1]=((((-1.0)*r12*x11157))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x11156))+(((-1.0)*r20*x11158)));
evalcond[3]=(((r01*x11156))+(((-1.0)*r00*x11158)));
evalcond[4]=((((-1.0)*gconst5*r20*x11157))+((cj2*sj1))+((cj1*sj2))+((gconst4*r21*x11155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11161=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11161.valid){
continue;
}
IkReal x11159=x11161.value;
IkReal x11160=((1.0)*x11159);
cj4array[0]=((((-1.0)*cj2*sj1*x11160))+(((-1.0)*cj1*sj2*x11160)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11162=IKsin(j4);
IkReal x11163=IKcos(j4);
IkReal x11164=(gconst4*r01);
IkReal x11165=((1.0)*cj0);
IkReal x11166=((1.0)*gconst5*r00);
evalcond[0]=(r12*x11162);
evalcond[1]=((((-1.0)*r12*x11163))+(((-1.0)*x11165)));
evalcond[2]=((((-1.0)*gconst5*r20*x11162))+((gconst4*r21*x11162)));
evalcond[3]=(((x11162*x11164))+(((-1.0)*x11162*x11166)));
evalcond[4]=((((-1.0)*x11163*x11166))+(((-1.0)*sj1*sj2*x11165))+((x11163*x11164))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11167=IKPowWithIntegerCheck(r12,-1);
if(!x11167.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11167.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11168=IKsin(j4);
IkReal x11169=IKcos(j4);
IkReal x11170=(gconst4*r01);
IkReal x11171=(gconst4*r21);
IkReal x11172=((1.0)*gconst5*r00);
IkReal x11173=((1.0)*gconst5*r20);
evalcond[0]=(r12*x11168);
evalcond[1]=(((x11168*x11171))+(((-1.0)*x11168*x11173)));
evalcond[2]=(((x11168*x11170))+(((-1.0)*x11168*x11172)));
evalcond[3]=(((cj2*sj1))+((x11169*x11171))+((cj1*sj2))+(((-1.0)*x11169*x11173)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+((x11169*x11170))+(((-1.0)*x11169*x11172))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11174=((-1.0)*r21);
IkReal x11175=((-1.0)*r20);
CheckValue<IkReal> x11177 = IKatan2WithCheck(IkReal(x11174),IkReal(x11175),IKFAST_ATAN2_MAGTHRESH);
if(!x11177.valid){
continue;
}
IkReal x11176=((1.0)*(x11177.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11176)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11175);
rxp0_2=(py*r00);
rxp1_0=(py*x11174);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11176)));
IkReal gconst4=x11174;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11178=((-1.0)*r21);
IkReal x11179=((-1.0)*r20);
CheckValue<IkReal> x11181 = IKatan2WithCheck(IkReal(x11178),IkReal(x11179),IKFAST_ATAN2_MAGTHRESH);
if(!x11181.valid){
continue;
}
IkReal x11180=((1.0)*(x11181.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11180)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11179);
rxp0_2=(py*r00);
rxp1_0=(py*x11178);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11180)));
IkReal gconst4=x11178;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11182=((-1.0)*r21);
IkReal x11183=((-1.0)*r20);
CheckValue<IkReal> x11185 = IKatan2WithCheck(IkReal(x11182),IkReal(x11183),IKFAST_ATAN2_MAGTHRESH);
if(!x11185.valid){
continue;
}
IkReal x11184=((1.0)*(x11185.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11184)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11183);
rxp0_2=(py*r00);
rxp1_0=(py*x11182);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11184)));
IkReal gconst4=x11182;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11188=IKPowWithIntegerCheck(((((-1.0)*gconst4*r01))+((gconst5*r00))),-1);
if(!x11188.valid){
continue;
}
IkReal x11186=x11188.value;
IkReal x11187=(cj0*x11186);
cj4array[0]=(((sj1*sj2*x11187))+(((-1.0)*cj1*cj2*x11187)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11189=IKsin(j4);
IkReal x11190=IKcos(j4);
IkReal x11191=(gconst4*x11189);
IkReal x11192=((1.0)*x11190);
IkReal x11193=((1.0)*gconst5*x11189);
evalcond[0]=((-1.0)*r12*x11189);
evalcond[1]=((((-1.0)*r12*x11192))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x11191))+(((-1.0)*r20*x11193)));
evalcond[3]=((((-1.0)*r00*x11193))+((r01*x11191)));
evalcond[4]=(((cj2*sj1))+((gconst5*r20*x11190))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11196=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11196.valid){
continue;
}
IkReal x11194=x11196.value;
IkReal x11195=((1.0)*x11194);
cj4array[0]=((((-1.0)*cj1*sj2*x11195))+(((-1.0)*cj2*sj1*x11195)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11197=IKsin(j4);
IkReal x11198=IKcos(j4);
IkReal x11199=(gconst5*r00);
IkReal x11200=(gconst4*r01);
IkReal x11201=((1.0)*cj0);
IkReal x11202=((1.0)*x11197);
IkReal x11203=((1.0)*x11198);
evalcond[0]=((-1.0)*r12*x11197);
evalcond[1]=((((-1.0)*x11201))+(((-1.0)*r12*x11203)));
evalcond[2]=((((-1.0)*gconst5*r20*x11202))+((gconst4*r21*x11197)));
evalcond[3]=(((x11197*x11200))+(((-1.0)*x11199*x11202)));
evalcond[4]=((((-1.0)*sj1*sj2*x11201))+((x11198*x11199))+((cj0*cj1*cj2))+(((-1.0)*x11200*x11203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11204=IKPowWithIntegerCheck(r12,-1);
if(!x11204.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11204.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11205=IKsin(j4);
IkReal x11206=IKcos(j4);
IkReal x11207=(gconst5*r00);
IkReal x11208=(gconst5*r20);
IkReal x11209=(gconst4*r01);
IkReal x11210=(gconst4*r21);
IkReal x11211=((1.0)*x11205);
IkReal x11212=((1.0)*x11206);
evalcond[0]=((-1.0)*r12*x11205);
evalcond[1]=(((x11205*x11210))+(((-1.0)*x11208*x11211)));
evalcond[2]=(((x11205*x11209))+(((-1.0)*x11207*x11211)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x11206*x11208))+(((-1.0)*x11210*x11212)));
evalcond[4]=((((-1.0)*x11209*x11212))+(((-1.0)*cj0*sj1*sj2))+((x11206*x11207))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11213=((-1.0)*r21);
IkReal x11214=((-1.0)*r20);
CheckValue<IkReal> x11216 = IKatan2WithCheck(IkReal(x11213),IkReal(x11214),IKFAST_ATAN2_MAGTHRESH);
if(!x11216.valid){
continue;
}
IkReal x11215=((1.0)*(x11216.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11215)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11214);
rxp0_2=(py*r00);
rxp1_0=(py*x11213);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11215)));
IkReal gconst4=x11213;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11217=((-1.0)*r21);
IkReal x11218=((-1.0)*r20);
CheckValue<IkReal> x11220 = IKatan2WithCheck(IkReal(x11217),IkReal(x11218),IKFAST_ATAN2_MAGTHRESH);
if(!x11220.valid){
continue;
}
IkReal x11219=((1.0)*(x11220.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11219)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11218);
rxp0_2=(py*r00);
rxp1_0=(py*x11217);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11219)));
IkReal gconst4=x11217;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11221=((-1.0)*r21);
IkReal x11222=((-1.0)*r20);
CheckValue<IkReal> x11224 = IKatan2WithCheck(IkReal(x11221),IkReal(x11222),IKFAST_ATAN2_MAGTHRESH);
if(!x11224.valid){
continue;
}
IkReal x11223=((1.0)*(x11224.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11223)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11222);
rxp0_2=(py*r00);
rxp1_0=(py*x11221);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11223)));
IkReal gconst4=x11221;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11227=IKPowWithIntegerCheck(((((-1.0)*gconst4*r01))+((gconst5*r00))),-1);
if(!x11227.valid){
continue;
}
IkReal x11225=x11227.value;
IkReal x11226=((1.0)*cj0*x11225);
cj4array[0]=((((-1.0)*cj1*sj2*x11226))+(((-1.0)*cj2*sj1*x11226)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11228=IKsin(j4);
IkReal x11229=IKcos(j4);
IkReal x11230=(gconst4*x11228);
IkReal x11231=((1.0)*x11229);
IkReal x11232=((1.0)*gconst5*x11228);
evalcond[0]=((-1.0)*r12*x11228);
evalcond[1]=((((-1.0)*r12*x11231))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x11232))+((r21*x11230)));
evalcond[3]=((((-1.0)*r00*x11232))+((r01*x11230)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst5*r20*x11229))+(((-1.0)*gconst4*r21*x11231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11234=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11234.valid){
continue;
}
IkReal x11233=x11234.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11233))+((cj1*cj2*x11233)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11235=IKsin(j4);
IkReal x11236=IKcos(j4);
IkReal x11237=(gconst5*r00);
IkReal x11238=(gconst4*r01);
IkReal x11239=((1.0)*x11235);
IkReal x11240=((1.0)*x11236);
evalcond[0]=((-1.0)*r12*x11235);
evalcond[1]=((((-1.0)*r12*x11240))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*gconst5*r20*x11239))+((gconst4*r21*x11235)));
evalcond[3]=((((-1.0)*x11237*x11239))+((x11235*x11238)));
evalcond[4]=(((x11236*x11237))+((cj0*cj2*sj1))+(((-1.0)*x11238*x11240))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11241=IKPowWithIntegerCheck(r12,-1);
if(!x11241.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11241.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11242=IKsin(j4);
IkReal x11243=IKcos(j4);
IkReal x11244=(gconst5*r00);
IkReal x11245=(gconst5*r20);
IkReal x11246=((1.0)*x11242);
IkReal x11247=(gconst4*x11242);
IkReal x11248=((1.0)*gconst4*x11243);
evalcond[0]=((-1.0)*r12*x11242);
evalcond[1]=((((-1.0)*x11245*x11246))+((r21*x11247)));
evalcond[2]=((((-1.0)*x11244*x11246))+((r01*x11247)));
evalcond[3]=(((x11243*x11245))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x11248)));
evalcond[4]=(((x11243*x11244))+(((-1.0)*r01*x11248))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11249=((-1.0)*r21);
IkReal x11250=((-1.0)*r20);
CheckValue<IkReal> x11252 = IKatan2WithCheck(IkReal(x11249),IkReal(x11250),IKFAST_ATAN2_MAGTHRESH);
if(!x11252.valid){
continue;
}
IkReal x11251=((1.0)*(x11252.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11251)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11250);
rxp0_2=(py*r00);
rxp1_0=(py*x11249);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11251)));
IkReal gconst4=x11249;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11253=((-1.0)*r21);
IkReal x11254=((-1.0)*r20);
CheckValue<IkReal> x11256 = IKatan2WithCheck(IkReal(x11253),IkReal(x11254),IKFAST_ATAN2_MAGTHRESH);
if(!x11256.valid){
continue;
}
IkReal x11255=((1.0)*(x11256.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11255)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11254);
rxp0_2=(py*r00);
rxp1_0=(py*x11253);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11255)));
IkReal gconst4=x11253;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11257=((-1.0)*r21);
IkReal x11258=((-1.0)*r20);
CheckValue<IkReal> x11260 = IKatan2WithCheck(IkReal(x11257),IkReal(x11258),IKFAST_ATAN2_MAGTHRESH);
if(!x11260.valid){
continue;
}
IkReal x11259=((1.0)*(x11260.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11259)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11258);
rxp0_2=(py*r00);
rxp1_0=(py*x11257);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11259)));
IkReal gconst4=x11257;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11263=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*gconst5*r00))),-1);
if(!x11263.valid){
continue;
}
IkReal x11261=x11263.value;
IkReal x11262=((1.0)*cj0*x11261);
cj4array[0]=((((-1.0)*cj2*sj1*x11262))+(((-1.0)*cj1*sj2*x11262)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11264=IKsin(j4);
IkReal x11265=IKcos(j4);
IkReal x11266=(gconst4*x11264);
IkReal x11267=((1.0)*x11265);
IkReal x11268=((1.0)*gconst5*x11264);
evalcond[0]=(r12*x11264);
evalcond[1]=((((-1.0)*r12*x11267))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x11266))+(((-1.0)*r20*x11268)));
evalcond[3]=(((r01*x11266))+(((-1.0)*r00*x11268)));
evalcond[4]=(((gconst4*r21*x11265))+(((-1.0)*gconst5*r20*x11267))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11270=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11270.valid){
continue;
}
IkReal x11269=x11270.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11269))+((cj1*cj2*x11269)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11271=IKsin(j4);
IkReal x11272=IKcos(j4);
IkReal x11273=(gconst4*r01);
IkReal x11274=((1.0)*gconst5*r00);
evalcond[0]=(r12*x11271);
evalcond[1]=((((-1.0)*r12*x11272))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*gconst5*r20*x11271))+((gconst4*r21*x11271)));
evalcond[3]=((((-1.0)*x11271*x11274))+((x11271*x11273)));
evalcond[4]=(((cj0*cj2*sj1))+((cj0*cj1*sj2))+(((-1.0)*x11272*x11274))+((x11272*x11273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11275=IKPowWithIntegerCheck(r12,-1);
if(!x11275.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11275.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11276=IKsin(j4);
IkReal x11277=IKcos(j4);
IkReal x11278=((1.0)*gconst5*r00);
IkReal x11279=(gconst4*x11276);
IkReal x11280=(gconst4*x11277);
IkReal x11281=((1.0)*gconst5*r20);
evalcond[0]=(r12*x11276);
evalcond[1]=((((-1.0)*x11276*x11281))+((r21*x11279)));
evalcond[2]=(((r01*x11279))+(((-1.0)*x11276*x11278)));
evalcond[3]=(((r21*x11280))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11277*x11281)));
evalcond[4]=(((cj0*cj2*sj1))+(((-1.0)*x11277*x11278))+((cj0*cj1*sj2))+((r01*x11280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11283=IKPowWithIntegerCheck(r12,-1);
if(!x11283.valid){
continue;
}
IkReal x11282=x11283.value;
CheckValue<IkReal> x11284=IKPowWithIntegerCheck(sj3,-1);
if(!x11284.valid){
continue;
}
if( IKabs((x11282*(x11284.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x11282)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11282*(x11284.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x11282))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11282*(x11284.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x11282));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11285=IKsin(j4);
IkReal x11286=IKcos(j4);
IkReal x11287=((1.0)*r12);
IkReal x11288=(cj2*sj0);
IkReal x11289=(sj1*sj2);
IkReal x11290=(gconst4*sj3);
IkReal x11291=(cj1*cj2);
IkReal x11292=(gconst4*r01);
IkReal x11293=(cj2*sj1);
IkReal x11294=(gconst4*r21);
IkReal x11295=((1.0)*gconst5);
IkReal x11296=(gconst5*sj3);
IkReal x11297=(cj3*gconst5);
IkReal x11298=(cj3*gconst4);
IkReal x11299=(cj1*sj2);
IkReal x11300=((1.0)*cj0);
IkReal x11301=(cj3*x11286);
IkReal x11302=((1.0)*x11286);
IkReal x11303=(x11286*x11296);
evalcond[0]=((((-1.0)*x11300))+(((-1.0)*x11286*x11287)));
evalcond[1]=((((-1.0)*r20*x11285*x11295))+((x11285*x11294)));
evalcond[2]=(sj0+(((-1.0)*r00*x11285*x11295))+((x11285*x11292)));
evalcond[3]=((((-1.0)*sj3*x11285*x11287))+((sj1*x11288))+((sj0*x11299)));
evalcond[4]=((((-1.0)*sj0*x11289))+((cj1*x11288))+((cj3*r12*x11285)));
evalcond[5]=(((x11294*x11301))+x11299+x11293+((r21*x11296))+((r20*x11290))+(((-1.0)*r20*x11295*x11301)));
evalcond[6]=(((r20*x11303))+x11289+(((-1.0)*x11291))+((r21*x11297))+((r20*x11298))+(((-1.0)*r21*x11290*x11302)));
evalcond[7]=(((r01*x11297))+((cj0*x11293))+((cj0*x11299))+((r00*x11303))+(((-1.0)*r01*x11290*x11302))+((r00*x11298)));
evalcond[8]=(((x11292*x11301))+((r01*x11296))+(((-1.0)*r00*x11295*x11301))+((cj0*x11291))+(((-1.0)*x11289*x11300))+((r00*x11290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11304=((1.0)*gconst5);
CheckValue<IkReal> x11305=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*r00*x11304))),-1);
if(!x11305.valid){
continue;
}
CheckValue<IkReal> x11306=IKPowWithIntegerCheck((((cj3*gconst4*r21))+(((-1.0)*cj3*r20*x11304))),-1);
if(!x11306.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11305.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11306.value)*(((((-1.0)*r21*sj3*x11304))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11305.value)))+IKsqr(((x11306.value)*(((((-1.0)*r21*sj3*x11304))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11305.value)), ((x11306.value)*(((((-1.0)*r21*sj3*x11304))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11307=IKsin(j4);
IkReal x11308=IKcos(j4);
IkReal x11309=((1.0)*r12);
IkReal x11310=(cj2*sj0);
IkReal x11311=(sj1*sj2);
IkReal x11312=(gconst4*sj3);
IkReal x11313=(cj1*cj2);
IkReal x11314=(gconst4*r01);
IkReal x11315=(cj2*sj1);
IkReal x11316=(gconst4*r21);
IkReal x11317=((1.0)*gconst5);
IkReal x11318=(gconst5*sj3);
IkReal x11319=(cj3*gconst5);
IkReal x11320=(cj3*gconst4);
IkReal x11321=(cj1*sj2);
IkReal x11322=((1.0)*cj0);
IkReal x11323=(cj3*x11308);
IkReal x11324=((1.0)*x11308);
IkReal x11325=(x11308*x11318);
evalcond[0]=((((-1.0)*x11308*x11309))+(((-1.0)*x11322)));
evalcond[1]=((((-1.0)*r20*x11307*x11317))+((x11307*x11316)));
evalcond[2]=(sj0+(((-1.0)*r00*x11307*x11317))+((x11307*x11314)));
evalcond[3]=(((sj0*x11321))+((sj1*x11310))+(((-1.0)*sj3*x11307*x11309)));
evalcond[4]=(((cj1*x11310))+((cj3*r12*x11307))+(((-1.0)*sj0*x11311)));
evalcond[5]=(((x11316*x11323))+((r21*x11318))+(((-1.0)*r20*x11317*x11323))+x11321+x11315+((r20*x11312)));
evalcond[6]=((((-1.0)*r21*x11312*x11324))+((r21*x11319))+x11311+(((-1.0)*x11313))+((r20*x11325))+((r20*x11320)));
evalcond[7]=((((-1.0)*r01*x11312*x11324))+((cj0*x11315))+((cj0*x11321))+((r00*x11325))+((r00*x11320))+((r01*x11319)));
evalcond[8]=((((-1.0)*x11311*x11322))+(((-1.0)*r00*x11317*x11323))+((x11314*x11323))+((cj0*x11313))+((r01*x11318))+((r00*x11312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11326=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*gconst5*r00))),-1);
if(!x11326.valid){
continue;
}
CheckValue<IkReal> x11327=IKPowWithIntegerCheck(r12,-1);
if(!x11327.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11326.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x11327.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11326.value)))+IKsqr(((-1.0)*cj0*(x11327.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11326.value)), ((-1.0)*cj0*(x11327.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11328=IKsin(j4);
IkReal x11329=IKcos(j4);
IkReal x11330=((1.0)*r12);
IkReal x11331=(cj2*sj0);
IkReal x11332=(sj1*sj2);
IkReal x11333=(gconst4*sj3);
IkReal x11334=(cj1*cj2);
IkReal x11335=(gconst4*r01);
IkReal x11336=(cj2*sj1);
IkReal x11337=(gconst4*r21);
IkReal x11338=((1.0)*gconst5);
IkReal x11339=(gconst5*sj3);
IkReal x11340=(cj3*gconst5);
IkReal x11341=(cj3*gconst4);
IkReal x11342=(cj1*sj2);
IkReal x11343=((1.0)*cj0);
IkReal x11344=(cj3*x11329);
IkReal x11345=((1.0)*x11329);
IkReal x11346=(x11329*x11339);
evalcond[0]=((((-1.0)*x11343))+(((-1.0)*x11329*x11330)));
evalcond[1]=(((x11328*x11337))+(((-1.0)*r20*x11328*x11338)));
evalcond[2]=((((-1.0)*r00*x11328*x11338))+sj0+((x11328*x11335)));
evalcond[3]=((((-1.0)*sj3*x11328*x11330))+((sj0*x11342))+((sj1*x11331)));
evalcond[4]=((((-1.0)*sj0*x11332))+((cj3*r12*x11328))+((cj1*x11331)));
evalcond[5]=((((-1.0)*r20*x11338*x11344))+x11342+x11336+((r20*x11333))+((x11337*x11344))+((r21*x11339)));
evalcond[6]=((((-1.0)*r21*x11333*x11345))+x11332+((r20*x11341))+((r20*x11346))+(((-1.0)*x11334))+((r21*x11340)));
evalcond[7]=((((-1.0)*r01*x11333*x11345))+((cj0*x11336))+((cj0*x11342))+((r00*x11341))+((r00*x11346))+((r01*x11340)));
evalcond[8]=(((x11335*x11344))+(((-1.0)*r00*x11338*x11344))+((cj0*x11334))+(((-1.0)*x11332*x11343))+((r01*x11339))+((r00*x11333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11347=((1.0)*gconst5);
CheckValue<IkReal> x11348 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x11347))+(((-1.0)*cj0*r00*x11347))+((cj0*gconst4*r01))+((gconst4*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11348.valid){
continue;
}
CheckValue<IkReal> x11349=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11347))+(((-1.0)*gconst4*r20)))),-1);
if(!x11349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11348.value)+(((1.5707963267949)*(x11349.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11350=IKsin(j4);
IkReal x11351=IKcos(j4);
IkReal x11352=(gconst4*r11);
IkReal x11353=(cj2*sj0);
IkReal x11354=(sj1*sj2);
IkReal x11355=(gconst4*sj3);
IkReal x11356=(gconst5*r10);
IkReal x11357=(cj1*cj2);
IkReal x11358=(gconst4*r01);
IkReal x11359=(cj2*sj1);
IkReal x11360=(gconst4*r21);
IkReal x11361=(gconst5*r00);
IkReal x11362=(gconst5*sj3);
IkReal x11363=(cj3*gconst5);
IkReal x11364=(cj3*gconst4);
IkReal x11365=(cj1*sj2);
IkReal x11366=((1.0)*cj0);
IkReal x11367=((1.0)*x11351);
IkReal x11368=((1.0)*x11350);
IkReal x11369=(cj3*x11350);
IkReal x11370=(cj3*x11351);
IkReal x11371=(x11351*x11362);
evalcond[0]=((((-1.0)*r22*x11367))+((x11350*x11360))+(((-1.0)*gconst5*r20*x11368)));
evalcond[1]=(sj0+(((-1.0)*r02*x11367))+((x11350*x11358))+(((-1.0)*x11361*x11368)));
evalcond[2]=((((-1.0)*x11366))+(((-1.0)*x11356*x11368))+(((-1.0)*r12*x11367))+((x11350*x11352)));
evalcond[3]=(((r21*x11362))+x11359+x11365+((r22*x11369))+((r20*x11355))+((x11360*x11370))+(((-1.0)*r20*x11363*x11367)));
evalcond[4]=(((r20*x11371))+((r21*x11363))+(((-1.0)*r22*sj3*x11368))+x11354+(((-1.0)*r21*x11355*x11367))+(((-1.0)*x11357))+((r20*x11364)));
evalcond[5]=(((r01*x11363))+(((-1.0)*r02*sj3*x11368))+((r00*x11364))+((cj0*x11359))+(((-1.0)*r01*x11355*x11367))+((cj0*x11365))+((sj3*x11351*x11361)));
evalcond[6]=(((r01*x11362))+(((-1.0)*cj3*x11361*x11367))+((cj0*x11357))+((x11358*x11370))+(((-1.0)*x11354*x11366))+((r02*x11369))+((r00*x11355)));
evalcond[7]=((((-1.0)*r12*sj3*x11368))+((sj1*x11353))+((sj3*x11351*x11356))+((r10*x11364))+((r11*x11363))+((sj0*x11365))+(((-1.0)*sj3*x11352*x11367)));
evalcond[8]=(((r10*x11355))+(((-1.0)*sj0*x11354))+((r12*x11369))+((cj1*x11353))+((r11*x11362))+(((-1.0)*cj3*x11356*x11367))+((x11352*x11370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11372=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x11372.valid){
continue;
}
CheckValue<IkReal> x11373 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst5*r20))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11372.value)))+(x11373.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11374=IKsin(j4);
IkReal x11375=IKcos(j4);
IkReal x11376=(gconst4*r11);
IkReal x11377=(cj2*sj0);
IkReal x11378=(sj1*sj2);
IkReal x11379=(gconst4*sj3);
IkReal x11380=(gconst5*r10);
IkReal x11381=(cj1*cj2);
IkReal x11382=(gconst4*r01);
IkReal x11383=(cj2*sj1);
IkReal x11384=(gconst4*r21);
IkReal x11385=(gconst5*r00);
IkReal x11386=(gconst5*sj3);
IkReal x11387=(cj3*gconst5);
IkReal x11388=(cj3*gconst4);
IkReal x11389=(cj1*sj2);
IkReal x11390=((1.0)*cj0);
IkReal x11391=((1.0)*x11375);
IkReal x11392=((1.0)*x11374);
IkReal x11393=(cj3*x11374);
IkReal x11394=(cj3*x11375);
IkReal x11395=(x11375*x11386);
evalcond[0]=((((-1.0)*gconst5*r20*x11392))+(((-1.0)*r22*x11391))+((x11374*x11384)));
evalcond[1]=(sj0+(((-1.0)*r02*x11391))+(((-1.0)*x11385*x11392))+((x11374*x11382)));
evalcond[2]=(((x11374*x11376))+(((-1.0)*x11390))+(((-1.0)*x11380*x11392))+(((-1.0)*r12*x11391)));
evalcond[3]=(((r20*x11379))+x11383+x11389+((x11384*x11394))+((r21*x11386))+((r22*x11393))+(((-1.0)*r20*x11387*x11391)));
evalcond[4]=(((r20*x11395))+((r20*x11388))+x11378+(((-1.0)*r21*x11379*x11391))+((r21*x11387))+(((-1.0)*r22*sj3*x11392))+(((-1.0)*x11381)));
evalcond[5]=(((cj0*x11383))+((cj0*x11389))+((sj3*x11375*x11385))+((r01*x11387))+((r00*x11388))+(((-1.0)*r01*x11379*x11391))+(((-1.0)*r02*sj3*x11392)));
evalcond[6]=(((r00*x11379))+((r02*x11393))+((x11382*x11394))+((cj0*x11381))+(((-1.0)*x11378*x11390))+((r01*x11386))+(((-1.0)*cj3*x11385*x11391)));
evalcond[7]=(((r11*x11387))+((r10*x11388))+(((-1.0)*r12*sj3*x11392))+((sj3*x11375*x11380))+((sj0*x11389))+(((-1.0)*sj3*x11376*x11391))+((sj1*x11377)));
evalcond[8]=(((r11*x11386))+(((-1.0)*sj0*x11378))+((x11376*x11394))+(((-1.0)*cj3*x11380*x11391))+((cj1*x11377))+((r12*x11393))+((r10*x11379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11396=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11396.valid){
continue;
}
CheckValue<IkReal> x11397 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst5*r20*sj0))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11396.value)))+(x11397.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11398=IKsin(j4);
IkReal x11399=IKcos(j4);
IkReal x11400=(gconst4*r11);
IkReal x11401=(cj2*sj0);
IkReal x11402=(sj1*sj2);
IkReal x11403=(gconst4*sj3);
IkReal x11404=(gconst5*r10);
IkReal x11405=(cj1*cj2);
IkReal x11406=(gconst4*r01);
IkReal x11407=(cj2*sj1);
IkReal x11408=(gconst4*r21);
IkReal x11409=(gconst5*r00);
IkReal x11410=(gconst5*sj3);
IkReal x11411=(cj3*gconst5);
IkReal x11412=(cj3*gconst4);
IkReal x11413=(cj1*sj2);
IkReal x11414=((1.0)*cj0);
IkReal x11415=((1.0)*x11399);
IkReal x11416=((1.0)*x11398);
IkReal x11417=(cj3*x11398);
IkReal x11418=(cj3*x11399);
IkReal x11419=(x11399*x11410);
evalcond[0]=((((-1.0)*gconst5*r20*x11416))+((x11398*x11408))+(((-1.0)*r22*x11415)));
evalcond[1]=(sj0+(((-1.0)*x11409*x11416))+((x11398*x11406))+(((-1.0)*r02*x11415)));
evalcond[2]=((((-1.0)*x11404*x11416))+(((-1.0)*r12*x11415))+(((-1.0)*x11414))+((x11398*x11400)));
evalcond[3]=(x11413+x11407+((r22*x11417))+(((-1.0)*r20*x11411*x11415))+((r21*x11410))+((r20*x11403))+((x11408*x11418)));
evalcond[4]=((((-1.0)*r22*sj3*x11416))+x11402+((r21*x11411))+(((-1.0)*x11405))+((r20*x11412))+((r20*x11419))+(((-1.0)*r21*x11403*x11415)));
evalcond[5]=((((-1.0)*r02*sj3*x11416))+((r01*x11411))+((cj0*x11413))+(((-1.0)*r01*x11403*x11415))+((r00*x11412))+((cj0*x11407))+((sj3*x11399*x11409)));
evalcond[6]=((((-1.0)*x11402*x11414))+((r01*x11410))+(((-1.0)*cj3*x11409*x11415))+((cj0*x11405))+((r02*x11417))+((x11406*x11418))+((r00*x11403)));
evalcond[7]=(((r10*x11412))+((sj0*x11413))+(((-1.0)*sj3*x11400*x11415))+((r11*x11411))+(((-1.0)*r12*sj3*x11416))+((sj3*x11399*x11404))+((sj1*x11401)));
evalcond[8]=(((cj1*x11401))+(((-1.0)*sj0*x11402))+((r10*x11403))+(((-1.0)*cj3*x11404*x11415))+((x11400*x11418))+((r12*x11417))+((r11*x11410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11421 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11421)==0){
continue;
}
IkReal x11420=pow(x11421,-0.5);
CheckValue<IkReal> x11422 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11422.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11422.value));
IkReal gconst7=((-1.0)*r01*x11420);
IkReal gconst8=(r00*x11420);
CheckValue<IkReal> x11423 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11423.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11423.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x11426 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11426.valid){
continue;
}
IkReal x11424=((-1.0)*(x11426.value));
IkReal x11425=x11420;
sj5=gconst7;
cj5=gconst8;
j5=x11424;
IkReal gconst6=x11424;
IkReal gconst7=((-1.0)*r01*x11425);
IkReal gconst8=(r00*x11425);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11427=((1.0)*gconst8);
CheckValue<IkReal> x11428=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r20))+(((-1.0)*r21*x11427)))),-1);
if(!x11428.valid){
continue;
}
CheckValue<IkReal> x11429 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst7*r01))+(((-1.0)*cj0*r00*x11427))+((gconst7*r11*sj0))+(((-1.0)*r10*sj0*x11427)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11428.value)))+(x11429.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11430=IKsin(j4);
IkReal x11431=IKcos(j4);
IkReal x11432=(gconst7*sj3);
IkReal x11433=(cj3*gconst8);
IkReal x11434=(cj2*sj0);
IkReal x11435=(cj3*gconst7);
IkReal x11436=(sj1*sj2);
IkReal x11437=(cj1*cj2);
IkReal x11438=(cj2*sj1);
IkReal x11439=((1.0)*cj0);
IkReal x11440=(gconst8*sj3);
IkReal x11441=(cj1*sj2);
IkReal x11442=((1.0)*x11431);
IkReal x11443=((1.0)*x11430);
IkReal x11444=(cj3*x11430);
IkReal x11445=(gconst7*x11430);
IkReal x11446=(x11431*x11440);
evalcond[0]=((((-1.0)*gconst8*r20*x11443))+(((-1.0)*r22*x11442))+((r21*x11445)));
evalcond[1]=((((-1.0)*gconst8*r00*x11443))+sj0+(((-1.0)*r02*x11442))+((r01*x11445)));
evalcond[2]=((((-1.0)*r12*x11442))+((r11*x11445))+(((-1.0)*gconst8*r10*x11443))+(((-1.0)*x11439)));
evalcond[3]=(((r20*x11432))+x11438+x11441+((r22*x11444))+(((-1.0)*r20*x11433*x11442))+((r21*x11431*x11435))+((r21*x11440)));
evalcond[4]=(((r20*x11435))+x11436+(((-1.0)*r22*sj3*x11443))+((r21*x11433))+(((-1.0)*r21*x11432*x11442))+(((-1.0)*x11437))+((r20*x11446)));
evalcond[5]=(((r00*x11446))+(((-1.0)*r02*sj3*x11443))+((cj0*x11438))+((cj0*x11441))+(((-1.0)*r01*x11432*x11442))+((r01*x11433))+((r00*x11435)));
evalcond[6]=(((cj0*x11437))+(((-1.0)*x11436*x11439))+((r00*x11432))+((r02*x11444))+(((-1.0)*r00*x11433*x11442))+((r01*x11431*x11435))+((r01*x11440)));
evalcond[7]=(((r10*x11435))+(((-1.0)*r11*x11432*x11442))+((sj1*x11434))+((r10*x11446))+(((-1.0)*r12*sj3*x11443))+((r11*x11433))+((sj0*x11441)));
evalcond[8]=(((r12*x11444))+((r11*x11431*x11435))+((r10*x11432))+((r11*x11440))+(((-1.0)*r10*x11433*x11442))+(((-1.0)*sj0*x11436))+((cj1*x11434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11447 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst8*r20*sj0))+((gconst7*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11447.valid){
continue;
}
CheckValue<IkReal> x11448=IKPowWithIntegerCheck(IKsign((((gconst7*r10))+((gconst8*r11)))),-1);
if(!x11448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11447.value)+(((1.5707963267949)*(x11448.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11449=IKsin(j4);
IkReal x11450=IKcos(j4);
IkReal x11451=(gconst7*sj3);
IkReal x11452=(cj3*gconst8);
IkReal x11453=(cj2*sj0);
IkReal x11454=(cj3*gconst7);
IkReal x11455=(sj1*sj2);
IkReal x11456=(cj1*cj2);
IkReal x11457=(cj2*sj1);
IkReal x11458=((1.0)*cj0);
IkReal x11459=(gconst8*sj3);
IkReal x11460=(cj1*sj2);
IkReal x11461=((1.0)*x11450);
IkReal x11462=((1.0)*x11449);
IkReal x11463=(cj3*x11449);
IkReal x11464=(gconst7*x11449);
IkReal x11465=(x11450*x11459);
evalcond[0]=((((-1.0)*gconst8*r20*x11462))+(((-1.0)*r22*x11461))+((r21*x11464)));
evalcond[1]=(((r01*x11464))+sj0+(((-1.0)*gconst8*r00*x11462))+(((-1.0)*r02*x11461)));
evalcond[2]=((((-1.0)*r12*x11461))+((r11*x11464))+(((-1.0)*gconst8*r10*x11462))+(((-1.0)*x11458)));
evalcond[3]=(x11457+x11460+((r20*x11451))+((r22*x11463))+((r21*x11459))+((r21*x11450*x11454))+(((-1.0)*r20*x11452*x11461)));
evalcond[4]=(x11455+((r20*x11454))+((r21*x11452))+(((-1.0)*r22*sj3*x11462))+(((-1.0)*r21*x11451*x11461))+(((-1.0)*x11456))+((r20*x11465)));
evalcond[5]=((((-1.0)*r02*sj3*x11462))+((cj0*x11457))+((r01*x11452))+((r00*x11454))+((cj0*x11460))+(((-1.0)*r01*x11451*x11461))+((r00*x11465)));
evalcond[6]=(((r01*x11450*x11454))+((cj0*x11456))+(((-1.0)*x11455*x11458))+((r01*x11459))+(((-1.0)*r00*x11452*x11461))+((r00*x11451))+((r02*x11463)));
evalcond[7]=((((-1.0)*r11*x11451*x11461))+((r10*x11454))+((sj1*x11453))+((r10*x11465))+(((-1.0)*r12*sj3*x11462))+((sj0*x11460))+((r11*x11452)));
evalcond[8]=(((r11*x11450*x11454))+((r10*x11451))+((r12*x11463))+(((-1.0)*sj0*x11455))+(((-1.0)*r10*x11452*x11461))+((cj1*x11453))+((r11*x11459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11467 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11467)==0){
continue;
}
IkReal x11466=pow(x11467,-0.5);
CheckValue<IkReal> x11468 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11468.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11468.value))));
IkReal gconst10=((1.0)*r01*x11466);
IkReal gconst11=((-1.0)*r00*x11466);
CheckValue<IkReal> x11469 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11469.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11469.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x11472 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11472.valid){
continue;
}
IkReal x11470=((1.0)*(x11472.value));
IkReal x11471=x11466;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11470)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11470)));
IkReal gconst10=((1.0)*r01*x11471);
IkReal gconst11=((-1.0)*r00*x11471);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x11475 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11475.valid){
continue;
}
IkReal x11473=((1.0)*(x11475.value));
IkReal x11474=x11466;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11473)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11473)));
IkReal gconst10=((1.0)*r01*x11474);
IkReal gconst11=((-1.0)*r00*x11474);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11478 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11478.valid){
continue;
}
IkReal x11476=((1.0)*(x11478.value));
IkReal x11477=x11466;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11476)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11476)));
IkReal gconst10=((1.0)*r01*x11477);
IkReal gconst11=((-1.0)*r00*x11477);
IkReal x11479=r02*r02;
IkReal x11480=(r12*sj0);
IkReal x11481=x11466;
IkReal x11482=(cj0*x11481);
j4eval[0]=((IKabs((x11480+((cj0*r02)))))+(IKabs((((r02*x11480*x11481))+(((-1.0)*x11482))+((x11479*x11482))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11485 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11485.valid){
continue;
}
IkReal x11483=((1.0)*(x11485.value));
IkReal x11484=x11466;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11483)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11483)));
IkReal gconst10=((1.0)*r01*x11484);
IkReal gconst11=((-1.0)*r00*x11484);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11488 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11488.valid){
continue;
}
IkReal x11486=((1.0)*(x11488.value));
IkReal x11487=x11466;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11486)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11486)));
IkReal gconst10=((1.0)*r01*x11487);
IkReal gconst11=((-1.0)*r00*x11487);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11489=gconst10*gconst10;
IkReal x11490=gconst11*gconst11;
IkReal x11491=(r11*sj3);
IkReal x11492=((1.0)*cj3);
IkReal x11493=(cj3*r10);
IkReal x11494=(gconst10*gconst11);
IkReal x11495=(r10*sj3);
IkReal x11496=(r21*x11489);
IkReal x11497=((1.0)*r20*x11490);
CheckValue<IkReal> x11498=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x11492))+(((-1.0)*r11*x11492*x11496))+((r21*x11493*x11494))+((cj3*r11*r20*x11494))+(((-1.0)*r10*r20*x11490*x11492)))),-1);
if(!x11498.valid){
continue;
}
CheckValue<IkReal> x11499 = IKatan2WithCheck(IkReal((((gconst10*r22*x11495))+((gconst11*r22*x11491)))),IkReal(((((-1.0)*x11491*x11497))+(((-1.0)*r20*x11494*x11495))+((r21*x11491*x11494))+((x11495*x11496)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11498.value)))+(x11499.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11500=IKsin(j4);
IkReal x11501=IKcos(j4);
IkReal x11502=(cj2*sj1);
IkReal x11503=(cj1*sj2);
IkReal x11504=(cj3*r10);
IkReal x11505=(gconst11*r20);
IkReal x11506=(gconst11*r21);
IkReal x11507=(cj3*gconst11);
IkReal x11508=(sj1*sj2);
IkReal x11509=(r10*sj3);
IkReal x11510=(cj1*cj2);
IkReal x11511=(gconst10*sj3);
IkReal x11512=(gconst11*sj3);
IkReal x11513=(cj3*gconst10);
IkReal x11514=((1.0)*x11501);
IkReal x11515=((1.0)*x11500);
IkReal x11516=(cj3*x11500);
IkReal x11517=(gconst10*x11500);
IkReal x11518=(gconst11*x11501);
IkReal x11519=(x11502+x11503);
IkReal x11520=(x11501*x11513);
evalcond[0]=((((-1.0)*r22*x11514))+((r21*x11517))+(((-1.0)*x11505*x11515)));
evalcond[1]=(((r01*x11517))+(((-1.0)*gconst11*r00*x11515))+(((-1.0)*r02*x11514)));
evalcond[2]=((-1.0)+(((-1.0)*gconst11*r10*x11515))+(((-1.0)*r12*x11514))+((r11*x11517)));
evalcond[3]=(((gconst10*x11509))+((r11*x11520))+(((-1.0)*gconst11*x11504*x11514))+((r12*x11516))+((r11*x11512)));
evalcond[4]=(((x11509*x11518))+((gconst10*x11504))+(((-1.0)*r11*x11511*x11514))+((r11*x11507))+(((-1.0)*r12*sj3*x11515)));
evalcond[5]=(x11519+((r20*x11511))+(((-1.0)*cj3*x11505*x11514))+((sj3*x11506))+((r21*x11520))+((r22*x11516)));
evalcond[6]=((((-1.0)*r01*x11511*x11514))+x11519+((r01*x11507))+(((-1.0)*r02*sj3*x11515))+((r00*x11513))+((r00*x11501*x11512)));
evalcond[7]=(((r01*x11512))+x11510+((r02*x11516))+((r01*x11520))+(((-1.0)*x11508))+(((-1.0)*r00*x11507*x11514))+((r00*x11511)));
evalcond[8]=((((-1.0)*r21*x11511*x11514))+(((-1.0)*x11510))+x11508+((r20*x11513))+(((-1.0)*r22*sj3*x11515))+((cj3*x11506))+((sj3*x11501*x11505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11521=((1.0)*gconst11);
CheckValue<IkReal> x11522 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x11521))+((gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11522.valid){
continue;
}
CheckValue<IkReal> x11523=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11521)))),-1);
if(!x11523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11522.value)+(((1.5707963267949)*(x11523.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11524=IKsin(j4);
IkReal x11525=IKcos(j4);
IkReal x11526=(cj2*sj1);
IkReal x11527=(cj1*sj2);
IkReal x11528=(cj3*r10);
IkReal x11529=(gconst11*r20);
IkReal x11530=(gconst11*r21);
IkReal x11531=(cj3*gconst11);
IkReal x11532=(sj1*sj2);
IkReal x11533=(r10*sj3);
IkReal x11534=(cj1*cj2);
IkReal x11535=(gconst10*sj3);
IkReal x11536=(gconst11*sj3);
IkReal x11537=(cj3*gconst10);
IkReal x11538=((1.0)*x11525);
IkReal x11539=((1.0)*x11524);
IkReal x11540=(cj3*x11524);
IkReal x11541=(gconst10*x11524);
IkReal x11542=(gconst11*x11525);
IkReal x11543=(x11526+x11527);
IkReal x11544=(x11525*x11537);
evalcond[0]=(((r21*x11541))+(((-1.0)*r22*x11538))+(((-1.0)*x11529*x11539)));
evalcond[1]=(((r01*x11541))+(((-1.0)*gconst11*r00*x11539))+(((-1.0)*r02*x11538)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x11538))+(((-1.0)*gconst11*r10*x11539))+((r11*x11541)));
evalcond[3]=(((gconst10*x11533))+(((-1.0)*gconst11*x11528*x11538))+((r11*x11536))+((r12*x11540))+((r11*x11544)));
evalcond[4]=((((-1.0)*r12*sj3*x11539))+((x11533*x11542))+((r11*x11531))+(((-1.0)*r11*x11535*x11538))+((gconst10*x11528)));
evalcond[5]=(x11543+((sj3*x11530))+((r21*x11544))+((r20*x11535))+((r22*x11540))+(((-1.0)*cj3*x11529*x11538)));
evalcond[6]=((((-1.0)*r01*x11535*x11538))+x11543+(((-1.0)*r02*sj3*x11539))+((r01*x11531))+((r00*x11537))+((r00*x11525*x11536)));
evalcond[7]=(x11534+((r01*x11544))+((r01*x11536))+((r00*x11535))+(((-1.0)*x11532))+((r02*x11540))+(((-1.0)*r00*x11531*x11538)));
evalcond[8]=(x11532+(((-1.0)*r21*x11535*x11538))+((r20*x11537))+(((-1.0)*r22*sj3*x11539))+((cj3*x11530))+(((-1.0)*x11534))+((sj3*x11525*x11529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11545 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst10*r21))+(((-1.0)*gconst11*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11545.valid){
continue;
}
CheckValue<IkReal> x11546=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x11546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11545.value)+(((1.5707963267949)*(x11546.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11547=IKsin(j4);
IkReal x11548=IKcos(j4);
IkReal x11549=(cj2*sj1);
IkReal x11550=(cj1*sj2);
IkReal x11551=(cj3*r10);
IkReal x11552=(gconst11*r20);
IkReal x11553=(gconst11*r21);
IkReal x11554=(cj3*gconst11);
IkReal x11555=(sj1*sj2);
IkReal x11556=(r10*sj3);
IkReal x11557=(cj1*cj2);
IkReal x11558=(gconst10*sj3);
IkReal x11559=(gconst11*sj3);
IkReal x11560=(cj3*gconst10);
IkReal x11561=((1.0)*x11548);
IkReal x11562=((1.0)*x11547);
IkReal x11563=(cj3*x11547);
IkReal x11564=(gconst10*x11547);
IkReal x11565=(gconst11*x11548);
IkReal x11566=(x11549+x11550);
IkReal x11567=(x11548*x11560);
evalcond[0]=((((-1.0)*x11552*x11562))+((r21*x11564))+(((-1.0)*r22*x11561)));
evalcond[1]=((((-1.0)*gconst11*r00*x11562))+((r01*x11564))+(((-1.0)*r02*x11561)));
evalcond[2]=((-1.0)+(((-1.0)*gconst11*r10*x11562))+((r11*x11564))+(((-1.0)*r12*x11561)));
evalcond[3]=(((r11*x11559))+(((-1.0)*gconst11*x11551*x11561))+((r11*x11567))+((r12*x11563))+((gconst10*x11556)));
evalcond[4]=(((r11*x11554))+((x11556*x11565))+(((-1.0)*r11*x11558*x11561))+((gconst10*x11551))+(((-1.0)*r12*sj3*x11562)));
evalcond[5]=(x11566+((sj3*x11553))+((r22*x11563))+((r21*x11567))+(((-1.0)*cj3*x11552*x11561))+((r20*x11558)));
evalcond[6]=(x11566+((r00*x11560))+(((-1.0)*r01*x11558*x11561))+(((-1.0)*r02*sj3*x11562))+((r01*x11554))+((r00*x11548*x11559)));
evalcond[7]=(x11557+((r01*x11567))+((r02*x11563))+((r00*x11558))+((r01*x11559))+(((-1.0)*r00*x11554*x11561))+(((-1.0)*x11555)));
evalcond[8]=(x11555+((r20*x11560))+((cj3*x11553))+((sj3*x11548*x11552))+(((-1.0)*r21*x11558*x11561))+(((-1.0)*r22*sj3*x11562))+(((-1.0)*x11557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11570 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11570.valid){
continue;
}
IkReal x11568=((1.0)*(x11570.value));
IkReal x11569=x11466;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11568)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11568)));
IkReal gconst10=((1.0)*r01*x11569);
IkReal gconst11=((-1.0)*r00*x11569);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11573 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11573.valid){
continue;
}
IkReal x11571=((1.0)*(x11573.value));
IkReal x11572=x11466;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11571)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11571)));
IkReal gconst10=((1.0)*r01*x11572);
IkReal gconst11=((-1.0)*r00*x11572);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11574=gconst10*gconst10;
IkReal x11575=gconst11*gconst11;
IkReal x11576=(r11*sj3);
IkReal x11577=((1.0)*cj3);
IkReal x11578=(cj3*r10);
IkReal x11579=(gconst10*gconst11);
IkReal x11580=(r10*sj3);
IkReal x11581=(r21*x11574);
IkReal x11582=((1.0)*r20*x11575);
CheckValue<IkReal> x11583=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x11575*x11577))+(((-1.0)*r11*x11577*x11581))+(((-1.0)*r12*r22*x11577))+((r21*x11578*x11579))+((cj3*r11*r20*x11579)))),-1);
if(!x11583.valid){
continue;
}
CheckValue<IkReal> x11584 = IKatan2WithCheck(IkReal((((gconst10*r22*x11580))+((gconst11*r22*x11576)))),IkReal((((r21*x11576*x11579))+(((-1.0)*r20*x11579*x11580))+((x11580*x11581))+(((-1.0)*x11576*x11582)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11583.value)))+(x11584.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11585=IKsin(j4);
IkReal x11586=IKcos(j4);
IkReal x11587=(sj1*sj2);
IkReal x11588=(cj3*r10);
IkReal x11589=(gconst11*r20);
IkReal x11590=(gconst11*r21);
IkReal x11591=(cj3*gconst11);
IkReal x11592=(r10*sj3);
IkReal x11593=((1.0)*cj1);
IkReal x11594=(gconst10*sj3);
IkReal x11595=(cj2*sj1);
IkReal x11596=(gconst11*sj3);
IkReal x11597=(cj3*gconst10);
IkReal x11598=(cj2*x11593);
IkReal x11599=((1.0)*x11586);
IkReal x11600=((1.0)*x11585);
IkReal x11601=(cj3*x11585);
IkReal x11602=(gconst10*x11585);
IkReal x11603=(gconst11*x11586);
IkReal x11604=(x11586*x11597);
evalcond[0]=(((r21*x11602))+(((-1.0)*x11589*x11600))+(((-1.0)*r22*x11599)));
evalcond[1]=(((r01*x11602))+(((-1.0)*gconst11*r00*x11600))+(((-1.0)*r02*x11599)));
evalcond[2]=((1.0)+(((-1.0)*gconst11*r10*x11600))+(((-1.0)*r12*x11599))+((r11*x11602)));
evalcond[3]=(((gconst10*x11592))+(((-1.0)*gconst11*x11588*x11599))+((r11*x11596))+((r11*x11604))+((r12*x11601)));
evalcond[4]=((((-1.0)*r11*x11594*x11599))+((x11592*x11603))+((r11*x11591))+(((-1.0)*r12*sj3*x11600))+((gconst10*x11588)));
evalcond[5]=(x11595+((r20*x11594))+((cj1*sj2))+((r22*x11601))+((r21*x11604))+(((-1.0)*cj3*x11589*x11599))+((sj3*x11590)));
evalcond[6]=((((-1.0)*r00*x11591*x11599))+x11587+((r01*x11604))+((r01*x11596))+((r00*x11594))+((r02*x11601))+(((-1.0)*x11598)));
evalcond[7]=((((-1.0)*r21*x11594*x11599))+x11587+((r20*x11597))+((sj3*x11586*x11589))+(((-1.0)*x11598))+(((-1.0)*r22*sj3*x11600))+((cj3*x11590)));
evalcond[8]=((((-1.0)*r02*sj3*x11600))+((r01*x11591))+(((-1.0)*r01*x11594*x11599))+((r00*x11597))+(((-1.0)*x11595))+(((-1.0)*sj2*x11593))+((r00*x11586*x11596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11605=((1.0)*gconst11);
CheckValue<IkReal> x11606=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x11605)))),-1);
if(!x11606.valid){
continue;
}
CheckValue<IkReal> x11607 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11605))+((gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11606.value)))+(x11607.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11608=IKsin(j4);
IkReal x11609=IKcos(j4);
IkReal x11610=(sj1*sj2);
IkReal x11611=(cj3*r10);
IkReal x11612=(gconst11*r20);
IkReal x11613=(gconst11*r21);
IkReal x11614=(cj3*gconst11);
IkReal x11615=(r10*sj3);
IkReal x11616=((1.0)*cj1);
IkReal x11617=(gconst10*sj3);
IkReal x11618=(cj2*sj1);
IkReal x11619=(gconst11*sj3);
IkReal x11620=(cj3*gconst10);
IkReal x11621=(cj2*x11616);
IkReal x11622=((1.0)*x11609);
IkReal x11623=((1.0)*x11608);
IkReal x11624=(cj3*x11608);
IkReal x11625=(gconst10*x11608);
IkReal x11626=(gconst11*x11609);
IkReal x11627=(x11609*x11620);
evalcond[0]=(((r21*x11625))+(((-1.0)*r22*x11622))+(((-1.0)*x11612*x11623)));
evalcond[1]=((((-1.0)*gconst11*r00*x11623))+((r01*x11625))+(((-1.0)*r02*x11622)));
evalcond[2]=((1.0)+((r11*x11625))+(((-1.0)*r12*x11622))+(((-1.0)*gconst11*r10*x11623)));
evalcond[3]=(((r12*x11624))+((r11*x11627))+((r11*x11619))+(((-1.0)*gconst11*x11611*x11622))+((gconst10*x11615)));
evalcond[4]=(((x11615*x11626))+((r11*x11614))+(((-1.0)*r11*x11617*x11622))+((gconst10*x11611))+(((-1.0)*r12*sj3*x11623)));
evalcond[5]=(x11618+((cj1*sj2))+((r22*x11624))+((r21*x11627))+((sj3*x11613))+(((-1.0)*cj3*x11612*x11622))+((r20*x11617)));
evalcond[6]=(x11610+(((-1.0)*x11621))+(((-1.0)*r00*x11614*x11622))+((r02*x11624))+((r00*x11617))+((r01*x11627))+((r01*x11619)));
evalcond[7]=(x11610+((cj3*x11613))+(((-1.0)*x11621))+((sj3*x11609*x11612))+(((-1.0)*r22*sj3*x11623))+((r20*x11620))+(((-1.0)*r21*x11617*x11622)));
evalcond[8]=((((-1.0)*r01*x11617*x11622))+(((-1.0)*sj2*x11616))+(((-1.0)*x11618))+((r00*x11609*x11619))+(((-1.0)*r02*sj3*x11623))+((r00*x11620))+((r01*x11614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11628 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst10*r01))+(((-1.0)*gconst11*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11628.valid){
continue;
}
CheckValue<IkReal> x11629=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11629.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11628.value)+(((1.5707963267949)*(x11629.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11630=IKsin(j4);
IkReal x11631=IKcos(j4);
IkReal x11632=(sj1*sj2);
IkReal x11633=(cj3*r10);
IkReal x11634=(gconst11*r20);
IkReal x11635=(gconst11*r21);
IkReal x11636=(cj3*gconst11);
IkReal x11637=(r10*sj3);
IkReal x11638=((1.0)*cj1);
IkReal x11639=(gconst10*sj3);
IkReal x11640=(cj2*sj1);
IkReal x11641=(gconst11*sj3);
IkReal x11642=(cj3*gconst10);
IkReal x11643=(cj2*x11638);
IkReal x11644=((1.0)*x11631);
IkReal x11645=((1.0)*x11630);
IkReal x11646=(cj3*x11630);
IkReal x11647=(gconst10*x11630);
IkReal x11648=(gconst11*x11631);
IkReal x11649=(x11631*x11642);
evalcond[0]=((((-1.0)*r22*x11644))+((r21*x11647))+(((-1.0)*x11634*x11645)));
evalcond[1]=((((-1.0)*gconst11*r00*x11645))+((r01*x11647))+(((-1.0)*r02*x11644)));
evalcond[2]=((1.0)+(((-1.0)*r12*x11644))+((r11*x11647))+(((-1.0)*gconst11*r10*x11645)));
evalcond[3]=(((r11*x11649))+((r11*x11641))+((r12*x11646))+(((-1.0)*gconst11*x11633*x11644))+((gconst10*x11637)));
evalcond[4]=((((-1.0)*r11*x11639*x11644))+((r11*x11636))+((x11637*x11648))+(((-1.0)*r12*sj3*x11645))+((gconst10*x11633)));
evalcond[5]=(x11640+((cj1*sj2))+((r22*x11646))+((r21*x11649))+((sj3*x11635))+((r20*x11639))+(((-1.0)*cj3*x11634*x11644)));
evalcond[6]=(x11632+((r02*x11646))+(((-1.0)*r00*x11636*x11644))+((r00*x11639))+((r01*x11641))+((r01*x11649))+(((-1.0)*x11643)));
evalcond[7]=(x11632+(((-1.0)*r21*x11639*x11644))+((cj3*x11635))+((sj3*x11631*x11634))+((r20*x11642))+(((-1.0)*r22*sj3*x11645))+(((-1.0)*x11643)));
evalcond[8]=((((-1.0)*x11640))+(((-1.0)*r01*x11639*x11644))+((r00*x11631*x11641))+(((-1.0)*r02*sj3*x11645))+(((-1.0)*sj2*x11638))+((r00*x11642))+((r01*x11636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x11652 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11652.valid){
continue;
}
IkReal x11650=((1.0)*(x11652.value));
IkReal x11651=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11650)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11651);
rxp0_2=(py*r00);
rxp1_0=(r21*x11651);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11650)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=1.0;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11655 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11655.valid){
continue;
}
IkReal x11653=((1.0)*(x11655.value));
IkReal x11654=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11653)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11654);
rxp0_2=(py*r00);
rxp1_0=(r21*x11654);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11653)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
IkReal x11656=((1.0)*cj3);
j4eval[0]=1.0;
j4eval[1]=(((r01*r21*x11656))+((r00*r20*x11656)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11659 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11659.valid){
continue;
}
IkReal x11657=((1.0)*(x11659.value));
IkReal x11658=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11657)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11658);
rxp0_2=(py*r00);
rxp1_0=(r21*x11658);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11657)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11662 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11662.valid){
continue;
}
IkReal x11660=((1.0)*(x11662.value));
IkReal x11661=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11660)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11661);
rxp0_2=(py*r00);
rxp1_0=(r21*x11661);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11660)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11665 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11665.valid){
continue;
}
IkReal x11663=((1.0)*(x11665.value));
IkReal x11664=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11663)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11664);
rxp0_2=(py*r00);
rxp1_0=(r21*x11664);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11663)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11668 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11668.valid){
continue;
}
IkReal x11666=((1.0)*(x11668.value));
IkReal x11667=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11666)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11667);
rxp0_2=(py*r00);
rxp1_0=(r21*x11667);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11666)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11671=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*gconst11*r00))),-1);
if(!x11671.valid){
continue;
}
IkReal x11669=x11671.value;
IkReal x11670=(cj0*x11669);
cj4array[0]=((((-1.0)*cj1*cj2*x11670))+((sj1*sj2*x11670)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11672=IKsin(j4);
IkReal x11673=IKcos(j4);
IkReal x11674=(gconst10*r21);
IkReal x11675=((1.0)*gconst11*r20);
evalcond[0]=(r12*x11672);
evalcond[1]=((((-1.0)*r12*x11673))+(((-1.0)*cj0)));
evalcond[2]=(((x11672*x11674))+(((-1.0)*x11672*x11675)));
evalcond[3]=((((-1.0)*gconst11*r00*x11672))+((gconst10*r01*x11672)));
evalcond[4]=(((cj2*sj1))+((x11673*x11674))+(((-1.0)*x11673*x11675))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11678=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x11678.valid){
continue;
}
IkReal x11676=x11678.value;
IkReal x11677=((1.0)*x11676);
cj4array[0]=((((-1.0)*cj1*sj2*x11677))+(((-1.0)*cj2*sj1*x11677)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11679=IKsin(j4);
IkReal x11680=IKcos(j4);
IkReal x11681=(gconst10*r01);
IkReal x11682=((1.0)*cj0);
IkReal x11683=((1.0)*x11680);
IkReal x11684=((1.0)*gconst11*x11679);
evalcond[0]=(r12*x11679);
evalcond[1]=((((-1.0)*x11682))+(((-1.0)*r12*x11683)));
evalcond[2]=(((gconst10*r21*x11679))+(((-1.0)*r20*x11684)));
evalcond[3]=((((-1.0)*r00*x11684))+((x11679*x11681)));
evalcond[4]=(((x11680*x11681))+((cj0*cj1*cj2))+(((-1.0)*gconst11*r00*x11683))+(((-1.0)*sj1*sj2*x11682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11685=IKPowWithIntegerCheck(r12,-1);
if(!x11685.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11685.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11686=IKsin(j4);
IkReal x11687=IKcos(j4);
IkReal x11688=(gconst10*x11687);
IkReal x11689=(gconst10*x11686);
IkReal x11690=((1.0)*gconst11*r20);
IkReal x11691=((1.0)*gconst11*r00);
evalcond[0]=(r12*x11686);
evalcond[1]=((((-1.0)*x11686*x11690))+((r21*x11689)));
evalcond[2]=((((-1.0)*x11686*x11691))+((r01*x11689)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11687*x11690))+((r21*x11688)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+(((-1.0)*x11687*x11691))+((cj0*cj1*cj2))+((r01*x11688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11694 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11694.valid){
continue;
}
IkReal x11692=((1.0)*(x11694.value));
IkReal x11693=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11692)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11693);
rxp0_2=(py*r00);
rxp1_0=(r21*x11693);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11692)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11697 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11697.valid){
continue;
}
IkReal x11695=((1.0)*(x11697.value));
IkReal x11696=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11695)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11696);
rxp0_2=(py*r00);
rxp1_0=(r21*x11696);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11695)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11700 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11700.valid){
continue;
}
IkReal x11698=((1.0)*(x11700.value));
IkReal x11699=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11698)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11699);
rxp0_2=(py*r00);
rxp1_0=(r21*x11699);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11698)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11703=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x11703.valid){
continue;
}
IkReal x11701=x11703.value;
IkReal x11702=(cj0*x11701);
cj4array[0]=(((sj1*sj2*x11702))+(((-1.0)*cj1*cj2*x11702)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11704=IKsin(j4);
IkReal x11705=IKcos(j4);
IkReal x11706=(gconst10*x11704);
IkReal x11707=((1.0)*x11705);
IkReal x11708=((1.0)*gconst11*x11704);
evalcond[0]=((-1.0)*r12*x11704);
evalcond[1]=((((-1.0)*r12*x11707))+(((-1.0)*cj0)));
evalcond[2]=(((r21*x11706))+(((-1.0)*r20*x11708)));
evalcond[3]=(((r01*x11706))+(((-1.0)*r00*x11708)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst10*r21*x11707))+((cj1*sj2))+((gconst11*r20*x11705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11711=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11711.valid){
continue;
}
IkReal x11709=x11711.value;
IkReal x11710=((1.0)*x11709);
cj4array[0]=((((-1.0)*cj2*sj1*x11710))+(((-1.0)*cj1*sj2*x11710)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11712=IKsin(j4);
IkReal x11713=IKcos(j4);
IkReal x11714=((1.0)*cj0);
IkReal x11715=(gconst10*x11712);
IkReal x11716=((1.0)*x11713);
IkReal x11717=((1.0)*gconst11*x11712);
evalcond[0]=((-1.0)*r12*x11712);
evalcond[1]=((((-1.0)*x11714))+(((-1.0)*r12*x11716)));
evalcond[2]=((((-1.0)*r20*x11717))+((r21*x11715)));
evalcond[3]=(((r01*x11715))+(((-1.0)*r00*x11717)));
evalcond[4]=(((gconst11*r00*x11713))+(((-1.0)*sj1*sj2*x11714))+(((-1.0)*gconst10*r01*x11716))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11718=IKPowWithIntegerCheck(r12,-1);
if(!x11718.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11718.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11719=IKsin(j4);
IkReal x11720=IKcos(j4);
IkReal x11721=(gconst10*x11719);
IkReal x11722=(gconst11*x11720);
IkReal x11723=((1.0)*gconst11*x11719);
IkReal x11724=((1.0)*gconst10*x11720);
evalcond[0]=((-1.0)*r12*x11719);
evalcond[1]=((((-1.0)*r20*x11723))+((r21*x11721)));
evalcond[2]=(((r01*x11721))+(((-1.0)*r00*x11723)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x11724))+((r20*x11722)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+((r00*x11722))+(((-1.0)*r01*x11724))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11727 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11727.valid){
continue;
}
IkReal x11725=((1.0)*(x11727.value));
IkReal x11726=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11725)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11726);
rxp0_2=(py*r00);
rxp1_0=(r21*x11726);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11725)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11730 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11730.valid){
continue;
}
IkReal x11728=((1.0)*(x11730.value));
IkReal x11729=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11728)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11729);
rxp0_2=(py*r00);
rxp1_0=(r21*x11729);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11728)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11733 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11733.valid){
continue;
}
IkReal x11731=((1.0)*(x11733.value));
IkReal x11732=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11731)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11732);
rxp0_2=(py*r00);
rxp1_0=(r21*x11732);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11731)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11736=IKPowWithIntegerCheck(((((-1.0)*gconst10*r01))+((gconst11*r00))),-1);
if(!x11736.valid){
continue;
}
IkReal x11734=x11736.value;
IkReal x11735=((1.0)*cj0*x11734);
cj4array[0]=((((-1.0)*cj2*sj1*x11735))+(((-1.0)*cj1*sj2*x11735)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11737=IKsin(j4);
IkReal x11738=IKcos(j4);
IkReal x11739=(gconst10*x11737);
IkReal x11740=((1.0)*x11738);
IkReal x11741=((1.0)*gconst11*x11737);
evalcond[0]=((-1.0)*r12*x11737);
evalcond[1]=((((-1.0)*r12*x11740))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x11741))+((r21*x11739)));
evalcond[3]=(((r01*x11739))+(((-1.0)*r00*x11741)));
evalcond[4]=(((gconst11*r20*x11738))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11743=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11743.valid){
continue;
}
IkReal x11742=x11743.value;
cj4array[0]=(((cj1*cj2*x11742))+(((-1.0)*sj1*sj2*x11742)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11744=IKsin(j4);
IkReal x11745=IKcos(j4);
IkReal x11746=(gconst10*x11744);
IkReal x11747=((1.0)*x11745);
IkReal x11748=((1.0)*gconst11*x11744);
evalcond[0]=((-1.0)*r12*x11744);
evalcond[1]=((((-1.0)*r12*x11747))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x11748))+((r21*x11746)));
evalcond[3]=(((r01*x11746))+(((-1.0)*r00*x11748)));
evalcond[4]=(((gconst11*r00*x11745))+(((-1.0)*gconst10*r01*x11747))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11749=IKPowWithIntegerCheck(r12,-1);
if(!x11749.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11749.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11750=IKsin(j4);
IkReal x11751=IKcos(j4);
IkReal x11752=(gconst10*x11750);
IkReal x11753=(gconst11*x11751);
IkReal x11754=((1.0)*gconst11*x11750);
IkReal x11755=((1.0)*gconst10*x11751);
evalcond[0]=((-1.0)*r12*x11750);
evalcond[1]=(((r21*x11752))+(((-1.0)*r20*x11754)));
evalcond[2]=(((r01*x11752))+(((-1.0)*r00*x11754)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x11755))+((r20*x11753)));
evalcond[4]=(((cj0*cj2*sj1))+((cj0*cj1*sj2))+(((-1.0)*r01*x11755))+((r00*x11753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11758 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11758.valid){
continue;
}
IkReal x11756=((1.0)*(x11758.value));
IkReal x11757=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11756)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11757);
rxp0_2=(py*r00);
rxp1_0=(r21*x11757);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11756)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11761 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11761.valid){
continue;
}
IkReal x11759=((1.0)*(x11761.value));
IkReal x11760=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11759)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11760);
rxp0_2=(py*r00);
rxp1_0=(r21*x11760);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11759)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11764 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11764.valid){
continue;
}
IkReal x11762=((1.0)*(x11764.value));
IkReal x11763=((-1.0)*py);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11762)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11763);
rxp0_2=(py*r00);
rxp1_0=(r21*x11763);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11762)));
IkReal gconst10=((1.0)*r01);
IkReal gconst11=((-1.0)*r00);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11767=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*gconst11*r00))),-1);
if(!x11767.valid){
continue;
}
IkReal x11765=x11767.value;
IkReal x11766=((1.0)*cj0*x11765);
cj4array[0]=((((-1.0)*cj1*sj2*x11766))+(((-1.0)*cj2*sj1*x11766)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11768=IKsin(j4);
IkReal x11769=IKcos(j4);
IkReal x11770=(gconst10*r21);
IkReal x11771=((1.0)*gconst11*r20);
evalcond[0]=(r12*x11768);
evalcond[1]=((((-1.0)*r12*x11769))+(((-1.0)*cj0)));
evalcond[2]=(((x11768*x11770))+(((-1.0)*x11768*x11771)));
evalcond[3]=(((gconst10*r01*x11768))+(((-1.0)*gconst11*r00*x11768)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11769*x11770))+(((-1.0)*x11769*x11771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11773=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x11773.valid){
continue;
}
IkReal x11772=x11773.value;
cj4array[0]=(((cj1*cj2*x11772))+(((-1.0)*sj1*sj2*x11772)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11774=IKsin(j4);
IkReal x11775=IKcos(j4);
IkReal x11776=(gconst10*r01);
IkReal x11777=((1.0)*x11775);
IkReal x11778=((1.0)*gconst11*x11774);
evalcond[0]=(r12*x11774);
evalcond[1]=((((-1.0)*r12*x11777))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x11778))+((gconst10*r21*x11774)));
evalcond[3]=((((-1.0)*r00*x11778))+((x11774*x11776)));
evalcond[4]=(((x11775*x11776))+(((-1.0)*gconst11*r00*x11777))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11779=IKPowWithIntegerCheck(r12,-1);
if(!x11779.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x11779.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11780=IKsin(j4);
IkReal x11781=IKcos(j4);
IkReal x11782=(gconst10*x11781);
IkReal x11783=(gconst10*x11780);
IkReal x11784=((1.0)*gconst11*r20);
IkReal x11785=((1.0)*gconst11*r00);
evalcond[0]=(r12*x11780);
evalcond[1]=(((r21*x11783))+(((-1.0)*x11780*x11784)));
evalcond[2]=((((-1.0)*x11780*x11785))+((r01*x11783)));
evalcond[3]=(((r21*x11782))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11781*x11784)));
evalcond[4]=((((-1.0)*x11781*x11785))+((cj0*cj2*sj1))+((cj0*cj1*sj2))+((r01*x11782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11787=IKPowWithIntegerCheck(r12,-1);
if(!x11787.valid){
continue;
}
IkReal x11786=x11787.value;
CheckValue<IkReal> x11788=IKPowWithIntegerCheck(sj3,-1);
if(!x11788.valid){
continue;
}
if( IKabs((x11786*(x11788.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x11786)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11786*(x11788.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x11786))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11786*(x11788.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x11786));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11789=IKsin(j4);
IkReal x11790=IKcos(j4);
IkReal x11791=(cj2*sj0);
IkReal x11792=(gconst11*r20);
IkReal x11793=(cj3*gconst11);
IkReal x11794=(sj1*sj2);
IkReal x11795=(gconst11*r00);
IkReal x11796=(cj2*sj1);
IkReal x11797=(cj1*cj2);
IkReal x11798=(gconst10*sj3);
IkReal x11799=(cj3*gconst10);
IkReal x11800=(gconst11*sj3);
IkReal x11801=(cj1*sj2);
IkReal x11802=((1.0)*cj0);
IkReal x11803=((1.0)*x11789);
IkReal x11804=((1.0)*x11790);
IkReal x11805=(gconst10*x11789);
IkReal x11806=(sj3*x11790);
evalcond[0]=((((-1.0)*r12*x11804))+(((-1.0)*x11802)));
evalcond[1]=(((r21*x11805))+(((-1.0)*x11792*x11803)));
evalcond[2]=(sj0+(((-1.0)*x11795*x11803))+((r01*x11805)));
evalcond[3]=(((sj1*x11791))+((sj0*x11801))+(((-1.0)*r12*sj3*x11803)));
evalcond[4]=((((-1.0)*sj0*x11794))+((cj1*x11791))+((cj3*r12*x11789)));
evalcond[5]=(x11796+((r21*x11800))+((r20*x11798))+((r21*x11790*x11799))+(((-1.0)*cj3*x11792*x11804))+x11801);
evalcond[6]=(x11794+((x11792*x11806))+(((-1.0)*x11797))+((r20*x11799))+(((-1.0)*r21*x11798*x11804))+((r21*x11793)));
evalcond[7]=(((x11795*x11806))+(((-1.0)*r01*x11798*x11804))+((cj0*x11801))+((r01*x11793))+((r00*x11799))+((cj0*x11796)));
evalcond[8]=((((-1.0)*x11794*x11802))+((r01*x11790*x11799))+(((-1.0)*r00*x11793*x11804))+((r01*x11800))+((r00*x11798))+((cj0*x11797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11807=((1.0)*gconst11);
CheckValue<IkReal> x11808=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*r00*x11807))),-1);
if(!x11808.valid){
continue;
}
CheckValue<IkReal> x11809=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x11807))+((cj3*gconst10*r21))),-1);
if(!x11809.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11808.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11809.value)*(((((-1.0)*r21*sj3*x11807))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst10*r20*sj3))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11808.value)))+IKsqr(((x11809.value)*(((((-1.0)*r21*sj3*x11807))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst10*r20*sj3))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11808.value)), ((x11809.value)*(((((-1.0)*r21*sj3*x11807))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst10*r20*sj3))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11810=IKsin(j4);
IkReal x11811=IKcos(j4);
IkReal x11812=(cj2*sj0);
IkReal x11813=(gconst11*r20);
IkReal x11814=(cj3*gconst11);
IkReal x11815=(sj1*sj2);
IkReal x11816=(gconst11*r00);
IkReal x11817=(cj2*sj1);
IkReal x11818=(cj1*cj2);
IkReal x11819=(gconst10*sj3);
IkReal x11820=(cj3*gconst10);
IkReal x11821=(gconst11*sj3);
IkReal x11822=(cj1*sj2);
IkReal x11823=((1.0)*cj0);
IkReal x11824=((1.0)*x11810);
IkReal x11825=((1.0)*x11811);
IkReal x11826=(gconst10*x11810);
IkReal x11827=(sj3*x11811);
evalcond[0]=((((-1.0)*r12*x11825))+(((-1.0)*x11823)));
evalcond[1]=((((-1.0)*x11813*x11824))+((r21*x11826)));
evalcond[2]=(sj0+((r01*x11826))+(((-1.0)*x11816*x11824)));
evalcond[3]=(((sj1*x11812))+((sj0*x11822))+(((-1.0)*r12*sj3*x11824)));
evalcond[4]=(((cj3*r12*x11810))+((cj1*x11812))+(((-1.0)*sj0*x11815)));
evalcond[5]=((((-1.0)*cj3*x11813*x11825))+((r21*x11811*x11820))+((r20*x11819))+((r21*x11821))+x11817+x11822);
evalcond[6]=((((-1.0)*x11818))+((r21*x11814))+((r20*x11820))+((x11813*x11827))+x11815+(((-1.0)*r21*x11819*x11825)));
evalcond[7]=(((x11816*x11827))+((r01*x11814))+((cj0*x11822))+((cj0*x11817))+(((-1.0)*r01*x11819*x11825))+((r00*x11820)));
evalcond[8]=((((-1.0)*r00*x11814*x11825))+((r00*x11819))+((cj0*x11818))+((r01*x11821))+((r01*x11811*x11820))+(((-1.0)*x11815*x11823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11828=IKPowWithIntegerCheck((((gconst10*r01))+(((-1.0)*gconst11*r00))),-1);
if(!x11828.valid){
continue;
}
CheckValue<IkReal> x11829=IKPowWithIntegerCheck(r12,-1);
if(!x11829.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x11828.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x11829.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x11828.value)))+IKsqr(((-1.0)*cj0*(x11829.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x11828.value)), ((-1.0)*cj0*(x11829.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11830=IKsin(j4);
IkReal x11831=IKcos(j4);
IkReal x11832=(cj2*sj0);
IkReal x11833=(gconst11*r20);
IkReal x11834=(cj3*gconst11);
IkReal x11835=(sj1*sj2);
IkReal x11836=(gconst11*r00);
IkReal x11837=(cj2*sj1);
IkReal x11838=(cj1*cj2);
IkReal x11839=(gconst10*sj3);
IkReal x11840=(cj3*gconst10);
IkReal x11841=(gconst11*sj3);
IkReal x11842=(cj1*sj2);
IkReal x11843=((1.0)*cj0);
IkReal x11844=((1.0)*x11830);
IkReal x11845=((1.0)*x11831);
IkReal x11846=(gconst10*x11830);
IkReal x11847=(sj3*x11831);
evalcond[0]=((((-1.0)*x11843))+(((-1.0)*r12*x11845)));
evalcond[1]=((((-1.0)*x11833*x11844))+((r21*x11846)));
evalcond[2]=(sj0+(((-1.0)*x11836*x11844))+((r01*x11846)));
evalcond[3]=((((-1.0)*r12*sj3*x11844))+((sj1*x11832))+((sj0*x11842)));
evalcond[4]=(((cj3*r12*x11830))+((cj1*x11832))+(((-1.0)*sj0*x11835)));
evalcond[5]=(((r21*x11841))+((r21*x11831*x11840))+(((-1.0)*cj3*x11833*x11845))+((r20*x11839))+x11842+x11837);
evalcond[6]=(((r21*x11834))+((r20*x11840))+(((-1.0)*x11838))+(((-1.0)*r21*x11839*x11845))+((x11833*x11847))+x11835);
evalcond[7]=(((cj0*x11842))+((x11836*x11847))+(((-1.0)*r01*x11839*x11845))+((r00*x11840))+((cj0*x11837))+((r01*x11834)));
evalcond[8]=((((-1.0)*r00*x11834*x11845))+(((-1.0)*x11835*x11843))+((r01*x11841))+((r01*x11831*x11840))+((cj0*x11838))+((r00*x11839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11850 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11850.valid){
continue;
}
IkReal x11848=((1.0)*(x11850.value));
IkReal x11849=x11466;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11848)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11848)));
IkReal gconst10=((1.0)*r01*x11849);
IkReal gconst11=((-1.0)*r00*x11849);
IkReal x11851=r02*r02;
IkReal x11852=(r12*sj0);
IkReal x11853=x11466;
IkReal x11854=(cj0*x11853);
j4eval[0]=((IKabs(((((-1.0)*x11854))+((r02*x11852*x11853))+((x11851*x11854)))))+(IKabs((x11852+((cj0*r02))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11855=((1.0)*r02);
IkReal x11856=(sj1*sj2);
IkReal x11857=(cj1*cj2);
IkReal x11858=((1.0)*sj3);
IkReal x11859=(gconst10*r21*sj3);
IkReal x11860=(gconst11*r20*sj3);
IkReal x11861=(cj3*gconst11*r21);
IkReal x11862=(cj3*gconst10*r20);
CheckValue<IkReal> x11863=IKPowWithIntegerCheck((((gconst10*r01*x11860))+(((-1.0)*r00*r20*x11858*(gconst11*gconst11)))+((gconst11*r00*x11859))+(((-1.0)*r01*r21*x11858*(gconst10*gconst10)))),-1);
if(!x11863.valid){
continue;
}
CheckValue<IkReal> x11864=IKPowWithIntegerCheck(((((-1.0)*gconst10*r21*x11858))+x11860),-1);
if(!x11864.valid){
continue;
}
if( IKabs(((x11863.value)*(((((-1.0)*x11855*x11856))+((sj0*x11859))+((r02*x11857))+(((-1.0)*gconst11*r20*sj0*x11858))+(((-1.0)*x11855*x11862))+(((-1.0)*x11855*x11861)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11864.value)*(((((-1.0)*x11862))+(((-1.0)*x11861))+(((-1.0)*x11856))+x11857)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11863.value)*(((((-1.0)*x11855*x11856))+((sj0*x11859))+((r02*x11857))+(((-1.0)*gconst11*r20*sj0*x11858))+(((-1.0)*x11855*x11862))+(((-1.0)*x11855*x11861))))))+IKsqr(((x11864.value)*(((((-1.0)*x11862))+(((-1.0)*x11861))+(((-1.0)*x11856))+x11857))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11863.value)*(((((-1.0)*x11855*x11856))+((sj0*x11859))+((r02*x11857))+(((-1.0)*gconst11*r20*sj0*x11858))+(((-1.0)*x11855*x11862))+(((-1.0)*x11855*x11861))))), ((x11864.value)*(((((-1.0)*x11862))+(((-1.0)*x11861))+(((-1.0)*x11856))+x11857))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11865=IKsin(j4);
IkReal x11866=IKcos(j4);
IkReal x11867=(gconst10*sj3);
IkReal x11868=(cj3*r10);
IkReal x11869=(gconst11*r20);
IkReal x11870=(gconst11*sj3);
IkReal x11871=(cj3*r00);
IkReal x11872=(sj1*sj2);
IkReal x11873=(cj3*gconst11);
IkReal x11874=(cj1*cj2);
IkReal x11875=(cj2*sj1);
IkReal x11876=(cj1*sj2);
IkReal x11877=((1.0)*cj0);
IkReal x11878=((1.0)*x11865);
IkReal x11879=(gconst10*x11865);
IkReal x11880=((1.0)*x11866);
IkReal x11881=(cj3*x11865);
IkReal x11882=(gconst11*x11880);
IkReal x11883=(cj3*gconst10*x11866);
evalcond[0]=((((-1.0)*x11869*x11878))+((r21*x11879)));
evalcond[1]=(sj0+((r01*x11879))+(((-1.0)*r02*x11880))+(((-1.0)*gconst11*r00*x11878)));
evalcond[2]=((((-1.0)*x11877))+(((-1.0)*r12*x11880))+((r11*x11879))+(((-1.0)*gconst11*r10*x11878)));
evalcond[3]=(((r21*x11883))+((r20*x11867))+(((-1.0)*cj3*x11869*x11880))+((r21*x11870))+x11875+x11876);
evalcond[4]=(((sj3*x11866*x11869))+(((-1.0)*x11874))+(((-1.0)*r21*x11867*x11880))+((cj3*gconst10*r20))+((r21*x11873))+x11872);
evalcond[5]=(((r01*x11873))+(((-1.0)*r02*sj3*x11878))+(((-1.0)*r01*x11867*x11880))+((gconst10*x11871))+((cj0*x11876))+((cj0*x11875))+((r00*x11866*x11870)));
evalcond[6]=((((-1.0)*x11872*x11877))+((r01*x11883))+(((-1.0)*x11871*x11882))+((r00*x11867))+((r01*x11870))+((r02*x11881))+((cj0*x11874)));
evalcond[7]=((((-1.0)*r11*x11867*x11880))+((r10*x11866*x11870))+((sj0*x11876))+((sj0*x11875))+((r11*x11873))+((gconst10*x11868))+(((-1.0)*r12*sj3*x11878)));
evalcond[8]=((((-1.0)*sj0*x11872))+((sj0*x11874))+((r10*x11867))+((r11*x11870))+((r12*x11881))+((r11*x11883))+(((-1.0)*x11868*x11882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11884=((1.0)*gconst11);
CheckValue<IkReal> x11885=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11884)))),-1);
if(!x11885.valid){
continue;
}
CheckValue<IkReal> x11886 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x11884))+((gconst10*r11*sj0))+(((-1.0)*r10*sj0*x11884))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11885.value)))+(x11886.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11887=IKsin(j4);
IkReal x11888=IKcos(j4);
IkReal x11889=(gconst10*sj3);
IkReal x11890=(cj3*r10);
IkReal x11891=(gconst11*r20);
IkReal x11892=(gconst11*sj3);
IkReal x11893=(cj3*r00);
IkReal x11894=(sj1*sj2);
IkReal x11895=(cj3*gconst11);
IkReal x11896=(cj1*cj2);
IkReal x11897=(cj2*sj1);
IkReal x11898=(cj1*sj2);
IkReal x11899=((1.0)*cj0);
IkReal x11900=((1.0)*x11887);
IkReal x11901=(gconst10*x11887);
IkReal x11902=((1.0)*x11888);
IkReal x11903=(cj3*x11887);
IkReal x11904=(gconst11*x11902);
IkReal x11905=(cj3*gconst10*x11888);
evalcond[0]=((((-1.0)*x11891*x11900))+((r21*x11901)));
evalcond[1]=((((-1.0)*r02*x11902))+sj0+((r01*x11901))+(((-1.0)*gconst11*r00*x11900)));
evalcond[2]=((((-1.0)*r12*x11902))+(((-1.0)*x11899))+(((-1.0)*gconst11*r10*x11900))+((r11*x11901)));
evalcond[3]=(((r21*x11892))+((r21*x11905))+(((-1.0)*cj3*x11891*x11902))+x11898+x11897+((r20*x11889)));
evalcond[4]=((((-1.0)*x11896))+((r21*x11895))+((cj3*gconst10*r20))+(((-1.0)*r21*x11889*x11902))+x11894+((sj3*x11888*x11891)));
evalcond[5]=(((r01*x11895))+(((-1.0)*r02*sj3*x11900))+((r00*x11888*x11892))+(((-1.0)*r01*x11889*x11902))+((cj0*x11898))+((cj0*x11897))+((gconst10*x11893)));
evalcond[6]=(((r00*x11889))+(((-1.0)*x11894*x11899))+((r01*x11892))+(((-1.0)*x11893*x11904))+((r01*x11905))+((r02*x11903))+((cj0*x11896)));
evalcond[7]=(((sj0*x11898))+((sj0*x11897))+(((-1.0)*r11*x11889*x11902))+((r10*x11888*x11892))+(((-1.0)*r12*sj3*x11900))+((r11*x11895))+((gconst10*x11890)));
evalcond[8]=(((sj0*x11896))+((r12*x11903))+(((-1.0)*x11890*x11904))+((r10*x11889))+(((-1.0)*sj0*x11894))+((r11*x11892))+((r11*x11905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11906=((1.0)*gconst11);
CheckValue<IkReal> x11907 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst10*r11*sj0))+(((-1.0)*r10*sj0*x11906))+((cj0*gconst10*r01))+(((-1.0)*cj0*r00*x11906)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11907.valid){
continue;
}
CheckValue<IkReal> x11908=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11906)))),-1);
if(!x11908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11907.value)+(((1.5707963267949)*(x11908.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11909=IKsin(j4);
IkReal x11910=IKcos(j4);
IkReal x11911=(gconst10*sj3);
IkReal x11912=(cj3*r10);
IkReal x11913=(gconst11*r20);
IkReal x11914=(gconst11*sj3);
IkReal x11915=(cj3*gconst11);
IkReal x11916=(sj1*sj2);
IkReal x11917=(cj1*cj2);
IkReal x11918=(cj2*sj1);
IkReal x11919=(cj1*sj2);
IkReal x11920=(cj3*gconst10);
IkReal x11921=((1.0)*cj0);
IkReal x11922=((1.0)*x11910);
IkReal x11923=((1.0)*x11909);
IkReal x11924=(cj3*x11909);
IkReal x11925=(gconst10*x11909);
IkReal x11926=(x11910*x11920);
evalcond[0]=(((r21*x11925))+(((-1.0)*r22*x11922))+(((-1.0)*x11913*x11923)));
evalcond[1]=(sj0+(((-1.0)*r02*x11922))+(((-1.0)*gconst11*r00*x11923))+((r01*x11925)));
evalcond[2]=((((-1.0)*x11921))+((r11*x11925))+(((-1.0)*gconst11*r10*x11923))+(((-1.0)*r12*x11922)));
evalcond[3]=(x11919+x11918+((r21*x11926))+((r21*x11914))+((r22*x11924))+((r20*x11911))+(((-1.0)*cj3*x11913*x11922)));
evalcond[4]=(x11916+(((-1.0)*r22*sj3*x11923))+(((-1.0)*x11917))+((r20*x11920))+(((-1.0)*r21*x11911*x11922))+((r21*x11915))+((sj3*x11910*x11913)));
evalcond[5]=((((-1.0)*r02*sj3*x11923))+(((-1.0)*r01*x11911*x11922))+((r01*x11915))+((cj0*x11919))+((cj0*x11918))+((r00*x11910*x11914))+((r00*x11920)));
evalcond[6]=(((r02*x11924))+(((-1.0)*r00*x11915*x11922))+((r00*x11911))+((r01*x11914))+((cj0*x11917))+(((-1.0)*x11916*x11921))+((r01*x11926)));
evalcond[7]=(((r11*x11915))+((gconst10*x11912))+((r10*x11910*x11914))+(((-1.0)*r11*x11911*x11922))+((sj0*x11919))+((sj0*x11918))+(((-1.0)*r12*sj3*x11923)));
evalcond[8]=((((-1.0)*gconst11*x11912*x11922))+((r11*x11914))+((sj0*x11917))+(((-1.0)*sj0*x11916))+((r10*x11911))+((r11*x11926))+((r12*x11924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11927 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst11*r20))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11927.valid){
continue;
}
CheckValue<IkReal> x11928=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x11928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11927.value)+(((1.5707963267949)*(x11928.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11929=IKsin(j4);
IkReal x11930=IKcos(j4);
IkReal x11931=(gconst10*sj3);
IkReal x11932=(cj3*r10);
IkReal x11933=(gconst11*r20);
IkReal x11934=(gconst11*sj3);
IkReal x11935=(cj3*gconst11);
IkReal x11936=(sj1*sj2);
IkReal x11937=(cj1*cj2);
IkReal x11938=(cj2*sj1);
IkReal x11939=(cj1*sj2);
IkReal x11940=(cj3*gconst10);
IkReal x11941=((1.0)*cj0);
IkReal x11942=((1.0)*x11930);
IkReal x11943=((1.0)*x11929);
IkReal x11944=(cj3*x11929);
IkReal x11945=(gconst10*x11929);
IkReal x11946=(x11930*x11940);
evalcond[0]=((((-1.0)*r22*x11942))+((r21*x11945))+(((-1.0)*x11933*x11943)));
evalcond[1]=(sj0+(((-1.0)*gconst11*r00*x11943))+(((-1.0)*r02*x11942))+((r01*x11945)));
evalcond[2]=((((-1.0)*gconst11*r10*x11943))+((r11*x11945))+(((-1.0)*x11941))+(((-1.0)*r12*x11942)));
evalcond[3]=(x11939+x11938+((r21*x11934))+((r20*x11931))+((r21*x11946))+((r22*x11944))+(((-1.0)*cj3*x11933*x11942)));
evalcond[4]=(x11936+((r21*x11935))+((r20*x11940))+(((-1.0)*r21*x11931*x11942))+(((-1.0)*r22*sj3*x11943))+(((-1.0)*x11937))+((sj3*x11930*x11933)));
evalcond[5]=((((-1.0)*r02*sj3*x11943))+(((-1.0)*r01*x11931*x11942))+((cj0*x11938))+((cj0*x11939))+((r00*x11930*x11934))+((r00*x11940))+((r01*x11935)));
evalcond[6]=(((cj0*x11937))+((r02*x11944))+(((-1.0)*x11936*x11941))+((r01*x11946))+((r00*x11931))+(((-1.0)*r00*x11935*x11942))+((r01*x11934)));
evalcond[7]=(((r10*x11930*x11934))+(((-1.0)*r12*sj3*x11943))+((gconst10*x11932))+((r11*x11935))+((sj0*x11938))+((sj0*x11939))+(((-1.0)*r11*x11931*x11942)));
evalcond[8]=((((-1.0)*sj0*x11936))+((r11*x11946))+((r10*x11931))+((r12*x11944))+((r11*x11934))+((sj0*x11937))+(((-1.0)*gconst11*x11932*x11942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11947=IKPowWithIntegerCheck(IKsign((((gconst10*r10))+((gconst11*r11)))),-1);
if(!x11947.valid){
continue;
}
CheckValue<IkReal> x11948 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst11*r20*sj0))+((gconst10*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11947.value)))+(x11948.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11949=IKsin(j4);
IkReal x11950=IKcos(j4);
IkReal x11951=(gconst10*sj3);
IkReal x11952=(cj3*r10);
IkReal x11953=(gconst11*r20);
IkReal x11954=(gconst11*sj3);
IkReal x11955=(cj3*gconst11);
IkReal x11956=(sj1*sj2);
IkReal x11957=(cj1*cj2);
IkReal x11958=(cj2*sj1);
IkReal x11959=(cj1*sj2);
IkReal x11960=(cj3*gconst10);
IkReal x11961=((1.0)*cj0);
IkReal x11962=((1.0)*x11950);
IkReal x11963=((1.0)*x11949);
IkReal x11964=(cj3*x11949);
IkReal x11965=(gconst10*x11949);
IkReal x11966=(x11950*x11960);
evalcond[0]=((((-1.0)*r22*x11962))+(((-1.0)*x11953*x11963))+((r21*x11965)));
evalcond[1]=(((r01*x11965))+sj0+(((-1.0)*r02*x11962))+(((-1.0)*gconst11*r00*x11963)));
evalcond[2]=((((-1.0)*r12*x11962))+((r11*x11965))+(((-1.0)*x11961))+(((-1.0)*gconst11*r10*x11963)));
evalcond[3]=(x11959+x11958+((r20*x11951))+((r21*x11954))+((r21*x11966))+((r22*x11964))+(((-1.0)*cj3*x11953*x11962)));
evalcond[4]=(x11956+((sj3*x11950*x11953))+((r21*x11955))+(((-1.0)*x11957))+((r20*x11960))+(((-1.0)*r22*sj3*x11963))+(((-1.0)*r21*x11951*x11962)));
evalcond[5]=(((r00*x11950*x11954))+((r00*x11960))+((cj0*x11958))+((cj0*x11959))+(((-1.0)*r01*x11951*x11962))+((r01*x11955))+(((-1.0)*r02*sj3*x11963)));
evalcond[6]=(((r01*x11966))+(((-1.0)*r00*x11955*x11962))+((cj0*x11957))+((r02*x11964))+((r01*x11954))+((r00*x11951))+(((-1.0)*x11956*x11961)));
evalcond[7]=(((gconst10*x11952))+(((-1.0)*r11*x11951*x11962))+((r11*x11955))+((r10*x11950*x11954))+(((-1.0)*r12*sj3*x11963))+((sj0*x11958))+((sj0*x11959)));
evalcond[8]=(((r11*x11966))+((r11*x11954))+((r12*x11964))+((r10*x11951))+(((-1.0)*gconst11*x11952*x11962))+(((-1.0)*sj0*x11956))+((sj0*x11957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x11967=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x11967;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x11967);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x11968=((1.0)*cj5);
IkReal x11969=((((-1.0)*r21*x11968))+(((-1.0)*r20*sj5)));
j4eval[0]=x11969;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x11968))+((r11*sj5))))));
j4eval[2]=IKsign(x11969);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x11970=cj5*cj5;
IkReal x11971=(cj3*r01);
IkReal x11972=(cj5*sj5);
IkReal x11973=((1.0)*cj3);
IkReal x11974=(((r20*x11971*x11972))+(((-1.0)*r02*r22*x11973))+(((-1.0)*r21*x11971))+(((-1.0)*r00*r20*x11970*x11973))+((r21*x11970*x11971))+((cj3*r00*r21*x11972)));
j4eval[0]=x11974;
j4eval[1]=IKsign(x11974);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11975=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x11975;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x11975);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11976=((1.0)*cj5);
IkReal x11977=((((-1.0)*r21*x11976))+(((-1.0)*r20*sj5)));
j4eval[0]=x11977;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x11976))+((r11*sj5))))));
j4eval[2]=IKsign(x11977);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11978=cj5*cj5;
IkReal x11979=r01*r01;
IkReal x11980=(cj5*r00);
IkReal x11981=(r01*sj5);
IkReal x11982=(x11979+(((-2.0)*x11980*x11981))+((x11978*(r00*r00)))+(r02*r02)+(((-1.0)*x11978*x11979)));
j4eval[0]=x11982;
j4eval[1]=((IKabs(r02))+(IKabs((x11980+(((-1.0)*x11981))))));
j4eval[2]=IKsign(x11982);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11983=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11983);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11983);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11984=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11984);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11984);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11985=((1.0)*cj2);
CheckValue<IkReal> x11986=IKPowWithIntegerCheck(r22,-1);
if(!x11986.valid){
continue;
}
CheckValue<IkReal> x11987=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x11987.valid){
continue;
}
if( IKabs(((x11986.value)*((((sj1*sj2))+(((-1.0)*cj1*x11985)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11987.value)*(((((-1.0)*sj1*x11985))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11986.value)*((((sj1*sj2))+(((-1.0)*cj1*x11985))))))+IKsqr(((x11987.value)*(((((-1.0)*sj1*x11985))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11986.value)*((((sj1*sj2))+(((-1.0)*cj1*x11985))))), ((x11987.value)*(((((-1.0)*sj1*x11985))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11988=IKsin(j4);
IkReal x11989=IKcos(j4);
IkReal x11990=(cj5*x11989);
IkReal x11991=(sj5*x11988);
IkReal x11992=((1.0)*cj5*x11988);
IkReal x11993=((1.0)*sj5*x11989);
evalcond[0]=((-1.0)*r22*x11989);
evalcond[1]=((((-1.0)*r10*x11992))+((r11*x11991)));
evalcond[2]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11988)));
evalcond[3]=(((r00*x11990))+(((-1.0)*r01*x11993)));
evalcond[4]=((1.0)+((r01*x11991))+(((-1.0)*r00*x11992)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*x11993))+((r10*x11990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11994=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x11994.valid){
continue;
}
CheckValue<IkReal> x11995=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x11995.valid){
continue;
}
if( IKabs(((-1.0)*(x11994.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11995.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11994.value)))+IKsqr(((x11995.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11994.value)), ((x11995.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11996=IKsin(j4);
IkReal x11997=IKcos(j4);
IkReal x11998=(cj5*x11997);
IkReal x11999=(sj5*x11996);
IkReal x12000=((1.0)*cj5*x11996);
IkReal x12001=((1.0)*sj5*x11997);
evalcond[0]=((-1.0)*r22*x11997);
evalcond[1]=((((-1.0)*r10*x12000))+((r11*x11999)));
evalcond[2]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11996)));
evalcond[3]=((((-1.0)*r01*x12001))+((r00*x11998)));
evalcond[4]=((1.0)+(((-1.0)*r00*x12000))+((r01*x11999)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*x12001))+((r10*x11998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12002=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12002);
rxp0_2=(py*r00);
rxp1_0=(r21*x12002);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12003=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12003);
rxp0_2=(py*r00);
rxp1_0=(r21*x12003);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12004=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12004.valid){
continue;
}
CheckValue<IkReal> x12005=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12005.valid){
continue;
}
if( IKabs(((-1.0)*(x12004.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12005.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12004.value)))+IKsqr(((x12005.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12004.value)), ((x12005.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12006=IKsin(j4);
IkReal x12007=IKcos(j4);
IkReal x12008=(cj5*r00);
IkReal x12009=(cj5*r20);
IkReal x12010=(r21*sj5);
IkReal x12011=(r01*sj5);
IkReal x12012=((1.0)*x12006);
IkReal x12013=((1.0)*x12007);
evalcond[0]=((-1.0)*r12*x12007);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x12012)));
evalcond[2]=((((-1.0)*x12009*x12012))+((x12006*x12010)));
evalcond[3]=((((-1.0)*x12011*x12013))+((x12007*x12008)));
evalcond[4]=((1.0)+(((-1.0)*x12008*x12012))+((x12006*x12011)));
evalcond[5]=((((-1.0)*x12010*x12013))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12007*x12009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12014=IKPowWithIntegerCheck(r12,-1);
if(!x12014.valid){
continue;
}
CheckValue<IkReal> x12015=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12015.valid){
continue;
}
if( IKabs(((x12014.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12015.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12014.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12015.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12014.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12015.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12016=IKsin(j4);
IkReal x12017=IKcos(j4);
IkReal x12018=(cj5*r00);
IkReal x12019=(cj5*r20);
IkReal x12020=(r21*sj5);
IkReal x12021=(r01*sj5);
IkReal x12022=((1.0)*x12016);
IkReal x12023=((1.0)*x12017);
evalcond[0]=((-1.0)*r12*x12017);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x12022)));
evalcond[2]=(((x12016*x12020))+(((-1.0)*x12019*x12022)));
evalcond[3]=(((x12017*x12018))+(((-1.0)*x12021*x12023)));
evalcond[4]=((1.0)+((x12016*x12021))+(((-1.0)*x12018*x12022)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12020*x12023))+((x12017*x12019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12024=cj5*cj5;
IkReal x12025=r01*r01;
IkReal x12026=(r01*sj5);
IkReal x12027=(cj5*r00);
CheckValue<IkReal> x12028 = IKatan2WithCheck(IkReal(((((-1.0)*x12026))+x12027)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12028.valid){
continue;
}
CheckValue<IkReal> x12029=IKPowWithIntegerCheck(IKsign((((x12024*(r00*r00)))+(((-1.0)*x12024*x12025))+x12025+(r02*r02)+(((-2.0)*x12026*x12027)))),-1);
if(!x12029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12028.value)+(((1.5707963267949)*(x12029.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12030=IKsin(j4);
IkReal x12031=IKcos(j4);
IkReal x12032=(cj5*r10);
IkReal x12033=(r01*sj5);
IkReal x12034=(cj5*r00);
IkReal x12035=(cj5*r20);
IkReal x12036=((1.0)*x12031);
IkReal x12037=((1.0)*x12030);
IkReal x12038=(sj5*x12030);
evalcond[0]=((((-1.0)*x12035*x12037))+((r21*x12038))+(((-1.0)*r22*x12036)));
evalcond[1]=((((-1.0)*x12032*x12037))+(((-1.0)*r12*x12036))+((r11*x12038)));
evalcond[2]=((((-1.0)*x12033*x12036))+(((-1.0)*r02*x12037))+((x12031*x12034)));
evalcond[3]=((1.0)+(((-1.0)*x12034*x12037))+((x12030*x12033))+(((-1.0)*r02*x12036)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x12036))+((x12031*x12032))+(((-1.0)*r12*x12037)));
evalcond[5]=((((-1.0)*r21*sj5*x12036))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12031*x12035))+(((-1.0)*r22*x12037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12039=((1.0)*cj5);
CheckValue<IkReal> x12040=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12039))+(((-1.0)*r20*sj5)))),-1);
if(!x12040.valid){
continue;
}
CheckValue<IkReal> x12041 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x12039)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12040.value)))+(x12041.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12042=IKsin(j4);
IkReal x12043=IKcos(j4);
IkReal x12044=(cj5*r10);
IkReal x12045=(r01*sj5);
IkReal x12046=(cj5*r00);
IkReal x12047=(cj5*r20);
IkReal x12048=((1.0)*x12043);
IkReal x12049=((1.0)*x12042);
IkReal x12050=(sj5*x12042);
evalcond[0]=((((-1.0)*x12047*x12049))+(((-1.0)*r22*x12048))+((r21*x12050)));
evalcond[1]=((((-1.0)*r12*x12048))+(((-1.0)*x12044*x12049))+((r11*x12050)));
evalcond[2]=((((-1.0)*x12045*x12048))+(((-1.0)*r02*x12049))+((x12043*x12046)));
evalcond[3]=((1.0)+(((-1.0)*x12046*x12049))+(((-1.0)*r02*x12048))+((x12042*x12045)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x12049))+(((-1.0)*r11*sj5*x12048))+((cj1*sj2))+((x12043*x12044)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x12048))+(((-1.0)*r22*x12049))+((x12043*x12047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12051 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12051.valid){
continue;
}
CheckValue<IkReal> x12052=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12051.value)+(((1.5707963267949)*(x12052.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12053=IKsin(j4);
IkReal x12054=IKcos(j4);
IkReal x12055=(cj5*r10);
IkReal x12056=(r01*sj5);
IkReal x12057=(cj5*r00);
IkReal x12058=(cj5*r20);
IkReal x12059=((1.0)*x12054);
IkReal x12060=((1.0)*x12053);
IkReal x12061=(sj5*x12053);
evalcond[0]=(((r21*x12061))+(((-1.0)*r22*x12059))+(((-1.0)*x12058*x12060)));
evalcond[1]=((((-1.0)*x12055*x12060))+(((-1.0)*r12*x12059))+((r11*x12061)));
evalcond[2]=((((-1.0)*r02*x12060))+(((-1.0)*x12056*x12059))+((x12054*x12057)));
evalcond[3]=((1.0)+((x12053*x12056))+(((-1.0)*x12057*x12060))+(((-1.0)*r02*x12059)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x12059))+(((-1.0)*r12*x12060))+((x12054*x12055)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x12060))+(((-1.0)*r21*sj5*x12059))+((x12054*x12058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12062=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12062;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12062);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12063=((1.0)*cj5);
IkReal x12064=((((-1.0)*r21*x12063))+(((-1.0)*r20*sj5)));
j4eval[0]=x12064;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12063))))));
j4eval[2]=IKsign(x12064);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12065=cj5*cj5;
IkReal x12066=r01*r01;
IkReal x12067=(r01*sj5);
IkReal x12068=(cj5*r00);
IkReal x12069=((((-1.0)*x12065*(r00*r00)))+(((-1.0)*x12066))+(((-1.0)*(r02*r02)))+((x12065*x12066))+(((2.0)*x12067*x12068)));
j4eval[0]=x12069;
j4eval[1]=IKsign(x12069);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x12068))+x12067))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12070=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12070);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12070);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12071=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12071);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12071);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12072=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12072)));
j4eval[1]=((((-1.0)*r10*x12072))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12073=((1.0)*cj5);
CheckValue<IkReal> x12074=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12073))),-1);
if(!x12074.valid){
continue;
}
CheckValue<IkReal> x12075=IKPowWithIntegerCheck(((((-1.0)*r10*x12073))+((r11*sj5))),-1);
if(!x12075.valid){
continue;
}
if( IKabs(((-1.0)*(x12074.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12075.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12074.value)))+IKsqr(((x12075.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12074.value)), ((x12075.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12076=IKsin(j4);
IkReal x12077=IKcos(j4);
IkReal x12078=((1.0)*cj5);
IkReal x12079=(sj5*x12077);
IkReal x12080=(sj5*x12076);
evalcond[0]=((-1.0)*r22*x12077);
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12076)));
evalcond[2]=(((r11*x12080))+(((-1.0)*r10*x12076*x12078)));
evalcond[3]=(((r01*x12079))+(((-1.0)*r00*x12077*x12078)));
evalcond[4]=((1.0)+((r01*x12080))+(((-1.0)*r00*x12076*x12078)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r10*x12077*x12078))+((r11*x12079))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12081=((1.0)*sj1);
CheckValue<IkReal> x12082=IKPowWithIntegerCheck(r22,-1);
if(!x12082.valid){
continue;
}
CheckValue<IkReal> x12083=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12083.valid){
continue;
}
if( IKabs(((x12082.value)*((((cj1*cj2))+(((-1.0)*sj2*x12081)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12083.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12081)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12082.value)*((((cj1*cj2))+(((-1.0)*sj2*x12081))))))+IKsqr(((x12083.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12081))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12082.value)*((((cj1*cj2))+(((-1.0)*sj2*x12081))))), ((x12083.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12081))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12084=IKsin(j4);
IkReal x12085=IKcos(j4);
IkReal x12086=((1.0)*cj5);
IkReal x12087=(sj5*x12085);
IkReal x12088=(sj5*x12084);
evalcond[0]=((-1.0)*r22*x12085);
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12084)));
evalcond[2]=(((r11*x12088))+(((-1.0)*r10*x12084*x12086)));
evalcond[3]=((((-1.0)*r00*x12085*x12086))+((r01*x12087)));
evalcond[4]=((1.0)+((r01*x12088))+(((-1.0)*r00*x12084*x12086)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r10*x12085*x12086))+((cj1*sj2))+((r11*x12087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12089=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12089);
rxp0_2=(py*r00);
rxp1_0=(r21*x12089);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12090=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12090)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12090)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12091=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12091);
rxp0_2=(py*r00);
rxp1_0=(r21*x12091);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12092=((1.0)*sj1);
CheckValue<IkReal> x12093=IKPowWithIntegerCheck(r12,-1);
if(!x12093.valid){
continue;
}
CheckValue<IkReal> x12094=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12094.valid){
continue;
}
if( IKabs(((x12093.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12092)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12094.value)*(((((-1.0)*sj2*x12092))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12093.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12092))))))+IKsqr(((x12094.value)*(((((-1.0)*sj2*x12092))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12093.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12092))))), ((x12094.value)*(((((-1.0)*sj2*x12092))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12095=IKsin(j4);
IkReal x12096=IKcos(j4);
IkReal x12097=((1.0)*cj5*r00);
IkReal x12098=(sj5*x12096);
IkReal x12099=(sj5*x12095);
IkReal x12100=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12096);
evalcond[1]=(((cj2*sj1))+((r12*x12095))+((cj1*sj2)));
evalcond[2]=((((-1.0)*x12095*x12100))+((r21*x12099)));
evalcond[3]=(((r01*x12098))+(((-1.0)*x12096*x12097)));
evalcond[4]=((1.0)+((r01*x12099))+(((-1.0)*x12095*x12097)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12096*x12100))+((r21*x12098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12101=((1.0)*cj5);
CheckValue<IkReal> x12102=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12101))),-1);
if(!x12102.valid){
continue;
}
CheckValue<IkReal> x12103=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12101))),-1);
if(!x12103.valid){
continue;
}
if( IKabs(((-1.0)*(x12102.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12103.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12102.value)))+IKsqr(((x12103.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12102.value)), ((x12103.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12104=IKsin(j4);
IkReal x12105=IKcos(j4);
IkReal x12106=((1.0)*cj5*r00);
IkReal x12107=(sj5*x12105);
IkReal x12108=(sj5*x12104);
IkReal x12109=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12105);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r12*x12104)));
evalcond[2]=((((-1.0)*x12104*x12109))+((r21*x12108)));
evalcond[3]=(((r01*x12107))+(((-1.0)*x12105*x12106)));
evalcond[4]=((1.0)+((r01*x12108))+(((-1.0)*x12104*x12106)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12105*x12109))+((r21*x12107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12110=cj5*cj5;
IkReal x12111=r01*r01;
IkReal x12112=(r01*sj5);
IkReal x12113=(cj5*r00);
CheckValue<IkReal> x12114 = IKatan2WithCheck(IkReal(((((-1.0)*x12113))+x12112)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12114.valid){
continue;
}
CheckValue<IkReal> x12115=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12111))+(((-1.0)*(r02*r02)))+(((-1.0)*x12110*(r00*r00)))+((x12110*x12111))+(((2.0)*x12112*x12113)))),-1);
if(!x12115.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12114.value)+(((1.5707963267949)*(x12115.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12116=IKcos(j4);
IkReal x12117=IKsin(j4);
IkReal x12118=(cj5*r00);
IkReal x12119=(cj5*r10);
IkReal x12120=(r21*sj5);
IkReal x12121=(cj5*r20);
IkReal x12122=((1.0)*x12116);
IkReal x12123=((1.0)*x12117);
IkReal x12124=(sj5*x12117);
IkReal x12125=(sj5*x12116);
evalcond[0]=(((r02*x12117))+((r01*x12125))+(((-1.0)*x12118*x12122)));
evalcond[1]=((((-1.0)*r22*x12122))+(((-1.0)*x12121*x12123))+((x12117*x12120)));
evalcond[2]=((((-1.0)*x12119*x12123))+(((-1.0)*r12*x12122))+((r11*x12124)));
evalcond[3]=((1.0)+((r01*x12124))+(((-1.0)*x12118*x12123))+(((-1.0)*r02*x12122)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x12119*x12122))+((r12*x12117))+((r11*x12125)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12121*x12122))+((r22*x12117))+((x12116*x12120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12126=((1.0)*cj5);
CheckValue<IkReal> x12127=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12126))+(((-1.0)*r20*sj5)))),-1);
if(!x12127.valid){
continue;
}
CheckValue<IkReal> x12128 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x12126)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12127.value)))+(x12128.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12129=IKcos(j4);
IkReal x12130=IKsin(j4);
IkReal x12131=(cj5*r00);
IkReal x12132=(cj5*r10);
IkReal x12133=(r21*sj5);
IkReal x12134=(cj5*r20);
IkReal x12135=((1.0)*x12129);
IkReal x12136=((1.0)*x12130);
IkReal x12137=(sj5*x12130);
IkReal x12138=(sj5*x12129);
evalcond[0]=((((-1.0)*x12131*x12135))+((r01*x12138))+((r02*x12130)));
evalcond[1]=((((-1.0)*r22*x12135))+(((-1.0)*x12134*x12136))+((x12130*x12133)));
evalcond[2]=((((-1.0)*x12132*x12136))+(((-1.0)*r12*x12135))+((r11*x12137)));
evalcond[3]=((1.0)+(((-1.0)*x12131*x12136))+((r01*x12137))+(((-1.0)*r02*x12135)));
evalcond[4]=(((cj2*sj1))+((r12*x12130))+((cj1*sj2))+(((-1.0)*x12132*x12135))+((r11*x12138)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12130))+((x12129*x12133))+(((-1.0)*x12134*x12135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12139 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12139.valid){
continue;
}
CheckValue<IkReal> x12140=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12139.value)+(((1.5707963267949)*(x12140.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12141=IKcos(j4);
IkReal x12142=IKsin(j4);
IkReal x12143=(cj5*r00);
IkReal x12144=(cj5*r10);
IkReal x12145=(r21*sj5);
IkReal x12146=(cj5*r20);
IkReal x12147=((1.0)*x12141);
IkReal x12148=((1.0)*x12142);
IkReal x12149=(sj5*x12142);
IkReal x12150=(sj5*x12141);
evalcond[0]=((((-1.0)*x12143*x12147))+((r02*x12142))+((r01*x12150)));
evalcond[1]=((((-1.0)*r22*x12147))+((x12142*x12145))+(((-1.0)*x12146*x12148)));
evalcond[2]=((((-1.0)*x12144*x12148))+(((-1.0)*r12*x12147))+((r11*x12149)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12147))+(((-1.0)*x12143*x12148))+((r01*x12149)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x12144*x12147))+((cj1*sj2))+((r12*x12142))+((r11*x12150)));
evalcond[5]=(((r22*x12142))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12141*x12145))+(((-1.0)*x12146*x12147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12152 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12152)==0){
continue;
}
IkReal x12151=pow(x12152,-0.5);
CheckValue<IkReal> x12153 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12153.valid){
continue;
}
IkReal gconst24=((-1.0)*(x12153.value));
IkReal gconst25=((-1.0)*r11*x12151);
IkReal gconst26=(r10*x12151);
CheckValue<IkReal> x12154 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12154.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12154.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12157 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12157.valid){
continue;
}
IkReal x12155=((-1.0)*(x12157.value));
IkReal x12156=x12151;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x12155;
IkReal gconst24=x12155;
IkReal gconst25=((-1.0)*r11*x12156);
IkReal gconst26=(r10*x12156);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12160 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12160.valid){
continue;
}
IkReal x12158=((-1.0)*(x12160.value));
IkReal x12159=x12151;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x12158;
IkReal gconst24=x12158;
IkReal gconst25=((-1.0)*r11*x12159);
IkReal gconst26=(r10*x12159);
CheckValue<IkReal> x12168=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x12168.valid){
continue;
}
IkReal x12161=x12168.value;
IkReal x12162=(sj3*x12161);
IkReal x12163=(r20*x12162);
IkReal x12164=(r00*x12162);
IkReal x12165=(r01*x12162);
IkReal x12166=(r21*x12162);
IkReal x12167=(r10*r11*x12162);
j4eval[0]=IKsign((((r21*x12165*(r11*r11)))+((r00*x12163*(r10*r10)))+((r01*r10*r11*x12163))+((r02*r22*sj3))+((r10*r11*r21*x12164))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12169=gconst25*gconst25;
IkReal x12170=gconst26*gconst26;
IkReal x12171=(cj3*r20);
IkReal x12172=(gconst26*r01);
IkReal x12173=(r22*sj3);
IkReal x12174=(r20*sj3);
IkReal x12175=(r21*sj3);
IkReal x12176=((1.0)*cj3);
IkReal x12177=((1.0)*x12170);
IkReal x12178=(gconst25*gconst26*r00);
CheckValue<IkReal> x12179 = IKatan2WithCheck(IkReal((((gconst25*r00*x12173))+((x12172*x12173)))),IkReal((((r00*x12169*x12175))+(((-1.0)*x12174*x12178))+(((-1.0)*r01*x12174*x12177))+((gconst25*x12172*x12175)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12179.valid){
continue;
}
CheckValue<IkReal> x12180=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r21*x12169*x12176))+(((-1.0)*r02*r22*x12176))+(((-1.0)*r00*x12171*x12177))+((gconst25*x12171*x12172))+((cj3*r21*x12178)))),-1);
if(!x12180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12179.value)+(((1.5707963267949)*(x12180.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12181=IKsin(j4);
IkReal x12182=IKcos(j4);
IkReal x12183=(cj2*sj1);
IkReal x12184=(cj1*sj2);
IkReal x12185=(gconst26*sj3);
IkReal x12186=(gconst25*sj3);
IkReal x12187=(gconst26*r10);
IkReal x12188=(gconst25*r11);
IkReal x12189=(sj1*sj2);
IkReal x12190=(cj3*gconst25);
IkReal x12191=(cj1*cj2);
IkReal x12192=(gconst26*r00);
IkReal x12193=(gconst26*r20);
IkReal x12194=(cj3*gconst26);
IkReal x12195=((1.0)*x12182);
IkReal x12196=((1.0)*x12181);
IkReal x12197=(cj3*x12181);
IkReal x12198=(gconst25*x12181);
IkReal x12199=(x12184+x12183);
evalcond[0]=(((r21*x12198))+(((-1.0)*x12193*x12196))+(((-1.0)*r22*x12195)));
evalcond[1]=(((x12181*x12188))+(((-1.0)*x12187*x12196))+(((-1.0)*r12*x12195)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12195))+(((-1.0)*x12192*x12196))+((r01*x12198)));
evalcond[3]=((((-1.0)*cj3*x12192*x12195))+((r02*x12197))+((r01*x12182*x12190))+((r00*x12186))+((r01*x12185)));
evalcond[4]=((((-1.0)*r01*x12186*x12195))+(((-1.0)*r02*sj3*x12196))+((r00*x12182*x12185))+((r01*x12194))+((r00*x12190)));
evalcond[5]=((((-1.0)*cj3*x12193*x12195))+((r21*x12185))+x12199+((r22*x12197))+((r21*x12182*x12190))+((r20*x12186)));
evalcond[6]=(((r11*x12194))+(((-1.0)*r12*sj3*x12196))+x12199+(((-1.0)*r11*x12186*x12195))+((r10*x12182*x12185))+((r10*x12190)));
evalcond[7]=(((r12*x12197))+(((-1.0)*cj3*x12187*x12195))+((cj3*x12182*x12188))+((r11*x12185))+x12191+((r10*x12186))+(((-1.0)*x12189)));
evalcond[8]=(((r21*x12194))+x12189+(((-1.0)*x12191))+((r20*x12182*x12185))+((r20*x12190))+(((-1.0)*r21*x12186*x12195))+(((-1.0)*r22*sj3*x12196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12200=gconst25*gconst25;
IkReal x12201=gconst26*gconst26;
IkReal x12202=(r01*sj3);
IkReal x12203=(gconst25*gconst26);
IkReal x12204=(cj3*r00);
IkReal x12205=(cj3*r01);
IkReal x12206=(r00*sj3);
IkReal x12207=(r21*x12200);
IkReal x12208=((1.0)*cj3*r20);
CheckValue<IkReal> x12209=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12202*x12203))+((r20*x12201*x12206))+(((-1.0)*r21*x12203*x12206))+((x12202*x12207))+((r02*r22*sj3)))),-1);
if(!x12209.valid){
continue;
}
CheckValue<IkReal> x12210 = IKatan2WithCheck(IkReal((((gconst25*r22*x12204))+((gconst26*r22*x12205)))),IkReal((((r21*x12203*x12205))+(((-1.0)*r20*x12201*x12205))+((x12204*x12207))+(((-1.0)*r20*x12203*x12204)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12209.value)))+(x12210.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12211=IKsin(j4);
IkReal x12212=IKcos(j4);
IkReal x12213=(cj2*sj1);
IkReal x12214=(cj1*sj2);
IkReal x12215=(gconst26*sj3);
IkReal x12216=(gconst25*sj3);
IkReal x12217=(gconst26*r10);
IkReal x12218=(gconst25*r11);
IkReal x12219=(sj1*sj2);
IkReal x12220=(cj3*gconst25);
IkReal x12221=(cj1*cj2);
IkReal x12222=(gconst26*r00);
IkReal x12223=(gconst26*r20);
IkReal x12224=(cj3*gconst26);
IkReal x12225=((1.0)*x12212);
IkReal x12226=((1.0)*x12211);
IkReal x12227=(cj3*x12211);
IkReal x12228=(gconst25*x12211);
IkReal x12229=(x12213+x12214);
evalcond[0]=((((-1.0)*r22*x12225))+((r21*x12228))+(((-1.0)*x12223*x12226)));
evalcond[1]=(((x12211*x12218))+(((-1.0)*r12*x12225))+(((-1.0)*x12217*x12226)));
evalcond[2]=((1.0)+((r01*x12228))+(((-1.0)*r02*x12225))+(((-1.0)*x12222*x12226)));
evalcond[3]=(((r02*x12227))+((r01*x12212*x12220))+(((-1.0)*cj3*x12222*x12225))+((r00*x12216))+((r01*x12215)));
evalcond[4]=(((r00*x12212*x12215))+(((-1.0)*r02*sj3*x12226))+((r01*x12224))+(((-1.0)*r01*x12216*x12225))+((r00*x12220)));
evalcond[5]=(((r22*x12227))+x12229+((r21*x12215))+((r20*x12216))+((r21*x12212*x12220))+(((-1.0)*cj3*x12223*x12225)));
evalcond[6]=(((r11*x12224))+(((-1.0)*r12*sj3*x12226))+(((-1.0)*r11*x12216*x12225))+x12229+((r10*x12220))+((r10*x12212*x12215)));
evalcond[7]=((((-1.0)*cj3*x12217*x12225))+x12221+((r10*x12216))+((cj3*x12212*x12218))+((r12*x12227))+((r11*x12215))+(((-1.0)*x12219)));
evalcond[8]=((((-1.0)*r21*x12216*x12225))+(((-1.0)*r22*sj3*x12226))+x12219+((r21*x12224))+((r20*x12212*x12215))+((r20*x12220))+(((-1.0)*x12221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12230=((1.0)*gconst26);
CheckValue<IkReal> x12231 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst25*r11))+(((-1.0)*r10*x12230)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12231.valid){
continue;
}
CheckValue<IkReal> x12232=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12230))+(((-1.0)*gconst25*r20)))),-1);
if(!x12232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12231.value)+(((1.5707963267949)*(x12232.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12233=IKsin(j4);
IkReal x12234=IKcos(j4);
IkReal x12235=(cj2*sj1);
IkReal x12236=(cj1*sj2);
IkReal x12237=(gconst26*sj3);
IkReal x12238=(gconst25*sj3);
IkReal x12239=(gconst26*r10);
IkReal x12240=(gconst25*r11);
IkReal x12241=(sj1*sj2);
IkReal x12242=(cj3*gconst25);
IkReal x12243=(cj1*cj2);
IkReal x12244=(gconst26*r00);
IkReal x12245=(gconst26*r20);
IkReal x12246=(cj3*gconst26);
IkReal x12247=((1.0)*x12234);
IkReal x12248=((1.0)*x12233);
IkReal x12249=(cj3*x12233);
IkReal x12250=(gconst25*x12233);
IkReal x12251=(x12236+x12235);
evalcond[0]=((((-1.0)*x12245*x12248))+(((-1.0)*r22*x12247))+((r21*x12250)));
evalcond[1]=((((-1.0)*r12*x12247))+(((-1.0)*x12239*x12248))+((x12233*x12240)));
evalcond[2]=((1.0)+((r01*x12250))+(((-1.0)*x12244*x12248))+(((-1.0)*r02*x12247)));
evalcond[3]=(((r01*x12237))+((r00*x12238))+(((-1.0)*cj3*x12244*x12247))+((r02*x12249))+((r01*x12234*x12242)));
evalcond[4]=((((-1.0)*r02*sj3*x12248))+(((-1.0)*r01*x12238*x12247))+((r00*x12242))+((r01*x12246))+((r00*x12234*x12237)));
evalcond[5]=(((r21*x12234*x12242))+(((-1.0)*cj3*x12245*x12247))+((r20*x12238))+x12251+((r22*x12249))+((r21*x12237)));
evalcond[6]=(((r11*x12246))+((r10*x12234*x12237))+x12251+((r10*x12242))+(((-1.0)*r11*x12238*x12247))+(((-1.0)*r12*sj3*x12248)));
evalcond[7]=(((r10*x12238))+((r12*x12249))+x12243+((r11*x12237))+(((-1.0)*x12241))+((cj3*x12234*x12240))+(((-1.0)*cj3*x12239*x12247)));
evalcond[8]=((((-1.0)*r22*sj3*x12248))+x12241+((r20*x12242))+(((-1.0)*x12243))+(((-1.0)*r21*x12238*x12247))+((r21*x12246))+((r20*x12234*x12237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12253 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12253)==0){
continue;
}
IkReal x12252=pow(x12253,-0.5);
CheckValue<IkReal> x12254 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12254.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x12254.value))));
IkReal gconst28=((1.0)*r11*x12252);
IkReal gconst29=((-1.0)*r10*x12252);
CheckValue<IkReal> x12255 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12255.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12255.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12258 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12258.valid){
continue;
}
IkReal x12256=((1.0)*(x12258.value));
IkReal x12257=x12252;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12256)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12256)));
IkReal gconst28=((1.0)*r11*x12257);
IkReal gconst29=((-1.0)*r10*x12257);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12259=gconst29*gconst29;
IkReal x12260=gconst28*gconst28;
IkReal x12261=(cj3*r01);
IkReal x12262=(cj3*r00);
IkReal x12263=(r00*sj3);
IkReal x12264=(r01*sj3);
IkReal x12265=(gconst28*gconst29);
IkReal x12266=((1.0)*r20);
IkReal x12267=(r20*x12259);
IkReal x12268=(r21*x12260);
CheckValue<IkReal> x12269 = IKatan2WithCheck(IkReal((((gconst29*r22*x12261))+((gconst28*r22*x12262)))),IkReal(((((-1.0)*x12259*x12261*x12266))+(((-1.0)*x12262*x12265*x12266))+((x12262*x12268))+((r21*x12261*x12265)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12269.valid){
continue;
}
CheckValue<IkReal> x12270=IKPowWithIntegerCheck(IKsign((((x12263*x12267))+((x12264*x12268))+(((-1.0)*x12264*x12265*x12266))+(((-1.0)*r21*x12263*x12265))+((r02*r22*sj3)))),-1);
if(!x12270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12269.value)+(((1.5707963267949)*(x12270.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12271=IKsin(j4);
IkReal x12272=IKcos(j4);
IkReal x12273=(cj2*sj1);
IkReal x12274=(cj1*sj2);
IkReal x12275=(gconst29*r20);
IkReal x12276=(gconst28*r20);
IkReal x12277=(sj1*sj2);
IkReal x12278=(cj1*cj2);
IkReal x12279=(r11*sj3);
IkReal x12280=(gconst29*r01);
IkReal x12281=(gconst29*r10);
IkReal x12282=(cj3*gconst28);
IkReal x12283=(cj3*gconst29);
IkReal x12284=(gconst28*sj3);
IkReal x12285=(gconst29*r00);
IkReal x12286=((1.0)*x12272);
IkReal x12287=((1.0)*x12271);
IkReal x12288=(gconst28*x12271);
IkReal x12289=(cj3*x12271);
IkReal x12290=(sj3*x12272);
IkReal x12291=(x12273+x12274);
evalcond[0]=((((-1.0)*r22*x12286))+(((-1.0)*x12275*x12287))+((r21*x12288)));
evalcond[1]=((((-1.0)*x12281*x12287))+(((-1.0)*r12*x12286))+((r11*x12288)));
evalcond[2]=((1.0)+((r01*x12288))+(((-1.0)*x12285*x12287))+(((-1.0)*r02*x12286)));
evalcond[3]=((((-1.0)*r00*x12283*x12286))+((r02*x12289))+((r00*x12284))+((r01*x12272*x12282))+((sj3*x12280)));
evalcond[4]=(((x12285*x12290))+(((-1.0)*r01*x12284*x12286))+((r00*x12282))+(((-1.0)*r02*sj3*x12287))+((cj3*x12280)));
evalcond[5]=(((gconst29*r21*sj3))+((r22*x12289))+((r21*x12272*x12282))+x12291+((sj3*x12276))+(((-1.0)*cj3*x12275*x12286)));
evalcond[6]=((((-1.0)*r12*sj3*x12287))+x12291+((r11*x12283))+(((-1.0)*gconst28*x12279*x12286))+((x12281*x12290))+((r10*x12282)));
evalcond[7]=((((-1.0)*cj3*x12281*x12286))+(((-1.0)*x12277))+((r11*x12272*x12282))+x12278+((r12*x12289))+((gconst29*x12279))+((r10*x12284)));
evalcond[8]=((((-1.0)*r21*x12284*x12286))+(((-1.0)*x12278))+x12277+((x12275*x12290))+((cj3*x12276))+(((-1.0)*r22*sj3*x12287))+((r21*x12283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12292=((1.0)*gconst29);
CheckValue<IkReal> x12293=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12292))+(((-1.0)*gconst28*r20)))),-1);
if(!x12293.valid){
continue;
}
CheckValue<IkReal> x12294 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x12292))+((gconst28*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12293.value)))+(x12294.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12295=IKsin(j4);
IkReal x12296=IKcos(j4);
IkReal x12297=(cj2*sj1);
IkReal x12298=(cj1*sj2);
IkReal x12299=(gconst29*r20);
IkReal x12300=(gconst28*r20);
IkReal x12301=(sj1*sj2);
IkReal x12302=(cj1*cj2);
IkReal x12303=(r11*sj3);
IkReal x12304=(gconst29*r01);
IkReal x12305=(gconst29*r10);
IkReal x12306=(cj3*gconst28);
IkReal x12307=(cj3*gconst29);
IkReal x12308=(gconst28*sj3);
IkReal x12309=(gconst29*r00);
IkReal x12310=((1.0)*x12296);
IkReal x12311=((1.0)*x12295);
IkReal x12312=(gconst28*x12295);
IkReal x12313=(cj3*x12295);
IkReal x12314=(sj3*x12296);
IkReal x12315=(x12298+x12297);
evalcond[0]=((((-1.0)*x12299*x12311))+(((-1.0)*r22*x12310))+((r21*x12312)));
evalcond[1]=((((-1.0)*x12305*x12311))+((r11*x12312))+(((-1.0)*r12*x12310)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12310))+(((-1.0)*x12309*x12311))+((r01*x12312)));
evalcond[3]=((((-1.0)*r00*x12307*x12310))+((r02*x12313))+((r01*x12296*x12306))+((r00*x12308))+((sj3*x12304)));
evalcond[4]=(((cj3*x12304))+(((-1.0)*r02*sj3*x12311))+((x12309*x12314))+(((-1.0)*r01*x12308*x12310))+((r00*x12306)));
evalcond[5]=(((r21*x12296*x12306))+((gconst29*r21*sj3))+((r22*x12313))+x12315+(((-1.0)*cj3*x12299*x12310))+((sj3*x12300)));
evalcond[6]=(((r10*x12306))+((r11*x12307))+x12315+(((-1.0)*gconst28*x12303*x12310))+((x12305*x12314))+(((-1.0)*r12*sj3*x12311)));
evalcond[7]=(((gconst29*x12303))+((r10*x12308))+((r12*x12313))+((r11*x12296*x12306))+(((-1.0)*x12301))+x12302+(((-1.0)*cj3*x12305*x12310)));
evalcond[8]=((((-1.0)*r21*x12308*x12310))+((cj3*x12300))+(((-1.0)*x12302))+(((-1.0)*r22*sj3*x12311))+x12301+((r21*x12307))+((x12299*x12314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12316=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12316);
rxp0_2=(py*r00);
rxp1_0=(r21*x12316);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12317=(cj5*r00);
IkReal x12318=(r01*sj5);
j4eval[0]=(x12318+(((-1.0)*x12317)));
j4eval[1]=(((sj3*x12317))+(((-1.0)*sj3*x12318)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12319=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12319);
rxp0_2=(py*r00);
rxp1_0=(r21*x12319);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12320=(r01*sj5);
IkReal x12321=((1.0)*cj5*r00);
j4eval[0]=(x12320+(((-1.0)*x12321)));
j4eval[1]=(((cj3*x12320))+(((-1.0)*cj3*x12321)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12322=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12322);
rxp0_2=(py*r00);
rxp1_0=(r21*x12322);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12323=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12323);
rxp0_2=(py*r00);
rxp1_0=(r21*x12323);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12324=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12324);
rxp0_2=(py*r00);
rxp1_0=(r21*x12324);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal x12325=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12325)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12325)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12326=((1.0)*cj5);
CheckValue<IkReal> x12327=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12326))),-1);
if(!x12327.valid){
continue;
}
CheckValue<IkReal> x12328=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12326))),-1);
if(!x12328.valid){
continue;
}
if( IKabs(((-1.0)*(x12327.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12328.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12327.value)))+IKsqr(((x12328.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12327.value)), ((x12328.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12329=IKsin(j4);
IkReal x12330=IKcos(j4);
IkReal x12331=((1.0)*cj5*r00);
IkReal x12332=(sj5*x12330);
IkReal x12333=(sj5*x12329);
IkReal x12334=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12330);
evalcond[1]=((((-1.0)*sj1*sj2))+((r12*x12329))+((cj1*cj2)));
evalcond[2]=(((r21*x12333))+(((-1.0)*x12329*x12334)));
evalcond[3]=(((r01*x12332))+(((-1.0)*x12330*x12331)));
evalcond[4]=((1.0)+((r01*x12333))+(((-1.0)*x12329*x12331)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((r21*x12332))+(((-1.0)*x12330*x12334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12335=((1.0)*cj2);
CheckValue<IkReal> x12336=IKPowWithIntegerCheck(r12,-1);
if(!x12336.valid){
continue;
}
CheckValue<IkReal> x12337=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12337.valid){
continue;
}
if( IKabs(((x12336.value)*((((sj1*sj2))+(((-1.0)*cj1*x12335)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12337.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12335)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12336.value)*((((sj1*sj2))+(((-1.0)*cj1*x12335))))))+IKsqr(((x12337.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12335))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12336.value)*((((sj1*sj2))+(((-1.0)*cj1*x12335))))), ((x12337.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12335))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12338=IKsin(j4);
IkReal x12339=IKcos(j4);
IkReal x12340=((1.0)*cj5*r00);
IkReal x12341=(sj5*x12339);
IkReal x12342=(sj5*x12338);
IkReal x12343=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12339);
evalcond[1]=((((-1.0)*sj1*sj2))+((r12*x12338))+((cj1*cj2)));
evalcond[2]=((((-1.0)*x12338*x12343))+((r21*x12342)));
evalcond[3]=((((-1.0)*x12339*x12340))+((r01*x12341)));
evalcond[4]=((1.0)+(((-1.0)*x12338*x12340))+((r01*x12342)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x12339*x12343))+((r21*x12341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12344=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12344);
rxp0_2=(py*r00);
rxp1_0=(r21*x12344);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12345=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12345);
rxp0_2=(py*r00);
rxp1_0=(r21*x12345);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r12;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12346=((1.0)*sj1);
CheckValue<IkReal> x12347=IKPowWithIntegerCheck(r12,-1);
if(!x12347.valid){
continue;
}
CheckValue<IkReal> x12348=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12348.valid){
continue;
}
if( IKabs(((x12347.value)*(((((-1.0)*sj2*x12346))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12348.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12346)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12347.value)*(((((-1.0)*sj2*x12346))+((cj1*cj2))))))+IKsqr(((x12348.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12346))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12347.value)*(((((-1.0)*sj2*x12346))+((cj1*cj2))))), ((x12348.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12346))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12349=IKsin(j4);
IkReal x12350=IKcos(j4);
IkReal x12351=(cj5*r00);
IkReal x12352=(cj5*r20);
IkReal x12353=(r21*sj5);
IkReal x12354=(r01*sj5);
IkReal x12355=((1.0)*x12349);
IkReal x12356=((1.0)*x12350);
evalcond[0]=((-1.0)*r12*x12350);
evalcond[1]=((((-1.0)*x12352*x12355))+((x12349*x12353)));
evalcond[2]=((((-1.0)*x12354*x12356))+((x12350*x12351)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x12355))+((cj1*cj2)));
evalcond[4]=((1.0)+(((-1.0)*x12351*x12355))+((x12349*x12354)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x12353*x12356))+((cj1*sj2))+((x12350*x12352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12357=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12357.valid){
continue;
}
CheckValue<IkReal> x12358=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12358.valid){
continue;
}
if( IKabs(((-1.0)*(x12357.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12358.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12357.value)))+IKsqr(((x12358.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12357.value)), ((x12358.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12359=IKsin(j4);
IkReal x12360=IKcos(j4);
IkReal x12361=(cj5*r00);
IkReal x12362=(cj5*r20);
IkReal x12363=(r21*sj5);
IkReal x12364=(r01*sj5);
IkReal x12365=((1.0)*x12359);
IkReal x12366=((1.0)*x12360);
evalcond[0]=((-1.0)*r12*x12360);
evalcond[1]=((((-1.0)*x12362*x12365))+((x12359*x12363)));
evalcond[2]=((((-1.0)*x12364*x12366))+((x12360*x12361)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x12365))+((cj1*cj2)));
evalcond[4]=((1.0)+(((-1.0)*x12361*x12365))+((x12359*x12364)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((x12360*x12362))+(((-1.0)*x12363*x12366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12367=((1.0)*r01);
CheckValue<IkReal> x12368=IKPowWithIntegerCheck(r12,-1);
if(!x12368.valid){
continue;
}
CheckValue<IkReal> x12369=IKPowWithIntegerCheck(sj3,-1);
if(!x12369.valid){
continue;
}
CheckValue<IkReal> x12370=IKPowWithIntegerCheck((((cj5*r00*sj3))+(((-1.0)*sj3*sj5*x12367))),-1);
if(!x12370.valid){
continue;
}
if( IKabs(((x12368.value)*(x12369.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12370.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x12367)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12368.value)*(x12369.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12370.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x12367))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12368.value)*(x12369.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12370.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x12367))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12371=IKsin(j4);
IkReal x12372=IKcos(j4);
IkReal x12373=(cj2*sj1);
IkReal x12374=(cj1*sj2);
IkReal x12375=(sj1*sj2);
IkReal x12376=(cj5*sj3);
IkReal x12377=(cj3*cj5);
IkReal x12378=(r21*sj5);
IkReal x12379=(cj1*cj2);
IkReal x12380=(r00*sj5);
IkReal x12381=(r01*sj5);
IkReal x12382=(r20*sj5);
IkReal x12383=((1.0)*x12371);
IkReal x12384=(r20*x12372);
IkReal x12385=(r00*x12372);
IkReal x12386=(cj3*x12372);
IkReal x12387=(x12373+x12374);
IkReal x12388=((1.0)*sj3*x12372);
evalcond[0]=((-1.0)*r12*x12372);
evalcond[1]=(((x12371*x12378))+(((-1.0)*cj5*r20*x12383)));
evalcond[2]=(x12387+(((-1.0)*r12*sj3*x12383)));
evalcond[3]=(((cj3*r12*x12371))+x12379+(((-1.0)*x12375)));
evalcond[4]=((1.0)+((x12371*x12381))+(((-1.0)*cj5*r00*x12383)));
evalcond[5]=(((cj3*x12380))+((x12376*x12385))+(((-1.0)*x12381*x12388))+((r01*x12377)));
evalcond[6]=(((x12381*x12386))+(((-1.0)*x12377*x12385))+((sj3*x12380))+((r01*x12376)));
evalcond[7]=(x12387+((r21*x12376))+(((-1.0)*x12377*x12384))+((sj3*x12382))+((x12378*x12386)));
evalcond[8]=(((cj3*x12382))+((x12376*x12384))+x12375+((r21*x12377))+(((-1.0)*x12379))+(((-1.0)*x12378*x12388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12389=((1.0)*r00);
IkReal x12390=(r01*sj5);
CheckValue<IkReal> x12391=IKPowWithIntegerCheck((x12390+(((-1.0)*cj5*x12389))),-1);
if(!x12391.valid){
continue;
}
CheckValue<IkReal> x12392=IKPowWithIntegerCheck((((cj3*x12390))+(((-1.0)*cj3*cj5*x12389))),-1);
if(!x12392.valid){
continue;
}
if( IKabs(((-1.0)*(x12391.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12392.value)*(((((-1.0)*sj3*sj5*x12389))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12391.value)))+IKsqr(((x12392.value)*(((((-1.0)*sj3*sj5*x12389))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12391.value)), ((x12392.value)*(((((-1.0)*sj3*sj5*x12389))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12393=IKsin(j4);
IkReal x12394=IKcos(j4);
IkReal x12395=(cj2*sj1);
IkReal x12396=(cj1*sj2);
IkReal x12397=(sj1*sj2);
IkReal x12398=(cj5*sj3);
IkReal x12399=(cj3*cj5);
IkReal x12400=(r21*sj5);
IkReal x12401=(cj1*cj2);
IkReal x12402=(r00*sj5);
IkReal x12403=(r01*sj5);
IkReal x12404=(r20*sj5);
IkReal x12405=((1.0)*x12393);
IkReal x12406=(r20*x12394);
IkReal x12407=(r00*x12394);
IkReal x12408=(cj3*x12394);
IkReal x12409=(x12395+x12396);
IkReal x12410=((1.0)*sj3*x12394);
evalcond[0]=((-1.0)*r12*x12394);
evalcond[1]=(((x12393*x12400))+(((-1.0)*cj5*r20*x12405)));
evalcond[2]=((((-1.0)*r12*sj3*x12405))+x12409);
evalcond[3]=(((cj3*r12*x12393))+(((-1.0)*x12397))+x12401);
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x12405))+((x12393*x12403)));
evalcond[5]=(((r01*x12399))+((cj3*x12402))+(((-1.0)*x12403*x12410))+((x12398*x12407)));
evalcond[6]=((((-1.0)*x12399*x12407))+((r01*x12398))+((sj3*x12402))+((x12403*x12408)));
evalcond[7]=(((x12400*x12408))+(((-1.0)*x12399*x12406))+((r21*x12398))+((sj3*x12404))+x12409);
evalcond[8]=(x12397+((r21*x12399))+((cj3*x12404))+(((-1.0)*x12400*x12410))+((x12398*x12406))+(((-1.0)*x12401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12411=((1.0)*r01);
IkReal x12412=(cj5*r00);
CheckValue<IkReal> x12413=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*x12412))),-1);
if(!x12413.valid){
continue;
}
CheckValue<IkReal> x12414=IKPowWithIntegerCheck((((sj3*x12412))+(((-1.0)*sj3*sj5*x12411))),-1);
if(!x12414.valid){
continue;
}
if( IKabs(((-1.0)*(x12413.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12414.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x12411)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12413.value)))+IKsqr(((x12414.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x12411))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12413.value)), ((x12414.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x12411))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12415=IKsin(j4);
IkReal x12416=IKcos(j4);
IkReal x12417=(cj2*sj1);
IkReal x12418=(cj1*sj2);
IkReal x12419=(sj1*sj2);
IkReal x12420=(cj5*sj3);
IkReal x12421=(cj3*cj5);
IkReal x12422=(r21*sj5);
IkReal x12423=(cj1*cj2);
IkReal x12424=(r00*sj5);
IkReal x12425=(r01*sj5);
IkReal x12426=(r20*sj5);
IkReal x12427=((1.0)*x12415);
IkReal x12428=(r20*x12416);
IkReal x12429=(r00*x12416);
IkReal x12430=(cj3*x12416);
IkReal x12431=(x12418+x12417);
IkReal x12432=((1.0)*sj3*x12416);
evalcond[0]=((-1.0)*r12*x12416);
evalcond[1]=((((-1.0)*cj5*r20*x12427))+((x12415*x12422)));
evalcond[2]=((((-1.0)*r12*sj3*x12427))+x12431);
evalcond[3]=((((-1.0)*x12419))+((cj3*r12*x12415))+x12423);
evalcond[4]=((1.0)+((x12415*x12425))+(((-1.0)*cj5*r00*x12427)));
evalcond[5]=(((x12420*x12429))+(((-1.0)*x12425*x12432))+((cj3*x12424))+((r01*x12421)));
evalcond[6]=(((x12425*x12430))+(((-1.0)*x12421*x12429))+((r01*x12420))+((sj3*x12424)));
evalcond[7]=((((-1.0)*x12421*x12428))+((r21*x12420))+((x12422*x12430))+x12431+((sj3*x12426)));
evalcond[8]=(((x12420*x12428))+(((-1.0)*x12423))+((r21*x12421))+((cj3*x12426))+(((-1.0)*x12422*x12432))+x12419);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12433=cj5*cj5;
IkReal x12434=(cj3*r20);
IkReal x12435=(r21*sj3);
IkReal x12436=((1.0)*cj3);
IkReal x12437=(r01*r21);
IkReal x12438=(r01*sj3);
IkReal x12439=(r00*sj5);
IkReal x12440=(cj5*r01*sj5);
IkReal x12441=((1.0)*x12433);
CheckValue<IkReal> x12442=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x12436))+((x12434*x12440))+(((-1.0)*r00*x12434*x12441))+((cj3*x12433*x12437))+(((-1.0)*x12436*x12437))+((cj3*cj5*r21*x12439)))),-1);
if(!x12442.valid){
continue;
}
CheckValue<IkReal> x12443 = IKatan2WithCheck(IkReal((((cj5*r22*x12438))+((r22*sj3*x12439)))),IkReal(((((-1.0)*r00*x12435*x12441))+((x12435*x12440))+(((-1.0)*r20*x12438*x12441))+((r00*x12435))+(((-1.0)*cj5*r20*sj3*x12439)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12442.value)))+(x12443.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12444=IKsin(j4);
IkReal x12445=IKcos(j4);
IkReal x12446=(cj2*sj1);
IkReal x12447=(cj1*sj2);
IkReal x12448=(r11*sj5);
IkReal x12449=(cj5*r10);
IkReal x12450=(sj1*sj2);
IkReal x12451=(cj5*r01);
IkReal x12452=(cj5*r00);
IkReal x12453=(cj3*sj5);
IkReal x12454=(r21*sj5);
IkReal x12455=(cj1*cj2);
IkReal x12456=(cj5*sj3);
IkReal x12457=(sj3*sj5);
IkReal x12458=(r01*sj5);
IkReal x12459=(cj3*cj5);
IkReal x12460=(cj5*r20);
IkReal x12461=((1.0)*x12445);
IkReal x12462=((1.0)*x12444);
IkReal x12463=(cj3*x12445);
IkReal x12464=(sj3*x12445);
IkReal x12465=(cj3*x12444);
IkReal x12466=(x12446+x12447);
evalcond[0]=(((x12444*x12454))+(((-1.0)*r22*x12461))+(((-1.0)*x12460*x12462)));
evalcond[1]=((((-1.0)*x12449*x12462))+((x12444*x12448))+(((-1.0)*r12*x12461)));
evalcond[2]=((1.0)+((x12444*x12458))+(((-1.0)*r02*x12461))+(((-1.0)*x12452*x12462)));
evalcond[3]=(((r01*x12445*x12453))+((sj3*x12451))+(((-1.0)*cj3*x12452*x12461))+((r02*x12465))+((r00*x12457)));
evalcond[4]=((((-1.0)*r02*sj3*x12462))+((cj3*x12451))+((r00*x12453))+((x12452*x12464))+(((-1.0)*r01*x12457*x12461)));
evalcond[5]=(((r21*x12445*x12453))+(((-1.0)*r20*x12459*x12461))+((r20*x12457))+x12466+((r22*x12465))+((r21*x12456)));
evalcond[6]=(((x12449*x12464))+(((-1.0)*sj3*x12448*x12461))+((r11*x12459))+(((-1.0)*r12*sj3*x12462))+x12466+((r10*x12453)));
evalcond[7]=(((r12*x12465))+((r11*x12456))+(((-1.0)*x12450))+x12455+(((-1.0)*cj3*x12449*x12461))+((x12448*x12463))+((r10*x12457)));
evalcond[8]=((((-1.0)*r22*sj3*x12462))+((r20*x12445*x12456))+(((-1.0)*sj3*x12454*x12461))+(((-1.0)*x12455))+((r20*x12453))+x12450+((r21*x12459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12467=((1.0)*cj5);
CheckValue<IkReal> x12468 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x12467)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12468.valid){
continue;
}
CheckValue<IkReal> x12469=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12467))+(((-1.0)*r20*sj5)))),-1);
if(!x12469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12468.value)+(((1.5707963267949)*(x12469.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12470=IKsin(j4);
IkReal x12471=IKcos(j4);
IkReal x12472=(cj2*sj1);
IkReal x12473=(cj1*sj2);
IkReal x12474=(r11*sj5);
IkReal x12475=(cj5*r10);
IkReal x12476=(sj1*sj2);
IkReal x12477=(cj5*r01);
IkReal x12478=(cj5*r00);
IkReal x12479=(cj3*sj5);
IkReal x12480=(r21*sj5);
IkReal x12481=(cj1*cj2);
IkReal x12482=(cj5*sj3);
IkReal x12483=(sj3*sj5);
IkReal x12484=(r01*sj5);
IkReal x12485=(cj3*cj5);
IkReal x12486=(cj5*r20);
IkReal x12487=((1.0)*x12471);
IkReal x12488=((1.0)*x12470);
IkReal x12489=(cj3*x12471);
IkReal x12490=(sj3*x12471);
IkReal x12491=(cj3*x12470);
IkReal x12492=(x12473+x12472);
evalcond[0]=((((-1.0)*r22*x12487))+(((-1.0)*x12486*x12488))+((x12470*x12480)));
evalcond[1]=((((-1.0)*r12*x12487))+((x12470*x12474))+(((-1.0)*x12475*x12488)));
evalcond[2]=((1.0)+(((-1.0)*x12478*x12488))+(((-1.0)*r02*x12487))+((x12470*x12484)));
evalcond[3]=(((sj3*x12477))+((r00*x12483))+(((-1.0)*cj3*x12478*x12487))+((r02*x12491))+((r01*x12471*x12479)));
evalcond[4]=(((cj3*x12477))+((r00*x12479))+(((-1.0)*r01*x12483*x12487))+(((-1.0)*r02*sj3*x12488))+((x12478*x12490)));
evalcond[5]=((((-1.0)*r20*x12485*x12487))+((r21*x12471*x12479))+((r20*x12483))+((r22*x12491))+x12492+((r21*x12482)));
evalcond[6]=((((-1.0)*r12*sj3*x12488))+((x12475*x12490))+((r11*x12485))+(((-1.0)*sj3*x12474*x12487))+x12492+((r10*x12479)));
evalcond[7]=((((-1.0)*x12476))+((r11*x12482))+((x12474*x12489))+(((-1.0)*cj3*x12475*x12487))+((r10*x12483))+x12481+((r12*x12491)));
evalcond[8]=((((-1.0)*r22*sj3*x12488))+((r20*x12471*x12482))+(((-1.0)*x12481))+((r20*x12479))+(((-1.0)*sj3*x12480*x12487))+x12476+((r21*x12485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12493 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12493.valid){
continue;
}
CheckValue<IkReal> x12494=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12493.value)+(((1.5707963267949)*(x12494.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12495=IKsin(j4);
IkReal x12496=IKcos(j4);
IkReal x12497=(cj2*sj1);
IkReal x12498=(cj1*sj2);
IkReal x12499=(r11*sj5);
IkReal x12500=(cj5*r10);
IkReal x12501=(sj1*sj2);
IkReal x12502=(cj5*r01);
IkReal x12503=(cj5*r00);
IkReal x12504=(cj3*sj5);
IkReal x12505=(r21*sj5);
IkReal x12506=(cj1*cj2);
IkReal x12507=(cj5*sj3);
IkReal x12508=(sj3*sj5);
IkReal x12509=(r01*sj5);
IkReal x12510=(cj3*cj5);
IkReal x12511=(cj5*r20);
IkReal x12512=((1.0)*x12496);
IkReal x12513=((1.0)*x12495);
IkReal x12514=(cj3*x12496);
IkReal x12515=(sj3*x12496);
IkReal x12516=(cj3*x12495);
IkReal x12517=(x12497+x12498);
evalcond[0]=((((-1.0)*r22*x12512))+((x12495*x12505))+(((-1.0)*x12511*x12513)));
evalcond[1]=((((-1.0)*r12*x12512))+((x12495*x12499))+(((-1.0)*x12500*x12513)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12512))+((x12495*x12509))+(((-1.0)*x12503*x12513)));
evalcond[3]=(((sj3*x12502))+((r00*x12508))+((r01*x12496*x12504))+((r02*x12516))+(((-1.0)*cj3*x12503*x12512)));
evalcond[4]=(((cj3*x12502))+((r00*x12504))+(((-1.0)*r02*sj3*x12513))+((x12503*x12515))+(((-1.0)*r01*x12508*x12512)));
evalcond[5]=((((-1.0)*r20*x12510*x12512))+((r20*x12508))+((r21*x12496*x12504))+((r21*x12507))+((r22*x12516))+x12517);
evalcond[6]=(((r10*x12504))+((x12500*x12515))+(((-1.0)*r12*sj3*x12513))+(((-1.0)*sj3*x12499*x12512))+x12517+((r11*x12510)));
evalcond[7]=((((-1.0)*cj3*x12500*x12512))+((r12*x12516))+((r11*x12507))+((x12499*x12514))+(((-1.0)*x12501))+((r10*x12508))+x12506);
evalcond[8]=(((r20*x12496*x12507))+(((-1.0)*x12506))+((r20*x12504))+(((-1.0)*r22*sj3*x12513))+((r21*x12510))+(((-1.0)*sj3*x12505*x12512))+x12501);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12518=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12518;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12518);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12519=((1.0)*cj5);
IkReal x12520=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12519)));
j4eval[0]=x12520;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12519)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12520);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12521=cj5*cj5;
IkReal x12522=(cj3*r01);
IkReal x12523=(cj5*sj5);
IkReal x12524=((1.0)*cj3);
IkReal x12525=((((-1.0)*r00*r20*x12521*x12524))+(((-1.0)*r02*r22*x12524))+((r20*x12522*x12523))+(((-1.0)*r21*x12522))+((cj3*r00*r21*x12523))+((r21*x12521*x12522)));
j4eval[0]=x12525;
j4eval[1]=IKsign(x12525);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12526=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12526;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12526);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12527=((1.0)*cj5);
IkReal x12528=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12527)));
j4eval[0]=x12528;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12527))+((r21*sj5))))));
j4eval[2]=IKsign(x12528);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12529=cj5*cj5;
IkReal x12530=r01*r01;
IkReal x12531=(r01*sj5);
IkReal x12532=(cj5*r00);
IkReal x12533=((((-1.0)*(r02*r02)))+(((2.0)*x12531*x12532))+(((-1.0)*x12530))+((x12529*x12530))+(((-1.0)*x12529*(r00*r00))));
j4eval[0]=x12533;
j4eval[1]=IKsign(x12533);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x12531))+x12532))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12534=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12534);
rxp0_2=(py*r00);
rxp1_0=(r21*x12534);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12535=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12535);
rxp0_2=(py*r00);
rxp1_0=(r21*x12535);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12536=((1.0)*sj1);
CheckValue<IkReal> x12537=IKPowWithIntegerCheck(r12,-1);
if(!x12537.valid){
continue;
}
CheckValue<IkReal> x12538=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12538.valid){
continue;
}
if( IKabs(((x12537.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12536)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12538.value)*(((((-1.0)*sj2*x12536))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12537.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12536))))))+IKsqr(((x12538.value)*(((((-1.0)*sj2*x12536))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12537.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12536))))), ((x12538.value)*(((((-1.0)*sj2*x12536))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12539=IKsin(j4);
IkReal x12540=IKcos(j4);
IkReal x12541=((1.0)*cj1);
IkReal x12542=(r21*sj5);
IkReal x12543=(r01*sj5);
IkReal x12544=(cj5*x12540);
IkReal x12545=((1.0)*x12540);
IkReal x12546=((1.0)*cj5*x12539);
evalcond[0]=((-1.0)*r12*x12540);
evalcond[1]=(((x12539*x12542))+(((-1.0)*r20*x12546)));
evalcond[2]=(((r00*x12544))+(((-1.0)*x12543*x12545)));
evalcond[3]=((-1.0)+((x12539*x12543))+(((-1.0)*r00*x12546)));
evalcond[4]=((((-1.0)*r12*x12539))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x12541)));
evalcond[5]=(((r20*x12544))+(((-1.0)*x12542*x12545))+((sj1*sj2))+(((-1.0)*cj2*x12541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12547=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12547.valid){
continue;
}
CheckValue<IkReal> x12548=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12548.valid){
continue;
}
if( IKabs(x12547.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12548.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12547.value)+IKsqr(((x12548.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12547.value, ((x12548.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12549=IKsin(j4);
IkReal x12550=IKcos(j4);
IkReal x12551=((1.0)*cj1);
IkReal x12552=(r21*sj5);
IkReal x12553=(r01*sj5);
IkReal x12554=(cj5*x12550);
IkReal x12555=((1.0)*x12550);
IkReal x12556=((1.0)*cj5*x12549);
evalcond[0]=((-1.0)*r12*x12550);
evalcond[1]=((((-1.0)*r20*x12556))+((x12549*x12552)));
evalcond[2]=(((r00*x12554))+(((-1.0)*x12553*x12555)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12556))+((x12549*x12553)));
evalcond[4]=((((-1.0)*r12*x12549))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x12551)));
evalcond[5]=(((r20*x12554))+((sj1*sj2))+(((-1.0)*x12552*x12555))+(((-1.0)*cj2*x12551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12557=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12557);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12557);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12558=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12558);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12558);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12559=IKPowWithIntegerCheck(r22,-1);
if(!x12559.valid){
continue;
}
CheckValue<IkReal> x12560=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x12560.valid){
continue;
}
if( IKabs(((x12559.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12560.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12559.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12560.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12559.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12560.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12561=IKsin(j4);
IkReal x12562=IKcos(j4);
IkReal x12563=((1.0)*cj2);
IkReal x12564=(cj5*x12562);
IkReal x12565=(sj5*x12561);
IkReal x12566=((1.0)*sj5*x12562);
IkReal x12567=((1.0)*cj5*x12561);
evalcond[0]=((-1.0)*r22*x12562);
evalcond[1]=(((r11*x12565))+(((-1.0)*r10*x12567)));
evalcond[2]=((((-1.0)*r22*x12561))+((sj1*sj2))+(((-1.0)*cj1*x12563)));
evalcond[3]=((((-1.0)*r01*x12566))+((r00*x12564)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x12567))+((r01*x12565)));
evalcond[5]=((((-1.0)*r11*x12566))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12563))+((r10*x12564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12568=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12568.valid){
continue;
}
CheckValue<IkReal> x12569=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x12569.valid){
continue;
}
if( IKabs(x12568.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12569.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12568.value)+IKsqr(((x12569.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12568.value, ((x12569.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12570=IKsin(j4);
IkReal x12571=IKcos(j4);
IkReal x12572=((1.0)*cj2);
IkReal x12573=(cj5*x12571);
IkReal x12574=(sj5*x12570);
IkReal x12575=((1.0)*sj5*x12571);
IkReal x12576=((1.0)*cj5*x12570);
evalcond[0]=((-1.0)*r22*x12571);
evalcond[1]=((((-1.0)*r10*x12576))+((r11*x12574)));
evalcond[2]=((((-1.0)*r22*x12570))+((sj1*sj2))+(((-1.0)*cj1*x12572)));
evalcond[3]=(((r00*x12573))+(((-1.0)*r01*x12575)));
evalcond[4]=((-1.0)+((r01*x12574))+(((-1.0)*r00*x12576)));
evalcond[5]=((((-1.0)*sj1*x12572))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*x12575))+((r10*x12573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12577=cj5*cj5;
IkReal x12578=r01*r01;
IkReal x12579=(r01*sj5);
IkReal x12580=(cj5*r00);
CheckValue<IkReal> x12581=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x12578))+(((2.0)*x12579*x12580))+(((-1.0)*x12577*(r00*r00)))+((x12577*x12578)))),-1);
if(!x12581.valid){
continue;
}
CheckValue<IkReal> x12582 = IKatan2WithCheck(IkReal(((((-1.0)*x12579))+x12580)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12581.value)))+(x12582.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12583=IKsin(j4);
IkReal x12584=IKcos(j4);
IkReal x12585=(cj5*r10);
IkReal x12586=(r01*sj5);
IkReal x12587=((1.0)*cj2);
IkReal x12588=(cj5*r00);
IkReal x12589=(cj5*r20);
IkReal x12590=((1.0)*x12584);
IkReal x12591=((1.0)*x12583);
IkReal x12592=(sj5*x12583);
evalcond[0]=((((-1.0)*r22*x12590))+((r21*x12592))+(((-1.0)*x12589*x12591)));
evalcond[1]=((((-1.0)*r12*x12590))+(((-1.0)*x12585*x12591))+((r11*x12592)));
evalcond[2]=(((x12584*x12588))+(((-1.0)*r02*x12591))+(((-1.0)*x12586*x12590)));
evalcond[3]=((-1.0)+(((-1.0)*x12588*x12591))+(((-1.0)*r02*x12590))+((x12583*x12586)));
evalcond[4]=((((-1.0)*r21*sj5*x12590))+((x12584*x12589))+(((-1.0)*r22*x12591))+((sj1*sj2))+(((-1.0)*cj1*x12587)));
evalcond[5]=(((x12584*x12585))+(((-1.0)*r12*x12591))+(((-1.0)*sj1*x12587))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x12590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12593=((1.0)*cj5);
CheckValue<IkReal> x12594=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12593)))),-1);
if(!x12594.valid){
continue;
}
CheckValue<IkReal> x12595 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12593)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12594.value)))+(x12595.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12596=IKsin(j4);
IkReal x12597=IKcos(j4);
IkReal x12598=(cj5*r10);
IkReal x12599=(r01*sj5);
IkReal x12600=((1.0)*cj2);
IkReal x12601=(cj5*r00);
IkReal x12602=(cj5*r20);
IkReal x12603=((1.0)*x12597);
IkReal x12604=((1.0)*x12596);
IkReal x12605=(sj5*x12596);
evalcond[0]=((((-1.0)*r22*x12603))+((r21*x12605))+(((-1.0)*x12602*x12604)));
evalcond[1]=(((r11*x12605))+(((-1.0)*x12598*x12604))+(((-1.0)*r12*x12603)));
evalcond[2]=(((x12597*x12601))+(((-1.0)*x12599*x12603))+(((-1.0)*r02*x12604)));
evalcond[3]=((-1.0)+(((-1.0)*x12601*x12604))+((x12596*x12599))+(((-1.0)*r02*x12603)));
evalcond[4]=((((-1.0)*cj1*x12600))+(((-1.0)*r21*sj5*x12603))+((sj1*sj2))+(((-1.0)*r22*x12604))+((x12597*x12602)));
evalcond[5]=((((-1.0)*r11*sj5*x12603))+((x12597*x12598))+(((-1.0)*sj1*x12600))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x12604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12606=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12606.valid){
continue;
}
CheckValue<IkReal> x12607 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12606.value)))+(x12607.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12608=IKsin(j4);
IkReal x12609=IKcos(j4);
IkReal x12610=(cj5*r10);
IkReal x12611=(r01*sj5);
IkReal x12612=((1.0)*cj2);
IkReal x12613=(cj5*r00);
IkReal x12614=(cj5*r20);
IkReal x12615=((1.0)*x12609);
IkReal x12616=((1.0)*x12608);
IkReal x12617=(sj5*x12608);
evalcond[0]=((((-1.0)*x12614*x12616))+(((-1.0)*r22*x12615))+((r21*x12617)));
evalcond[1]=((((-1.0)*r12*x12615))+(((-1.0)*x12610*x12616))+((r11*x12617)));
evalcond[2]=((((-1.0)*x12611*x12615))+(((-1.0)*r02*x12616))+((x12609*x12613)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12615))+((x12608*x12611))+(((-1.0)*x12613*x12616)));
evalcond[4]=((((-1.0)*cj1*x12612))+(((-1.0)*r22*x12616))+((sj1*sj2))+(((-1.0)*r21*sj5*x12615))+((x12609*x12614)));
evalcond[5]=((((-1.0)*r12*x12616))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12612))+(((-1.0)*r11*sj5*x12615))+((x12609*x12610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12618=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12618;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12618);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12619=((1.0)*cj5);
IkReal x12620=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12619)));
j4eval[0]=x12620;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12619)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12620);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12621=cj5*cj5;
IkReal x12622=r01*r01;
IkReal x12623=(cj5*r00);
IkReal x12624=(r01*sj5);
IkReal x12625=((((-2.0)*x12623*x12624))+(((-1.0)*x12621*x12622))+((x12621*(r00*r00)))+x12622+(r02*r02));
j4eval[0]=x12625;
j4eval[1]=IKsign(x12625);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x12623))+x12624))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12626=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12626);
rxp0_2=(py*r00);
rxp1_0=(r21*x12626);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12627=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12627)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12627)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12628=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12628);
rxp0_2=(py*r00);
rxp1_0=(r21*x12628);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12629=IKPowWithIntegerCheck(r12,-1);
if(!x12629.valid){
continue;
}
CheckValue<IkReal> x12630=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12630.valid){
continue;
}
if( IKabs(((x12629.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12630.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12629.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12630.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12629.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12630.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12631=IKsin(j4);
IkReal x12632=IKcos(j4);
IkReal x12633=((1.0)*cj2);
IkReal x12634=((1.0)*cj5*r00);
IkReal x12635=(sj5*x12632);
IkReal x12636=(sj5*x12631);
IkReal x12637=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12632);
evalcond[1]=((((-1.0)*x12631*x12637))+((r21*x12636)));
evalcond[2]=(((r01*x12635))+(((-1.0)*x12632*x12634)));
evalcond[3]=(((r12*x12631))+(((-1.0)*sj1*x12633))+(((-1.0)*cj1*sj2)));
evalcond[4]=((-1.0)+(((-1.0)*x12631*x12634))+((r01*x12636)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*x12632*x12637))+(((-1.0)*cj1*x12633))+((r21*x12635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12638=((1.0)*cj5);
CheckValue<IkReal> x12639=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12638))),-1);
if(!x12639.valid){
continue;
}
CheckValue<IkReal> x12640=IKPowWithIntegerCheck(((((-1.0)*r20*x12638))+((r21*sj5))),-1);
if(!x12640.valid){
continue;
}
if( IKabs(x12639.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12640.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12639.value)+IKsqr(((x12640.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12639.value, ((x12640.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12641=IKsin(j4);
IkReal x12642=IKcos(j4);
IkReal x12643=((1.0)*cj2);
IkReal x12644=((1.0)*cj5*r00);
IkReal x12645=(sj5*x12642);
IkReal x12646=(sj5*x12641);
IkReal x12647=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r12*x12642);
evalcond[1]=((((-1.0)*x12641*x12647))+((r21*x12646)));
evalcond[2]=(((r01*x12645))+(((-1.0)*x12642*x12644)));
evalcond[3]=(((r12*x12641))+(((-1.0)*sj1*x12643))+(((-1.0)*cj1*sj2)));
evalcond[4]=((-1.0)+((r01*x12646))+(((-1.0)*x12641*x12644)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*x12642*x12647))+(((-1.0)*cj1*x12643))+((r21*x12645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12648=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12648);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12648);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12649=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12649)));
j4eval[1]=(((r11*sj5))+(((-1.0)*r10*x12649)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12650=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12650);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12650);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12651=IKPowWithIntegerCheck(r22,-1);
if(!x12651.valid){
continue;
}
CheckValue<IkReal> x12652=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12652.valid){
continue;
}
if( IKabs(((x12651.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12652.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12651.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x12652.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12651.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x12652.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12653=IKsin(j4);
IkReal x12654=IKcos(j4);
IkReal x12655=((1.0)*cj5);
IkReal x12656=((1.0)*cj2);
IkReal x12657=(sj5*x12654);
IkReal x12658=(sj5*x12653);
evalcond[0]=((-1.0)*r22*x12654);
evalcond[1]=((((-1.0)*cj1*x12656))+((r22*x12653))+((sj1*sj2)));
evalcond[2]=(((r11*x12658))+(((-1.0)*r10*x12653*x12655)));
evalcond[3]=(((r01*x12657))+(((-1.0)*r00*x12654*x12655)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x12653*x12655))+((r01*x12658)));
evalcond[5]=(((r11*x12657))+(((-1.0)*cj1*sj2))+(((-1.0)*r10*x12654*x12655))+(((-1.0)*sj1*x12656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12659=((1.0)*cj5);
CheckValue<IkReal> x12660=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12659))),-1);
if(!x12660.valid){
continue;
}
CheckValue<IkReal> x12661=IKPowWithIntegerCheck(((((-1.0)*r10*x12659))+((r11*sj5))),-1);
if(!x12661.valid){
continue;
}
if( IKabs(x12660.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12661.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12660.value)+IKsqr(((x12661.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12660.value, ((x12661.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12662=IKsin(j4);
IkReal x12663=IKcos(j4);
IkReal x12664=((1.0)*cj5);
IkReal x12665=((1.0)*cj2);
IkReal x12666=(sj5*x12663);
IkReal x12667=(sj5*x12662);
evalcond[0]=((-1.0)*r22*x12663);
evalcond[1]=((((-1.0)*cj1*x12665))+((sj1*sj2))+((r22*x12662)));
evalcond[2]=((((-1.0)*r10*x12662*x12664))+((r11*x12667)));
evalcond[3]=(((r01*x12666))+(((-1.0)*r00*x12663*x12664)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x12662*x12664))+((r01*x12667)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r10*x12663*x12664))+((r11*x12666))+(((-1.0)*sj1*x12665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12668=cj5*cj5;
IkReal x12669=r01*r01;
IkReal x12670=(r01*sj5);
IkReal x12671=(cj5*r00);
CheckValue<IkReal> x12672 = IKatan2WithCheck(IkReal(((((-1.0)*x12671))+x12670)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12672.valid){
continue;
}
CheckValue<IkReal> x12673=IKPowWithIntegerCheck(IKsign(((((-2.0)*x12670*x12671))+((x12668*(r00*r00)))+x12669+(((-1.0)*x12668*x12669))+(r02*r02))),-1);
if(!x12673.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12672.value)+(((1.5707963267949)*(x12673.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12674=IKcos(j4);
IkReal x12675=IKsin(j4);
IkReal x12676=(cj5*r00);
IkReal x12677=(cj5*r10);
IkReal x12678=(r21*sj5);
IkReal x12679=((1.0)*cj2);
IkReal x12680=(cj5*r20);
IkReal x12681=((1.0)*x12674);
IkReal x12682=((1.0)*x12675);
IkReal x12683=(sj5*x12675);
IkReal x12684=(sj5*x12674);
evalcond[0]=(((r01*x12684))+(((-1.0)*x12676*x12681))+((r02*x12675)));
evalcond[1]=(((x12675*x12678))+(((-1.0)*x12680*x12682))+(((-1.0)*r22*x12681)));
evalcond[2]=(((r11*x12683))+(((-1.0)*r12*x12681))+(((-1.0)*x12677*x12682)));
evalcond[3]=((-1.0)+((r01*x12683))+(((-1.0)*x12676*x12682))+(((-1.0)*r02*x12681)));
evalcond[4]=((((-1.0)*cj1*x12679))+((r22*x12675))+((sj1*sj2))+((x12674*x12678))+(((-1.0)*x12680*x12681)));
evalcond[5]=(((r11*x12684))+(((-1.0)*cj1*sj2))+((r12*x12675))+(((-1.0)*x12677*x12681))+(((-1.0)*sj1*x12679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12685=((1.0)*cj5);
CheckValue<IkReal> x12686=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12685)))),-1);
if(!x12686.valid){
continue;
}
CheckValue<IkReal> x12687 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12685))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12686.value)))+(x12687.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12688=IKcos(j4);
IkReal x12689=IKsin(j4);
IkReal x12690=(cj5*r00);
IkReal x12691=(cj5*r10);
IkReal x12692=(r21*sj5);
IkReal x12693=((1.0)*cj2);
IkReal x12694=(cj5*r20);
IkReal x12695=((1.0)*x12688);
IkReal x12696=((1.0)*x12689);
IkReal x12697=(sj5*x12689);
IkReal x12698=(sj5*x12688);
evalcond[0]=(((r02*x12689))+(((-1.0)*x12690*x12695))+((r01*x12698)));
evalcond[1]=((((-1.0)*r22*x12695))+((x12689*x12692))+(((-1.0)*x12694*x12696)));
evalcond[2]=((((-1.0)*r12*x12695))+(((-1.0)*x12691*x12696))+((r11*x12697)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12695))+(((-1.0)*x12690*x12696))+((r01*x12697)));
evalcond[4]=((((-1.0)*cj1*x12693))+((sj1*sj2))+((r22*x12689))+(((-1.0)*x12694*x12695))+((x12688*x12692)));
evalcond[5]=(((r12*x12689))+(((-1.0)*cj1*sj2))+(((-1.0)*x12691*x12695))+(((-1.0)*sj1*x12693))+((r11*x12698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12699=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12699.valid){
continue;
}
CheckValue<IkReal> x12700 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12699.value)))+(x12700.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12701=IKcos(j4);
IkReal x12702=IKsin(j4);
IkReal x12703=(cj5*r00);
IkReal x12704=(cj5*r10);
IkReal x12705=(r21*sj5);
IkReal x12706=((1.0)*cj2);
IkReal x12707=(cj5*r20);
IkReal x12708=((1.0)*x12701);
IkReal x12709=((1.0)*x12702);
IkReal x12710=(sj5*x12702);
IkReal x12711=(sj5*x12701);
evalcond[0]=((((-1.0)*x12703*x12708))+((r02*x12702))+((r01*x12711)));
evalcond[1]=((((-1.0)*x12707*x12709))+((x12702*x12705))+(((-1.0)*r22*x12708)));
evalcond[2]=(((r11*x12710))+(((-1.0)*x12704*x12709))+(((-1.0)*r12*x12708)));
evalcond[3]=((-1.0)+(((-1.0)*x12703*x12709))+((r01*x12710))+(((-1.0)*r02*x12708)));
evalcond[4]=((((-1.0)*x12707*x12708))+((r22*x12702))+((sj1*sj2))+((x12701*x12705))+(((-1.0)*cj1*x12706)));
evalcond[5]=(((r12*x12702))+(((-1.0)*sj1*x12706))+((r11*x12711))+(((-1.0)*cj1*sj2))+(((-1.0)*x12704*x12708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12712=((-1.0)*r10);
IkReal x12714 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12714)==0){
continue;
}
IkReal x12713=pow(x12714,-0.5);
CheckValue<IkReal> x12715 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12712),IKFAST_ATAN2_MAGTHRESH);
if(!x12715.valid){
continue;
}
IkReal gconst30=((-1.0)*(x12715.value));
IkReal gconst31=(r11*x12713);
IkReal gconst32=(x12712*x12713);
CheckValue<IkReal> x12716 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12716.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12716.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12717=((-1.0)*r10);
IkReal x12718=x12713;
CheckValue<IkReal> x12720 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12717),IKFAST_ATAN2_MAGTHRESH);
if(!x12720.valid){
continue;
}
IkReal x12719=((-1.0)*(x12720.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x12719;
IkReal gconst30=x12719;
IkReal gconst31=(r11*x12718);
IkReal gconst32=(x12717*x12718);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12721=((-1.0)*r10);
IkReal x12722=x12713;
CheckValue<IkReal> x12724 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12721),IKFAST_ATAN2_MAGTHRESH);
if(!x12724.valid){
continue;
}
IkReal x12723=((-1.0)*(x12724.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst31;
cj5=gconst32;
j5=x12723;
IkReal gconst30=x12723;
IkReal gconst31=(r11*x12722);
IkReal gconst32=(x12721*x12722);
CheckValue<IkReal> x12732=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x12732.valid){
continue;
}
IkReal x12725=x12732.value;
IkReal x12726=(sj3*x12725);
IkReal x12727=(r20*x12726);
IkReal x12728=(r00*x12726);
IkReal x12729=(r01*x12726);
IkReal x12730=(r21*x12726);
IkReal x12731=(r10*r11*x12726);
j4eval[0]=IKsign((((r01*r10*r11*x12727))+((r00*x12727*(r10*r10)))+((r10*r11*r21*x12728))+((r21*x12729*(r11*r11)))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12733=gconst31*gconst31;
IkReal x12734=gconst32*gconst32;
IkReal x12735=(r01*r20);
IkReal x12736=(r00*r21);
IkReal x12737=((1.0)*cj3);
IkReal x12738=(r01*r21);
IkReal x12739=(gconst32*sj3);
IkReal x12740=(cj3*gconst31*gconst32);
IkReal x12741=(gconst31*r00*sj3);
CheckValue<IkReal> x12742 = IKatan2WithCheck(IkReal((((r22*x12741))+((r01*r22*x12739)))),IkReal(((((-1.0)*sj3*x12734*x12735))+(((-1.0)*gconst31*r00*r20*x12739))+((sj3*x12733*x12736))+((gconst31*x12738*x12739)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12742.valid){
continue;
}
CheckValue<IkReal> x12743=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r20*x12734*x12737))+((x12735*x12740))+(((-1.0)*x12733*x12737*x12738))+(((-1.0)*r02*r22*x12737))+((x12736*x12740)))),-1);
if(!x12743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12742.value)+(((1.5707963267949)*(x12743.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12744=IKsin(j4);
IkReal x12745=IKcos(j4);
IkReal x12746=(sj1*sj2);
IkReal x12747=(gconst31*r00);
IkReal x12748=(r21*sj3);
IkReal x12749=(cj3*gconst32);
IkReal x12750=(gconst31*r11);
IkReal x12751=(gconst31*sj3);
IkReal x12752=(gconst31*r01);
IkReal x12753=((1.0)*cj2);
IkReal x12754=(gconst32*r10);
IkReal x12755=(cj1*sj2);
IkReal x12756=(cj3*gconst31);
IkReal x12757=(gconst32*r00);
IkReal x12758=(gconst32*sj3);
IkReal x12759=(gconst32*r20);
IkReal x12760=(gconst31*r21);
IkReal x12761=(cj1*x12753);
IkReal x12762=((1.0)*x12745);
IkReal x12763=((1.0)*x12744);
IkReal x12764=(cj3*x12745);
IkReal x12765=(sj3*x12745);
IkReal x12766=(cj3*x12744);
evalcond[0]=((((-1.0)*x12759*x12763))+(((-1.0)*r22*x12762))+((x12744*x12760)));
evalcond[1]=((((-1.0)*r12*x12762))+((x12744*x12750))+(((-1.0)*x12754*x12763)));
evalcond[2]=((-1.0)+((x12744*x12752))+(((-1.0)*x12757*x12763))+(((-1.0)*r02*x12762)));
evalcond[3]=(((sj3*x12747))+((r02*x12766))+((x12752*x12764))+((r01*x12758))+(((-1.0)*r00*x12749*x12762)));
evalcond[4]=(((cj3*x12747))+((x12757*x12765))+(((-1.0)*r01*x12751*x12762))+((r01*x12749))+(((-1.0)*r02*sj3*x12763)));
evalcond[5]=((((-1.0)*r20*x12749*x12762))+((cj2*sj1))+((r22*x12766))+((r21*x12745*x12756))+x12755+((r20*x12751))+((gconst32*x12748)));
evalcond[6]=(((x12750*x12764))+((r12*x12766))+((r11*x12758))+(((-1.0)*x12761))+x12746+((r10*x12751))+(((-1.0)*r10*x12749*x12762)));
evalcond[7]=((((-1.0)*r22*sj3*x12763))+(((-1.0)*x12761))+x12746+((r20*x12756))+(((-1.0)*gconst31*x12748*x12762))+((r20*x12745*x12758))+((r21*x12749)));
evalcond[8]=(((r11*x12749))+(((-1.0)*sj3*x12750*x12762))+(((-1.0)*r12*sj3*x12763))+(((-1.0)*x12755))+((x12754*x12765))+(((-1.0)*sj1*x12753))+((r10*x12756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12767=gconst31*gconst31;
IkReal x12768=gconst32*gconst32;
IkReal x12769=(r00*r20);
IkReal x12770=(cj3*r22);
IkReal x12771=(gconst31*r00);
IkReal x12772=(gconst32*r01);
IkReal x12773=((1.0)*gconst32);
IkReal x12774=(cj3*gconst31);
IkReal x12775=((1.0)*r20);
IkReal x12776=(r21*x12767);
CheckValue<IkReal> x12777 = IKatan2WithCheck(IkReal((((x12770*x12772))+((x12770*x12771)))),IkReal((((r21*x12772*x12774))+((cj3*r00*x12776))+(((-1.0)*cj3*r01*x12768*x12775))+(((-1.0)*x12769*x12773*x12774)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12777.valid){
continue;
}
CheckValue<IkReal> x12778=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst31*sj3*x12772*x12775))+((r01*sj3*x12776))+((sj3*x12768*x12769))+((r02*r22*sj3))+(((-1.0)*r21*sj3*x12771*x12773)))),-1);
if(!x12778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12777.value)+(((1.5707963267949)*(x12778.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12779=IKsin(j4);
IkReal x12780=IKcos(j4);
IkReal x12781=(sj1*sj2);
IkReal x12782=(gconst31*r00);
IkReal x12783=(r21*sj3);
IkReal x12784=(cj3*gconst32);
IkReal x12785=(gconst31*r11);
IkReal x12786=(gconst31*sj3);
IkReal x12787=(gconst31*r01);
IkReal x12788=((1.0)*cj2);
IkReal x12789=(gconst32*r10);
IkReal x12790=(cj1*sj2);
IkReal x12791=(cj3*gconst31);
IkReal x12792=(gconst32*r00);
IkReal x12793=(gconst32*sj3);
IkReal x12794=(gconst32*r20);
IkReal x12795=(gconst31*r21);
IkReal x12796=(cj1*x12788);
IkReal x12797=((1.0)*x12780);
IkReal x12798=((1.0)*x12779);
IkReal x12799=(cj3*x12780);
IkReal x12800=(sj3*x12780);
IkReal x12801=(cj3*x12779);
evalcond[0]=((((-1.0)*x12794*x12798))+(((-1.0)*r22*x12797))+((x12779*x12795)));
evalcond[1]=((((-1.0)*r12*x12797))+(((-1.0)*x12789*x12798))+((x12779*x12785)));
evalcond[2]=((-1.0)+(((-1.0)*x12792*x12798))+(((-1.0)*r02*x12797))+((x12779*x12787)));
evalcond[3]=(((r02*x12801))+((sj3*x12782))+((x12787*x12799))+((r01*x12793))+(((-1.0)*r00*x12784*x12797)));
evalcond[4]=((((-1.0)*r02*sj3*x12798))+(((-1.0)*r01*x12786*x12797))+((x12792*x12800))+((r01*x12784))+((cj3*x12782)));
evalcond[5]=(((r20*x12786))+((cj2*sj1))+((gconst32*x12783))+x12790+((r22*x12801))+(((-1.0)*r20*x12784*x12797))+((r21*x12780*x12791)));
evalcond[6]=(((x12785*x12799))+(((-1.0)*x12796))+((r10*x12786))+((r11*x12793))+((r12*x12801))+x12781+(((-1.0)*r10*x12784*x12797)));
evalcond[7]=((((-1.0)*gconst31*x12783*x12797))+(((-1.0)*x12796))+((r20*x12791))+(((-1.0)*r22*sj3*x12798))+((r21*x12784))+((r20*x12780*x12793))+x12781);
evalcond[8]=(((x12789*x12800))+((r10*x12791))+((r11*x12784))+(((-1.0)*x12790))+(((-1.0)*sj1*x12788))+(((-1.0)*r12*sj3*x12798))+(((-1.0)*sj3*x12785*x12797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12802=IKPowWithIntegerCheck(IKsign((((gconst31*r20))+((gconst32*r21)))),-1);
if(!x12802.valid){
continue;
}
CheckValue<IkReal> x12803 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst31*r11))+(((-1.0)*gconst32*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12802.value)))+(x12803.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12804=IKsin(j4);
IkReal x12805=IKcos(j4);
IkReal x12806=(sj1*sj2);
IkReal x12807=(gconst31*r00);
IkReal x12808=(r21*sj3);
IkReal x12809=(cj3*gconst32);
IkReal x12810=(gconst31*r11);
IkReal x12811=(gconst31*sj3);
IkReal x12812=(gconst31*r01);
IkReal x12813=((1.0)*cj2);
IkReal x12814=(gconst32*r10);
IkReal x12815=(cj1*sj2);
IkReal x12816=(cj3*gconst31);
IkReal x12817=(gconst32*r00);
IkReal x12818=(gconst32*sj3);
IkReal x12819=(gconst32*r20);
IkReal x12820=(gconst31*r21);
IkReal x12821=(cj1*x12813);
IkReal x12822=((1.0)*x12805);
IkReal x12823=((1.0)*x12804);
IkReal x12824=(cj3*x12805);
IkReal x12825=(sj3*x12805);
IkReal x12826=(cj3*x12804);
evalcond[0]=((((-1.0)*r22*x12822))+((x12804*x12820))+(((-1.0)*x12819*x12823)));
evalcond[1]=((((-1.0)*x12814*x12823))+(((-1.0)*r12*x12822))+((x12804*x12810)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12822))+((x12804*x12812))+(((-1.0)*x12817*x12823)));
evalcond[3]=((((-1.0)*r00*x12809*x12822))+((x12812*x12824))+((r01*x12818))+((r02*x12826))+((sj3*x12807)));
evalcond[4]=((((-1.0)*r02*sj3*x12823))+(((-1.0)*r01*x12811*x12822))+((cj3*x12807))+((x12817*x12825))+((r01*x12809)));
evalcond[5]=(((cj2*sj1))+x12815+((r20*x12811))+((r22*x12826))+(((-1.0)*r20*x12809*x12822))+((gconst32*x12808))+((r21*x12805*x12816)));
evalcond[6]=(x12806+((r12*x12826))+(((-1.0)*r10*x12809*x12822))+((r11*x12818))+(((-1.0)*x12821))+((x12810*x12824))+((r10*x12811)));
evalcond[7]=(x12806+((r20*x12816))+((r20*x12805*x12818))+((r21*x12809))+(((-1.0)*r22*sj3*x12823))+(((-1.0)*x12821))+(((-1.0)*gconst31*x12808*x12822)));
evalcond[8]=(((x12814*x12825))+(((-1.0)*sj1*x12813))+((r11*x12809))+(((-1.0)*x12815))+(((-1.0)*r12*sj3*x12823))+((r10*x12816))+(((-1.0)*sj3*x12810*x12822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12827=((-1.0)*r11);
IkReal x12829 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12829)==0){
continue;
}
IkReal x12828=pow(x12829,-0.5);
CheckValue<IkReal> x12830 = IKatan2WithCheck(IkReal(x12827),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12830.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x12830.value))));
IkReal gconst34=(x12827*x12828);
IkReal gconst35=((1.0)*r10*x12828);
CheckValue<IkReal> x12831 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12831.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12831.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12832=((-1.0)*r11);
CheckValue<IkReal> x12835 = IKatan2WithCheck(IkReal(x12832),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12835.valid){
continue;
}
IkReal x12833=((1.0)*(x12835.value));
IkReal x12834=x12828;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x12833)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x12833)));
IkReal gconst34=(x12832*x12834);
IkReal gconst35=((1.0)*r10*x12834);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12836=gconst35*gconst35;
IkReal x12837=gconst34*gconst34;
IkReal x12838=((1.0)*gconst35);
IkReal x12839=(r21*sj3);
IkReal x12840=(cj3*r21);
IkReal x12841=(gconst35*r01);
IkReal x12842=(r01*r20);
IkReal x12843=(cj3*gconst34*r00);
CheckValue<IkReal> x12844 = IKatan2WithCheck(IkReal((((r22*x12843))+((cj3*r22*x12841)))),IkReal((((r00*x12837*x12840))+(((-1.0)*cj3*x12836*x12842))+(((-1.0)*r20*x12838*x12843))+((gconst34*x12840*x12841)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12844.valid){
continue;
}
CheckValue<IkReal> x12845=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst34*r00*x12838*x12839))+((r01*x12837*x12839))+(((-1.0)*gconst34*sj3*x12838*x12842))+((r00*r20*sj3*x12836))+((r02*r22*sj3)))),-1);
if(!x12845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12844.value)+(((1.5707963267949)*(x12845.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12846=IKsin(j4);
IkReal x12847=IKcos(j4);
IkReal x12848=(sj1*sj2);
IkReal x12849=(gconst35*r00);
IkReal x12850=(gconst35*sj3);
IkReal x12851=(gconst34*r20);
IkReal x12852=(cj3*gconst34);
IkReal x12853=(gconst34*r21);
IkReal x12854=((1.0)*cj1);
IkReal x12855=(cj2*sj1);
IkReal x12856=(gconst35*r10);
IkReal x12857=(gconst34*sj3);
IkReal x12858=(cj3*gconst35);
IkReal x12859=(cj2*x12854);
IkReal x12860=((1.0)*x12847);
IkReal x12861=((1.0)*x12846);
IkReal x12862=(cj3*x12846);
IkReal x12863=(gconst34*x12846);
evalcond[0]=((((-1.0)*gconst35*r20*x12861))+(((-1.0)*r22*x12860))+((x12846*x12853)));
evalcond[1]=(((r11*x12863))+(((-1.0)*r12*x12860))+(((-1.0)*x12856*x12861)));
evalcond[2]=((-1.0)+(((-1.0)*x12849*x12861))+(((-1.0)*r02*x12860))+((r01*x12863)));
evalcond[3]=((((-1.0)*cj3*x12849*x12860))+((r00*x12857))+((r01*x12850))+((r01*x12847*x12852))+((r02*x12862)));
evalcond[4]=(((sj3*x12847*x12849))+((r00*x12852))+((r01*x12858))+(((-1.0)*r01*x12857*x12860))+(((-1.0)*r02*sj3*x12861)));
evalcond[5]=(x12855+((cj1*sj2))+(((-1.0)*r20*x12858*x12860))+((sj3*x12851))+((r21*x12850))+((r22*x12862))+((r21*x12847*x12852)));
evalcond[6]=(x12848+((r12*x12862))+((r10*x12857))+((r11*x12847*x12852))+((r11*x12850))+(((-1.0)*cj3*x12856*x12860))+(((-1.0)*x12859)));
evalcond[7]=(x12848+(((-1.0)*r22*sj3*x12861))+(((-1.0)*sj3*x12853*x12860))+((r20*x12847*x12850))+((r21*x12858))+(((-1.0)*x12859))+((cj3*x12851)));
evalcond[8]=(((r10*x12852))+((r10*x12847*x12850))+(((-1.0)*x12855))+((r11*x12858))+(((-1.0)*r12*sj3*x12861))+(((-1.0)*sj2*x12854))+(((-1.0)*r11*x12857*x12860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12864=IKPowWithIntegerCheck(IKsign((((gconst34*r20))+((gconst35*r21)))),-1);
if(!x12864.valid){
continue;
}
CheckValue<IkReal> x12865 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst35*r10))+((gconst34*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12864.value)))+(x12865.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12866=IKsin(j4);
IkReal x12867=IKcos(j4);
IkReal x12868=(sj1*sj2);
IkReal x12869=(gconst35*r00);
IkReal x12870=(gconst35*sj3);
IkReal x12871=(gconst34*r20);
IkReal x12872=(cj3*gconst34);
IkReal x12873=(gconst34*r21);
IkReal x12874=((1.0)*cj1);
IkReal x12875=(cj2*sj1);
IkReal x12876=(gconst35*r10);
IkReal x12877=(gconst34*sj3);
IkReal x12878=(cj3*gconst35);
IkReal x12879=(cj2*x12874);
IkReal x12880=((1.0)*x12867);
IkReal x12881=((1.0)*x12866);
IkReal x12882=(cj3*x12866);
IkReal x12883=(gconst34*x12866);
evalcond[0]=((((-1.0)*r22*x12880))+((x12866*x12873))+(((-1.0)*gconst35*r20*x12881)));
evalcond[1]=((((-1.0)*r12*x12880))+(((-1.0)*x12876*x12881))+((r11*x12883)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12880))+((r01*x12883))+(((-1.0)*x12869*x12881)));
evalcond[3]=(((r01*x12867*x12872))+((r01*x12870))+((r00*x12877))+(((-1.0)*cj3*x12869*x12880))+((r02*x12882)));
evalcond[4]=(((r01*x12878))+((r00*x12872))+(((-1.0)*r01*x12877*x12880))+((sj3*x12867*x12869))+(((-1.0)*r02*sj3*x12881)));
evalcond[5]=(((r21*x12867*x12872))+x12875+((cj1*sj2))+((r22*x12882))+((sj3*x12871))+((r21*x12870))+(((-1.0)*r20*x12878*x12880)));
evalcond[6]=(x12868+((r10*x12877))+((r11*x12867*x12872))+((r11*x12870))+((r12*x12882))+(((-1.0)*x12879))+(((-1.0)*cj3*x12876*x12880)));
evalcond[7]=(((cj3*x12871))+((r20*x12867*x12870))+x12868+((r21*x12878))+(((-1.0)*x12879))+(((-1.0)*r22*sj3*x12881))+(((-1.0)*sj3*x12873*x12880)));
evalcond[8]=(((r10*x12872))+((r10*x12867*x12870))+((r11*x12878))+(((-1.0)*x12875))+(((-1.0)*sj2*x12874))+(((-1.0)*r12*sj3*x12881))+(((-1.0)*r11*x12877*x12880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12885 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12885)==0){
continue;
}
IkReal x12884=pow(x12885,-0.5);
CheckValue<IkReal> x12886 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12886.valid){
continue;
}
IkReal gconst36=((-1.0)*(x12886.value));
IkReal gconst37=((-1.0)*r21*x12884);
IkReal gconst38=(r20*x12884);
CheckValue<IkReal> x12887 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12887.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12887.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12890 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12890.valid){
continue;
}
IkReal x12888=((-1.0)*(x12890.value));
IkReal x12889=x12884;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x12888;
IkReal gconst36=x12888;
IkReal gconst37=((-1.0)*r21*x12889);
IkReal gconst38=(r20*x12889);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12893 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12893.valid){
continue;
}
IkReal x12891=((-1.0)*(x12893.value));
IkReal x12892=x12884;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst37;
cj5=gconst38;
j5=x12891;
IkReal gconst36=x12891;
IkReal gconst37=((-1.0)*r21*x12892);
IkReal gconst38=(r20*x12892);
CheckValue<IkReal> x12901=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x12901.valid){
continue;
}
IkReal x12894=x12901.value;
IkReal x12895=(sj3*x12894);
IkReal x12896=(r11*x12895);
IkReal x12897=(r00*x12895);
IkReal x12898=(r01*x12895);
IkReal x12899=(r10*x12895);
IkReal x12900=(r20*r21*x12895);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x12897*(r20*r20)))+((r10*r20*r21*x12898))+((r01*x12896*(r21*r21)))+((r00*r20*r21*x12896))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12902=gconst37*gconst37;
IkReal x12903=gconst38*gconst38;
IkReal x12904=((1.0)*cj3);
IkReal x12905=(gconst38*r01);
IkReal x12906=(cj3*gconst37);
IkReal x12907=(r12*sj3);
IkReal x12908=(gconst37*r00);
IkReal x12909=(r00*r11);
IkReal x12910=((1.0)*r10*sj3);
CheckValue<IkReal> x12911 = IKatan2WithCheck(IkReal((((x12907*x12908))+((x12905*x12907)))),IkReal((((gconst37*r11*sj3*x12905))+(((-1.0)*gconst38*x12908*x12910))+((sj3*x12902*x12909))+(((-1.0)*r01*x12903*x12910)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12911.valid){
continue;
}
CheckValue<IkReal> x12912=IKPowWithIntegerCheck(IKsign((((r10*x12905*x12906))+(((-1.0)*r02*r12*x12904))+((gconst38*x12906*x12909))+(((-1.0)*r00*r10*x12903*x12904))+(((-1.0)*r01*r11*x12902*x12904)))),-1);
if(!x12912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12911.value)+(((1.5707963267949)*(x12912.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12913=IKsin(j4);
IkReal x12914=IKcos(j4);
IkReal x12915=(sj1*sj2);
IkReal x12916=(gconst38*sj3);
IkReal x12917=(cj3*gconst38);
IkReal x12918=(cj3*gconst37);
IkReal x12919=((1.0)*cj1);
IkReal x12920=(gconst37*sj3);
IkReal x12921=(cj2*sj1);
IkReal x12922=(cj2*x12919);
IkReal x12923=((1.0)*x12914);
IkReal x12924=((1.0)*x12913);
IkReal x12925=(cj3*x12913);
IkReal x12926=(gconst37*x12913);
evalcond[0]=((((-1.0)*gconst38*r20*x12924))+((r21*x12926))+(((-1.0)*r22*x12923)));
evalcond[1]=(((r11*x12926))+(((-1.0)*r12*x12923))+(((-1.0)*gconst38*r10*x12924)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12923))+((r01*x12926))+(((-1.0)*gconst38*r00*x12924)));
evalcond[3]=(((r02*x12925))+((r01*x12914*x12918))+((r00*x12920))+(((-1.0)*r00*x12917*x12923))+((r01*x12916)));
evalcond[4]=((((-1.0)*r01*x12920*x12923))+((r00*x12918))+(((-1.0)*r02*sj3*x12924))+((r00*x12914*x12916))+((r01*x12917)));
evalcond[5]=((((-1.0)*r20*x12917*x12923))+x12921+((r20*x12920))+((cj1*sj2))+((r21*x12914*x12918))+((r21*x12916))+((r22*x12925)));
evalcond[6]=(x12915+((r10*x12920))+(((-1.0)*r10*x12917*x12923))+((r11*x12914*x12918))+((r11*x12916))+(((-1.0)*x12922))+((r12*x12925)));
evalcond[7]=(x12915+((r20*x12914*x12916))+(((-1.0)*r21*x12920*x12923))+((r20*x12918))+((r21*x12917))+(((-1.0)*x12922))+(((-1.0)*r22*sj3*x12924)));
evalcond[8]=((((-1.0)*x12921))+((r10*x12914*x12916))+(((-1.0)*sj2*x12919))+(((-1.0)*r12*sj3*x12924))+(((-1.0)*r11*x12920*x12923))+((r10*x12918))+((r11*x12917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12927=gconst37*gconst37;
IkReal x12928=gconst38*gconst38;
IkReal x12929=(r10*sj3);
IkReal x12930=(r00*r11);
IkReal x12931=(r01*r11);
IkReal x12932=(cj3*gconst37);
IkReal x12933=(cj3*r10);
IkReal x12934=((1.0)*gconst37*gconst38);
CheckValue<IkReal> x12935=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*sj3*x12930*x12934))+(((-1.0)*r01*x12929*x12934))+((sj3*x12927*x12931))+((r00*x12928*x12929)))),-1);
if(!x12935.valid){
continue;
}
CheckValue<IkReal> x12936 = IKatan2WithCheck(IkReal((((cj3*gconst38*r01*r12))+((r00*r12*x12932)))),IkReal(((((-1.0)*gconst38*r00*r10*x12932))+((gconst38*x12931*x12932))+((cj3*x12927*x12930))+(((-1.0)*r01*x12928*x12933)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12935.value)))+(x12936.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12937=IKsin(j4);
IkReal x12938=IKcos(j4);
IkReal x12939=(sj1*sj2);
IkReal x12940=(gconst38*sj3);
IkReal x12941=(cj3*gconst38);
IkReal x12942=(cj3*gconst37);
IkReal x12943=((1.0)*cj1);
IkReal x12944=(gconst37*sj3);
IkReal x12945=(cj2*sj1);
IkReal x12946=(cj2*x12943);
IkReal x12947=((1.0)*x12938);
IkReal x12948=((1.0)*x12937);
IkReal x12949=(cj3*x12937);
IkReal x12950=(gconst37*x12937);
evalcond[0]=((((-1.0)*gconst38*r20*x12948))+((r21*x12950))+(((-1.0)*r22*x12947)));
evalcond[1]=((((-1.0)*gconst38*r10*x12948))+((r11*x12950))+(((-1.0)*r12*x12947)));
evalcond[2]=((-1.0)+((r01*x12950))+(((-1.0)*r02*x12947))+(((-1.0)*gconst38*r00*x12948)));
evalcond[3]=(((r01*x12938*x12942))+((r00*x12944))+((r01*x12940))+(((-1.0)*r00*x12941*x12947))+((r02*x12949)));
evalcond[4]=(((r00*x12942))+((r01*x12941))+(((-1.0)*r02*sj3*x12948))+(((-1.0)*r01*x12944*x12947))+((r00*x12938*x12940)));
evalcond[5]=(x12945+((r22*x12949))+((cj1*sj2))+(((-1.0)*r20*x12941*x12947))+((r21*x12940))+((r20*x12944))+((r21*x12938*x12942)));
evalcond[6]=(x12939+((r10*x12944))+((r12*x12949))+(((-1.0)*r10*x12941*x12947))+((r11*x12940))+((r11*x12938*x12942))+(((-1.0)*x12946)));
evalcond[7]=(x12939+(((-1.0)*r22*sj3*x12948))+((r20*x12938*x12940))+((r21*x12941))+(((-1.0)*x12946))+(((-1.0)*r21*x12944*x12947))+((r20*x12942)));
evalcond[8]=(((r10*x12942))+((r10*x12938*x12940))+(((-1.0)*r12*sj3*x12948))+((r11*x12941))+(((-1.0)*x12945))+(((-1.0)*sj2*x12943))+(((-1.0)*r11*x12944*x12947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12951=((1.0)*gconst38);
CheckValue<IkReal> x12952 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst37*r21))+(((-1.0)*r20*x12951)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12952.valid){
continue;
}
CheckValue<IkReal> x12953=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r10))+(((-1.0)*r11*x12951)))),-1);
if(!x12953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12952.value)+(((1.5707963267949)*(x12953.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12954=IKsin(j4);
IkReal x12955=IKcos(j4);
IkReal x12956=(sj1*sj2);
IkReal x12957=(gconst38*sj3);
IkReal x12958=(cj3*gconst38);
IkReal x12959=(cj3*gconst37);
IkReal x12960=((1.0)*cj1);
IkReal x12961=(gconst37*sj3);
IkReal x12962=(cj2*sj1);
IkReal x12963=(cj2*x12960);
IkReal x12964=((1.0)*x12955);
IkReal x12965=((1.0)*x12954);
IkReal x12966=(cj3*x12954);
IkReal x12967=(gconst37*x12954);
evalcond[0]=((((-1.0)*gconst38*r20*x12965))+(((-1.0)*r22*x12964))+((r21*x12967)));
evalcond[1]=((((-1.0)*gconst38*r10*x12965))+(((-1.0)*r12*x12964))+((r11*x12967)));
evalcond[2]=((-1.0)+((r01*x12967))+(((-1.0)*gconst38*r00*x12965))+(((-1.0)*r02*x12964)));
evalcond[3]=(((r00*x12961))+((r01*x12957))+((r02*x12966))+((r01*x12955*x12959))+(((-1.0)*r00*x12958*x12964)));
evalcond[4]=((((-1.0)*r02*sj3*x12965))+(((-1.0)*r01*x12961*x12964))+((r00*x12955*x12957))+((r01*x12958))+((r00*x12959)));
evalcond[5]=(x12962+((r21*x12955*x12959))+((cj1*sj2))+(((-1.0)*r20*x12958*x12964))+((r21*x12957))+((r20*x12961))+((r22*x12966)));
evalcond[6]=(x12956+(((-1.0)*x12963))+(((-1.0)*r10*x12958*x12964))+((r11*x12957))+((r11*x12955*x12959))+((r12*x12966))+((r10*x12961)));
evalcond[7]=(x12956+(((-1.0)*x12963))+((r21*x12958))+(((-1.0)*r21*x12961*x12964))+((r20*x12955*x12957))+((r20*x12959))+(((-1.0)*r22*sj3*x12965)));
evalcond[8]=(((r10*x12959))+(((-1.0)*r11*x12961*x12964))+(((-1.0)*r12*sj3*x12965))+(((-1.0)*sj2*x12960))+(((-1.0)*x12962))+((r10*x12955*x12957))+((r11*x12958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12969 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12969)==0){
continue;
}
IkReal x12968=pow(x12969,-0.5);
CheckValue<IkReal> x12970 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12970.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x12970.value))));
IkReal gconst40=((1.0)*r21*x12968);
IkReal gconst41=((-1.0)*r20*x12968);
CheckValue<IkReal> x12971 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12971.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12971.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x12974 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12974.valid){
continue;
}
IkReal x12972=((1.0)*(x12974.value));
IkReal x12973=x12968;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x12972)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x12972)));
IkReal gconst40=((1.0)*r21*x12973);
IkReal gconst41=((-1.0)*r20*x12973);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12977 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12977.valid){
continue;
}
IkReal x12975=((1.0)*(x12977.value));
IkReal x12976=x12968;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x12975)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x12975)));
IkReal gconst40=((1.0)*r21*x12976);
IkReal gconst41=((-1.0)*r20*x12976);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x12980 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12980.valid){
continue;
}
IkReal x12978=((1.0)*(x12980.value));
IkReal x12979=x12968;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x12978)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x12978)));
IkReal gconst40=((1.0)*r21*x12979);
IkReal gconst41=((-1.0)*r20*x12979);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12981=gconst40*gconst40;
IkReal x12982=gconst41*gconst41;
IkReal x12983=(gconst41*sj3);
IkReal x12984=((1.0)*cj3);
IkReal x12985=(gconst40*r00);
IkReal x12986=((1.0)*r20);
IkReal x12987=(gconst40*r01);
IkReal x12988=(cj3*gconst41);
IkReal x12989=(r21*x12981);
CheckValue<IkReal> x12990 = IKatan2WithCheck(IkReal((((r22*sj3*x12985))+((r01*r22*x12983)))),IkReal(((((-1.0)*x12983*x12985*x12986))+((r00*sj3*x12989))+((r21*x12983*x12987))+(((-1.0)*r01*sj3*x12982*x12986)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12990.valid){
continue;
}
CheckValue<IkReal> x12991=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r20*x12982*x12984))+((r20*x12987*x12988))+(((-1.0)*r01*x12984*x12989))+((r21*x12985*x12988))+(((-1.0)*r02*r22*x12984)))),-1);
if(!x12991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12990.value)+(((1.5707963267949)*(x12991.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12992=IKsin(j4);
IkReal x12993=IKcos(j4);
IkReal x12994=(sj1*sj2);
IkReal x12995=(gconst40*sj3);
IkReal x12996=(gconst41*sj3);
IkReal x12997=(gconst41*r20);
IkReal x12998=(cj3*gconst41);
IkReal x12999=((1.0)*cj2);
IkReal x13000=(cj1*sj2);
IkReal x13001=(cj3*gconst40);
IkReal x13002=(cj1*x12999);
IkReal x13003=((1.0)*x12993);
IkReal x13004=((1.0)*x12992);
IkReal x13005=(cj3*x12992);
IkReal x13006=(gconst40*x12992);
IkReal x13007=(x12993*x13001);
evalcond[0]=((((-1.0)*r22*x13003))+((r21*x13006))+(((-1.0)*x12997*x13004)));
evalcond[1]=((((-1.0)*r12*x13003))+(((-1.0)*gconst41*r10*x13004))+((r11*x13006)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r00*x13004))+(((-1.0)*r02*x13003))+((r01*x13006)));
evalcond[3]=(((r01*x12996))+((r00*x12995))+((r02*x13005))+((r01*x13007))+(((-1.0)*r00*x12998*x13003)));
evalcond[4]=((((-1.0)*r02*sj3*x13004))+((r00*x13001))+((r00*x12993*x12996))+((r01*x12998))+(((-1.0)*r01*x12995*x13003)));
evalcond[5]=(((cj2*sj1))+((r21*x12996))+((r20*x12995))+(((-1.0)*cj3*x12997*x13003))+x13000+((r22*x13005))+((r21*x13007)));
evalcond[6]=(x12994+((r10*x12995))+(((-1.0)*x13002))+((r12*x13005))+((r11*x12996))+(((-1.0)*r10*x12998*x13003))+((r11*x13007)));
evalcond[7]=(x12994+(((-1.0)*r22*sj3*x13004))+(((-1.0)*x13002))+((r20*x13001))+(((-1.0)*r21*x12995*x13003))+((r21*x12998))+((r20*x12993*x12996)));
evalcond[8]=((((-1.0)*r11*x12995*x13003))+(((-1.0)*x13000))+((r11*x12998))+(((-1.0)*r12*sj3*x13004))+((r10*x12993*x12996))+((r10*x13001))+(((-1.0)*sj1*x12999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13008=((1.0)*gconst41);
CheckValue<IkReal> x13009 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*r20*x13008)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13009.valid){
continue;
}
CheckValue<IkReal> x13010=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13008))+(((-1.0)*gconst40*r10)))),-1);
if(!x13010.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13009.value)+(((1.5707963267949)*(x13010.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13011=IKsin(j4);
IkReal x13012=IKcos(j4);
IkReal x13013=(sj1*sj2);
IkReal x13014=(gconst40*sj3);
IkReal x13015=(gconst41*sj3);
IkReal x13016=(gconst41*r20);
IkReal x13017=(cj3*gconst41);
IkReal x13018=((1.0)*cj2);
IkReal x13019=(cj1*sj2);
IkReal x13020=(cj3*gconst40);
IkReal x13021=(cj1*x13018);
IkReal x13022=((1.0)*x13012);
IkReal x13023=((1.0)*x13011);
IkReal x13024=(cj3*x13011);
IkReal x13025=(gconst40*x13011);
IkReal x13026=(x13012*x13020);
evalcond[0]=((((-1.0)*r22*x13022))+((r21*x13025))+(((-1.0)*x13016*x13023)));
evalcond[1]=((((-1.0)*gconst41*r10*x13023))+((r11*x13025))+(((-1.0)*r12*x13022)));
evalcond[2]=((-1.0)+((r01*x13025))+(((-1.0)*gconst41*r00*x13023))+(((-1.0)*r02*x13022)));
evalcond[3]=(((r01*x13026))+((r00*x13014))+((r01*x13015))+(((-1.0)*r00*x13017*x13022))+((r02*x13024)));
evalcond[4]=(((r01*x13017))+((r00*x13020))+(((-1.0)*r02*sj3*x13023))+(((-1.0)*r01*x13014*x13022))+((r00*x13012*x13015)));
evalcond[5]=(((cj2*sj1))+((r21*x13026))+((r21*x13015))+((r20*x13014))+(((-1.0)*cj3*x13016*x13022))+x13019+((r22*x13024)));
evalcond[6]=((((-1.0)*x13021))+(((-1.0)*r10*x13017*x13022))+((r11*x13015))+((r11*x13026))+x13013+((r12*x13024))+((r10*x13014)));
evalcond[7]=((((-1.0)*r21*x13014*x13022))+((r21*x13017))+(((-1.0)*x13021))+(((-1.0)*r22*sj3*x13023))+((r20*x13020))+((r20*x13012*x13015))+x13013);
evalcond[8]=((((-1.0)*sj1*x13018))+((r10*x13012*x13015))+(((-1.0)*x13019))+((r11*x13017))+(((-1.0)*r11*x13014*x13022))+(((-1.0)*r12*sj3*x13023))+((r10*x13020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13027=IKPowWithIntegerCheck(IKsign((((gconst41*r21))+((gconst40*r20)))),-1);
if(!x13027.valid){
continue;
}
CheckValue<IkReal> x13028 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst41*r10))+((gconst40*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13027.value)))+(x13028.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13029=IKsin(j4);
IkReal x13030=IKcos(j4);
IkReal x13031=(sj1*sj2);
IkReal x13032=(gconst40*sj3);
IkReal x13033=(gconst41*sj3);
IkReal x13034=(gconst41*r20);
IkReal x13035=(cj3*gconst41);
IkReal x13036=((1.0)*cj2);
IkReal x13037=(cj1*sj2);
IkReal x13038=(cj3*gconst40);
IkReal x13039=(cj1*x13036);
IkReal x13040=((1.0)*x13030);
IkReal x13041=((1.0)*x13029);
IkReal x13042=(cj3*x13029);
IkReal x13043=(gconst40*x13029);
IkReal x13044=(x13030*x13038);
evalcond[0]=(((r21*x13043))+(((-1.0)*r22*x13040))+(((-1.0)*x13034*x13041)));
evalcond[1]=(((r11*x13043))+(((-1.0)*gconst41*r10*x13041))+(((-1.0)*r12*x13040)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x13040))+((r01*x13043))+(((-1.0)*gconst41*r00*x13041)));
evalcond[3]=(((r02*x13042))+(((-1.0)*r00*x13035*x13040))+((r01*x13033))+((r01*x13044))+((r00*x13032)));
evalcond[4]=((((-1.0)*r02*sj3*x13041))+((r00*x13030*x13033))+((r01*x13035))+((r00*x13038))+(((-1.0)*r01*x13032*x13040)));
evalcond[5]=(((cj2*sj1))+((r21*x13044))+(((-1.0)*cj3*x13034*x13040))+((r22*x13042))+((r21*x13033))+x13037+((r20*x13032)));
evalcond[6]=(((r11*x13044))+((r11*x13033))+(((-1.0)*r10*x13035*x13040))+((r10*x13032))+x13031+(((-1.0)*x13039))+((r12*x13042)));
evalcond[7]=(((r20*x13030*x13033))+(((-1.0)*r21*x13032*x13040))+((r21*x13035))+x13031+(((-1.0)*r22*sj3*x13041))+(((-1.0)*x13039))+((r20*x13038)));
evalcond[8]=((((-1.0)*x13037))+((r10*x13030*x13033))+((r11*x13035))+(((-1.0)*r12*sj3*x13041))+((r10*x13038))+(((-1.0)*r11*x13032*x13040))+(((-1.0)*sj1*x13036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13045=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13045);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13045);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13046=(cj5*r00);
IkReal x13047=(r01*sj5);
j4eval[0]=((((-1.0)*x13046))+x13047);
j4eval[1]=((((-1.0)*sj3*x13047))+((sj3*x13046)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13048=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13048);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13048);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13049=(r01*sj5);
IkReal x13050=((1.0)*cj5*r00);
j4eval[0]=(x13049+(((-1.0)*x13050)));
j4eval[1]=((((-1.0)*cj3*x13050))+((cj3*x13049)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13051=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13051);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13051);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13052=((1.0)*cj3);
CheckValue<IkReal> x13053=IKPowWithIntegerCheck(cj3,-1);
if(!x13053.valid){
continue;
}
CheckValue<IkReal> x13054=IKPowWithIntegerCheck(r22,-1);
if(!x13054.valid){
continue;
}
CheckValue<IkReal> x13055=IKPowWithIntegerCheck((((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5))),-1);
if(!x13055.valid){
continue;
}
if( IKabs(((x13053.value)*(x13054.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13055.value)*(((((-1.0)*cj5*r01*x13052))+(((-1.0)*r00*sj5*x13052)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13053.value)*(x13054.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13055.value)*(((((-1.0)*cj5*r01*x13052))+(((-1.0)*r00*sj5*x13052))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13053.value)*(x13054.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13055.value)*(((((-1.0)*cj5*r01*x13052))+(((-1.0)*r00*sj5*x13052))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13056=IKsin(j4);
IkReal x13057=IKcos(j4);
IkReal x13058=(sj1*sj2);
IkReal x13059=(cj5*sj3);
IkReal x13060=(r11*sj5);
IkReal x13061=(cj3*cj5);
IkReal x13062=((1.0)*cj1);
IkReal x13063=(cj3*sj5);
IkReal x13064=(sj3*sj5);
IkReal x13065=(cj2*sj1);
IkReal x13066=(r01*sj5);
IkReal x13067=((1.0)*sj3);
IkReal x13068=(cj2*x13062);
IkReal x13069=(r10*x13057);
IkReal x13070=(r22*x13056);
IkReal x13071=(cj3*x13057);
IkReal x13072=((1.0)*cj5*x13056);
evalcond[0]=((-1.0)*r22*x13057);
evalcond[1]=(((cj1*sj2))+x13065+((cj3*x13070)));
evalcond[2]=((((-1.0)*r10*x13072))+((x13056*x13060)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x13072))+((x13056*x13066)));
evalcond[4]=((((-1.0)*x13067*x13070))+x13058+(((-1.0)*x13068)));
evalcond[5]=((((-1.0)*r01*x13057*x13064))+((r00*x13057*x13059))+((r00*x13063))+((r01*x13061)));
evalcond[6]=((((-1.0)*r00*x13057*x13061))+((r01*x13057*x13063))+((r00*x13064))+((r01*x13059)));
evalcond[7]=((((-1.0)*x13061*x13069))+((r10*x13064))+((x13060*x13071))+x13058+((r11*x13059))+(((-1.0)*x13068)));
evalcond[8]=(((x13059*x13069))+(((-1.0)*x13057*x13060*x13067))+(((-1.0)*x13065))+((r10*x13063))+((r11*x13061))+(((-1.0)*sj2*x13062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13073=((1.0)*sj3);
IkReal x13074=(r01*sj5);
IkReal x13075=((1.0)*cj5*r00);
CheckValue<IkReal> x13076=IKPowWithIntegerCheck(((((-1.0)*x13075))+x13074),-1);
if(!x13076.valid){
continue;
}
CheckValue<IkReal> x13077=IKPowWithIntegerCheck(((((-1.0)*cj3*x13075))+((cj3*x13074))),-1);
if(!x13077.valid){
continue;
}
if( IKabs(x13076.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13077.value)*(((((-1.0)*cj5*r01*x13073))+(((-1.0)*r00*sj5*x13073)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13076.value)+IKsqr(((x13077.value)*(((((-1.0)*cj5*r01*x13073))+(((-1.0)*r00*sj5*x13073))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13076.value, ((x13077.value)*(((((-1.0)*cj5*r01*x13073))+(((-1.0)*r00*sj5*x13073))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13078=IKsin(j4);
IkReal x13079=IKcos(j4);
IkReal x13080=(sj1*sj2);
IkReal x13081=(cj5*sj3);
IkReal x13082=(r11*sj5);
IkReal x13083=(cj3*cj5);
IkReal x13084=((1.0)*cj1);
IkReal x13085=(cj3*sj5);
IkReal x13086=(sj3*sj5);
IkReal x13087=(cj2*sj1);
IkReal x13088=(r01*sj5);
IkReal x13089=((1.0)*sj3);
IkReal x13090=(cj2*x13084);
IkReal x13091=(r10*x13079);
IkReal x13092=(r22*x13078);
IkReal x13093=(cj3*x13079);
IkReal x13094=((1.0)*cj5*x13078);
evalcond[0]=((-1.0)*r22*x13079);
evalcond[1]=(((cj3*x13092))+((cj1*sj2))+x13087);
evalcond[2]=(((x13078*x13082))+(((-1.0)*r10*x13094)));
evalcond[3]=((-1.0)+((x13078*x13088))+(((-1.0)*r00*x13094)));
evalcond[4]=(x13080+(((-1.0)*x13089*x13092))+(((-1.0)*x13090)));
evalcond[5]=((((-1.0)*r01*x13079*x13086))+((r00*x13085))+((r00*x13079*x13081))+((r01*x13083)));
evalcond[6]=(((r01*x13079*x13085))+(((-1.0)*r00*x13079*x13083))+((r00*x13086))+((r01*x13081)));
evalcond[7]=(((r11*x13081))+(((-1.0)*x13083*x13091))+x13080+((x13082*x13093))+((r10*x13086))+(((-1.0)*x13090)));
evalcond[8]=((((-1.0)*x13079*x13082*x13089))+((r11*x13083))+((x13081*x13091))+(((-1.0)*x13087))+(((-1.0)*sj2*x13084))+((r10*x13085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13095=((1.0)*cj3);
IkReal x13096=(cj5*r00);
IkReal x13097=(r01*sj5);
CheckValue<IkReal> x13098=IKPowWithIntegerCheck((x13097+(((-1.0)*x13096))),-1);
if(!x13098.valid){
continue;
}
CheckValue<IkReal> x13099=IKPowWithIntegerCheck((((sj3*x13096))+(((-1.0)*sj3*x13097))),-1);
if(!x13099.valid){
continue;
}
if( IKabs(x13098.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13099.value)*(((((-1.0)*r00*sj5*x13095))+(((-1.0)*cj5*r01*x13095)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13098.value)+IKsqr(((x13099.value)*(((((-1.0)*r00*sj5*x13095))+(((-1.0)*cj5*r01*x13095))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13098.value, ((x13099.value)*(((((-1.0)*r00*sj5*x13095))+(((-1.0)*cj5*r01*x13095))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13100=IKsin(j4);
IkReal x13101=IKcos(j4);
IkReal x13102=(sj1*sj2);
IkReal x13103=(cj5*sj3);
IkReal x13104=(r11*sj5);
IkReal x13105=(cj3*cj5);
IkReal x13106=((1.0)*cj1);
IkReal x13107=(cj3*sj5);
IkReal x13108=(sj3*sj5);
IkReal x13109=(cj2*sj1);
IkReal x13110=(r01*sj5);
IkReal x13111=((1.0)*sj3);
IkReal x13112=(cj2*x13106);
IkReal x13113=(r10*x13101);
IkReal x13114=(r22*x13100);
IkReal x13115=(cj3*x13101);
IkReal x13116=((1.0)*cj5*x13100);
evalcond[0]=((-1.0)*r22*x13101);
evalcond[1]=(((cj1*sj2))+((cj3*x13114))+x13109);
evalcond[2]=((((-1.0)*r10*x13116))+((x13100*x13104)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x13116))+((x13100*x13110)));
evalcond[4]=((((-1.0)*x13112))+x13102+(((-1.0)*x13111*x13114)));
evalcond[5]=(((r00*x13107))+((r01*x13105))+(((-1.0)*r01*x13101*x13108))+((r00*x13101*x13103)));
evalcond[6]=(((r00*x13108))+(((-1.0)*r00*x13101*x13105))+((r01*x13101*x13107))+((r01*x13103)));
evalcond[7]=((((-1.0)*x13112))+(((-1.0)*x13105*x13113))+x13102+((r11*x13103))+((r10*x13108))+((x13104*x13115)));
evalcond[8]=((((-1.0)*sj2*x13106))+((x13103*x13113))+(((-1.0)*x13109))+((r11*x13105))+((r10*x13107))+(((-1.0)*x13101*x13104*x13111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13117=cj5*cj5;
IkReal x13118=(cj3*r20);
IkReal x13119=(r21*sj3);
IkReal x13120=((1.0)*cj3);
IkReal x13121=(r01*r21);
IkReal x13122=(r01*sj3);
IkReal x13123=(r00*sj5);
IkReal x13124=(cj5*r01*sj5);
IkReal x13125=((1.0)*x13117);
CheckValue<IkReal> x13126=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13120*x13121))+((x13118*x13124))+(((-1.0)*r00*x13118*x13125))+((cj3*x13117*x13121))+(((-1.0)*r02*r22*x13120))+((cj3*cj5*r21*x13123)))),-1);
if(!x13126.valid){
continue;
}
CheckValue<IkReal> x13127 = IKatan2WithCheck(IkReal((((r22*sj3*x13123))+((cj5*r22*x13122)))),IkReal((((x13119*x13124))+(((-1.0)*r20*x13122*x13125))+(((-1.0)*r00*x13119*x13125))+(((-1.0)*cj5*r20*sj3*x13123))+((r00*x13119)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13126.value)))+(x13127.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13128=IKsin(j4);
IkReal x13129=IKcos(j4);
IkReal x13130=(sj1*sj2);
IkReal x13131=(r11*sj5);
IkReal x13132=(cj5*r10);
IkReal x13133=(cj5*r01);
IkReal x13134=(cj5*r00);
IkReal x13135=((1.0)*cj1);
IkReal x13136=(cj3*sj5);
IkReal x13137=(r21*sj5);
IkReal x13138=(cj5*sj3);
IkReal x13139=(sj3*sj5);
IkReal x13140=(cj2*sj1);
IkReal x13141=(r01*sj5);
IkReal x13142=(cj3*cj5);
IkReal x13143=(cj5*r20);
IkReal x13144=(cj2*x13135);
IkReal x13145=((1.0)*x13129);
IkReal x13146=((1.0)*x13128);
IkReal x13147=(cj3*x13129);
IkReal x13148=(sj3*x13129);
IkReal x13149=(cj3*x13128);
evalcond[0]=((((-1.0)*x13143*x13146))+((x13128*x13137))+(((-1.0)*r22*x13145)));
evalcond[1]=(((x13128*x13131))+(((-1.0)*r12*x13145))+(((-1.0)*x13132*x13146)));
evalcond[2]=((-1.0)+((x13128*x13141))+(((-1.0)*r02*x13145))+(((-1.0)*x13134*x13146)));
evalcond[3]=(((r01*x13129*x13136))+((r00*x13139))+((sj3*x13133))+((r02*x13149))+(((-1.0)*cj3*x13134*x13145)));
evalcond[4]=(((x13134*x13148))+(((-1.0)*r02*sj3*x13146))+(((-1.0)*r01*x13139*x13145))+((r00*x13136))+((cj3*x13133)));
evalcond[5]=(((r22*x13149))+(((-1.0)*r20*x13142*x13145))+((r20*x13139))+((cj1*sj2))+((r21*x13129*x13136))+((r21*x13138))+x13140);
evalcond[6]=(((r10*x13139))+((r12*x13149))+((r11*x13138))+(((-1.0)*x13144))+(((-1.0)*cj3*x13132*x13145))+((x13131*x13147))+x13130);
evalcond[7]=(((r20*x13129*x13138))+((r20*x13136))+(((-1.0)*sj3*x13137*x13145))+(((-1.0)*r22*sj3*x13146))+(((-1.0)*x13144))+x13130+((r21*x13142)));
evalcond[8]=(((r10*x13136))+((x13132*x13148))+((r11*x13142))+(((-1.0)*sj2*x13135))+(((-1.0)*sj3*x13131*x13145))+(((-1.0)*r12*sj3*x13146))+(((-1.0)*x13140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13150=((1.0)*cj5);
CheckValue<IkReal> x13151 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13150))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13151.valid){
continue;
}
CheckValue<IkReal> x13152=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13150))+(((-1.0)*r10*sj5)))),-1);
if(!x13152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13151.value)+(((1.5707963267949)*(x13152.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13153=IKsin(j4);
IkReal x13154=IKcos(j4);
IkReal x13155=(sj1*sj2);
IkReal x13156=(r11*sj5);
IkReal x13157=(cj5*r10);
IkReal x13158=(cj5*r01);
IkReal x13159=(cj5*r00);
IkReal x13160=((1.0)*cj1);
IkReal x13161=(cj3*sj5);
IkReal x13162=(r21*sj5);
IkReal x13163=(cj5*sj3);
IkReal x13164=(sj3*sj5);
IkReal x13165=(cj2*sj1);
IkReal x13166=(r01*sj5);
IkReal x13167=(cj3*cj5);
IkReal x13168=(cj5*r20);
IkReal x13169=(cj2*x13160);
IkReal x13170=((1.0)*x13154);
IkReal x13171=((1.0)*x13153);
IkReal x13172=(cj3*x13154);
IkReal x13173=(sj3*x13154);
IkReal x13174=(cj3*x13153);
evalcond[0]=(((x13153*x13162))+(((-1.0)*r22*x13170))+(((-1.0)*x13168*x13171)));
evalcond[1]=((((-1.0)*x13157*x13171))+((x13153*x13156))+(((-1.0)*r12*x13170)));
evalcond[2]=((-1.0)+((x13153*x13166))+(((-1.0)*r02*x13170))+(((-1.0)*x13159*x13171)));
evalcond[3]=(((r00*x13164))+((r01*x13154*x13161))+((sj3*x13158))+(((-1.0)*cj3*x13159*x13170))+((r02*x13174)));
evalcond[4]=(((r00*x13161))+((cj3*x13158))+(((-1.0)*r02*sj3*x13171))+(((-1.0)*r01*x13164*x13170))+((x13159*x13173)));
evalcond[5]=(((r20*x13164))+((cj1*sj2))+((r21*x13154*x13161))+((r22*x13174))+(((-1.0)*r20*x13167*x13170))+x13165+((r21*x13163)));
evalcond[6]=((((-1.0)*x13169))+(((-1.0)*cj3*x13157*x13170))+((x13156*x13172))+((r11*x13163))+((r12*x13174))+x13155+((r10*x13164)));
evalcond[7]=(((r20*x13161))+((r20*x13154*x13163))+(((-1.0)*x13169))+(((-1.0)*sj3*x13162*x13170))+x13155+(((-1.0)*r22*sj3*x13171))+((r21*x13167)));
evalcond[8]=((((-1.0)*sj2*x13160))+(((-1.0)*sj3*x13156*x13170))+(((-1.0)*r12*sj3*x13171))+((r11*x13167))+(((-1.0)*x13165))+((x13157*x13173))+((r10*x13161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13175=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13175.valid){
continue;
}
CheckValue<IkReal> x13176 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13175.value)))+(x13176.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13177=IKsin(j4);
IkReal x13178=IKcos(j4);
IkReal x13179=(sj1*sj2);
IkReal x13180=(r11*sj5);
IkReal x13181=(cj5*r10);
IkReal x13182=(cj5*r01);
IkReal x13183=(cj5*r00);
IkReal x13184=((1.0)*cj1);
IkReal x13185=(cj3*sj5);
IkReal x13186=(r21*sj5);
IkReal x13187=(cj5*sj3);
IkReal x13188=(sj3*sj5);
IkReal x13189=(cj2*sj1);
IkReal x13190=(r01*sj5);
IkReal x13191=(cj3*cj5);
IkReal x13192=(cj5*r20);
IkReal x13193=(cj2*x13184);
IkReal x13194=((1.0)*x13178);
IkReal x13195=((1.0)*x13177);
IkReal x13196=(cj3*x13178);
IkReal x13197=(sj3*x13178);
IkReal x13198=(cj3*x13177);
evalcond[0]=((((-1.0)*r22*x13194))+(((-1.0)*x13192*x13195))+((x13177*x13186)));
evalcond[1]=((((-1.0)*r12*x13194))+(((-1.0)*x13181*x13195))+((x13177*x13180)));
evalcond[2]=((-1.0)+(((-1.0)*x13183*x13195))+(((-1.0)*r02*x13194))+((x13177*x13190)));
evalcond[3]=(((r02*x13198))+((r01*x13178*x13185))+((r00*x13188))+(((-1.0)*cj3*x13183*x13194))+((sj3*x13182)));
evalcond[4]=(((cj3*x13182))+((x13183*x13197))+(((-1.0)*r01*x13188*x13194))+((r00*x13185))+(((-1.0)*r02*sj3*x13195)));
evalcond[5]=((((-1.0)*r20*x13191*x13194))+((r21*x13187))+((cj1*sj2))+((r20*x13188))+x13189+((r21*x13178*x13185))+((r22*x13198)));
evalcond[6]=((((-1.0)*x13193))+((r12*x13198))+((r11*x13187))+((r10*x13188))+(((-1.0)*cj3*x13181*x13194))+x13179+((x13180*x13196)));
evalcond[7]=((((-1.0)*x13193))+(((-1.0)*sj3*x13186*x13194))+((r21*x13191))+(((-1.0)*r22*sj3*x13195))+((r20*x13178*x13187))+((r20*x13185))+x13179);
evalcond[8]=((((-1.0)*sj3*x13180*x13194))+(((-1.0)*x13189))+((r11*x13191))+((r10*x13185))+(((-1.0)*sj2*x13184))+(((-1.0)*r12*sj3*x13195))+((x13181*x13197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13200 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x13200)==0){
continue;
}
IkReal x13199=pow(x13200,-0.5);
CheckValue<IkReal> x13201 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13201.valid){
continue;
}
IkReal gconst12=((-1.0)*(x13201.value));
IkReal gconst13=((-1.0)*r11*x13199);
IkReal gconst14=(r10*x13199);
CheckValue<IkReal> x13202 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13202.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13202.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x13205 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13205.valid){
continue;
}
IkReal x13203=((-1.0)*(x13205.value));
IkReal x13204=x13199;
sj5=gconst13;
cj5=gconst14;
j5=x13203;
IkReal gconst12=x13203;
IkReal gconst13=((-1.0)*r11*x13204);
IkReal gconst14=(r10*x13204);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13206=((1.0)*gconst14);
CheckValue<IkReal> x13207 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst13*r01))+((gconst13*r11*sj0))+(((-1.0)*cj0*r00*x13206))+(((-1.0)*r10*sj0*x13206)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13207.valid){
continue;
}
CheckValue<IkReal> x13208=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13206))+(((-1.0)*gconst13*r20)))),-1);
if(!x13208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13207.value)+(((1.5707963267949)*(x13208.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13209=IKsin(j4);
IkReal x13210=IKcos(j4);
IkReal x13211=((1.0)*r22);
IkReal x13212=((1.0)*r12);
IkReal x13213=(cj2*sj0);
IkReal x13214=(gconst13*sj3);
IkReal x13215=(gconst13*r01);
IkReal x13216=(sj1*sj2);
IkReal x13217=(gconst14*sj3);
IkReal x13218=(cj1*cj2);
IkReal x13219=((1.0)*gconst14);
IkReal x13220=(cj3*gconst13);
IkReal x13221=(cj3*gconst14);
IkReal x13222=(cj2*sj1);
IkReal x13223=((1.0)*r02);
IkReal x13224=(cj1*sj2);
IkReal x13225=((1.0)*cj0);
IkReal x13226=(sj3*x13209);
IkReal x13227=(cj3*x13210);
IkReal x13228=(cj3*x13209);
IkReal x13229=(gconst13*x13209);
IkReal x13230=((1.0)*x13210);
evalcond[0]=(((r21*x13229))+(((-1.0)*x13210*x13211))+(((-1.0)*r20*x13209*x13219)));
evalcond[1]=(sj0+(((-1.0)*x13210*x13223))+(((-1.0)*r00*x13209*x13219))+((x13209*x13215)));
evalcond[2]=(((r11*x13229))+(((-1.0)*x13210*x13212))+(((-1.0)*x13225))+(((-1.0)*r10*x13209*x13219)));
evalcond[3]=(((r21*x13217))+((r22*x13228))+((r20*x13214))+((r21*x13210*x13220))+(((-1.0)*r20*x13219*x13227))+x13222+x13224);
evalcond[4]=((((-1.0)*x13218))+((r21*x13221))+(((-1.0)*x13211*x13226))+((r20*x13210*x13217))+(((-1.0)*r21*x13214*x13230))+x13216+((r20*x13220)));
evalcond[5]=((((-1.0)*r01*x13214*x13230))+(((-1.0)*x13223*x13226))+((r00*x13220))+((r00*x13210*x13217))+((r01*x13221))+((cj0*x13222))+((cj0*x13224)));
evalcond[6]=(((r02*x13228))+((r00*x13214))+((r01*x13217))+(((-1.0)*r00*x13219*x13227))+((x13215*x13227))+(((-1.0)*x13216*x13225))+((cj0*x13218)));
evalcond[7]=((((-1.0)*x13212*x13226))+((sj1*x13213))+((sj0*x13224))+((r10*x13220))+((r11*x13221))+((r10*x13210*x13217))+(((-1.0)*r11*x13214*x13230)));
evalcond[8]=((((-1.0)*r10*x13219*x13227))+((cj1*x13213))+((r11*x13217))+((r10*x13214))+(((-1.0)*sj0*x13216))+((r12*x13228))+((r11*x13210*x13220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13231 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst13*r21))+(((-1.0)*cj0*gconst14*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13231.valid){
continue;
}
CheckValue<IkReal> x13232=IKPowWithIntegerCheck(IKsign((((gconst14*r01))+((gconst13*r00)))),-1);
if(!x13232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13231.value)+(((1.5707963267949)*(x13232.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13233=IKsin(j4);
IkReal x13234=IKcos(j4);
IkReal x13235=((1.0)*r22);
IkReal x13236=((1.0)*r12);
IkReal x13237=(cj2*sj0);
IkReal x13238=(gconst13*sj3);
IkReal x13239=(gconst13*r01);
IkReal x13240=(sj1*sj2);
IkReal x13241=(gconst14*sj3);
IkReal x13242=(cj1*cj2);
IkReal x13243=((1.0)*gconst14);
IkReal x13244=(cj3*gconst13);
IkReal x13245=(cj3*gconst14);
IkReal x13246=(cj2*sj1);
IkReal x13247=((1.0)*r02);
IkReal x13248=(cj1*sj2);
IkReal x13249=((1.0)*cj0);
IkReal x13250=(sj3*x13233);
IkReal x13251=(cj3*x13234);
IkReal x13252=(cj3*x13233);
IkReal x13253=(gconst13*x13233);
IkReal x13254=((1.0)*x13234);
evalcond[0]=(((r21*x13253))+(((-1.0)*r20*x13233*x13243))+(((-1.0)*x13234*x13235)));
evalcond[1]=(sj0+(((-1.0)*x13234*x13247))+(((-1.0)*r00*x13233*x13243))+((x13233*x13239)));
evalcond[2]=((((-1.0)*r10*x13233*x13243))+(((-1.0)*x13234*x13236))+((r11*x13253))+(((-1.0)*x13249)));
evalcond[3]=(((r20*x13238))+(((-1.0)*r20*x13243*x13251))+((r21*x13241))+((r22*x13252))+((r21*x13234*x13244))+x13246+x13248);
evalcond[4]=((((-1.0)*x13242))+((r21*x13245))+(((-1.0)*r21*x13238*x13254))+(((-1.0)*x13235*x13250))+((r20*x13234*x13241))+x13240+((r20*x13244)));
evalcond[5]=(((r00*x13234*x13241))+(((-1.0)*r01*x13238*x13254))+(((-1.0)*x13247*x13250))+((r00*x13244))+((r01*x13245))+((cj0*x13248))+((cj0*x13246)));
evalcond[6]=(((r02*x13252))+((x13239*x13251))+((r01*x13241))+(((-1.0)*r00*x13243*x13251))+((cj0*x13242))+(((-1.0)*x13240*x13249))+((r00*x13238)));
evalcond[7]=(((r10*x13234*x13241))+((sj0*x13248))+((r10*x13244))+(((-1.0)*x13236*x13250))+((r11*x13245))+((sj1*x13237))+(((-1.0)*r11*x13238*x13254)));
evalcond[8]=(((r10*x13238))+((cj1*x13237))+(((-1.0)*sj0*x13240))+(((-1.0)*r10*x13243*x13251))+((r12*x13252))+((r11*x13241))+((r11*x13234*x13244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13256 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x13256)==0){
continue;
}
IkReal x13255=pow(x13256,-0.5);
CheckValue<IkReal> x13257 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13257.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x13257.value))));
IkReal gconst16=((1.0)*r11*x13255);
IkReal gconst17=((-1.0)*r10*x13255);
CheckValue<IkReal> x13258 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13258.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13258.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x13261 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13261.valid){
continue;
}
IkReal x13259=((1.0)*(x13261.value));
IkReal x13260=x13255;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13259)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13259)));
IkReal gconst16=((1.0)*r11*x13260);
IkReal gconst17=((-1.0)*r10*x13260);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13264 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13264.valid){
continue;
}
IkReal x13262=((1.0)*(x13264.value));
IkReal x13263=x13255;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13262)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13262)));
IkReal gconst16=((1.0)*r11*x13263);
IkReal gconst17=((-1.0)*r10*x13263);
IkReal x13265=r12*r12;
IkReal x13266=(cj0*r02);
IkReal x13267=x13255;
IkReal x13268=(sj0*x13267);
j4eval[0]=((IKabs((((r12*sj0))+x13266)))+(IKabs(((((-1.0)*x13268))+((x13265*x13268))+((r12*x13266*x13267))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13271 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13271.valid){
continue;
}
IkReal x13269=((1.0)*(x13271.value));
IkReal x13270=x13255;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13269)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13269)));
IkReal gconst16=((1.0)*r11*x13270);
IkReal gconst17=((-1.0)*r10*x13270);
IkReal x13272=((1.0)*cj3);
CheckValue<IkReal> x13277=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x13277.valid){
continue;
}
IkReal x13273=x13277.value;
IkReal x13274=(cj3*x13273);
IkReal x13275=(x13272*x13273);
IkReal x13276=((((-1.0)*x13275*(r11*r11)*(r21*r21)))+(((-1.0)*x13272*(r22*r22)))+(((-1.0)*x13275*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x13274)));
j4eval[0]=x13276;
j4eval[1]=IKsign(x13276);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x13280 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13280.valid){
continue;
}
IkReal x13278=((1.0)*(x13280.value));
IkReal x13279=x13255;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13278)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13278)));
IkReal gconst16=((1.0)*r11*x13279);
IkReal gconst17=((-1.0)*r10*x13279);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13283 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13283.valid){
continue;
}
IkReal x13281=((1.0)*(x13283.value));
IkReal x13282=x13255;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13281)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13281)));
IkReal gconst16=((1.0)*r11*x13282);
IkReal gconst17=((-1.0)*r10*x13282);
IkReal x13284=r12*r12;
IkReal x13285=(cj0*r02);
IkReal x13286=x13255;
IkReal x13287=(sj0*x13286);
j4eval[0]=((IKabs((((x13284*x13287))+(((-1.0)*x13287))+((r12*x13285*x13286)))))+(IKabs((((r12*sj0))+x13285))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13290 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13290.valid){
continue;
}
IkReal x13288=((1.0)*(x13290.value));
IkReal x13289=x13255;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13288)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13288)));
IkReal gconst16=((1.0)*r11*x13289);
IkReal gconst17=((-1.0)*r10*x13289);
IkReal x13291=r12*r12;
IkReal x13292=(sj1*sj2);
IkReal x13293=((1.0)*cj1*cj2);
CheckValue<IkReal> x13297=IKPowWithIntegerCheck(((-1.0)+x13291),-1);
if(!x13297.valid){
continue;
}
IkReal x13294=x13297.value;
if((((1.0)+(((-1.0)*x13291)))) < -0.00001)
continue;
IkReal x13295=IKsqrt(((1.0)+(((-1.0)*x13291))));
IkReal x13296=(r12*r22*x13294*x13295);
j4eval[0]=((IKabs(((((-1.0)*x13293*x13296))+((x13292*x13296)))))+(IKabs((((r22*x13292))+(((-1.0)*r22*x13293))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13298=(gconst17*r20);
IkReal x13299=(cj1*cj2);
IkReal x13300=(sj1*sj2);
IkReal x13301=(gconst16*r21);
CheckValue<IkReal> x13302 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x13299))+((r22*x13300)))),IkReal(((((-1.0)*x13298*x13300))+((x13298*x13299))+(((-1.0)*x13299*x13301))+((x13300*x13301)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13302.valid){
continue;
}
CheckValue<IkReal> x13303=IKPowWithIntegerCheck(IKsign(((x13301*x13301)+(r22*r22)+(((-2.0)*x13298*x13301))+(x13298*x13298))),-1);
if(!x13303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13302.value)+(((1.5707963267949)*(x13303.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13304=IKsin(j4);
IkReal x13305=IKcos(j4);
IkReal x13306=(gconst16*r01);
IkReal x13307=(cj2*sj1);
IkReal x13308=(gconst16*r21);
IkReal x13309=(gconst16*r11);
IkReal x13310=(cj1*sj2);
IkReal x13311=((1.0)*x13305);
IkReal x13312=(gconst17*x13305);
IkReal x13313=((1.0)*x13304);
evalcond[0]=((((-1.0)*gconst17*r20*x13313))+((x13304*x13308))+(((-1.0)*r22*x13311)));
evalcond[1]=((((-1.0)*gconst17*r00*x13313))+sj0+(((-1.0)*r02*x13311))+((x13304*x13306)));
evalcond[2]=((((-1.0)*gconst17*r10*x13313))+((x13304*x13309))+(((-1.0)*r12*x13311))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x13308*x13311))+((r20*x13312))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13313)));
evalcond[4]=(((r00*x13312))+(((-1.0)*r02*x13313))+(((-1.0)*x13306*x13311))+((cj0*x13310))+((cj0*x13307)));
evalcond[5]=(((sj0*x13310))+(((-1.0)*x13309*x13311))+((r10*x13312))+((sj0*x13307))+(((-1.0)*r12*x13313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13314=((1.0)*gconst17);
CheckValue<IkReal> x13315 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x13314))+((gconst16*r11*sj0))+((cj0*gconst16*r01))+(((-1.0)*r10*sj0*x13314)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13315.valid){
continue;
}
CheckValue<IkReal> x13316=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x13314)))),-1);
if(!x13316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13315.value)+(((1.5707963267949)*(x13316.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13317=IKsin(j4);
IkReal x13318=IKcos(j4);
IkReal x13319=(gconst16*r01);
IkReal x13320=(cj2*sj1);
IkReal x13321=(gconst16*r21);
IkReal x13322=(gconst16*r11);
IkReal x13323=(cj1*sj2);
IkReal x13324=((1.0)*x13318);
IkReal x13325=(gconst17*x13318);
IkReal x13326=((1.0)*x13317);
evalcond[0]=((((-1.0)*r22*x13324))+(((-1.0)*gconst17*r20*x13326))+((x13317*x13321)));
evalcond[1]=(((x13317*x13319))+(((-1.0)*r02*x13324))+sj0+(((-1.0)*gconst17*r00*x13326)));
evalcond[2]=((((-1.0)*r12*x13324))+((x13317*x13322))+(((-1.0)*gconst17*r10*x13326))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x13321*x13324))+(((-1.0)*r22*x13326))+(((-1.0)*cj1*cj2))+((r20*x13325))+((sj1*sj2)));
evalcond[4]=(((cj0*x13323))+((cj0*x13320))+(((-1.0)*r02*x13326))+(((-1.0)*x13319*x13324))+((r00*x13325)));
evalcond[5]=((((-1.0)*r12*x13326))+((r10*x13325))+(((-1.0)*x13322*x13324))+((sj0*x13320))+((sj0*x13323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13327=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x13327.valid){
continue;
}
CheckValue<IkReal> x13328 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13327.value)))+(x13328.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13329=IKsin(j4);
IkReal x13330=IKcos(j4);
IkReal x13331=(gconst16*r01);
IkReal x13332=(cj2*sj1);
IkReal x13333=(gconst16*r21);
IkReal x13334=(gconst16*r11);
IkReal x13335=(cj1*sj2);
IkReal x13336=((1.0)*x13330);
IkReal x13337=(gconst17*x13330);
IkReal x13338=((1.0)*x13329);
evalcond[0]=(((x13329*x13333))+(((-1.0)*r22*x13336))+(((-1.0)*gconst17*r20*x13338)));
evalcond[1]=(((x13329*x13331))+sj0+(((-1.0)*gconst17*r00*x13338))+(((-1.0)*r02*x13336)));
evalcond[2]=(((x13329*x13334))+(((-1.0)*r12*x13336))+(((-1.0)*gconst17*r10*x13338))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x13338))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x13337))+(((-1.0)*x13333*x13336)));
evalcond[4]=(((r00*x13337))+((cj0*x13335))+((cj0*x13332))+(((-1.0)*x13331*x13336))+(((-1.0)*r02*x13338)));
evalcond[5]=(((r10*x13337))+(((-1.0)*r12*x13338))+(((-1.0)*x13334*x13336))+((sj0*x13335))+((sj0*x13332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x13341 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13341.valid){
continue;
}
IkReal x13339=((1.0)*(x13341.value));
IkReal x13340=x13255;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13339)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13339)));
IkReal gconst16=((1.0)*r11*x13340);
IkReal gconst17=((-1.0)*r10*x13340);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13344 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13344.valid){
continue;
}
IkReal x13342=((1.0)*(x13344.value));
IkReal x13343=x13255;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13342)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13342)));
IkReal gconst16=((1.0)*r11*x13343);
IkReal gconst17=((-1.0)*r10*x13343);
IkReal x13345=r12*r12;
IkReal x13346=(cj0*r02);
IkReal x13347=x13255;
IkReal x13348=(sj0*x13347);
j4eval[0]=((IKabs((((r12*x13346*x13347))+(((-1.0)*x13348))+((x13345*x13348)))))+(IKabs((((r12*sj0))+x13346))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13351 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13351.valid){
continue;
}
IkReal x13349=((1.0)*(x13351.value));
IkReal x13350=x13255;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13349)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13349)));
IkReal gconst16=((1.0)*r11*x13350);
IkReal gconst17=((-1.0)*r10*x13350);
IkReal x13352=r12*r12;
IkReal x13353=(sj1*sj2);
IkReal x13354=((1.0)+(((-1.0)*x13352)));
IkReal x13355=((1.0)*cj1*cj2);
CheckValue<IkReal> x13362=IKPowWithIntegerCheck(x13354,-1);
if(!x13362.valid){
continue;
}
IkReal x13356=x13362.value;
CheckValue<IkReal> x13363=IKPowWithIntegerCheck(((-1.0)+x13352),-1);
if(!x13363.valid){
continue;
}
IkReal x13357=x13363.value;
IkReal x13358=((1.0)*x13356);
if((x13354) < -0.00001)
continue;
IkReal x13359=IKsqrt(x13354);
IkReal x13360=(r12*r22*x13357*x13359);
IkReal x13361=((((-1.0)*(r22*r22)))+(((-1.0)*x13358*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x13356))+(((-1.0)*x13358*(r10*r10)*(r20*r20))));
j4eval[0]=x13361;
j4eval[1]=((IKabs(((((-1.0)*r22*x13355))+((r22*x13353)))))+(IKabs(((((-1.0)*x13355*x13360))+((x13353*x13360))))));
j4eval[2]=IKsign(x13361);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13364=(gconst17*r20);
IkReal x13365=(cj1*cj2);
IkReal x13366=(sj1*sj2);
IkReal x13367=(gconst16*r21);
CheckValue<IkReal> x13368=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13364*x13364)))+(((-1.0)*(r22*r22)))+(((2.0)*x13364*x13367))+(((-1.0)*(x13367*x13367))))),-1);
if(!x13368.valid){
continue;
}
CheckValue<IkReal> x13369 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x13365))+((r22*x13366)))),IkReal(((((-1.0)*x13365*x13367))+((x13366*x13367))+(((-1.0)*x13364*x13366))+((x13364*x13365)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13368.value)))+(x13369.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13370=IKsin(j4);
IkReal x13371=IKcos(j4);
IkReal x13372=(cj2*sj1);
IkReal x13373=(gconst17*r20);
IkReal x13374=(gconst17*r00);
IkReal x13375=(gconst17*r10);
IkReal x13376=(cj1*sj2);
IkReal x13377=((1.0)*x13371);
IkReal x13378=(gconst16*x13370);
IkReal x13379=((1.0)*x13370);
IkReal x13380=(gconst16*x13371);
evalcond[0]=((((-1.0)*x13373*x13379))+(((-1.0)*r22*x13377))+((r21*x13378)));
evalcond[1]=((((-1.0)*x13374*x13379))+sj0+((r01*x13378))+(((-1.0)*r02*x13377)));
evalcond[2]=(((r11*x13378))+(((-1.0)*x13375*x13379))+(((-1.0)*cj0))+(((-1.0)*r12*x13377)));
evalcond[3]=((((-1.0)*x13373*x13377))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x13370))+((r21*x13380)));
evalcond[4]=((((-1.0)*x13374*x13377))+((r02*x13370))+((r01*x13380))+((cj0*x13376))+((cj0*x13372)));
evalcond[5]=(((sj0*x13376))+((sj0*x13372))+((r12*x13370))+((r11*x13380))+(((-1.0)*x13375*x13377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13381=((1.0)*gconst17);
CheckValue<IkReal> x13382=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x13381)))),-1);
if(!x13382.valid){
continue;
}
CheckValue<IkReal> x13383 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst16*r11*sj0))+(((-1.0)*cj0*r00*x13381))+((cj0*gconst16*r01))+(((-1.0)*r10*sj0*x13381)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13382.value)))+(x13383.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13384=IKsin(j4);
IkReal x13385=IKcos(j4);
IkReal x13386=(cj2*sj1);
IkReal x13387=(gconst17*r20);
IkReal x13388=(gconst17*r00);
IkReal x13389=(gconst17*r10);
IkReal x13390=(cj1*sj2);
IkReal x13391=((1.0)*x13385);
IkReal x13392=(gconst16*x13384);
IkReal x13393=((1.0)*x13384);
IkReal x13394=(gconst16*x13385);
evalcond[0]=(((r21*x13392))+(((-1.0)*r22*x13391))+(((-1.0)*x13387*x13393)));
evalcond[1]=(sj0+((r01*x13392))+(((-1.0)*x13388*x13393))+(((-1.0)*r02*x13391)));
evalcond[2]=(((r11*x13392))+(((-1.0)*x13389*x13393))+(((-1.0)*r12*x13391))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x13394))+(((-1.0)*x13387*x13391))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x13384)));
evalcond[4]=(((r01*x13394))+(((-1.0)*x13388*x13391))+((cj0*x13386))+((r02*x13384))+((cj0*x13390)));
evalcond[5]=(((r11*x13394))+((sj0*x13386))+((sj0*x13390))+((r12*x13384))+(((-1.0)*x13389*x13391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13395=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x13395.valid){
continue;
}
CheckValue<IkReal> x13396 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13395.value)))+(x13396.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13397=IKsin(j4);
IkReal x13398=IKcos(j4);
IkReal x13399=(cj2*sj1);
IkReal x13400=(gconst17*r20);
IkReal x13401=(gconst17*r00);
IkReal x13402=(gconst17*r10);
IkReal x13403=(cj1*sj2);
IkReal x13404=((1.0)*x13398);
IkReal x13405=(gconst16*x13397);
IkReal x13406=((1.0)*x13397);
IkReal x13407=(gconst16*x13398);
evalcond[0]=(((r21*x13405))+(((-1.0)*x13400*x13406))+(((-1.0)*r22*x13404)));
evalcond[1]=((((-1.0)*r02*x13404))+((r01*x13405))+sj0+(((-1.0)*x13401*x13406)));
evalcond[2]=(((r11*x13405))+(((-1.0)*x13402*x13406))+(((-1.0)*r12*x13404))+(((-1.0)*cj0)));
evalcond[3]=(((r21*x13407))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13400*x13404))+((r22*x13397)));
evalcond[4]=(((r01*x13407))+(((-1.0)*x13401*x13404))+((cj0*x13403))+((r02*x13397))+((cj0*x13399)));
evalcond[5]=(((sj0*x13399))+((r11*x13407))+((r12*x13397))+((sj0*x13403))+(((-1.0)*x13402*x13404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13410 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13410.valid){
continue;
}
IkReal x13408=((1.0)*(x13410.value));
IkReal x13409=x13255;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13408)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13408)));
IkReal gconst16=((1.0)*r11*x13409);
IkReal gconst17=((-1.0)*r10*x13409);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13411=gconst16*gconst16;
IkReal x13412=gconst17*gconst17;
IkReal x13413=(cj3*r00);
IkReal x13414=(cj3*r01);
IkReal x13415=((1.0)*r20);
IkReal x13416=(gconst16*gconst17);
IkReal x13417=(r00*sj3);
IkReal x13418=(r01*sj3);
IkReal x13419=(r21*x13411);
CheckValue<IkReal> x13420 = IKatan2WithCheck(IkReal((((gconst16*r22*x13413))+((gconst17*r22*x13414)))),IkReal(((((-1.0)*x13413*x13415*x13416))+(((-1.0)*x13412*x13414*x13415))+((x13413*x13419))+((r21*x13414*x13416)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13420.valid){
continue;
}
CheckValue<IkReal> x13421=IKPowWithIntegerCheck(IKsign((((x13418*x13419))+((r20*x13412*x13417))+(((-1.0)*r21*x13416*x13417))+(((-1.0)*x13415*x13416*x13418))+((r02*r22*sj3)))),-1);
if(!x13421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13420.value)+(((1.5707963267949)*(x13421.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13422=IKsin(j4);
IkReal x13423=IKcos(j4);
IkReal x13424=(sj1*sj2);
IkReal x13425=(cj3*gconst17);
IkReal x13426=(gconst16*r21);
IkReal x13427=(gconst16*r20);
IkReal x13428=(gconst17*r20);
IkReal x13429=(gconst17*sj3);
IkReal x13430=(cj3*gconst16);
IkReal x13431=(cj2*sj1);
IkReal x13432=((1.0)*cj1);
IkReal x13433=(gconst16*sj3);
IkReal x13434=(cj2*x13432);
IkReal x13435=((1.0)*x13423);
IkReal x13436=(gconst16*x13422);
IkReal x13437=((1.0)*x13422);
IkReal x13438=(cj3*x13423);
IkReal x13439=(cj3*x13422);
evalcond[0]=((((-1.0)*r22*x13435))+(((-1.0)*x13428*x13437))+((x13422*x13426)));
evalcond[1]=((((-1.0)*r12*x13435))+(((-1.0)*gconst17*r10*x13437))+((r11*x13436)));
evalcond[2]=((-1.0)+((r01*x13436))+(((-1.0)*gconst17*r00*x13437))+(((-1.0)*r02*x13435)));
evalcond[3]=(((r02*x13439))+((r01*x13423*x13430))+(((-1.0)*r00*x13425*x13435))+((r01*x13429))+((r00*x13433)));
evalcond[4]=(((r00*x13423*x13429))+(((-1.0)*r02*sj3*x13437))+(((-1.0)*r01*x13433*x13435))+((r01*x13425))+((r00*x13430)));
evalcond[5]=(x13431+((cj1*sj2))+((r22*x13439))+((r21*x13429))+((x13426*x13438))+(((-1.0)*r20*x13425*x13435))+((sj3*x13427)));
evalcond[6]=(x13424+((r11*x13423*x13430))+(((-1.0)*x13434))+((r11*x13429))+((r12*x13439))+(((-1.0)*r10*x13425*x13435))+((r10*x13433)));
evalcond[7]=(x13424+((cj3*x13427))+(((-1.0)*x13434))+(((-1.0)*sj3*x13426*x13435))+((sj3*x13423*x13428))+((r21*x13425))+(((-1.0)*r22*sj3*x13437)));
evalcond[8]=((((-1.0)*r11*x13433*x13435))+((r10*x13423*x13429))+(((-1.0)*sj2*x13432))+(((-1.0)*x13431))+((r11*x13425))+(((-1.0)*r12*sj3*x13437))+((r10*x13430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13440 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst17*r10))+((gconst16*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13440.valid){
continue;
}
CheckValue<IkReal> x13441=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x13441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13440.value)+(((1.5707963267949)*(x13441.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13442=IKsin(j4);
IkReal x13443=IKcos(j4);
IkReal x13444=(sj1*sj2);
IkReal x13445=(cj3*gconst17);
IkReal x13446=(gconst16*r21);
IkReal x13447=(gconst16*r20);
IkReal x13448=(gconst17*r20);
IkReal x13449=(gconst17*sj3);
IkReal x13450=(cj3*gconst16);
IkReal x13451=(cj2*sj1);
IkReal x13452=((1.0)*cj1);
IkReal x13453=(gconst16*sj3);
IkReal x13454=(cj2*x13452);
IkReal x13455=((1.0)*x13443);
IkReal x13456=(gconst16*x13442);
IkReal x13457=((1.0)*x13442);
IkReal x13458=(cj3*x13443);
IkReal x13459=(cj3*x13442);
evalcond[0]=((((-1.0)*r22*x13455))+((x13442*x13446))+(((-1.0)*x13448*x13457)));
evalcond[1]=(((r11*x13456))+(((-1.0)*gconst17*r10*x13457))+(((-1.0)*r12*x13455)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x13455))+((r01*x13456))+(((-1.0)*gconst17*r00*x13457)));
evalcond[3]=((((-1.0)*r00*x13445*x13455))+((r01*x13449))+((r01*x13443*x13450))+((r02*x13459))+((r00*x13453)));
evalcond[4]=((((-1.0)*r02*sj3*x13457))+(((-1.0)*r01*x13453*x13455))+((r00*x13443*x13449))+((r01*x13445))+((r00*x13450)));
evalcond[5]=(x13451+((cj1*sj2))+((sj3*x13447))+((r22*x13459))+(((-1.0)*r20*x13445*x13455))+((r21*x13449))+((x13446*x13458)));
evalcond[6]=(x13444+((r10*x13453))+((r12*x13459))+(((-1.0)*r10*x13445*x13455))+((r11*x13443*x13450))+(((-1.0)*x13454))+((r11*x13449)));
evalcond[7]=(x13444+((sj3*x13443*x13448))+(((-1.0)*sj3*x13446*x13455))+(((-1.0)*x13454))+((cj3*x13447))+((r21*x13445))+(((-1.0)*r22*sj3*x13457)));
evalcond[8]=(((r10*x13443*x13449))+((r10*x13450))+(((-1.0)*r11*x13453*x13455))+(((-1.0)*x13451))+(((-1.0)*r12*sj3*x13457))+(((-1.0)*sj2*x13452))+((r11*x13445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x13462 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13462.valid){
continue;
}
IkReal x13460=((1.0)*(x13462.value));
IkReal x13461=((-1.0)*px);
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13460)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13461);
rxp1_1=(px*r21);
rxp1_2=(r11*x13461);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13460)));
IkReal gconst16=((1.0)*r11);
IkReal gconst17=((-1.0)*r10);
j4eval[0]=1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13465 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13465.valid){
continue;
}
IkReal x13463=((1.0)*(x13465.value));
IkReal x13464=((-1.0)*px);
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13463)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13464);
rxp1_1=(px*r21);
rxp1_2=(r11*x13464);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13463)));
IkReal gconst16=((1.0)*r11);
IkReal gconst17=((-1.0)*r10);
IkReal x13466=((1.0)*cj3);
j4eval[0]=1.0;
j4eval[1]=(((r11*r21*x13466))+((r10*r20*x13466)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13469 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13469.valid){
continue;
}
IkReal x13467=((1.0)*(x13469.value));
IkReal x13468=((-1.0)*px);
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13467)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13468);
rxp1_1=(px*r21);
rxp1_2=(r11*x13468);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13467)));
IkReal gconst16=((1.0)*r11);
IkReal gconst17=((-1.0)*r10);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13471=IKPowWithIntegerCheck(r02,-1);
if(!x13471.valid){
continue;
}
IkReal x13470=x13471.value;
CheckValue<IkReal> x13472=IKPowWithIntegerCheck(sj3,-1);
if(!x13472.valid){
continue;
}
if( IKabs((x13470*(x13472.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*x13470)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x13470*(x13472.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr((sj0*x13470))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x13470*(x13472.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), (sj0*x13470));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13473=IKsin(j4);
IkReal x13474=IKcos(j4);
IkReal x13475=((1.0)*sj3);
IkReal x13476=(cj1*cj2);
IkReal x13477=(gconst16*r20);
IkReal x13478=(sj1*sj2);
IkReal x13479=((1.0)*gconst17);
IkReal x13480=(gconst17*sj3);
IkReal x13481=(gconst16*r11);
IkReal x13482=(cj3*r10);
IkReal x13483=(cj2*sj1);
IkReal x13484=(cj3*gconst17);
IkReal x13485=(cj1*sj2);
IkReal x13486=((1.0)*cj0);
IkReal x13487=(r02*x13473);
IkReal x13488=(r20*x13474);
IkReal x13489=(gconst16*r21*x13474);
evalcond[0]=(sj0+(((-1.0)*r02*x13474)));
evalcond[1]=(((gconst16*r21*x13473))+(((-1.0)*r20*x13473*x13479)));
evalcond[2]=(((cj0*x13483))+((cj0*x13485))+(((-1.0)*x13475*x13487)));
evalcond[3]=(((cj3*x13487))+(((-1.0)*x13478*x13486))+((cj0*x13476)));
evalcond[4]=((((-1.0)*x13486))+((x13473*x13481))+(((-1.0)*r10*x13473*x13479)));
evalcond[5]=(((sj3*x13477))+x13483+x13485+((cj3*x13489))+(((-1.0)*cj3*x13479*x13488))+((r21*x13480)));
evalcond[6]=(x13478+((x13480*x13488))+(((-1.0)*x13475*x13489))+(((-1.0)*x13476))+((cj3*x13477))+((r21*x13484)));
evalcond[7]=(((gconst16*x13482))+((r10*x13474*x13480))+((r11*x13484))+(((-1.0)*x13474*x13475*x13481))+((sj0*x13485))+((sj0*x13483)));
evalcond[8]=((((-1.0)*sj0*x13478))+(((-1.0)*x13474*x13479*x13482))+((sj0*x13476))+((cj3*x13474*x13481))+((r11*x13480))+((gconst16*r10*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13490=((1.0)*gconst17);
CheckValue<IkReal> x13491=IKPowWithIntegerCheck(((((-1.0)*r10*x13490))+((gconst16*r11))),-1);
if(!x13491.valid){
continue;
}
CheckValue<IkReal> x13492=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x13490))+((cj3*gconst16*r21))),-1);
if(!x13492.valid){
continue;
}
if( IKabs((cj0*(x13491.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13492.value)*(((((-1.0)*gconst16*r20*sj3))+(((-1.0)*r21*sj3*x13490))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*(x13491.value)))+IKsqr(((x13492.value)*(((((-1.0)*gconst16*r20*sj3))+(((-1.0)*r21*sj3*x13490))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*(x13491.value)), ((x13492.value)*(((((-1.0)*gconst16*r20*sj3))+(((-1.0)*r21*sj3*x13490))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13493=IKsin(j4);
IkReal x13494=IKcos(j4);
IkReal x13495=((1.0)*sj3);
IkReal x13496=(cj1*cj2);
IkReal x13497=(gconst16*r20);
IkReal x13498=(sj1*sj2);
IkReal x13499=((1.0)*gconst17);
IkReal x13500=(gconst17*sj3);
IkReal x13501=(gconst16*r11);
IkReal x13502=(cj3*r10);
IkReal x13503=(cj2*sj1);
IkReal x13504=(cj3*gconst17);
IkReal x13505=(cj1*sj2);
IkReal x13506=((1.0)*cj0);
IkReal x13507=(r02*x13493);
IkReal x13508=(r20*x13494);
IkReal x13509=(gconst16*r21*x13494);
evalcond[0]=(sj0+(((-1.0)*r02*x13494)));
evalcond[1]=((((-1.0)*r20*x13493*x13499))+((gconst16*r21*x13493)));
evalcond[2]=((((-1.0)*x13495*x13507))+((cj0*x13505))+((cj0*x13503)));
evalcond[3]=(((cj0*x13496))+(((-1.0)*x13498*x13506))+((cj3*x13507)));
evalcond[4]=((((-1.0)*r10*x13493*x13499))+((x13493*x13501))+(((-1.0)*x13506)));
evalcond[5]=(x13503+x13505+((sj3*x13497))+((cj3*x13509))+((r21*x13500))+(((-1.0)*cj3*x13499*x13508)));
evalcond[6]=(x13498+(((-1.0)*x13495*x13509))+(((-1.0)*x13496))+((cj3*x13497))+((x13500*x13508))+((r21*x13504)));
evalcond[7]=(((r10*x13494*x13500))+((r11*x13504))+((sj0*x13503))+((sj0*x13505))+(((-1.0)*x13494*x13495*x13501))+((gconst16*x13502)));
evalcond[8]=((((-1.0)*x13494*x13499*x13502))+((cj3*x13494*x13501))+((r11*x13500))+(((-1.0)*sj0*x13498))+((sj0*x13496))+((gconst16*r10*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13510=IKPowWithIntegerCheck(((((-1.0)*gconst17*r10))+((gconst16*r11))),-1);
if(!x13510.valid){
continue;
}
CheckValue<IkReal> x13511=IKPowWithIntegerCheck(r02,-1);
if(!x13511.valid){
continue;
}
if( IKabs((cj0*(x13510.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*(x13511.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*(x13510.value)))+IKsqr((sj0*(x13511.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*(x13510.value)), (sj0*(x13511.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13512=IKsin(j4);
IkReal x13513=IKcos(j4);
IkReal x13514=((1.0)*sj3);
IkReal x13515=(cj1*cj2);
IkReal x13516=(gconst16*r20);
IkReal x13517=(sj1*sj2);
IkReal x13518=((1.0)*gconst17);
IkReal x13519=(gconst17*sj3);
IkReal x13520=(gconst16*r11);
IkReal x13521=(cj3*r10);
IkReal x13522=(cj2*sj1);
IkReal x13523=(cj3*gconst17);
IkReal x13524=(cj1*sj2);
IkReal x13525=((1.0)*cj0);
IkReal x13526=(r02*x13512);
IkReal x13527=(r20*x13513);
IkReal x13528=(gconst16*r21*x13513);
evalcond[0]=(sj0+(((-1.0)*r02*x13513)));
evalcond[1]=((((-1.0)*r20*x13512*x13518))+((gconst16*r21*x13512)));
evalcond[2]=(((cj0*x13522))+((cj0*x13524))+(((-1.0)*x13514*x13526)));
evalcond[3]=(((cj0*x13515))+((cj3*x13526))+(((-1.0)*x13517*x13525)));
evalcond[4]=(((x13512*x13520))+(((-1.0)*r10*x13512*x13518))+(((-1.0)*x13525)));
evalcond[5]=(((r21*x13519))+x13522+x13524+(((-1.0)*cj3*x13518*x13527))+((cj3*x13528))+((sj3*x13516)));
evalcond[6]=(((r21*x13523))+x13517+(((-1.0)*x13515))+((x13519*x13527))+((cj3*x13516))+(((-1.0)*x13514*x13528)));
evalcond[7]=(((gconst16*x13521))+((r10*x13513*x13519))+((r11*x13523))+(((-1.0)*x13513*x13514*x13520))+((sj0*x13522))+((sj0*x13524)));
evalcond[8]=((((-1.0)*sj0*x13517))+((cj3*x13513*x13520))+((r11*x13519))+((sj0*x13515))+((gconst16*r10*sj3))+(((-1.0)*x13513*x13518*x13521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13531 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x13531.valid){
continue;
}
IkReal x13529=((1.0)*(x13531.value));
IkReal x13530=x13255;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x13529)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13529)));
IkReal gconst16=((1.0)*r11*x13530);
IkReal gconst17=((-1.0)*r10*x13530);
IkReal x13532=r12*r12;
IkReal x13533=(cj0*r02);
IkReal x13534=x13255;
IkReal x13535=(sj0*x13534);
j4eval[0]=((IKabs((x13533+((r12*sj0)))))+(IKabs(((((-1.0)*x13535))+((r12*x13533*x13534))+((x13532*x13535))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13536=((1.0)*r02);
IkReal x13537=(sj1*sj2);
IkReal x13538=(cj1*cj2);
IkReal x13539=(gconst16*sj3);
IkReal x13540=(gconst17*r20);
IkReal x13541=((1.0)*sj3);
IkReal x13542=((1.0)*r21);
IkReal x13543=(gconst17*r21);
IkReal x13544=(cj3*gconst16*r20);
CheckValue<IkReal> x13545=IKPowWithIntegerCheck((((r01*x13539*x13540))+((r00*x13539*x13543))+(((-1.0)*gconst16*r01*x13539*x13542))+(((-1.0)*gconst17*r00*x13540*x13541))),-1);
if(!x13545.valid){
continue;
}
CheckValue<IkReal> x13546=IKPowWithIntegerCheck(((((-1.0)*x13539*x13542))+((sj3*x13540))),-1);
if(!x13546.valid){
continue;
}
if( IKabs(((x13545.value)*((((r21*sj0*x13539))+(((-1.0)*x13536*x13544))+((r02*x13538))+(((-1.0)*cj3*x13536*x13543))+(((-1.0)*sj0*x13540*x13541))+(((-1.0)*x13536*x13537)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13546.value)*((x13538+(((-1.0)*cj3*gconst17*x13542))+(((-1.0)*x13537))+(((-1.0)*x13544)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13545.value)*((((r21*sj0*x13539))+(((-1.0)*x13536*x13544))+((r02*x13538))+(((-1.0)*cj3*x13536*x13543))+(((-1.0)*sj0*x13540*x13541))+(((-1.0)*x13536*x13537))))))+IKsqr(((x13546.value)*((x13538+(((-1.0)*cj3*gconst17*x13542))+(((-1.0)*x13537))+(((-1.0)*x13544))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13545.value)*((((r21*sj0*x13539))+(((-1.0)*x13536*x13544))+((r02*x13538))+(((-1.0)*cj3*x13536*x13543))+(((-1.0)*sj0*x13540*x13541))+(((-1.0)*x13536*x13537))))), ((x13546.value)*((x13538+(((-1.0)*cj3*gconst17*x13542))+(((-1.0)*x13537))+(((-1.0)*x13544))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13547=IKsin(j4);
IkReal x13548=IKcos(j4);
IkReal x13549=((1.0)*gconst17);
IkReal x13550=(gconst17*sj3);
IkReal x13551=(gconst16*r21);
IkReal x13552=(cj3*gconst17);
IkReal x13553=(sj1*sj2);
IkReal x13554=(cj1*cj2);
IkReal x13555=(gconst16*sj3);
IkReal x13556=(cj3*gconst16);
IkReal x13557=(cj2*sj1);
IkReal x13558=(cj1*sj2);
IkReal x13559=((1.0)*sj3);
IkReal x13560=((1.0)*cj0);
IkReal x13561=(cj3*x13548);
IkReal x13562=(gconst16*x13547);
IkReal x13563=((1.0)*x13548);
IkReal x13564=(r02*x13547);
IkReal x13565=(r12*x13547);
evalcond[0]=((((-1.0)*r20*x13547*x13549))+((x13547*x13551)));
evalcond[1]=(sj0+((r01*x13562))+(((-1.0)*r02*x13563))+(((-1.0)*r00*x13547*x13549)));
evalcond[2]=(((r11*x13562))+(((-1.0)*r12*x13563))+(((-1.0)*r10*x13547*x13549))+(((-1.0)*x13560)));
evalcond[3]=(x13558+x13557+((r21*x13550))+(((-1.0)*r20*x13549*x13561))+((r20*x13555))+((x13551*x13561)));
evalcond[4]=(x13553+((r21*x13552))+((r20*x13548*x13550))+(((-1.0)*x13548*x13551*x13559))+((r20*x13556))+(((-1.0)*x13554)));
evalcond[5]=(((r00*x13556))+((r01*x13552))+((cj0*x13557))+((cj0*x13558))+((r00*x13548*x13550))+(((-1.0)*x13559*x13564))+(((-1.0)*r01*x13555*x13563)));
evalcond[6]=(((r01*x13548*x13556))+(((-1.0)*r00*x13549*x13561))+((r00*x13555))+((r01*x13550))+(((-1.0)*x13553*x13560))+((cj3*x13564))+((cj0*x13554)));
evalcond[7]=(((sj0*x13558))+((sj0*x13557))+((r10*x13556))+((r11*x13552))+((r10*x13548*x13550))+(((-1.0)*x13559*x13565))+(((-1.0)*r11*x13555*x13563)));
evalcond[8]=((((-1.0)*r10*x13549*x13561))+((sj0*x13554))+((r10*x13555))+((r11*x13550))+((cj3*x13565))+(((-1.0)*sj0*x13553))+((r11*x13548*x13556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13566=((1.0)*gconst17);
CheckValue<IkReal> x13567=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x13566)))),-1);
if(!x13567.valid){
continue;
}
CheckValue<IkReal> x13568 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x13566))+((gconst16*r11*sj0))+((cj0*gconst16*r01))+(((-1.0)*cj0*r00*x13566)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13567.value)))+(x13568.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13569=IKsin(j4);
IkReal x13570=IKcos(j4);
IkReal x13571=((1.0)*gconst17);
IkReal x13572=(gconst17*sj3);
IkReal x13573=(gconst16*r21);
IkReal x13574=(cj3*gconst17);
IkReal x13575=(sj1*sj2);
IkReal x13576=(cj1*cj2);
IkReal x13577=(gconst16*sj3);
IkReal x13578=(cj3*gconst16);
IkReal x13579=(cj2*sj1);
IkReal x13580=(cj1*sj2);
IkReal x13581=((1.0)*sj3);
IkReal x13582=((1.0)*cj0);
IkReal x13583=(cj3*x13570);
IkReal x13584=(gconst16*x13569);
IkReal x13585=((1.0)*x13570);
IkReal x13586=(r02*x13569);
IkReal x13587=(r12*x13569);
evalcond[0]=((((-1.0)*r20*x13569*x13571))+((x13569*x13573)));
evalcond[1]=(sj0+(((-1.0)*r02*x13585))+((r01*x13584))+(((-1.0)*r00*x13569*x13571)));
evalcond[2]=((((-1.0)*r12*x13585))+(((-1.0)*x13582))+(((-1.0)*r10*x13569*x13571))+((r11*x13584)));
evalcond[3]=(x13579+x13580+((r20*x13577))+(((-1.0)*r20*x13571*x13583))+((r21*x13572))+((x13573*x13583)));
evalcond[4]=(x13575+((r20*x13578))+(((-1.0)*x13570*x13573*x13581))+((r21*x13574))+(((-1.0)*x13576))+((r20*x13570*x13572)));
evalcond[5]=(((r00*x13578))+((cj0*x13580))+((r00*x13570*x13572))+((cj0*x13579))+(((-1.0)*x13581*x13586))+(((-1.0)*r01*x13577*x13585))+((r01*x13574)));
evalcond[6]=(((r00*x13577))+(((-1.0)*r00*x13571*x13583))+((cj0*x13576))+((r01*x13570*x13578))+(((-1.0)*x13575*x13582))+((cj3*x13586))+((r01*x13572)));
evalcond[7]=((((-1.0)*r11*x13577*x13585))+((r10*x13578))+((sj0*x13580))+(((-1.0)*x13581*x13587))+((sj0*x13579))+((r11*x13574))+((r10*x13570*x13572)));
evalcond[8]=((((-1.0)*r10*x13571*x13583))+((r10*x13577))+(((-1.0)*sj0*x13575))+((sj0*x13576))+((r11*x13570*x13578))+((cj3*x13587))+((r11*x13572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13588=r21*r21;
IkReal x13589=gconst16*gconst16;
IkReal x13590=r20*r20;
IkReal x13591=gconst17*gconst17;
IkReal x13592=(gconst16*r21);
IkReal x13593=(cj1*sj2);
IkReal x13594=(cj2*sj1);
IkReal x13595=(gconst17*r20);
IkReal x13596=(gconst16*sj3);
IkReal x13597=(r21*sj3);
IkReal x13598=((1.0)*cj3);
CheckValue<IkReal> x13599 = IKatan2WithCheck(IkReal((((r22*x13594))+((r22*x13593))+((r20*r22*x13596))+((gconst17*r22*x13597)))),IkReal(((((-1.0)*gconst17*x13590*x13596))+(((-1.0)*x13593*x13595))+(((-1.0)*r20*x13591*x13597))+((x13592*x13593))+((x13592*x13594))+(((-1.0)*x13594*x13595))+((r20*x13589*x13597))+((gconst17*x13588*x13596)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13599.valid){
continue;
}
CheckValue<IkReal> x13600=IKPowWithIntegerCheck(IKsign(((((2.0)*cj3*x13592*x13595))+(((-1.0)*x13598*(r22*r22)))+(((-1.0)*x13588*x13589*x13598))+(((-1.0)*x13590*x13591*x13598)))),-1);
if(!x13600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13599.value)+(((1.5707963267949)*(x13600.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13601=IKsin(j4);
IkReal x13602=IKcos(j4);
IkReal x13603=(cj3*gconst17);
IkReal x13604=(gconst16*r21);
IkReal x13605=(gconst17*sj3);
IkReal x13606=(gconst16*r20);
IkReal x13607=(sj1*sj2);
IkReal x13608=(cj1*cj2);
IkReal x13609=(gconst16*r10);
IkReal x13610=(cj2*sj1);
IkReal x13611=(gconst16*sj3);
IkReal x13612=(cj1*sj2);
IkReal x13613=((1.0)*cj0);
IkReal x13614=((1.0)*x13602);
IkReal x13615=(gconst16*x13601);
IkReal x13616=(cj3*x13602);
IkReal x13617=(cj3*x13601);
IkReal x13618=((1.0)*gconst17*x13601);
IkReal x13619=((1.0)*sj3*x13601);
evalcond[0]=(((x13601*x13604))+(((-1.0)*r20*x13618))+(((-1.0)*r22*x13614)));
evalcond[1]=(sj0+(((-1.0)*r02*x13614))+((r01*x13615))+(((-1.0)*r00*x13618)));
evalcond[2]=((((-1.0)*x13613))+(((-1.0)*r10*x13618))+((r11*x13615))+(((-1.0)*r12*x13614)));
evalcond[3]=(x13612+x13610+(((-1.0)*r20*x13603*x13614))+((sj3*x13606))+((r21*x13605))+((x13604*x13616))+((r22*x13617)));
evalcond[4]=((((-1.0)*x13608))+x13607+((r21*x13603))+((cj3*x13606))+((r20*x13602*x13605))+(((-1.0)*sj3*x13604*x13614))+(((-1.0)*r22*x13619)));
evalcond[5]=((((-1.0)*r01*x13611*x13614))+(((-1.0)*r02*x13619))+((cj0*x13612))+((cj0*x13610))+((cj3*gconst16*r00))+((r01*x13603))+((r00*x13602*x13605)));
evalcond[6]=(((gconst16*r01*x13616))+((cj0*x13608))+((r00*x13611))+(((-1.0)*x13607*x13613))+(((-1.0)*r00*x13603*x13614))+((r02*x13617))+((r01*x13605)));
evalcond[7]=(((r11*x13603))+((r10*x13602*x13605))+((cj3*x13609))+(((-1.0)*r12*x13619))+((sj0*x13612))+((sj0*x13610))+(((-1.0)*r11*x13611*x13614)));
evalcond[8]=(((r11*x13605))+(((-1.0)*sj0*x13607))+((gconst16*r11*x13616))+((sj0*x13608))+((sj3*x13609))+((r12*x13617))+(((-1.0)*r10*x13603*x13614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13620=((1.0)*gconst17);
CheckValue<IkReal> x13621 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst16*r11*sj0))+((cj0*gconst16*r01))+(((-1.0)*cj0*r00*x13620))+(((-1.0)*r10*sj0*x13620)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13621.valid){
continue;
}
CheckValue<IkReal> x13622=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x13620)))),-1);
if(!x13622.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13621.value)+(((1.5707963267949)*(x13622.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13623=IKsin(j4);
IkReal x13624=IKcos(j4);
IkReal x13625=(cj3*gconst17);
IkReal x13626=(gconst16*r21);
IkReal x13627=(gconst17*sj3);
IkReal x13628=(gconst16*r20);
IkReal x13629=(sj1*sj2);
IkReal x13630=(cj1*cj2);
IkReal x13631=(gconst16*r10);
IkReal x13632=(cj2*sj1);
IkReal x13633=(gconst16*sj3);
IkReal x13634=(cj1*sj2);
IkReal x13635=((1.0)*cj0);
IkReal x13636=((1.0)*x13624);
IkReal x13637=(gconst16*x13623);
IkReal x13638=(cj3*x13624);
IkReal x13639=(cj3*x13623);
IkReal x13640=((1.0)*gconst17*x13623);
IkReal x13641=((1.0)*sj3*x13623);
evalcond[0]=(((x13623*x13626))+(((-1.0)*r22*x13636))+(((-1.0)*r20*x13640)));
evalcond[1]=((((-1.0)*r02*x13636))+sj0+(((-1.0)*r00*x13640))+((r01*x13637)));
evalcond[2]=(((r11*x13637))+(((-1.0)*r10*x13640))+(((-1.0)*r12*x13636))+(((-1.0)*x13635)));
evalcond[3]=(x13634+x13632+((r22*x13639))+((r21*x13627))+((sj3*x13628))+(((-1.0)*r20*x13625*x13636))+((x13626*x13638)));
evalcond[4]=((((-1.0)*x13630))+x13629+((r21*x13625))+(((-1.0)*sj3*x13626*x13636))+((r20*x13624*x13627))+((cj3*x13628))+(((-1.0)*r22*x13641)));
evalcond[5]=((((-1.0)*r01*x13633*x13636))+((cj0*x13634))+((cj0*x13632))+((r00*x13624*x13627))+((r01*x13625))+(((-1.0)*r02*x13641))+((cj3*gconst16*r00)));
evalcond[6]=((((-1.0)*r00*x13625*x13636))+((cj0*x13630))+((r02*x13639))+(((-1.0)*x13629*x13635))+((gconst16*r01*x13638))+((r01*x13627))+((r00*x13633)));
evalcond[7]=((((-1.0)*r12*x13641))+((r11*x13625))+((r10*x13624*x13627))+(((-1.0)*r11*x13633*x13636))+((sj0*x13632))+((sj0*x13634))+((cj3*x13631)));
evalcond[8]=((((-1.0)*r10*x13625*x13636))+(((-1.0)*sj0*x13629))+((r11*x13627))+((r12*x13639))+((sj0*x13630))+((gconst16*r11*x13638))+((sj3*x13631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13642=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x13642.valid){
continue;
}
CheckValue<IkReal> x13643 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13642.value)))+(x13643.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13644=IKsin(j4);
IkReal x13645=IKcos(j4);
IkReal x13646=(cj3*gconst17);
IkReal x13647=(gconst16*r21);
IkReal x13648=(gconst17*sj3);
IkReal x13649=(gconst16*r20);
IkReal x13650=(sj1*sj2);
IkReal x13651=(cj1*cj2);
IkReal x13652=(gconst16*r10);
IkReal x13653=(cj2*sj1);
IkReal x13654=(gconst16*sj3);
IkReal x13655=(cj1*sj2);
IkReal x13656=((1.0)*cj0);
IkReal x13657=((1.0)*x13645);
IkReal x13658=(gconst16*x13644);
IkReal x13659=(cj3*x13645);
IkReal x13660=(cj3*x13644);
IkReal x13661=((1.0)*gconst17*x13644);
IkReal x13662=((1.0)*sj3*x13644);
evalcond[0]=((((-1.0)*r22*x13657))+((x13644*x13647))+(((-1.0)*r20*x13661)));
evalcond[1]=(sj0+((r01*x13658))+(((-1.0)*r02*x13657))+(((-1.0)*r00*x13661)));
evalcond[2]=((((-1.0)*r12*x13657))+((r11*x13658))+(((-1.0)*x13656))+(((-1.0)*r10*x13661)));
evalcond[3]=(x13653+x13655+((r22*x13660))+((sj3*x13649))+(((-1.0)*r20*x13646*x13657))+((x13647*x13659))+((r21*x13648)));
evalcond[4]=((((-1.0)*r22*x13662))+x13650+(((-1.0)*x13651))+(((-1.0)*sj3*x13647*x13657))+((r21*x13646))+((r20*x13645*x13648))+((cj3*x13649)));
evalcond[5]=(((r00*x13645*x13648))+((cj0*x13653))+((cj0*x13655))+(((-1.0)*r02*x13662))+(((-1.0)*r01*x13654*x13657))+((r01*x13646))+((cj3*gconst16*r00)));
evalcond[6]=((((-1.0)*r00*x13646*x13657))+((r00*x13654))+((r02*x13660))+((cj0*x13651))+((r01*x13648))+(((-1.0)*x13650*x13656))+((gconst16*r01*x13659)));
evalcond[7]=(((r10*x13645*x13648))+((r11*x13646))+(((-1.0)*r12*x13662))+((sj0*x13655))+((sj0*x13653))+((cj3*x13652))+(((-1.0)*r11*x13654*x13657)));
evalcond[8]=(((gconst16*r11*x13659))+((r11*x13648))+((sj0*x13651))+((r12*x13660))+(((-1.0)*r10*x13646*x13657))+((sj3*x13652))+(((-1.0)*sj0*x13650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x13663=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13663;
j4eval[1]=IKsign(x13663);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x13664=((1.0)*cj5);
IkReal x13665=((((-1.0)*r21*x13664))+(((-1.0)*r20*sj5)));
j4eval[0]=x13665;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13664))))));
j4eval[2]=IKsign(x13665);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x13666=cj5*cj5;
IkReal x13667=(cj3*r21);
IkReal x13668=(cj5*sj5);
IkReal x13669=((1.0)*cj3);
IkReal x13670=(((cj3*r11*r20*x13668))+((r11*x13666*x13667))+(((-1.0)*r10*r20*x13666*x13669))+(((-1.0)*r12*r22*x13669))+((r10*x13667*x13668))+(((-1.0)*r11*x13667)));
j4eval[0]=x13670;
j4eval[1]=IKsign(x13670);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13671=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13671;
j4eval[1]=IKsign(x13671);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13672=((1.0)*cj5);
IkReal x13673=((((-1.0)*r21*x13672))+(((-1.0)*r20*sj5)));
j4eval[0]=x13673;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13672))))));
j4eval[2]=IKsign(x13673);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13674=cj5*cj5;
IkReal x13675=r11*r11;
IkReal x13676=(cj5*r10);
IkReal x13677=(r11*sj5);
IkReal x13678=((((2.0)*x13676*x13677))+(((-1.0)*(r12*r12)))+(((-1.0)*x13675))+((x13674*x13675))+(((-1.0)*x13674*(r10*r10))));
j4eval[0]=x13678;
j4eval[1]=((IKabs(r12))+(IKabs((x13676+(((-1.0)*x13677))))));
j4eval[2]=IKsign(x13678);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13679=cj5*cj5;
IkReal x13680=r11*r11;
IkReal x13681=(cj5*r10);
IkReal x13682=(r11*sj5);
CheckValue<IkReal> x13683=IKPowWithIntegerCheck(IKsign((((x13679*x13680))+(((-1.0)*x13679*(r10*r10)))+(((-1.0)*x13680))+(((-1.0)*(r12*r12)))+(((2.0)*x13681*x13682)))),-1);
if(!x13683.valid){
continue;
}
CheckValue<IkReal> x13684 = IKatan2WithCheck(IkReal((x13681+(((-1.0)*x13682)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13683.value)))+(x13684.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13685=IKsin(j4);
IkReal x13686=IKcos(j4);
IkReal x13687=(cj5*r10);
IkReal x13688=(r01*sj5);
IkReal x13689=(cj5*r00);
IkReal x13690=(cj5*r20);
IkReal x13691=((1.0)*x13686);
IkReal x13692=((1.0)*x13685);
IkReal x13693=(sj5*x13685);
evalcond[0]=((((-1.0)*x13690*x13692))+((r21*x13693))+(((-1.0)*r22*x13691)));
evalcond[1]=((((-1.0)*r02*x13691))+((x13685*x13688))+(((-1.0)*x13689*x13692)));
evalcond[2]=(((x13686*x13687))+(((-1.0)*r11*sj5*x13691))+(((-1.0)*r12*x13692)));
evalcond[3]=((-1.0)+(((-1.0)*x13687*x13692))+((r11*x13693))+(((-1.0)*r12*x13691)));
evalcond[4]=(((cj2*sj1))+((x13686*x13689))+(((-1.0)*r02*x13692))+((cj1*sj2))+(((-1.0)*x13688*x13691)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13692))+((x13686*x13690))+(((-1.0)*r21*sj5*x13691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13694=((1.0)*cj5);
CheckValue<IkReal> x13695 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13694)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13695.valid){
continue;
}
CheckValue<IkReal> x13696=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13694))+(((-1.0)*r20*sj5)))),-1);
if(!x13696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13695.value)+(((1.5707963267949)*(x13696.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13697=IKsin(j4);
IkReal x13698=IKcos(j4);
IkReal x13699=(cj5*r10);
IkReal x13700=(r01*sj5);
IkReal x13701=(cj5*r00);
IkReal x13702=(cj5*r20);
IkReal x13703=((1.0)*x13698);
IkReal x13704=((1.0)*x13697);
IkReal x13705=(sj5*x13697);
evalcond[0]=((((-1.0)*x13702*x13704))+(((-1.0)*r22*x13703))+((r21*x13705)));
evalcond[1]=(((x13697*x13700))+(((-1.0)*x13701*x13704))+(((-1.0)*r02*x13703)));
evalcond[2]=(((x13698*x13699))+(((-1.0)*r12*x13704))+(((-1.0)*r11*sj5*x13703)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13703))+(((-1.0)*x13699*x13704))+((r11*x13705)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13700*x13703))+((cj1*sj2))+(((-1.0)*r02*x13704))+((x13698*x13701)));
evalcond[5]=((((-1.0)*r22*x13704))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x13703))+((x13698*x13702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13706 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13706.valid){
continue;
}
CheckValue<IkReal> x13707=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13706.value)+(((1.5707963267949)*(x13707.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13708=IKsin(j4);
IkReal x13709=IKcos(j4);
IkReal x13710=(cj5*r10);
IkReal x13711=(r01*sj5);
IkReal x13712=(cj5*r00);
IkReal x13713=(cj5*r20);
IkReal x13714=((1.0)*x13709);
IkReal x13715=((1.0)*x13708);
IkReal x13716=(sj5*x13708);
evalcond[0]=((((-1.0)*x13713*x13715))+((r21*x13716))+(((-1.0)*r22*x13714)));
evalcond[1]=(((x13708*x13711))+(((-1.0)*r02*x13714))+(((-1.0)*x13712*x13715)));
evalcond[2]=((((-1.0)*r12*x13715))+(((-1.0)*r11*sj5*x13714))+((x13709*x13710)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13714))+((r11*x13716))+(((-1.0)*x13710*x13715)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x13715))+((x13709*x13712))+(((-1.0)*x13711*x13714)));
evalcond[5]=((((-1.0)*r22*x13715))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x13714))+((x13709*x13713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13717=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13717;
j4eval[1]=IKsign(x13717);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13718=((1.0)*cj5);
IkReal x13719=((((-1.0)*r21*x13718))+(((-1.0)*r20*sj5)));
j4eval[0]=x13719;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13718))))));
j4eval[2]=IKsign(x13719);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13720=cj5*cj5;
IkReal x13721=r11*r11;
IkReal x13722=(r11*sj5);
IkReal x13723=(cj5*r10);
IkReal x13724=((r12*r12)+x13721+(((-1.0)*x13720*x13721))+(((-2.0)*x13722*x13723))+((x13720*(r10*r10))));
j4eval[0]=x13724;
j4eval[1]=IKsign(x13724);
j4eval[2]=((IKabs(r12))+(IKabs((x13722+(((-1.0)*x13723))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13725=cj5*cj5;
IkReal x13726=r11*r11;
IkReal x13727=(cj5*r10);
IkReal x13728=(r11*sj5);
CheckValue<IkReal> x13729=IKPowWithIntegerCheck(IKsign(((r12*r12)+x13726+(((-1.0)*x13725*x13726))+(((-2.0)*x13727*x13728))+((x13725*(r10*r10))))),-1);
if(!x13729.valid){
continue;
}
CheckValue<IkReal> x13730 = IKatan2WithCheck(IkReal((x13728+(((-1.0)*x13727)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13729.value)))+(x13730.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13731=IKcos(j4);
IkReal x13732=IKsin(j4);
IkReal x13733=(cj5*r00);
IkReal x13734=(cj5*r10);
IkReal x13735=(r21*sj5);
IkReal x13736=(cj5*r20);
IkReal x13737=((1.0)*x13731);
IkReal x13738=((1.0)*x13732);
IkReal x13739=(sj5*x13732);
IkReal x13740=(sj5*x13731);
evalcond[0]=((((-1.0)*x13734*x13737))+((r12*x13732))+((r11*x13740)));
evalcond[1]=((((-1.0)*r22*x13737))+(((-1.0)*x13736*x13738))+((x13732*x13735)));
evalcond[2]=((((-1.0)*x13733*x13738))+(((-1.0)*r02*x13737))+((r01*x13739)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13737))+(((-1.0)*x13734*x13738))+((r11*x13739)));
evalcond[4]=((((-1.0)*x13733*x13737))+((cj2*sj1))+((r01*x13740))+((cj1*sj2))+((r02*x13732)));
evalcond[5]=(((r22*x13732))+((x13731*x13735))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13736*x13737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13741=((1.0)*cj5);
CheckValue<IkReal> x13742 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13741)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13742.valid){
continue;
}
CheckValue<IkReal> x13743=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13741))+(((-1.0)*r20*sj5)))),-1);
if(!x13743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13742.value)+(((1.5707963267949)*(x13743.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13744=IKcos(j4);
IkReal x13745=IKsin(j4);
IkReal x13746=(cj5*r00);
IkReal x13747=(cj5*r10);
IkReal x13748=(r21*sj5);
IkReal x13749=(cj5*r20);
IkReal x13750=((1.0)*x13744);
IkReal x13751=((1.0)*x13745);
IkReal x13752=(sj5*x13745);
IkReal x13753=(sj5*x13744);
evalcond[0]=(((r11*x13753))+(((-1.0)*x13747*x13750))+((r12*x13745)));
evalcond[1]=(((x13745*x13748))+(((-1.0)*r22*x13750))+(((-1.0)*x13749*x13751)));
evalcond[2]=((((-1.0)*x13746*x13751))+((r01*x13752))+(((-1.0)*r02*x13750)));
evalcond[3]=((-1.0)+((r11*x13752))+(((-1.0)*x13747*x13751))+(((-1.0)*r12*x13750)));
evalcond[4]=((((-1.0)*x13746*x13750))+((cj2*sj1))+((cj1*sj2))+((r02*x13745))+((r01*x13753)));
evalcond[5]=(((x13744*x13748))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x13745))+(((-1.0)*x13749*x13750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13754 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13754.valid){
continue;
}
CheckValue<IkReal> x13755=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13754.value)+(((1.5707963267949)*(x13755.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13756=IKcos(j4);
IkReal x13757=IKsin(j4);
IkReal x13758=(cj5*r00);
IkReal x13759=(cj5*r10);
IkReal x13760=(r21*sj5);
IkReal x13761=(cj5*r20);
IkReal x13762=((1.0)*x13756);
IkReal x13763=((1.0)*x13757);
IkReal x13764=(sj5*x13757);
IkReal x13765=(sj5*x13756);
evalcond[0]=(((r11*x13765))+((r12*x13757))+(((-1.0)*x13759*x13762)));
evalcond[1]=(((x13757*x13760))+(((-1.0)*r22*x13762))+(((-1.0)*x13761*x13763)));
evalcond[2]=((((-1.0)*x13758*x13763))+((r01*x13764))+(((-1.0)*r02*x13762)));
evalcond[3]=((-1.0)+((r11*x13764))+(((-1.0)*x13759*x13763))+(((-1.0)*r12*x13762)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13758*x13762))+((cj1*sj2))+((r02*x13757))+((r01*x13765)));
evalcond[5]=(((r22*x13757))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13756*x13760))+(((-1.0)*x13761*x13762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13766=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13766);
rxp1_1=(px*r21);
rxp1_2=(r11*x13766);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13767=(cj5*r10);
IkReal x13768=(r11*sj5);
j4eval[0]=((((-1.0)*x13767))+x13768);
j4eval[1]=(((sj3*x13767))+(((-1.0)*sj3*x13768)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13769=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13769);
rxp1_1=(px*r21);
rxp1_2=(r11*x13769);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13770=(r11*sj5);
IkReal x13771=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x13771))+x13770);
j4eval[1]=((((-1.0)*cj3*x13771))+((cj3*x13770)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13772=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13772);
rxp1_1=(px*r21);
rxp1_2=(r11*x13772);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13773=((1.0)*r11);
CheckValue<IkReal> x13774=IKPowWithIntegerCheck(r02,-1);
if(!x13774.valid){
continue;
}
CheckValue<IkReal> x13775=IKPowWithIntegerCheck(sj3,-1);
if(!x13775.valid){
continue;
}
CheckValue<IkReal> x13776=IKPowWithIntegerCheck((((cj5*r10*sj3))+(((-1.0)*sj3*sj5*x13773))),-1);
if(!x13776.valid){
continue;
}
if( IKabs(((x13774.value)*(x13775.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13776.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13773)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13774.value)*(x13775.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13776.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13773))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13774.value)*(x13775.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13776.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13773))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13777=IKsin(j4);
IkReal x13778=IKcos(j4);
IkReal x13779=(cj2*sj1);
IkReal x13780=(cj1*sj2);
IkReal x13781=(cj5*r10);
IkReal x13782=(sj1*sj2);
IkReal x13783=(cj5*sj3);
IkReal x13784=(r11*sj5);
IkReal x13785=(cj3*sj5);
IkReal x13786=(r21*sj5);
IkReal x13787=(cj1*cj2);
IkReal x13788=(cj3*cj5);
IkReal x13789=(sj3*sj5);
IkReal x13790=((1.0)*x13777);
IkReal x13791=(r20*x13778);
IkReal x13792=(cj3*x13778);
IkReal x13793=(sj3*x13778);
IkReal x13794=(x13779+x13780);
evalcond[0]=((-1.0)*r02*x13778);
evalcond[1]=(((x13777*x13786))+(((-1.0)*cj5*r20*x13790)));
evalcond[2]=(x13794+(((-1.0)*r02*sj3*x13790)));
evalcond[3]=(x13787+((cj3*r02*x13777))+(((-1.0)*x13782)));
evalcond[4]=((-1.0)+((x13777*x13784))+(((-1.0)*x13781*x13790)));
evalcond[5]=((((-1.0)*x13784*x13793))+((x13781*x13793))+((r11*x13788))+((r10*x13785)));
evalcond[6]=(((x13784*x13792))+(((-1.0)*x13781*x13792))+((r11*x13783))+((r10*x13789)));
evalcond[7]=(x13794+((r21*x13778*x13785))+((r21*x13783))+(((-1.0)*x13788*x13791))+((r20*x13789)));
evalcond[8]=(x13782+((x13783*x13791))+(((-1.0)*x13787))+((r21*x13788))+((r20*x13785))+(((-1.0)*x13786*x13793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13795=((1.0)*r10);
IkReal x13796=(r11*sj5);
CheckValue<IkReal> x13797=IKPowWithIntegerCheck((x13796+(((-1.0)*cj5*x13795))),-1);
if(!x13797.valid){
continue;
}
CheckValue<IkReal> x13798=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13795))+((cj3*x13796))),-1);
if(!x13798.valid){
continue;
}
if( IKabs(x13797.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13798.value)*(((((-1.0)*sj3*sj5*x13795))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13797.value)+IKsqr(((x13798.value)*(((((-1.0)*sj3*sj5*x13795))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13797.value, ((x13798.value)*(((((-1.0)*sj3*sj5*x13795))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13799=IKsin(j4);
IkReal x13800=IKcos(j4);
IkReal x13801=(cj2*sj1);
IkReal x13802=(cj1*sj2);
IkReal x13803=(cj5*r10);
IkReal x13804=(sj1*sj2);
IkReal x13805=(cj5*sj3);
IkReal x13806=(r11*sj5);
IkReal x13807=(cj3*sj5);
IkReal x13808=(r21*sj5);
IkReal x13809=(cj1*cj2);
IkReal x13810=(cj3*cj5);
IkReal x13811=(sj3*sj5);
IkReal x13812=((1.0)*x13799);
IkReal x13813=(r20*x13800);
IkReal x13814=(cj3*x13800);
IkReal x13815=(sj3*x13800);
IkReal x13816=(x13802+x13801);
evalcond[0]=((-1.0)*r02*x13800);
evalcond[1]=((((-1.0)*cj5*r20*x13812))+((x13799*x13808)));
evalcond[2]=(x13816+(((-1.0)*r02*sj3*x13812)));
evalcond[3]=(x13809+(((-1.0)*x13804))+((cj3*r02*x13799)));
evalcond[4]=((-1.0)+((x13799*x13806))+(((-1.0)*x13803*x13812)));
evalcond[5]=(((r11*x13810))+((x13803*x13815))+(((-1.0)*x13806*x13815))+((r10*x13807)));
evalcond[6]=(((r10*x13811))+(((-1.0)*x13803*x13814))+((r11*x13805))+((x13806*x13814)));
evalcond[7]=(((r21*x13805))+x13816+(((-1.0)*x13810*x13813))+((r20*x13811))+((r21*x13800*x13807)));
evalcond[8]=((((-1.0)*x13808*x13815))+x13804+((r21*x13810))+(((-1.0)*x13809))+((r20*x13807))+((x13805*x13813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13817=(cj5*r10);
IkReal x13818=((1.0)*r11);
CheckValue<IkReal> x13819=IKPowWithIntegerCheck(((((-1.0)*x13817))+((r11*sj5))),-1);
if(!x13819.valid){
continue;
}
CheckValue<IkReal> x13820=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x13818))+((sj3*x13817))),-1);
if(!x13820.valid){
continue;
}
if( IKabs(x13819.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13820.value)*(((((-1.0)*cj3*cj5*x13818))+(((-1.0)*cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13819.value)+IKsqr(((x13820.value)*(((((-1.0)*cj3*cj5*x13818))+(((-1.0)*cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13819.value, ((x13820.value)*(((((-1.0)*cj3*cj5*x13818))+(((-1.0)*cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13821=IKsin(j4);
IkReal x13822=IKcos(j4);
IkReal x13823=(cj2*sj1);
IkReal x13824=(cj1*sj2);
IkReal x13825=(cj5*r10);
IkReal x13826=(sj1*sj2);
IkReal x13827=(cj5*sj3);
IkReal x13828=(r11*sj5);
IkReal x13829=(cj3*sj5);
IkReal x13830=(r21*sj5);
IkReal x13831=(cj1*cj2);
IkReal x13832=(cj3*cj5);
IkReal x13833=(sj3*sj5);
IkReal x13834=((1.0)*x13821);
IkReal x13835=(r20*x13822);
IkReal x13836=(cj3*x13822);
IkReal x13837=(sj3*x13822);
IkReal x13838=(x13823+x13824);
evalcond[0]=((-1.0)*r02*x13822);
evalcond[1]=(((x13821*x13830))+(((-1.0)*cj5*r20*x13834)));
evalcond[2]=(x13838+(((-1.0)*r02*sj3*x13834)));
evalcond[3]=(x13831+(((-1.0)*x13826))+((cj3*r02*x13821)));
evalcond[4]=((-1.0)+((x13821*x13828))+(((-1.0)*x13825*x13834)));
evalcond[5]=(((r10*x13829))+((x13825*x13837))+((r11*x13832))+(((-1.0)*x13828*x13837)));
evalcond[6]=(((r11*x13827))+((r10*x13833))+((x13828*x13836))+(((-1.0)*x13825*x13836)));
evalcond[7]=((((-1.0)*x13832*x13835))+((r21*x13827))+x13838+((r21*x13822*x13829))+((r20*x13833)));
evalcond[8]=(x13826+((r21*x13832))+(((-1.0)*x13830*x13837))+((r20*x13829))+(((-1.0)*x13831))+((x13827*x13835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13839=cj5*cj5;
IkReal x13840=((1.0)*cj3);
IkReal x13841=(r10*r21);
IkReal x13842=(cj5*sj5);
IkReal x13843=(r11*r21);
IkReal x13844=(r11*r20);
IkReal x13845=(r22*sj3);
IkReal x13846=(r10*r20);
IkReal x13847=((1.0)*sj3*x13839);
CheckValue<IkReal> x13848=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13839*x13840*x13846))+((cj3*x13842*x13844))+(((-1.0)*r12*r22*x13840))+((cj3*x13841*x13842))+((cj3*x13839*x13843))+(((-1.0)*x13840*x13843)))),-1);
if(!x13848.valid){
continue;
}
CheckValue<IkReal> x13849 = IKatan2WithCheck(IkReal((((r10*sj5*x13845))+((cj5*r11*x13845)))),IkReal(((((-1.0)*x13844*x13847))+((sj3*x13842*x13843))+(((-1.0)*sj3*x13842*x13846))+((sj3*x13841))+(((-1.0)*x13841*x13847)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13848.value)))+(x13849.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13850=IKsin(j4);
IkReal x13851=IKcos(j4);
IkReal x13852=(cj2*sj1);
IkReal x13853=(cj1*sj2);
IkReal x13854=(cj5*sj3);
IkReal x13855=(cj5*r10);
IkReal x13856=(r00*sj5);
IkReal x13857=(sj1*sj2);
IkReal x13858=(r11*sj5);
IkReal x13859=(cj3*cj5);
IkReal x13860=(cj3*sj5);
IkReal x13861=(r21*sj5);
IkReal x13862=(cj1*cj2);
IkReal x13863=(sj3*sj5);
IkReal x13864=(r01*sj5);
IkReal x13865=((1.0)*x13851);
IkReal x13866=((1.0)*x13850);
IkReal x13867=(cj3*x13850);
IkReal x13868=(cj3*x13851);
IkReal x13869=(x13852+x13853);
evalcond[0]=((((-1.0)*r22*x13865))+((x13850*x13861))+(((-1.0)*cj5*r20*x13866)));
evalcond[1]=((((-1.0)*cj5*r00*x13866))+(((-1.0)*r02*x13865))+((x13850*x13864)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13865))+(((-1.0)*x13855*x13866))+((x13850*x13858)));
evalcond[3]=(((r11*x13854))+((r12*x13867))+((x13858*x13868))+((r10*x13863))+(((-1.0)*cj3*x13855*x13865)));
evalcond[4]=((((-1.0)*sj3*x13858*x13865))+((r11*x13859))+((r10*x13851*x13854))+(((-1.0)*r12*sj3*x13866))+((r10*x13860)));
evalcond[5]=(((r22*x13867))+x13869+((r21*x13851*x13860))+((r21*x13854))+((r20*x13863))+(((-1.0)*r20*x13859*x13865)));
evalcond[6]=(((r01*x13859))+x13869+(((-1.0)*r01*x13863*x13865))+((r00*x13851*x13854))+(((-1.0)*r02*sj3*x13866))+((cj3*x13856)));
evalcond[7]=((((-1.0)*x13857))+((r01*x13854))+x13862+((sj3*x13856))+((r02*x13867))+(((-1.0)*r00*x13859*x13865))+((r01*x13851*x13860)));
evalcond[8]=((((-1.0)*x13862))+(((-1.0)*sj3*x13861*x13865))+x13857+((r21*x13859))+((r20*x13860))+(((-1.0)*r22*sj3*x13866))+((r20*x13851*x13854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13870=((1.0)*cj5);
CheckValue<IkReal> x13871 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13870)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13871.valid){
continue;
}
CheckValue<IkReal> x13872=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13870))+(((-1.0)*r20*sj5)))),-1);
if(!x13872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13871.value)+(((1.5707963267949)*(x13872.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13873=IKsin(j4);
IkReal x13874=IKcos(j4);
IkReal x13875=(cj2*sj1);
IkReal x13876=(cj1*sj2);
IkReal x13877=(cj5*sj3);
IkReal x13878=(cj5*r10);
IkReal x13879=(r00*sj5);
IkReal x13880=(sj1*sj2);
IkReal x13881=(r11*sj5);
IkReal x13882=(cj3*cj5);
IkReal x13883=(cj3*sj5);
IkReal x13884=(r21*sj5);
IkReal x13885=(cj1*cj2);
IkReal x13886=(sj3*sj5);
IkReal x13887=(r01*sj5);
IkReal x13888=((1.0)*x13874);
IkReal x13889=((1.0)*x13873);
IkReal x13890=(cj3*x13873);
IkReal x13891=(cj3*x13874);
IkReal x13892=(x13876+x13875);
evalcond[0]=((((-1.0)*cj5*r20*x13889))+(((-1.0)*r22*x13888))+((x13873*x13884)));
evalcond[1]=((((-1.0)*r02*x13888))+(((-1.0)*cj5*r00*x13889))+((x13873*x13887)));
evalcond[2]=((-1.0)+(((-1.0)*x13878*x13889))+(((-1.0)*r12*x13888))+((x13873*x13881)));
evalcond[3]=((((-1.0)*cj3*x13878*x13888))+((x13881*x13891))+((r10*x13886))+((r11*x13877))+((r12*x13890)));
evalcond[4]=(((r10*x13874*x13877))+(((-1.0)*sj3*x13881*x13888))+((r10*x13883))+((r11*x13882))+(((-1.0)*r12*sj3*x13889)));
evalcond[5]=(((r22*x13890))+((r21*x13874*x13883))+x13892+((r21*x13877))+((r20*x13886))+(((-1.0)*r20*x13882*x13888)));
evalcond[6]=(((r00*x13874*x13877))+((cj3*x13879))+x13892+(((-1.0)*r01*x13886*x13888))+((r01*x13882))+(((-1.0)*r02*sj3*x13889)));
evalcond[7]=(((sj3*x13879))+x13885+((r02*x13890))+((r01*x13877))+(((-1.0)*x13880))+((r01*x13874*x13883))+(((-1.0)*r00*x13882*x13888)));
evalcond[8]=((((-1.0)*r22*sj3*x13889))+x13880+(((-1.0)*sj3*x13884*x13888))+((r20*x13874*x13877))+((r20*x13883))+(((-1.0)*x13885))+((r21*x13882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13893 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13893.valid){
continue;
}
CheckValue<IkReal> x13894=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13893.value)+(((1.5707963267949)*(x13894.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13895=IKsin(j4);
IkReal x13896=IKcos(j4);
IkReal x13897=(cj2*sj1);
IkReal x13898=(cj1*sj2);
IkReal x13899=(cj5*sj3);
IkReal x13900=(cj5*r10);
IkReal x13901=(r00*sj5);
IkReal x13902=(sj1*sj2);
IkReal x13903=(r11*sj5);
IkReal x13904=(cj3*cj5);
IkReal x13905=(cj3*sj5);
IkReal x13906=(r21*sj5);
IkReal x13907=(cj1*cj2);
IkReal x13908=(sj3*sj5);
IkReal x13909=(r01*sj5);
IkReal x13910=((1.0)*x13896);
IkReal x13911=((1.0)*x13895);
IkReal x13912=(cj3*x13895);
IkReal x13913=(cj3*x13896);
IkReal x13914=(x13897+x13898);
evalcond[0]=(((x13895*x13906))+(((-1.0)*r22*x13910))+(((-1.0)*cj5*r20*x13911)));
evalcond[1]=(((x13895*x13909))+(((-1.0)*cj5*r00*x13911))+(((-1.0)*r02*x13910)));
evalcond[2]=((-1.0)+(((-1.0)*x13900*x13911))+((x13895*x13903))+(((-1.0)*r12*x13910)));
evalcond[3]=(((r10*x13908))+((x13903*x13913))+((r12*x13912))+(((-1.0)*cj3*x13900*x13910))+((r11*x13899)));
evalcond[4]=(((r10*x13905))+((r10*x13896*x13899))+(((-1.0)*r12*sj3*x13911))+(((-1.0)*sj3*x13903*x13910))+((r11*x13904)));
evalcond[5]=(((r22*x13912))+x13914+((r21*x13896*x13905))+((r20*x13908))+((r21*x13899))+(((-1.0)*r20*x13904*x13910)));
evalcond[6]=((((-1.0)*r01*x13908*x13910))+(((-1.0)*r02*sj3*x13911))+x13914+((r01*x13904))+((cj3*x13901))+((r00*x13896*x13899)));
evalcond[7]=((((-1.0)*r00*x13904*x13910))+((r02*x13912))+x13907+(((-1.0)*x13902))+((r01*x13896*x13905))+((sj3*x13901))+((r01*x13899)));
evalcond[8]=((((-1.0)*sj3*x13906*x13910))+(((-1.0)*r22*sj3*x13911))+((r20*x13896*x13899))+x13902+(((-1.0)*x13907))+((r20*x13905))+((r21*x13904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13915=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13915;
j4eval[1]=IKsign(x13915);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13916=((1.0)*cj5);
IkReal x13917=((((-1.0)*r00*sj5))+(((-1.0)*r01*x13916)));
j4eval[0]=x13917;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x13916)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13917);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13918=cj5*cj5;
IkReal x13919=(cj3*r21);
IkReal x13920=(cj5*sj5);
IkReal x13921=((1.0)*cj3);
IkReal x13922=(((r11*x13918*x13919))+(((-1.0)*r10*r20*x13918*x13921))+(((-1.0)*r12*r22*x13921))+((cj3*r11*r20*x13920))+(((-1.0)*r11*x13919))+((r10*x13919*x13920)));
j4eval[0]=x13922;
j4eval[1]=IKsign(x13922);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13923=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13923;
j4eval[1]=IKsign(x13923);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13924=((1.0)*cj5);
IkReal x13925=((((-1.0)*r00*sj5))+(((-1.0)*r01*x13924)));
j4eval[0]=x13925;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x13924)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13925);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13926=cj5*cj5;
IkReal x13927=r11*r11;
IkReal x13928=(r11*sj5);
IkReal x13929=(cj5*r10);
IkReal x13930=(((x13926*(r10*r10)))+(r12*r12)+(((-1.0)*x13926*x13927))+x13927+(((-2.0)*x13928*x13929)));
j4eval[0]=x13930;
j4eval[1]=IKsign(x13930);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x13928))+x13929))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13931=cj5*cj5;
IkReal x13932=r11*r11;
IkReal x13933=(cj5*r10);
IkReal x13934=(r11*sj5);
CheckValue<IkReal> x13935 = IKatan2WithCheck(IkReal((x13933+(((-1.0)*x13934)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13935.valid){
continue;
}
CheckValue<IkReal> x13936=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x13933*x13934))+x13932+(((-1.0)*x13931*x13932))+((x13931*(r10*r10))))),-1);
if(!x13936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13935.value)+(((1.5707963267949)*(x13936.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13937=IKsin(j4);
IkReal x13938=IKcos(j4);
IkReal x13939=(cj5*r10);
IkReal x13940=(r01*sj5);
IkReal x13941=((1.0)*cj2);
IkReal x13942=(cj5*r00);
IkReal x13943=(cj5*r20);
IkReal x13944=((1.0)*x13938);
IkReal x13945=((1.0)*x13937);
IkReal x13946=(sj5*x13937);
evalcond[0]=((((-1.0)*x13943*x13945))+(((-1.0)*r22*x13944))+((r21*x13946)));
evalcond[1]=(((x13937*x13940))+(((-1.0)*x13942*x13945))+(((-1.0)*r02*x13944)));
evalcond[2]=((((-1.0)*r11*sj5*x13944))+(((-1.0)*r12*x13945))+((x13938*x13939)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13944))+(((-1.0)*x13939*x13945))+((r11*x13946)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x13945))+(((-1.0)*r21*sj5*x13944))+(((-1.0)*cj1*x13941))+((x13938*x13943)));
evalcond[5]=((((-1.0)*x13940*x13944))+(((-1.0)*sj1*x13941))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13945))+((x13938*x13942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13947=((1.0)*cj5);
CheckValue<IkReal> x13948=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13947)))),-1);
if(!x13948.valid){
continue;
}
CheckValue<IkReal> x13949 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13947)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13948.value)))+(x13949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13950=IKsin(j4);
IkReal x13951=IKcos(j4);
IkReal x13952=(cj5*r10);
IkReal x13953=(r01*sj5);
IkReal x13954=((1.0)*cj2);
IkReal x13955=(cj5*r00);
IkReal x13956=(cj5*r20);
IkReal x13957=((1.0)*x13951);
IkReal x13958=((1.0)*x13950);
IkReal x13959=(sj5*x13950);
evalcond[0]=(((r21*x13959))+(((-1.0)*x13956*x13958))+(((-1.0)*r22*x13957)));
evalcond[1]=((((-1.0)*x13955*x13958))+(((-1.0)*r02*x13957))+((x13950*x13953)));
evalcond[2]=(((x13951*x13952))+(((-1.0)*r11*sj5*x13957))+(((-1.0)*r12*x13958)));
evalcond[3]=((1.0)+((r11*x13959))+(((-1.0)*x13952*x13958))+(((-1.0)*r12*x13957)));
evalcond[4]=((((-1.0)*r21*sj5*x13957))+((x13951*x13956))+((sj1*sj2))+(((-1.0)*cj1*x13954))+(((-1.0)*r22*x13958)));
evalcond[5]=(((x13951*x13955))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13958))+(((-1.0)*sj1*x13954))+(((-1.0)*x13953*x13957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13960=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13960.valid){
continue;
}
CheckValue<IkReal> x13961 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13960.value)))+(x13961.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13962=IKsin(j4);
IkReal x13963=IKcos(j4);
IkReal x13964=(cj5*r10);
IkReal x13965=(r01*sj5);
IkReal x13966=((1.0)*cj2);
IkReal x13967=(cj5*r00);
IkReal x13968=(cj5*r20);
IkReal x13969=((1.0)*x13963);
IkReal x13970=((1.0)*x13962);
IkReal x13971=(sj5*x13962);
evalcond[0]=((((-1.0)*x13968*x13970))+(((-1.0)*r22*x13969))+((r21*x13971)));
evalcond[1]=((((-1.0)*r02*x13969))+((x13962*x13965))+(((-1.0)*x13967*x13970)));
evalcond[2]=(((x13963*x13964))+(((-1.0)*r12*x13970))+(((-1.0)*r11*sj5*x13969)));
evalcond[3]=((1.0)+(((-1.0)*x13964*x13970))+(((-1.0)*r12*x13969))+((r11*x13971)));
evalcond[4]=((((-1.0)*cj1*x13966))+((x13963*x13968))+(((-1.0)*r22*x13970))+((sj1*sj2))+(((-1.0)*r21*sj5*x13969)));
evalcond[5]=(((x13963*x13967))+(((-1.0)*r02*x13970))+(((-1.0)*sj1*x13966))+(((-1.0)*cj1*sj2))+(((-1.0)*x13965*x13969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13972=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13972;
j4eval[1]=IKsign(x13972);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13973=((1.0)*cj5);
IkReal x13974=((((-1.0)*r00*sj5))+(((-1.0)*r01*x13973)));
j4eval[0]=x13974;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x13973))+((r21*sj5))))));
j4eval[2]=IKsign(x13974);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13975=(sj1*sj2);
IkReal x13976=(cj5*r10);
IkReal x13977=(r11*sj5);
IkReal x13978=(cj1*cj2);
IkReal x13979=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x13979;
j4eval[1]=((IKabs((((r12*x13978))+(((-1.0)*r12*x13975)))))+(IKabs(((((-1.0)*x13975*x13976))+(((-1.0)*x13977*x13978))+((x13976*x13978))+((x13975*x13977))))));
j4eval[2]=IKsign(x13979);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13980=(sj1*sj2);
IkReal x13981=(cj5*r10);
IkReal x13982=(r11*sj5);
IkReal x13983=(cj1*cj2);
CheckValue<IkReal> x13984=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13984.valid){
continue;
}
CheckValue<IkReal> x13985 = IKatan2WithCheck(IkReal(((((-1.0)*x13980*x13981))+((x13980*x13982))+((x13981*x13983))+(((-1.0)*x13982*x13983)))),IkReal((((r12*x13983))+(((-1.0)*r12*x13980)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13984.value)))+(x13985.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13986=IKcos(j4);
IkReal x13987=IKsin(j4);
IkReal x13988=(cj5*r00);
IkReal x13989=(cj5*r10);
IkReal x13990=(r21*sj5);
IkReal x13991=((1.0)*cj2);
IkReal x13992=(cj5*r20);
IkReal x13993=((1.0)*x13986);
IkReal x13994=((1.0)*x13987);
IkReal x13995=(sj5*x13987);
IkReal x13996=(sj5*x13986);
evalcond[0]=(((r12*x13987))+((r11*x13996))+(((-1.0)*x13989*x13993)));
evalcond[1]=((((-1.0)*x13992*x13994))+(((-1.0)*r22*x13993))+((x13987*x13990)));
evalcond[2]=((((-1.0)*r02*x13993))+(((-1.0)*x13988*x13994))+((r01*x13995)));
evalcond[3]=((1.0)+((r11*x13995))+(((-1.0)*r12*x13993))+(((-1.0)*x13989*x13994)));
evalcond[4]=((((-1.0)*x13992*x13993))+(((-1.0)*cj1*x13991))+((sj1*sj2))+((r22*x13987))+((x13986*x13990)));
evalcond[5]=((((-1.0)*x13988*x13993))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13991))+((r02*x13987))+((r01*x13996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13997=((1.0)*cj5);
CheckValue<IkReal> x13998=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13997)))),-1);
if(!x13998.valid){
continue;
}
CheckValue<IkReal> x13999 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13997)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13998.value)))+(x13999.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14000=IKcos(j4);
IkReal x14001=IKsin(j4);
IkReal x14002=(cj5*r00);
IkReal x14003=(cj5*r10);
IkReal x14004=(r21*sj5);
IkReal x14005=((1.0)*cj2);
IkReal x14006=(cj5*r20);
IkReal x14007=((1.0)*x14000);
IkReal x14008=((1.0)*x14001);
IkReal x14009=(sj5*x14001);
IkReal x14010=(sj5*x14000);
evalcond[0]=(((r11*x14010))+((r12*x14001))+(((-1.0)*x14003*x14007)));
evalcond[1]=((((-1.0)*x14006*x14008))+((x14001*x14004))+(((-1.0)*r22*x14007)));
evalcond[2]=((((-1.0)*r02*x14007))+(((-1.0)*x14002*x14008))+((r01*x14009)));
evalcond[3]=((1.0)+((r11*x14009))+(((-1.0)*x14003*x14008))+(((-1.0)*r12*x14007)));
evalcond[4]=(((x14000*x14004))+((sj1*sj2))+((r22*x14001))+(((-1.0)*x14006*x14007))+(((-1.0)*cj1*x14005)));
evalcond[5]=(((r02*x14001))+(((-1.0)*sj1*x14005))+(((-1.0)*cj1*sj2))+(((-1.0)*x14002*x14007))+((r01*x14010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14011=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14011.valid){
continue;
}
CheckValue<IkReal> x14012 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14011.value)))+(x14012.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14013=IKcos(j4);
IkReal x14014=IKsin(j4);
IkReal x14015=(cj5*r00);
IkReal x14016=(cj5*r10);
IkReal x14017=(r21*sj5);
IkReal x14018=((1.0)*cj2);
IkReal x14019=(cj5*r20);
IkReal x14020=((1.0)*x14013);
IkReal x14021=((1.0)*x14014);
IkReal x14022=(sj5*x14014);
IkReal x14023=(sj5*x14013);
evalcond[0]=(((r11*x14023))+(((-1.0)*x14016*x14020))+((r12*x14014)));
evalcond[1]=((((-1.0)*x14019*x14021))+((x14014*x14017))+(((-1.0)*r22*x14020)));
evalcond[2]=(((r01*x14022))+(((-1.0)*x14015*x14021))+(((-1.0)*r02*x14020)));
evalcond[3]=((1.0)+((r11*x14022))+(((-1.0)*x14016*x14021))+(((-1.0)*r12*x14020)));
evalcond[4]=((((-1.0)*x14019*x14020))+((r22*x14014))+((sj1*sj2))+((x14013*x14017))+(((-1.0)*cj1*x14018)));
evalcond[5]=(((r01*x14023))+((r02*x14014))+(((-1.0)*sj1*x14018))+(((-1.0)*cj1*sj2))+(((-1.0)*x14015*x14020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14024=((-1.0)*r00);
IkReal x14026 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14026)==0){
continue;
}
IkReal x14025=pow(x14026,-0.5);
CheckValue<IkReal> x14027 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14024),IKFAST_ATAN2_MAGTHRESH);
if(!x14027.valid){
continue;
}
IkReal gconst54=((-1.0)*(x14027.value));
IkReal gconst55=(r01*x14025);
IkReal gconst56=(x14024*x14025);
CheckValue<IkReal> x14028 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14028.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14028.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14029=((-1.0)*r00);
IkReal x14030=x14025;
CheckValue<IkReal> x14032 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14029),IKFAST_ATAN2_MAGTHRESH);
if(!x14032.valid){
continue;
}
IkReal x14031=((-1.0)*(x14032.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst55;
cj5=gconst56;
j5=x14031;
IkReal gconst54=x14031;
IkReal gconst55=(r01*x14030);
IkReal gconst56=(x14029*x14030);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14033=((-1.0)*r00);
IkReal x14034=x14025;
CheckValue<IkReal> x14036 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14033),IKFAST_ATAN2_MAGTHRESH);
if(!x14036.valid){
continue;
}
IkReal x14035=((-1.0)*(x14036.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst55;
cj5=gconst56;
j5=x14035;
IkReal gconst54=x14035;
IkReal gconst55=(r01*x14034);
IkReal gconst56=(x14033*x14034);
CheckValue<IkReal> x14044=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14044.valid){
continue;
}
IkReal x14037=x14044.value;
IkReal x14038=(sj3*x14037);
IkReal x14039=(r11*x14038);
IkReal x14040=(r21*x14038);
IkReal x14041=(r20*x14038);
IkReal x14042=(r10*x14038);
IkReal x14043=(r00*r01*x14038);
j4eval[0]=IKsign((((r00*r01*r20*x14039))+((r00*r01*r10*x14040))+((r21*x14039*(r01*r01)))+((r10*x14041*(r00*r00)))+((r12*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14045=gconst56*gconst56;
IkReal x14046=gconst55*gconst55;
IkReal x14047=(r11*r21);
IkReal x14048=(gconst56*sj3);
IkReal x14049=((1.0)*cj3);
IkReal x14050=(r10*r20);
IkReal x14051=(r10*r21);
IkReal x14052=(r11*r20);
IkReal x14053=(cj3*gconst55*gconst56);
CheckValue<IkReal> x14054 = IKatan2WithCheck(IkReal((((r11*r22*x14048))+((gconst55*r10*r22*sj3)))),IkReal(((((-1.0)*sj3*x14045*x14052))+(((-1.0)*gconst55*x14048*x14050))+((gconst55*x14047*x14048))+((sj3*x14046*x14051)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14054.valid){
continue;
}
CheckValue<IkReal> x14055=IKPowWithIntegerCheck(IKsign((((x14051*x14053))+(((-1.0)*r12*r22*x14049))+(((-1.0)*x14045*x14049*x14050))+(((-1.0)*x14046*x14047*x14049))+((x14052*x14053)))),-1);
if(!x14055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14054.value)+(((1.5707963267949)*(x14055.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14056=IKsin(j4);
IkReal x14057=IKcos(j4);
IkReal x14058=(sj1*sj2);
IkReal x14059=(gconst55*r21);
IkReal x14060=(gconst56*r00);
IkReal x14061=(cj3*gconst55);
IkReal x14062=(gconst56*sj3);
IkReal x14063=(gconst55*sj3);
IkReal x14064=((1.0)*cj1);
IkReal x14065=(cj3*gconst56);
IkReal x14066=(cj2*sj1);
IkReal x14067=(cj2*x14064);
IkReal x14068=((1.0)*x14057);
IkReal x14069=((1.0)*x14056);
IkReal x14070=(cj3*x14056);
IkReal x14071=(gconst55*x14056);
evalcond[0]=((((-1.0)*r22*x14068))+(((-1.0)*gconst56*r20*x14069))+((x14056*x14059)));
evalcond[1]=(((r01*x14071))+(((-1.0)*x14060*x14069))+(((-1.0)*r02*x14068)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14068))+((r11*x14071))+(((-1.0)*gconst56*r10*x14069)));
evalcond[3]=((((-1.0)*r10*x14065*x14068))+((r11*x14057*x14061))+((r11*x14062))+((r10*x14063))+((r12*x14070)));
evalcond[4]=(((r11*x14065))+((r10*x14061))+(((-1.0)*r12*sj3*x14069))+(((-1.0)*r11*x14063*x14068))+((r10*x14057*x14062)));
evalcond[5]=(((r22*x14070))+((cj1*sj2))+((r21*x14062))+((r20*x14063))+((cj3*x14057*x14059))+x14066+(((-1.0)*r20*x14065*x14068)));
evalcond[6]=(((r02*x14070))+(((-1.0)*cj3*x14060*x14068))+((r01*x14057*x14061))+((r01*x14062))+((r00*x14063))+(((-1.0)*x14067))+x14058);
evalcond[7]=((((-1.0)*r22*sj3*x14069))+((r20*x14057*x14062))+((r21*x14065))+((r20*x14061))+(((-1.0)*sj3*x14059*x14068))+(((-1.0)*x14067))+x14058);
evalcond[8]=((((-1.0)*sj2*x14064))+(((-1.0)*r01*x14063*x14068))+(((-1.0)*r02*sj3*x14069))+((r01*x14065))+((r00*x14061))+(((-1.0)*x14066))+((sj3*x14057*x14060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14072=gconst55*gconst55;
IkReal x14073=gconst56*gconst56;
IkReal x14074=(r11*r21);
IkReal x14075=(cj3*gconst56);
IkReal x14076=(gconst55*r10);
IkReal x14077=((1.0)*r20);
IkReal x14078=(gconst56*sj3);
CheckValue<IkReal> x14079 = IKatan2WithCheck(IkReal((((cj3*r22*x14076))+((r11*r22*x14075)))),IkReal((((cj3*r10*r21*x14072))+(((-1.0)*cj3*r11*x14073*x14077))+(((-1.0)*x14075*x14076*x14077))+((gconst55*x14074*x14075)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14079.valid){
continue;
}
CheckValue<IkReal> x14080=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst55*r11*x14077*x14078))+((r10*r20*sj3*x14073))+((sj3*x14072*x14074))+((r12*r22*sj3))+(((-1.0)*r21*x14076*x14078)))),-1);
if(!x14080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14079.value)+(((1.5707963267949)*(x14080.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14081=IKsin(j4);
IkReal x14082=IKcos(j4);
IkReal x14083=(sj1*sj2);
IkReal x14084=(gconst55*r21);
IkReal x14085=(gconst56*r00);
IkReal x14086=(cj3*gconst55);
IkReal x14087=(gconst56*sj3);
IkReal x14088=(gconst55*sj3);
IkReal x14089=((1.0)*cj1);
IkReal x14090=(cj3*gconst56);
IkReal x14091=(cj2*sj1);
IkReal x14092=(cj2*x14089);
IkReal x14093=((1.0)*x14082);
IkReal x14094=((1.0)*x14081);
IkReal x14095=(cj3*x14081);
IkReal x14096=(gconst55*x14081);
evalcond[0]=(((x14081*x14084))+(((-1.0)*r22*x14093))+(((-1.0)*gconst56*r20*x14094)));
evalcond[1]=((((-1.0)*x14085*x14094))+(((-1.0)*r02*x14093))+((r01*x14096)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14093))+(((-1.0)*gconst56*r10*x14094))+((r11*x14096)));
evalcond[3]=((((-1.0)*r10*x14090*x14093))+((r11*x14087))+((r12*x14095))+((r10*x14088))+((r11*x14082*x14086)));
evalcond[4]=((((-1.0)*r11*x14088*x14093))+(((-1.0)*r12*sj3*x14094))+((r10*x14082*x14087))+((r10*x14086))+((r11*x14090)));
evalcond[5]=(((r20*x14088))+((cj1*sj2))+((r21*x14087))+(((-1.0)*r20*x14090*x14093))+x14091+((r22*x14095))+((cj3*x14082*x14084)));
evalcond[6]=(((r00*x14088))+((r01*x14087))+(((-1.0)*cj3*x14085*x14093))+(((-1.0)*x14092))+((r02*x14095))+x14083+((r01*x14082*x14086)));
evalcond[7]=(((r20*x14086))+((r20*x14082*x14087))+(((-1.0)*sj3*x14084*x14093))+((r21*x14090))+(((-1.0)*x14092))+x14083+(((-1.0)*r22*sj3*x14094)));
evalcond[8]=((((-1.0)*sj2*x14089))+((r00*x14086))+(((-1.0)*x14091))+(((-1.0)*r01*x14088*x14093))+(((-1.0)*r02*sj3*x14094))+((sj3*x14082*x14085))+((r01*x14090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14097 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst56*r00))+((gconst55*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14097.valid){
continue;
}
CheckValue<IkReal> x14098=IKPowWithIntegerCheck(IKsign((((gconst56*r21))+((gconst55*r20)))),-1);
if(!x14098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14097.value)+(((1.5707963267949)*(x14098.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14099=IKsin(j4);
IkReal x14100=IKcos(j4);
IkReal x14101=(sj1*sj2);
IkReal x14102=(gconst55*r21);
IkReal x14103=(gconst56*r00);
IkReal x14104=(cj3*gconst55);
IkReal x14105=(gconst56*sj3);
IkReal x14106=(gconst55*sj3);
IkReal x14107=((1.0)*cj1);
IkReal x14108=(cj3*gconst56);
IkReal x14109=(cj2*sj1);
IkReal x14110=(cj2*x14107);
IkReal x14111=((1.0)*x14100);
IkReal x14112=((1.0)*x14099);
IkReal x14113=(cj3*x14099);
IkReal x14114=(gconst55*x14099);
evalcond[0]=(((x14099*x14102))+(((-1.0)*r22*x14111))+(((-1.0)*gconst56*r20*x14112)));
evalcond[1]=(((r01*x14114))+(((-1.0)*r02*x14111))+(((-1.0)*x14103*x14112)));
evalcond[2]=((1.0)+((r11*x14114))+(((-1.0)*gconst56*r10*x14112))+(((-1.0)*r12*x14111)));
evalcond[3]=((((-1.0)*r10*x14108*x14111))+((r10*x14106))+((r12*x14113))+((r11*x14100*x14104))+((r11*x14105)));
evalcond[4]=(((r10*x14100*x14105))+((r10*x14104))+(((-1.0)*r11*x14106*x14111))+(((-1.0)*r12*sj3*x14112))+((r11*x14108)));
evalcond[5]=(((cj1*sj2))+((r22*x14113))+((cj3*x14100*x14102))+x14109+((r20*x14106))+(((-1.0)*r20*x14108*x14111))+((r21*x14105)));
evalcond[6]=(((r02*x14113))+((r00*x14106))+((r01*x14105))+(((-1.0)*x14110))+x14101+((r01*x14100*x14104))+(((-1.0)*cj3*x14103*x14111)));
evalcond[7]=((((-1.0)*x14110))+(((-1.0)*sj3*x14102*x14111))+x14101+((r20*x14104))+((r21*x14108))+((r20*x14100*x14105))+(((-1.0)*r22*sj3*x14112)));
evalcond[8]=(((r00*x14104))+((r01*x14108))+(((-1.0)*r02*sj3*x14112))+(((-1.0)*x14109))+((sj3*x14100*x14103))+(((-1.0)*sj2*x14107))+(((-1.0)*r01*x14106*x14111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14115=((-1.0)*r01);
IkReal x14117 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14117)==0){
continue;
}
IkReal x14116=pow(x14117,-0.5);
CheckValue<IkReal> x14118 = IKatan2WithCheck(IkReal(x14115),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14118.valid){
continue;
}
IkReal gconst57=((3.14159265358979)+(((-1.0)*(x14118.value))));
IkReal gconst58=(x14115*x14116);
IkReal gconst59=((1.0)*r00*x14116);
CheckValue<IkReal> x14119 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14119.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14119.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14120=((-1.0)*r01);
CheckValue<IkReal> x14123 = IKatan2WithCheck(IkReal(x14120),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14123.valid){
continue;
}
IkReal x14121=((1.0)*(x14123.value));
IkReal x14122=x14116;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x14121)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x14121)));
IkReal gconst58=(x14120*x14122);
IkReal gconst59=((1.0)*r00*x14122);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x14124=((-1.0)*r01);
CheckValue<IkReal> x14127 = IKatan2WithCheck(IkReal(x14124),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14127.valid){
continue;
}
IkReal x14125=((1.0)*(x14127.value));
IkReal x14126=x14116;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x14125)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x14125)));
IkReal gconst58=(x14124*x14126);
IkReal gconst59=((1.0)*r00*x14126);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14128=gconst59*gconst59;
IkReal x14129=gconst58*gconst58;
IkReal x14130=((1.0)*cj3);
IkReal x14131=(r11*r21);
IkReal x14132=((1.0)*r20);
IkReal x14133=(r11*sj3);
IkReal x14134=(gconst58*gconst59);
IkReal x14135=(r10*r21);
IkReal x14136=(gconst58*r10*sj3);
CheckValue<IkReal> x14137=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x14128*x14130))+(((-1.0)*r12*r22*x14130))+(((-1.0)*x14129*x14130*x14131))+((cj3*r11*r20*x14134))+((cj3*x14134*x14135)))),-1);
if(!x14137.valid){
continue;
}
CheckValue<IkReal> x14138 = IKatan2WithCheck(IkReal((((r22*x14136))+((gconst59*r22*x14133)))),IkReal((((sj3*x14129*x14135))+((sj3*x14131*x14134))+(((-1.0)*r10*sj3*x14132*x14134))+(((-1.0)*x14128*x14132*x14133)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14137.value)))+(x14138.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14139=IKsin(j4);
IkReal x14140=IKcos(j4);
IkReal x14141=(sj1*sj2);
IkReal x14142=(cj3*gconst59);
IkReal x14143=(gconst58*r00);
IkReal x14144=((1.0)*cj1);
IkReal x14145=(gconst59*r20);
IkReal x14146=(gconst59*r00);
IkReal x14147=(cj2*sj1);
IkReal x14148=(gconst58*sj3);
IkReal x14149=(gconst59*sj3);
IkReal x14150=(gconst59*r10);
IkReal x14151=(cj3*gconst58);
IkReal x14152=(cj2*x14144);
IkReal x14153=((1.0)*x14140);
IkReal x14154=((1.0)*x14139);
IkReal x14155=(cj3*x14139);
IkReal x14156=(gconst58*x14139);
IkReal x14157=(sj3*x14140);
IkReal x14158=(x14140*x14151);
evalcond[0]=((((-1.0)*r22*x14153))+(((-1.0)*x14145*x14154))+((r21*x14156)));
evalcond[1]=((((-1.0)*r02*x14153))+(((-1.0)*x14146*x14154))+((r01*x14156)));
evalcond[2]=((1.0)+((r11*x14156))+(((-1.0)*r12*x14153))+(((-1.0)*x14150*x14154)));
evalcond[3]=(((r10*x14148))+((r11*x14158))+(((-1.0)*r10*x14142*x14153))+((r12*x14155))+((r11*x14149)));
evalcond[4]=(((r10*x14151))+(((-1.0)*r12*sj3*x14154))+((r10*x14140*x14149))+(((-1.0)*r11*x14148*x14153))+((r11*x14142)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*r20*x14142*x14153))+((r22*x14155))+((r21*x14149))+x14147+((r21*x14158))+((r20*x14148)));
evalcond[6]=(((r02*x14155))+((sj3*x14143))+(((-1.0)*r00*x14142*x14153))+((r01*x14149))+(((-1.0)*x14152))+((r01*x14158))+x14141);
evalcond[7]=(((r21*x14142))+(((-1.0)*r22*sj3*x14154))+(((-1.0)*x14152))+x14141+((x14145*x14157))+(((-1.0)*r21*x14148*x14153))+((r20*x14151)));
evalcond[8]=((((-1.0)*r02*sj3*x14154))+((cj3*x14143))+((x14146*x14157))+((r01*x14142))+(((-1.0)*x14147))+(((-1.0)*r01*x14148*x14153))+(((-1.0)*sj2*x14144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14159=((1.0)*gconst59);
CheckValue<IkReal> x14160 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14159))+((gconst58*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14160.valid){
continue;
}
CheckValue<IkReal> x14161=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x14159))+(((-1.0)*gconst58*r00)))),-1);
if(!x14161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14160.value)+(((1.5707963267949)*(x14161.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14162=IKsin(j4);
IkReal x14163=IKcos(j4);
IkReal x14164=(sj1*sj2);
IkReal x14165=(cj3*gconst59);
IkReal x14166=(gconst58*r00);
IkReal x14167=((1.0)*cj1);
IkReal x14168=(gconst59*r20);
IkReal x14169=(gconst59*r00);
IkReal x14170=(cj2*sj1);
IkReal x14171=(gconst58*sj3);
IkReal x14172=(gconst59*sj3);
IkReal x14173=(gconst59*r10);
IkReal x14174=(cj3*gconst58);
IkReal x14175=(cj2*x14167);
IkReal x14176=((1.0)*x14163);
IkReal x14177=((1.0)*x14162);
IkReal x14178=(cj3*x14162);
IkReal x14179=(gconst58*x14162);
IkReal x14180=(sj3*x14163);
IkReal x14181=(x14163*x14174);
evalcond[0]=((((-1.0)*x14168*x14177))+((r21*x14179))+(((-1.0)*r22*x14176)));
evalcond[1]=((((-1.0)*x14169*x14177))+((r01*x14179))+(((-1.0)*r02*x14176)));
evalcond[2]=((1.0)+((r11*x14179))+(((-1.0)*x14173*x14177))+(((-1.0)*r12*x14176)));
evalcond[3]=(((r11*x14172))+((r12*x14178))+(((-1.0)*r10*x14165*x14176))+((r11*x14181))+((r10*x14171)));
evalcond[4]=((((-1.0)*r12*sj3*x14177))+(((-1.0)*r11*x14171*x14176))+((r10*x14163*x14172))+((r11*x14165))+((r10*x14174)));
evalcond[5]=(((r22*x14178))+(((-1.0)*r20*x14165*x14176))+((r21*x14172))+((cj1*sj2))+((r20*x14171))+((r21*x14181))+x14170);
evalcond[6]=((((-1.0)*r00*x14165*x14176))+(((-1.0)*x14175))+((sj3*x14166))+((r01*x14172))+((r01*x14181))+((r02*x14178))+x14164);
evalcond[7]=((((-1.0)*x14175))+((x14168*x14180))+(((-1.0)*r21*x14171*x14176))+((r20*x14174))+x14164+((r21*x14165))+(((-1.0)*r22*sj3*x14177)));
evalcond[8]=(((cj3*x14166))+((x14169*x14180))+(((-1.0)*x14170))+(((-1.0)*sj2*x14167))+((r01*x14165))+(((-1.0)*r01*x14171*x14176))+(((-1.0)*r02*sj3*x14177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14182=IKPowWithIntegerCheck(IKsign((((gconst59*r21))+((gconst58*r20)))),-1);
if(!x14182.valid){
continue;
}
CheckValue<IkReal> x14183 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst58*r01))+(((-1.0)*gconst59*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14183.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14182.value)))+(x14183.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14184=IKsin(j4);
IkReal x14185=IKcos(j4);
IkReal x14186=(sj1*sj2);
IkReal x14187=(cj3*gconst59);
IkReal x14188=(gconst58*r00);
IkReal x14189=((1.0)*cj1);
IkReal x14190=(gconst59*r20);
IkReal x14191=(gconst59*r00);
IkReal x14192=(cj2*sj1);
IkReal x14193=(gconst58*sj3);
IkReal x14194=(gconst59*sj3);
IkReal x14195=(gconst59*r10);
IkReal x14196=(cj3*gconst58);
IkReal x14197=(cj2*x14189);
IkReal x14198=((1.0)*x14185);
IkReal x14199=((1.0)*x14184);
IkReal x14200=(cj3*x14184);
IkReal x14201=(gconst58*x14184);
IkReal x14202=(sj3*x14185);
IkReal x14203=(x14185*x14196);
evalcond[0]=((((-1.0)*r22*x14198))+((r21*x14201))+(((-1.0)*x14190*x14199)));
evalcond[1]=((((-1.0)*r02*x14198))+((r01*x14201))+(((-1.0)*x14191*x14199)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14198))+(((-1.0)*x14195*x14199))+((r11*x14201)));
evalcond[3]=(((r10*x14193))+(((-1.0)*r10*x14187*x14198))+((r11*x14194))+((r12*x14200))+((r11*x14203)));
evalcond[4]=(((r10*x14196))+(((-1.0)*r12*sj3*x14199))+(((-1.0)*r11*x14193*x14198))+((r11*x14187))+((r10*x14185*x14194)));
evalcond[5]=(((cj1*sj2))+((r21*x14203))+((r22*x14200))+x14192+((r21*x14194))+((r20*x14193))+(((-1.0)*r20*x14187*x14198)));
evalcond[6]=(((r02*x14200))+((sj3*x14188))+(((-1.0)*r00*x14187*x14198))+(((-1.0)*x14197))+((r01*x14194))+((r01*x14203))+x14186);
evalcond[7]=((((-1.0)*r22*sj3*x14199))+(((-1.0)*x14197))+((r21*x14187))+x14186+(((-1.0)*r21*x14193*x14198))+((x14190*x14202))+((r20*x14196)));
evalcond[8]=((((-1.0)*x14192))+((x14191*x14202))+((cj3*x14188))+(((-1.0)*r01*x14193*x14198))+((r01*x14187))+(((-1.0)*r02*sj3*x14199))+(((-1.0)*sj2*x14189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14205 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14205)==0){
continue;
}
IkReal x14204=pow(x14205,-0.5);
CheckValue<IkReal> x14206 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14206.valid){
continue;
}
IkReal gconst60=((-1.0)*(x14206.value));
IkReal gconst61=((-1.0)*r21*x14204);
IkReal gconst62=(r20*x14204);
CheckValue<IkReal> x14207 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14207.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14207.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14210 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14210.valid){
continue;
}
IkReal x14208=((-1.0)*(x14210.value));
IkReal x14209=x14204;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x14208;
IkReal gconst60=x14208;
IkReal gconst61=((-1.0)*r21*x14209);
IkReal gconst62=(r20*x14209);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14213 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14213.valid){
continue;
}
IkReal x14211=((-1.0)*(x14213.value));
IkReal x14212=x14204;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst61;
cj5=gconst62;
j5=x14211;
IkReal gconst60=x14211;
IkReal gconst61=((-1.0)*r21*x14212);
IkReal gconst62=(r20*x14212);
CheckValue<IkReal> x14221=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14221.valid){
continue;
}
IkReal x14214=x14221.value;
IkReal x14215=(sj3*x14214);
IkReal x14216=(r11*x14215);
IkReal x14217=(r00*x14215);
IkReal x14218=(r01*x14215);
IkReal x14219=(r10*x14215);
IkReal x14220=(r20*r21*x14215);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x14218))+((r01*x14216*(r21*r21)))+((r00*r20*r21*x14216))+((r10*x14217*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14222=gconst61*gconst61;
IkReal x14223=gconst62*gconst62;
IkReal x14224=(r00*r11);
IkReal x14225=(r01*r10);
IkReal x14226=(r00*r10);
IkReal x14227=(r01*r11);
IkReal x14228=((1.0)*cj3);
IkReal x14229=(r02*sj3);
IkReal x14230=(cj3*gconst61*gconst62);
IkReal x14231=((1.0)*x14223);
IkReal x14232=(gconst61*gconst62*sj3);
CheckValue<IkReal> x14233 = IKatan2WithCheck(IkReal((((gconst62*r11*x14229))+((gconst61*r10*x14229)))),IkReal(((((-1.0)*x14226*x14232))+(((-1.0)*sj3*x14224*x14231))+((sj3*x14222*x14225))+((x14227*x14232)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14233.valid){
continue;
}
CheckValue<IkReal> x14234=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x14228))+((x14224*x14230))+(((-1.0)*x14222*x14227*x14228))+((x14225*x14230))+(((-1.0)*x14223*x14226*x14228)))),-1);
if(!x14234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14233.value)+(((1.5707963267949)*(x14234.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14235=IKsin(j4);
IkReal x14236=IKcos(j4);
IkReal x14237=(sj1*sj2);
IkReal x14238=(gconst61*sj3);
IkReal x14239=(cj3*gconst61);
IkReal x14240=(cj3*gconst62);
IkReal x14241=((1.0)*cj2);
IkReal x14242=(gconst62*sj3);
IkReal x14243=(cj1*sj2);
IkReal x14244=(cj1*x14241);
IkReal x14245=((1.0)*x14236);
IkReal x14246=((1.0)*x14235);
IkReal x14247=(gconst61*x14235);
IkReal x14248=(cj3*x14235);
evalcond[0]=(((r21*x14247))+(((-1.0)*r22*x14245))+(((-1.0)*gconst62*r20*x14246)));
evalcond[1]=(((r01*x14247))+(((-1.0)*r02*x14245))+(((-1.0)*gconst62*r00*x14246)));
evalcond[2]=((1.0)+((r11*x14247))+(((-1.0)*r12*x14245))+(((-1.0)*gconst62*r10*x14246)));
evalcond[3]=((((-1.0)*r10*x14240*x14245))+((r10*x14238))+((r12*x14248))+((r11*x14242))+((r11*x14236*x14239)));
evalcond[4]=(((r10*x14236*x14242))+((r10*x14239))+(((-1.0)*r11*x14238*x14245))+((r11*x14240))+(((-1.0)*r12*sj3*x14246)));
evalcond[5]=(((r21*x14242))+((cj2*sj1))+((r21*x14236*x14239))+(((-1.0)*r20*x14240*x14245))+((r20*x14238))+x14243+((r22*x14248)));
evalcond[6]=(((r01*x14236*x14239))+(((-1.0)*r00*x14240*x14245))+(((-1.0)*x14244))+((r02*x14248))+((r00*x14238))+((r01*x14242))+x14237);
evalcond[7]=(((r20*x14236*x14242))+((r21*x14240))+(((-1.0)*r22*sj3*x14246))+((r20*x14239))+(((-1.0)*x14244))+(((-1.0)*r21*x14238*x14245))+x14237);
evalcond[8]=((((-1.0)*r01*x14238*x14245))+(((-1.0)*x14243))+(((-1.0)*r02*sj3*x14246))+(((-1.0)*sj1*x14241))+((r00*x14239))+((r00*x14236*x14242))+((r01*x14240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14249=gconst61*gconst61;
IkReal x14250=gconst62*gconst62;
IkReal x14251=(r01*r10);
IkReal x14252=(r00*r11);
IkReal x14253=(cj3*gconst61);
IkReal x14254=(gconst62*r11);
IkReal x14255=(r00*r10);
IkReal x14256=((1.0)*gconst61*gconst62*sj3);
CheckValue<IkReal> x14257=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x14252*x14256))+((sj3*x14250*x14255))+((r01*r11*sj3*x14249))+(((-1.0)*x14251*x14256)))),-1);
if(!x14257.valid){
continue;
}
CheckValue<IkReal> x14258 = IKatan2WithCheck(IkReal((((r02*r10*x14253))+((cj3*r02*x14254)))),IkReal(((((-1.0)*gconst62*x14253*x14255))+(((-1.0)*cj3*x14250*x14252))+((cj3*x14249*x14251))+((r01*x14253*x14254)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14257.value)))+(x14258.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14259=IKsin(j4);
IkReal x14260=IKcos(j4);
IkReal x14261=(sj1*sj2);
IkReal x14262=(gconst61*sj3);
IkReal x14263=(cj3*gconst61);
IkReal x14264=(cj3*gconst62);
IkReal x14265=((1.0)*cj2);
IkReal x14266=(gconst62*sj3);
IkReal x14267=(cj1*sj2);
IkReal x14268=(cj1*x14265);
IkReal x14269=((1.0)*x14260);
IkReal x14270=((1.0)*x14259);
IkReal x14271=(gconst61*x14259);
IkReal x14272=(cj3*x14259);
evalcond[0]=((((-1.0)*gconst62*r20*x14270))+((r21*x14271))+(((-1.0)*r22*x14269)));
evalcond[1]=((((-1.0)*r02*x14269))+((r01*x14271))+(((-1.0)*gconst62*r00*x14270)));
evalcond[2]=((1.0)+((r11*x14271))+(((-1.0)*r12*x14269))+(((-1.0)*gconst62*r10*x14270)));
evalcond[3]=(((r11*x14260*x14263))+((r11*x14266))+((r12*x14272))+(((-1.0)*r10*x14264*x14269))+((r10*x14262)));
evalcond[4]=((((-1.0)*r12*sj3*x14270))+((r11*x14264))+((r10*x14260*x14266))+((r10*x14263))+(((-1.0)*r11*x14262*x14269)));
evalcond[5]=(((cj2*sj1))+((r21*x14266))+((r20*x14262))+((r21*x14260*x14263))+(((-1.0)*r20*x14264*x14269))+((r22*x14272))+x14267);
evalcond[6]=(((r00*x14262))+(((-1.0)*x14268))+((r02*x14272))+(((-1.0)*r00*x14264*x14269))+x14261+((r01*x14266))+((r01*x14260*x14263)));
evalcond[7]=(((r20*x14260*x14266))+((r21*x14264))+(((-1.0)*r22*sj3*x14270))+(((-1.0)*r21*x14262*x14269))+(((-1.0)*x14268))+((r20*x14263))+x14261);
evalcond[8]=(((r00*x14263))+(((-1.0)*x14267))+(((-1.0)*sj1*x14265))+((r00*x14260*x14266))+(((-1.0)*r02*sj3*x14270))+(((-1.0)*r01*x14262*x14269))+((r01*x14264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14273=((1.0)*gconst62);
CheckValue<IkReal> x14274 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst61*r21))+(((-1.0)*r20*x14273)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14274.valid){
continue;
}
CheckValue<IkReal> x14275=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r00))+(((-1.0)*r01*x14273)))),-1);
if(!x14275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14274.value)+(((1.5707963267949)*(x14275.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14276=IKsin(j4);
IkReal x14277=IKcos(j4);
IkReal x14278=(sj1*sj2);
IkReal x14279=(gconst61*sj3);
IkReal x14280=(cj3*gconst61);
IkReal x14281=(cj3*gconst62);
IkReal x14282=((1.0)*cj2);
IkReal x14283=(gconst62*sj3);
IkReal x14284=(cj1*sj2);
IkReal x14285=(cj1*x14282);
IkReal x14286=((1.0)*x14277);
IkReal x14287=((1.0)*x14276);
IkReal x14288=(gconst61*x14276);
IkReal x14289=(cj3*x14276);
evalcond[0]=((((-1.0)*r22*x14286))+((r21*x14288))+(((-1.0)*gconst62*r20*x14287)));
evalcond[1]=(((r01*x14288))+(((-1.0)*gconst62*r00*x14287))+(((-1.0)*r02*x14286)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r10*x14287))+(((-1.0)*r12*x14286))+((r11*x14288)));
evalcond[3]=(((r11*x14277*x14280))+((r12*x14289))+((r11*x14283))+((r10*x14279))+(((-1.0)*r10*x14281*x14286)));
evalcond[4]=((((-1.0)*r12*sj3*x14287))+((r10*x14277*x14283))+(((-1.0)*r11*x14279*x14286))+((r10*x14280))+((r11*x14281)));
evalcond[5]=(((cj2*sj1))+((r21*x14283))+((r20*x14279))+(((-1.0)*r20*x14281*x14286))+((r22*x14289))+((r21*x14277*x14280))+x14284);
evalcond[6]=(((r01*x14283))+(((-1.0)*x14285))+(((-1.0)*r00*x14281*x14286))+((r01*x14277*x14280))+x14278+((r02*x14289))+((r00*x14279)));
evalcond[7]=(((r21*x14281))+(((-1.0)*r21*x14279*x14286))+(((-1.0)*x14285))+((r20*x14277*x14283))+(((-1.0)*r22*sj3*x14287))+x14278+((r20*x14280)));
evalcond[8]=(((r01*x14281))+(((-1.0)*r02*sj3*x14287))+((r00*x14280))+(((-1.0)*r01*x14279*x14286))+((r00*x14277*x14283))+(((-1.0)*x14284))+(((-1.0)*sj1*x14282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14291 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14291)==0){
continue;
}
IkReal x14290=pow(x14291,-0.5);
CheckValue<IkReal> x14292 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14292.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x14292.value))));
IkReal gconst64=((1.0)*r21*x14290);
IkReal gconst65=((-1.0)*r20*x14290);
CheckValue<IkReal> x14293 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14293.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14293.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14296 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14296.valid){
continue;
}
IkReal x14294=((1.0)*(x14296.value));
IkReal x14295=x14290;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x14294)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14294)));
IkReal gconst64=((1.0)*r21*x14295);
IkReal gconst65=((-1.0)*r20*x14295);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14299 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14299.valid){
continue;
}
IkReal x14297=((1.0)*(x14299.value));
IkReal x14298=x14290;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x14297)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14297)));
IkReal gconst64=((1.0)*r21*x14298);
IkReal gconst65=((-1.0)*r20*x14298);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14302 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14302.valid){
continue;
}
IkReal x14300=((1.0)*(x14302.value));
IkReal x14301=x14290;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x14300)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14300)));
IkReal gconst64=((1.0)*r21*x14301);
IkReal gconst65=((-1.0)*r20*x14301);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14303=gconst64*gconst64;
IkReal x14304=gconst65*gconst65;
IkReal x14305=(gconst64*sj3);
IkReal x14306=(gconst65*r11);
IkReal x14307=((1.0)*cj3);
IkReal x14308=(gconst65*r10);
IkReal x14309=(cj3*gconst64);
IkReal x14310=(r20*x14304);
IkReal x14311=(r21*x14303);
CheckValue<IkReal> x14312=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x14307*x14310))+(((-1.0)*r12*r22*x14307))+((r21*x14308*x14309))+((r20*x14306*x14309))+(((-1.0)*r11*x14307*x14311)))),-1);
if(!x14312.valid){
continue;
}
CheckValue<IkReal> x14313 = IKatan2WithCheck(IkReal((((r22*sj3*x14306))+((r10*r22*x14305)))),IkReal(((((-1.0)*r20*x14305*x14308))+(((-1.0)*r11*sj3*x14310))+((r10*sj3*x14311))+((r21*x14305*x14306)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14312.value)))+(x14313.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14314=IKsin(j4);
IkReal x14315=IKcos(j4);
IkReal x14316=(sj1*sj2);
IkReal x14317=(cj3*gconst64);
IkReal x14318=(gconst65*r21);
IkReal x14319=(gconst65*sj3);
IkReal x14320=(gconst64*sj3);
IkReal x14321=((1.0)*cj2);
IkReal x14322=(cj1*sj2);
IkReal x14323=(cj3*gconst65);
IkReal x14324=(cj1*x14321);
IkReal x14325=((1.0)*x14315);
IkReal x14326=((1.0)*x14314);
IkReal x14327=(cj3*x14314);
IkReal x14328=(gconst64*x14314);
evalcond[0]=((((-1.0)*gconst65*r20*x14326))+((r21*x14328))+(((-1.0)*r22*x14325)));
evalcond[1]=(((r01*x14328))+(((-1.0)*gconst65*r00*x14326))+(((-1.0)*r02*x14325)));
evalcond[2]=((1.0)+((r11*x14328))+(((-1.0)*gconst65*r10*x14326))+(((-1.0)*r12*x14325)));
evalcond[3]=(((r11*x14319))+((r11*x14315*x14317))+((r10*x14320))+(((-1.0)*r10*x14323*x14325))+((r12*x14327)));
evalcond[4]=(((r10*x14315*x14319))+(((-1.0)*r11*x14320*x14325))+((r11*x14323))+(((-1.0)*r12*sj3*x14326))+((r10*x14317)));
evalcond[5]=(((cj2*sj1))+((sj3*x14318))+((r21*x14315*x14317))+(((-1.0)*r20*x14323*x14325))+((r20*x14320))+x14322+((r22*x14327)));
evalcond[6]=(((r01*x14315*x14317))+((r00*x14320))+((r02*x14327))+(((-1.0)*r00*x14323*x14325))+(((-1.0)*x14324))+((r01*x14319))+x14316);
evalcond[7]=(((cj3*x14318))+(((-1.0)*r21*x14320*x14325))+(((-1.0)*r22*sj3*x14326))+((r20*x14317))+(((-1.0)*x14324))+((r20*x14315*x14319))+x14316);
evalcond[8]=(((r00*x14315*x14319))+(((-1.0)*r01*x14320*x14325))+((r01*x14323))+(((-1.0)*r02*sj3*x14326))+(((-1.0)*sj1*x14321))+((r00*x14317))+(((-1.0)*x14322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14329=((1.0)*gconst65);
CheckValue<IkReal> x14330 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14329))+((gconst64*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14330.valid){
continue;
}
CheckValue<IkReal> x14331=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst64*r00))+(((-1.0)*r01*x14329)))),-1);
if(!x14331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14330.value)+(((1.5707963267949)*(x14331.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14332=IKsin(j4);
IkReal x14333=IKcos(j4);
IkReal x14334=(sj1*sj2);
IkReal x14335=(cj3*gconst64);
IkReal x14336=(gconst65*r21);
IkReal x14337=(gconst65*sj3);
IkReal x14338=(gconst64*sj3);
IkReal x14339=((1.0)*cj2);
IkReal x14340=(cj1*sj2);
IkReal x14341=(cj3*gconst65);
IkReal x14342=(cj1*x14339);
IkReal x14343=((1.0)*x14333);
IkReal x14344=((1.0)*x14332);
IkReal x14345=(cj3*x14332);
IkReal x14346=(gconst64*x14332);
evalcond[0]=((((-1.0)*gconst65*r20*x14344))+((r21*x14346))+(((-1.0)*r22*x14343)));
evalcond[1]=((((-1.0)*gconst65*r00*x14344))+((r01*x14346))+(((-1.0)*r02*x14343)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14343))+((r11*x14346))+(((-1.0)*gconst65*r10*x14344)));
evalcond[3]=(((r11*x14337))+((r11*x14333*x14335))+((r12*x14345))+((r10*x14338))+(((-1.0)*r10*x14341*x14343)));
evalcond[4]=(((r10*x14333*x14337))+((r11*x14341))+(((-1.0)*r12*sj3*x14344))+((r10*x14335))+(((-1.0)*r11*x14338*x14343)));
evalcond[5]=(((cj2*sj1))+((r20*x14338))+(((-1.0)*r20*x14341*x14343))+((r22*x14345))+((r21*x14333*x14335))+x14340+((sj3*x14336)));
evalcond[6]=(((r01*x14333*x14335))+(((-1.0)*r00*x14341*x14343))+((r00*x14338))+((r01*x14337))+((r02*x14345))+(((-1.0)*x14342))+x14334);
evalcond[7]=(((r20*x14335))+(((-1.0)*r21*x14338*x14343))+((r20*x14333*x14337))+(((-1.0)*x14342))+x14334+((cj3*x14336))+(((-1.0)*r22*sj3*x14344)));
evalcond[8]=((((-1.0)*sj1*x14339))+((r01*x14341))+(((-1.0)*x14340))+(((-1.0)*r01*x14338*x14343))+(((-1.0)*r02*sj3*x14344))+((r00*x14333*x14337))+((r00*x14335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14347 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst64*r01))+(((-1.0)*gconst65*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14347.valid){
continue;
}
CheckValue<IkReal> x14348=IKPowWithIntegerCheck(IKsign((((gconst64*r20))+((gconst65*r21)))),-1);
if(!x14348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14347.value)+(((1.5707963267949)*(x14348.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14349=IKsin(j4);
IkReal x14350=IKcos(j4);
IkReal x14351=(sj1*sj2);
IkReal x14352=(cj3*gconst64);
IkReal x14353=(gconst65*r21);
IkReal x14354=(gconst65*sj3);
IkReal x14355=(gconst64*sj3);
IkReal x14356=((1.0)*cj2);
IkReal x14357=(cj1*sj2);
IkReal x14358=(cj3*gconst65);
IkReal x14359=(cj1*x14356);
IkReal x14360=((1.0)*x14350);
IkReal x14361=((1.0)*x14349);
IkReal x14362=(cj3*x14349);
IkReal x14363=(gconst64*x14349);
evalcond[0]=((((-1.0)*r22*x14360))+(((-1.0)*gconst65*r20*x14361))+((r21*x14363)));
evalcond[1]=((((-1.0)*r02*x14360))+(((-1.0)*gconst65*r00*x14361))+((r01*x14363)));
evalcond[2]=((1.0)+((r11*x14363))+(((-1.0)*gconst65*r10*x14361))+(((-1.0)*r12*x14360)));
evalcond[3]=(((r11*x14354))+((r11*x14350*x14352))+((r10*x14355))+(((-1.0)*r10*x14358*x14360))+((r12*x14362)));
evalcond[4]=(((r10*x14350*x14354))+((r11*x14358))+(((-1.0)*r12*sj3*x14361))+((r10*x14352))+(((-1.0)*r11*x14355*x14360)));
evalcond[5]=(((sj3*x14353))+((cj2*sj1))+((r21*x14350*x14352))+((r20*x14355))+x14357+((r22*x14362))+(((-1.0)*r20*x14358*x14360)));
evalcond[6]=((((-1.0)*x14359))+((r02*x14362))+((r00*x14355))+((r01*x14354))+(((-1.0)*r00*x14358*x14360))+x14351+((r01*x14350*x14352)));
evalcond[7]=(((cj3*x14353))+(((-1.0)*x14359))+((r20*x14352))+((r20*x14350*x14354))+(((-1.0)*r21*x14355*x14360))+x14351+(((-1.0)*r22*sj3*x14361)));
evalcond[8]=((((-1.0)*sj1*x14356))+(((-1.0)*r01*x14355*x14360))+((r00*x14352))+(((-1.0)*x14357))+((r01*x14358))+(((-1.0)*r02*sj3*x14361))+((r00*x14350*x14354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14364=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14364);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14364);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14365=(cj5*r10);
IkReal x14366=(r11*sj5);
j4eval[0]=((((-1.0)*x14365))+x14366);
j4eval[1]=(((sj3*x14365))+(((-1.0)*sj3*x14366)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14367=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14367);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14367);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14368=(r11*sj5);
IkReal x14369=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14369))+x14368);
j4eval[1]=(((cj3*x14368))+(((-1.0)*cj3*x14369)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14370=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14370);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14370);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14371=((1.0)*r11);
CheckValue<IkReal> x14372=IKPowWithIntegerCheck(cj3,-1);
if(!x14372.valid){
continue;
}
CheckValue<IkReal> x14373=IKPowWithIntegerCheck(r22,-1);
if(!x14373.valid){
continue;
}
CheckValue<IkReal> x14374=IKPowWithIntegerCheck((((cj5*r10*sj3))+(((-1.0)*sj3*sj5*x14371))),-1);
if(!x14374.valid){
continue;
}
if( IKabs(((x14372.value)*(x14373.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14374.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14371)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14372.value)*(x14373.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14374.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14371))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14372.value)*(x14373.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14374.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14371))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14375=IKsin(j4);
IkReal x14376=IKcos(j4);
IkReal x14377=(sj1*sj2);
IkReal x14378=(r11*sj5);
IkReal x14379=(r00*sj3);
IkReal x14380=(cj5*r01);
IkReal x14381=((1.0)*cj1);
IkReal x14382=(cj3*sj5);
IkReal x14383=(cj5*r11);
IkReal x14384=(r10*sj3);
IkReal x14385=(cj2*sj1);
IkReal x14386=((1.0)*cj5);
IkReal x14387=((1.0)*sj3);
IkReal x14388=(r01*sj5);
IkReal x14389=(cj2*x14381);
IkReal x14390=(cj3*x14376);
IkReal x14391=(r22*x14375);
IkReal x14392=(cj5*x14376);
IkReal x14393=(x14375*x14386);
evalcond[0]=((-1.0)*r22*x14376);
evalcond[1]=(((cj1*sj2))+((cj3*x14391))+x14385);
evalcond[2]=(((x14375*x14388))+(((-1.0)*r00*x14393)));
evalcond[3]=((1.0)+(((-1.0)*r10*x14393))+((x14375*x14378)));
evalcond[4]=((((-1.0)*x14389))+x14377+(((-1.0)*x14387*x14391)));
evalcond[5]=(((x14384*x14392))+(((-1.0)*x14376*x14378*x14387))+((r10*x14382))+((cj3*x14383)));
evalcond[6]=((((-1.0)*r10*x14386*x14390))+((x14378*x14390))+((sj5*x14384))+((sj3*x14383)));
evalcond[7]=((((-1.0)*x14389))+((r01*x14376*x14382))+((sj5*x14379))+x14377+((sj3*x14380))+(((-1.0)*r00*x14386*x14390)));
evalcond[8]=(((x14379*x14392))+(((-1.0)*x14385))+(((-1.0)*x14376*x14387*x14388))+((r00*x14382))+((cj3*x14380))+(((-1.0)*sj2*x14381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14394=((1.0)*sj3);
IkReal x14395=(r11*sj5);
IkReal x14396=((1.0)*cj5*r10);
CheckValue<IkReal> x14397=IKPowWithIntegerCheck((x14395+(((-1.0)*x14396))),-1);
if(!x14397.valid){
continue;
}
CheckValue<IkReal> x14398=IKPowWithIntegerCheck((((cj3*x14395))+(((-1.0)*cj3*x14396))),-1);
if(!x14398.valid){
continue;
}
if( IKabs(((-1.0)*(x14397.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14398.value)*(((((-1.0)*r10*sj5*x14394))+(((-1.0)*cj5*r11*x14394)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14397.value)))+IKsqr(((x14398.value)*(((((-1.0)*r10*sj5*x14394))+(((-1.0)*cj5*r11*x14394))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14397.value)), ((x14398.value)*(((((-1.0)*r10*sj5*x14394))+(((-1.0)*cj5*r11*x14394))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14399=IKsin(j4);
IkReal x14400=IKcos(j4);
IkReal x14401=(sj1*sj2);
IkReal x14402=(r11*sj5);
IkReal x14403=(r00*sj3);
IkReal x14404=(cj5*r01);
IkReal x14405=((1.0)*cj1);
IkReal x14406=(cj3*sj5);
IkReal x14407=(cj5*r11);
IkReal x14408=(r10*sj3);
IkReal x14409=(cj2*sj1);
IkReal x14410=((1.0)*cj5);
IkReal x14411=((1.0)*sj3);
IkReal x14412=(r01*sj5);
IkReal x14413=(cj2*x14405);
IkReal x14414=(cj3*x14400);
IkReal x14415=(r22*x14399);
IkReal x14416=(cj5*x14400);
IkReal x14417=(x14399*x14410);
evalcond[0]=((-1.0)*r22*x14400);
evalcond[1]=(((cj1*sj2))+((cj3*x14415))+x14409);
evalcond[2]=(((x14399*x14412))+(((-1.0)*r00*x14417)));
evalcond[3]=((1.0)+((x14399*x14402))+(((-1.0)*r10*x14417)));
evalcond[4]=((((-1.0)*x14413))+x14401+(((-1.0)*x14411*x14415)));
evalcond[5]=(((r10*x14406))+((x14408*x14416))+((cj3*x14407))+(((-1.0)*x14400*x14402*x14411)));
evalcond[6]=(((sj5*x14408))+(((-1.0)*r10*x14410*x14414))+((sj3*x14407))+((x14402*x14414)));
evalcond[7]=(((sj5*x14403))+(((-1.0)*x14413))+((sj3*x14404))+((r01*x14400*x14406))+x14401+(((-1.0)*r00*x14410*x14414)));
evalcond[8]=((((-1.0)*x14409))+(((-1.0)*x14400*x14411*x14412))+((cj3*x14404))+((r00*x14406))+((x14403*x14416))+(((-1.0)*sj2*x14405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14418=(cj5*r10);
IkReal x14419=((1.0)*r11);
CheckValue<IkReal> x14420=IKPowWithIntegerCheck(((((-1.0)*x14418))+((r11*sj5))),-1);
if(!x14420.valid){
continue;
}
CheckValue<IkReal> x14421=IKPowWithIntegerCheck((((sj3*x14418))+(((-1.0)*sj3*sj5*x14419))),-1);
if(!x14421.valid){
continue;
}
if( IKabs(((-1.0)*(x14420.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14421.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14419)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14420.value)))+IKsqr(((x14421.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14419))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14420.value)), ((x14421.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14419))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14422=IKsin(j4);
IkReal x14423=IKcos(j4);
IkReal x14424=(sj1*sj2);
IkReal x14425=(r11*sj5);
IkReal x14426=(r00*sj3);
IkReal x14427=(cj5*r01);
IkReal x14428=((1.0)*cj1);
IkReal x14429=(cj3*sj5);
IkReal x14430=(cj5*r11);
IkReal x14431=(r10*sj3);
IkReal x14432=(cj2*sj1);
IkReal x14433=((1.0)*cj5);
IkReal x14434=((1.0)*sj3);
IkReal x14435=(r01*sj5);
IkReal x14436=(cj2*x14428);
IkReal x14437=(cj3*x14423);
IkReal x14438=(r22*x14422);
IkReal x14439=(cj5*x14423);
IkReal x14440=(x14422*x14433);
evalcond[0]=((-1.0)*r22*x14423);
evalcond[1]=(((cj1*sj2))+x14432+((cj3*x14438)));
evalcond[2]=(((x14422*x14435))+(((-1.0)*r00*x14440)));
evalcond[3]=((1.0)+((x14422*x14425))+(((-1.0)*r10*x14440)));
evalcond[4]=((((-1.0)*x14436))+x14424+(((-1.0)*x14434*x14438)));
evalcond[5]=((((-1.0)*x14423*x14425*x14434))+((r10*x14429))+((cj3*x14430))+((x14431*x14439)));
evalcond[6]=(((x14425*x14437))+(((-1.0)*r10*x14433*x14437))+((sj3*x14430))+((sj5*x14431)));
evalcond[7]=((((-1.0)*x14436))+((sj3*x14427))+x14424+((sj5*x14426))+((r01*x14423*x14429))+(((-1.0)*r00*x14433*x14437)));
evalcond[8]=(((x14426*x14439))+(((-1.0)*x14423*x14434*x14435))+(((-1.0)*sj2*x14428))+((r00*x14429))+(((-1.0)*x14432))+((cj3*x14427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14441=cj5*cj5;
IkReal x14442=((1.0)*cj3);
IkReal x14443=(r10*r21);
IkReal x14444=(cj5*sj5);
IkReal x14445=(r11*r21);
IkReal x14446=(r11*r20);
IkReal x14447=(r22*sj3);
IkReal x14448=(r10*r20);
IkReal x14449=((1.0)*sj3*x14441);
CheckValue<IkReal> x14450 = IKatan2WithCheck(IkReal((((r10*sj5*x14447))+((cj5*r11*x14447)))),IkReal(((((-1.0)*x14446*x14449))+((sj3*x14443))+(((-1.0)*sj3*x14444*x14448))+((sj3*x14444*x14445))+(((-1.0)*x14443*x14449)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14450.valid){
continue;
}
CheckValue<IkReal> x14451=IKPowWithIntegerCheck(IKsign((((cj3*x14444*x14446))+((cj3*x14443*x14444))+(((-1.0)*x14442*x14445))+((cj3*x14441*x14445))+(((-1.0)*x14441*x14442*x14448))+(((-1.0)*r12*r22*x14442)))),-1);
if(!x14451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14450.value)+(((1.5707963267949)*(x14451.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14452=IKsin(j4);
IkReal x14453=IKcos(j4);
IkReal x14454=(sj1*sj2);
IkReal x14455=(cj5*sj3);
IkReal x14456=(cj5*r10);
IkReal x14457=(r00*sj5);
IkReal x14458=(r11*sj5);
IkReal x14459=(cj3*cj5);
IkReal x14460=((1.0)*cj1);
IkReal x14461=(cj3*sj5);
IkReal x14462=(r21*sj5);
IkReal x14463=(cj2*sj1);
IkReal x14464=(sj3*sj5);
IkReal x14465=(r01*sj5);
IkReal x14466=(cj2*x14460);
IkReal x14467=((1.0)*x14453);
IkReal x14468=((1.0)*x14452);
IkReal x14469=(cj3*x14452);
IkReal x14470=(cj3*x14453);
evalcond[0]=(((x14452*x14462))+(((-1.0)*cj5*r20*x14468))+(((-1.0)*r22*x14467)));
evalcond[1]=((((-1.0)*cj5*r00*x14468))+((x14452*x14465))+(((-1.0)*r02*x14467)));
evalcond[2]=((1.0)+((x14452*x14458))+(((-1.0)*x14456*x14468))+(((-1.0)*r12*x14467)));
evalcond[3]=(((r10*x14464))+((r11*x14455))+((r12*x14469))+(((-1.0)*cj3*x14456*x14467))+((x14458*x14470)));
evalcond[4]=((((-1.0)*sj3*x14458*x14467))+((r10*x14461))+((r11*x14459))+(((-1.0)*r12*sj3*x14468))+((r10*x14453*x14455)));
evalcond[5]=(((r21*x14453*x14461))+((cj1*sj2))+((r22*x14469))+(((-1.0)*r20*x14459*x14467))+x14463+((r20*x14464))+((r21*x14455)));
evalcond[6]=((((-1.0)*r00*x14459*x14467))+((r01*x14453*x14461))+((r01*x14455))+((r02*x14469))+x14454+((sj3*x14457))+(((-1.0)*x14466)));
evalcond[7]=((((-1.0)*r22*sj3*x14468))+(((-1.0)*sj3*x14462*x14467))+x14454+(((-1.0)*x14466))+((r20*x14453*x14455))+((r20*x14461))+((r21*x14459)));
evalcond[8]=((((-1.0)*sj2*x14460))+((r00*x14453*x14455))+((r01*x14459))+(((-1.0)*r02*sj3*x14468))+(((-1.0)*x14463))+(((-1.0)*r01*x14464*x14467))+((cj3*x14457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14471=((1.0)*cj5);
CheckValue<IkReal> x14472=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x14471))+(((-1.0)*r00*sj5)))),-1);
if(!x14472.valid){
continue;
}
CheckValue<IkReal> x14473 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14471)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14472.value)))+(x14473.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14474=IKsin(j4);
IkReal x14475=IKcos(j4);
IkReal x14476=(sj1*sj2);
IkReal x14477=(cj5*sj3);
IkReal x14478=(cj5*r10);
IkReal x14479=(r00*sj5);
IkReal x14480=(r11*sj5);
IkReal x14481=(cj3*cj5);
IkReal x14482=((1.0)*cj1);
IkReal x14483=(cj3*sj5);
IkReal x14484=(r21*sj5);
IkReal x14485=(cj2*sj1);
IkReal x14486=(sj3*sj5);
IkReal x14487=(r01*sj5);
IkReal x14488=(cj2*x14482);
IkReal x14489=((1.0)*x14475);
IkReal x14490=((1.0)*x14474);
IkReal x14491=(cj3*x14474);
IkReal x14492=(cj3*x14475);
evalcond[0]=((((-1.0)*r22*x14489))+(((-1.0)*cj5*r20*x14490))+((x14474*x14484)));
evalcond[1]=((((-1.0)*cj5*r00*x14490))+((x14474*x14487))+(((-1.0)*r02*x14489)));
evalcond[2]=((1.0)+(((-1.0)*x14478*x14490))+(((-1.0)*r12*x14489))+((x14474*x14480)));
evalcond[3]=(((r10*x14486))+((r12*x14491))+((x14480*x14492))+((r11*x14477))+(((-1.0)*cj3*x14478*x14489)));
evalcond[4]=(((r10*x14483))+((r10*x14475*x14477))+((r11*x14481))+(((-1.0)*r12*sj3*x14490))+(((-1.0)*sj3*x14480*x14489)));
evalcond[5]=(((r21*x14475*x14483))+(((-1.0)*r20*x14481*x14489))+((cj1*sj2))+((r21*x14477))+((r22*x14491))+x14485+((r20*x14486)));
evalcond[6]=(((r01*x14477))+((sj3*x14479))+((r02*x14491))+((r01*x14475*x14483))+x14476+(((-1.0)*r00*x14481*x14489))+(((-1.0)*x14488)));
evalcond[7]=((((-1.0)*sj3*x14484*x14489))+((r21*x14481))+((r20*x14475*x14477))+x14476+((r20*x14483))+(((-1.0)*r22*sj3*x14490))+(((-1.0)*x14488)));
evalcond[8]=((((-1.0)*r01*x14486*x14489))+(((-1.0)*x14485))+((r00*x14475*x14477))+(((-1.0)*r02*sj3*x14490))+(((-1.0)*sj2*x14482))+((r01*x14481))+((cj3*x14479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14493=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14493.valid){
continue;
}
CheckValue<IkReal> x14494 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14493.value)))+(x14494.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14495=IKsin(j4);
IkReal x14496=IKcos(j4);
IkReal x14497=(sj1*sj2);
IkReal x14498=(cj5*sj3);
IkReal x14499=(cj5*r10);
IkReal x14500=(r00*sj5);
IkReal x14501=(r11*sj5);
IkReal x14502=(cj3*cj5);
IkReal x14503=((1.0)*cj1);
IkReal x14504=(cj3*sj5);
IkReal x14505=(r21*sj5);
IkReal x14506=(cj2*sj1);
IkReal x14507=(sj3*sj5);
IkReal x14508=(r01*sj5);
IkReal x14509=(cj2*x14503);
IkReal x14510=((1.0)*x14496);
IkReal x14511=((1.0)*x14495);
IkReal x14512=(cj3*x14495);
IkReal x14513=(cj3*x14496);
evalcond[0]=((((-1.0)*r22*x14510))+((x14495*x14505))+(((-1.0)*cj5*r20*x14511)));
evalcond[1]=((((-1.0)*cj5*r00*x14511))+((x14495*x14508))+(((-1.0)*r02*x14510)));
evalcond[2]=((1.0)+(((-1.0)*x14499*x14511))+((x14495*x14501))+(((-1.0)*r12*x14510)));
evalcond[3]=(((r11*x14498))+((r10*x14507))+((r12*x14512))+((x14501*x14513))+(((-1.0)*cj3*x14499*x14510)));
evalcond[4]=((((-1.0)*sj3*x14501*x14510))+((r10*x14496*x14498))+((r10*x14504))+((r11*x14502))+(((-1.0)*r12*sj3*x14511)));
evalcond[5]=(((r22*x14512))+((r21*x14498))+((r20*x14507))+((r21*x14496*x14504))+((cj1*sj2))+x14506+(((-1.0)*r20*x14502*x14510)));
evalcond[6]=((((-1.0)*x14509))+(((-1.0)*r00*x14502*x14510))+x14497+((r02*x14512))+((sj3*x14500))+((r01*x14496*x14504))+((r01*x14498)));
evalcond[7]=(((r20*x14504))+(((-1.0)*x14509))+((r21*x14502))+x14497+(((-1.0)*r22*sj3*x14511))+((r20*x14496*x14498))+(((-1.0)*sj3*x14505*x14510)));
evalcond[8]=(((cj3*x14500))+(((-1.0)*sj2*x14503))+((r00*x14496*x14498))+(((-1.0)*x14506))+(((-1.0)*r02*sj3*x14511))+(((-1.0)*r01*x14507*x14510))+((r01*x14502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14514=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14514);
rxp0_2=(py*r00);
rxp1_0=(r21*x14514);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14515=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14515);
rxp0_2=(py*r00);
rxp1_0=(r21*x14515);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14516=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x14516)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x14516)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14517=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14517);
rxp0_2=(py*r00);
rxp1_0=(r21*x14517);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14518=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14518);
rxp0_2=(py*r00);
rxp1_0=(r21*x14518);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14519=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14519);
rxp0_2=(py*r00);
rxp1_0=(r21*x14519);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14520=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14520);
rxp0_2=(py*r00);
rxp1_0=(r21*x14520);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14523=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x14523.valid){
continue;
}
IkReal x14521=x14523.value;
IkReal x14522=(cj0*x14521);
cj4array[0]=(((sj1*sj2*x14522))+(((-1.0)*cj1*cj2*x14522)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14524=IKsin(j4);
IkReal x14525=IKcos(j4);
IkReal x14526=(r21*sj5);
IkReal x14527=((1.0)*x14525);
IkReal x14528=((1.0)*cj5*x14524);
evalcond[0]=(r12*x14524);
evalcond[1]=((((-1.0)*r12*x14527))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x14528))+((x14524*x14526)));
evalcond[3]=((((-1.0)*r00*x14528))+((r01*sj5*x14524)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*cj5*r20*x14527))+((x14525*x14526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14531=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x14531.valid){
continue;
}
IkReal x14529=x14531.value;
IkReal x14530=((1.0)*x14529);
cj4array[0]=((((-1.0)*cj1*sj2*x14530))+(((-1.0)*cj2*sj1*x14530)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14532=IKsin(j4);
IkReal x14533=IKcos(j4);
IkReal x14534=((1.0)*cj0);
IkReal x14535=(r01*sj5);
IkReal x14536=((1.0)*cj5*r00);
evalcond[0]=(r12*x14532);
evalcond[1]=((((-1.0)*r12*x14533))+(((-1.0)*x14534)));
evalcond[2]=(((r21*sj5*x14532))+(((-1.0)*cj5*r20*x14532)));
evalcond[3]=((((-1.0)*x14532*x14536))+((x14532*x14535)));
evalcond[4]=(((cj0*cj1*cj2))+(((-1.0)*x14533*x14536))+((x14533*x14535))+(((-1.0)*sj1*sj2*x14534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14537=IKPowWithIntegerCheck(r12,-1);
if(!x14537.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x14537.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14538=IKsin(j4);
IkReal x14539=IKcos(j4);
IkReal x14540=((1.0)*cj5*r00);
IkReal x14541=(sj5*x14539);
IkReal x14542=(sj5*x14538);
IkReal x14543=((1.0)*cj5*r20);
evalcond[0]=(r12*x14538);
evalcond[1]=(((r21*x14542))+(((-1.0)*x14538*x14543)));
evalcond[2]=(((r01*x14542))+(((-1.0)*x14538*x14540)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x14539*x14543))+((cj1*sj2))+((r21*x14541)));
evalcond[4]=((((-1.0)*cj0*sj1*sj2))+((r01*x14541))+(((-1.0)*x14539*x14540))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14544=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14544);
rxp0_2=(py*r00);
rxp1_0=(r21*x14544);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14545=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14545);
rxp0_2=(py*r00);
rxp1_0=(r21*x14545);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14546=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14546);
rxp0_2=(py*r00);
rxp1_0=(r21*x14546);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14549=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x14549.valid){
continue;
}
IkReal x14547=x14549.value;
IkReal x14548=(cj0*x14547);
cj4array[0]=(((sj1*sj2*x14548))+(((-1.0)*cj1*cj2*x14548)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14550=IKsin(j4);
IkReal x14551=IKcos(j4);
IkReal x14552=(r21*sj5);
IkReal x14553=((1.0)*x14551);
IkReal x14554=((1.0)*cj5*x14550);
evalcond[0]=((-1.0)*r12*x14550);
evalcond[1]=((((-1.0)*r12*x14553))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x14554))+((x14550*x14552)));
evalcond[3]=((((-1.0)*r00*x14554))+((r01*sj5*x14550)));
evalcond[4]=(((cj5*r20*x14551))+((cj2*sj1))+(((-1.0)*x14552*x14553))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14557=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x14557.valid){
continue;
}
IkReal x14555=x14557.value;
IkReal x14556=((1.0)*x14555);
cj4array[0]=((((-1.0)*cj2*sj1*x14556))+(((-1.0)*cj1*sj2*x14556)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14558=IKsin(j4);
IkReal x14559=IKcos(j4);
IkReal x14560=(cj5*r00);
IkReal x14561=((1.0)*cj0);
IkReal x14562=((1.0)*x14558);
IkReal x14563=(sj5*x14558);
IkReal x14564=((1.0)*x14559);
evalcond[0]=((-1.0)*r12*x14558);
evalcond[1]=((((-1.0)*x14561))+(((-1.0)*r12*x14564)));
evalcond[2]=(((r21*x14563))+(((-1.0)*cj5*r20*x14562)));
evalcond[3]=(((r01*x14563))+(((-1.0)*x14560*x14562)));
evalcond[4]=((((-1.0)*r01*sj5*x14564))+((cj0*cj1*cj2))+(((-1.0)*sj1*sj2*x14561))+((x14559*x14560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14565=IKPowWithIntegerCheck(r12,-1);
if(!x14565.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x14565.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14566=IKsin(j4);
IkReal x14567=IKcos(j4);
IkReal x14568=(cj5*r00);
IkReal x14569=(r21*sj5);
IkReal x14570=(cj5*r20);
IkReal x14571=(r01*sj5);
IkReal x14572=((1.0)*x14566);
IkReal x14573=((1.0)*x14567);
evalcond[0]=((-1.0)*r12*x14566);
evalcond[1]=((((-1.0)*x14570*x14572))+((x14566*x14569)));
evalcond[2]=(((x14566*x14571))+(((-1.0)*x14568*x14572)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x14567*x14570))+(((-1.0)*x14569*x14573)));
evalcond[4]=((((-1.0)*x14571*x14573))+(((-1.0)*cj0*sj1*sj2))+((x14567*x14568))+((cj0*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x14574 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14574.valid){
continue;
}
IkReal gconst66=((-1.0)*(x14574.value));
IkReal gconst67=r00;
IkReal gconst68=r01;
CheckValue<IkReal> x14575 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14575.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14575.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14576=((-1.0)*py);
CheckValue<IkReal> x14578 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14578.valid){
continue;
}
IkReal x14577=((-1.0)*(x14578.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14576);
rxp0_2=(py*r00);
rxp1_0=(r21*x14576);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x14577;
IkReal gconst66=x14577;
IkReal gconst67=r00;
IkReal gconst68=r01;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14579=((-1.0)*py);
CheckValue<IkReal> x14581 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14581.valid){
continue;
}
IkReal x14580=((-1.0)*(x14581.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14579);
rxp0_2=(py*r00);
rxp1_0=(r21*x14579);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x14580;
IkReal gconst66=x14580;
IkReal gconst67=r00;
IkReal gconst68=r01;
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14582=((-1.0)*py);
CheckValue<IkReal> x14584 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14584.valid){
continue;
}
IkReal x14583=((-1.0)*(x14584.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14582);
rxp0_2=(py*r00);
rxp1_0=(r21*x14582);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x14583;
IkReal gconst66=x14583;
IkReal gconst67=r00;
IkReal gconst68=r01;
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*cj3*r01*r20))+((cj3*r00*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14585=(cj2*sj1);
IkReal x14586=(cj1*sj2);
IkReal x14587=((1.0)*gconst68);
CheckValue<IkReal> x14588=IKPowWithIntegerCheck(r12,-1);
if(!x14588.valid){
continue;
}
CheckValue<IkReal> x14589=IKPowWithIntegerCheck(sj3,-1);
if(!x14589.valid){
continue;
}
CheckValue<IkReal> x14590=IKPowWithIntegerCheck((((cj3*gconst67*r21))+(((-1.0)*cj3*r20*x14587))),-1);
if(!x14590.valid){
continue;
}
if( IKabs(((x14588.value)*(x14589.value)*((((sj0*x14585))+((sj0*x14586)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14590.value)*(((((-1.0)*x14586))+(((-1.0)*x14585))+(((-1.0)*gconst67*r20*sj3))+(((-1.0)*r21*sj3*x14587)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14588.value)*(x14589.value)*((((sj0*x14585))+((sj0*x14586))))))+IKsqr(((x14590.value)*(((((-1.0)*x14586))+(((-1.0)*x14585))+(((-1.0)*gconst67*r20*sj3))+(((-1.0)*r21*sj3*x14587))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14588.value)*(x14589.value)*((((sj0*x14585))+((sj0*x14586))))), ((x14590.value)*(((((-1.0)*x14586))+(((-1.0)*x14585))+(((-1.0)*gconst67*r20*sj3))+(((-1.0)*r21*sj3*x14587))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14591=IKsin(j4);
IkReal x14592=IKcos(j4);
IkReal x14593=((1.0)*sj3);
IkReal x14594=(cj2*sj0);
IkReal x14595=(gconst68*sj3);
IkReal x14596=(sj1*sj2);
IkReal x14597=(cj1*cj2);
IkReal x14598=(cj3*r20);
IkReal x14599=(gconst67*r00);
IkReal x14600=(cj2*sj1);
IkReal x14601=(cj3*gconst68);
IkReal x14602=(cj1*sj2);
IkReal x14603=((1.0)*cj0);
IkReal x14604=(r12*x14591);
IkReal x14605=(gconst67*x14592);
IkReal x14606=((1.0)*x14592);
IkReal x14607=(gconst67*x14591);
IkReal x14608=((1.0)*gconst68*x14591);
evalcond[0]=((((-1.0)*r12*x14606))+(((-1.0)*x14603)));
evalcond[1]=((((-1.0)*r20*x14608))+((r21*x14607)));
evalcond[2]=(sj0+((r01*x14607))+(((-1.0)*r00*x14608)));
evalcond[3]=(((sj0*x14602))+((sj1*x14594))+(((-1.0)*x14593*x14604)));
evalcond[4]=(((cj1*x14594))+((cj3*x14604))+(((-1.0)*sj0*x14596)));
evalcond[5]=((((-1.0)*gconst68*x14598*x14606))+((cj3*r21*x14605))+((r21*x14595))+((gconst67*r20*sj3))+x14600+x14602);
evalcond[6]=(((r21*x14601))+(((-1.0)*x14597))+x14596+((gconst67*x14598))+(((-1.0)*r21*x14593*x14605))+((r20*x14592*x14595)));
evalcond[7]=(((cj3*x14599))+((cj0*x14602))+((cj0*x14600))+((r01*x14601))+((r00*x14592*x14595))+(((-1.0)*r01*x14593*x14605)));
evalcond[8]=((((-1.0)*r00*x14601*x14606))+((r01*x14595))+((sj3*x14599))+((cj3*r01*x14605))+((cj0*x14597))+(((-1.0)*x14596*x14603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14610=IKPowWithIntegerCheck(r12,-1);
if(!x14610.valid){
continue;
}
IkReal x14609=x14610.value;
CheckValue<IkReal> x14611=IKPowWithIntegerCheck(cj3,-1);
if(!x14611.valid){
continue;
}
if( IKabs((x14609*(x14611.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14609)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14609*(x14611.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x14609))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14609*(x14611.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))), ((-1.0)*cj0*x14609));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14612=IKsin(j4);
IkReal x14613=IKcos(j4);
IkReal x14614=((1.0)*sj3);
IkReal x14615=(cj2*sj0);
IkReal x14616=(gconst68*sj3);
IkReal x14617=(sj1*sj2);
IkReal x14618=(cj1*cj2);
IkReal x14619=(cj3*r20);
IkReal x14620=(gconst67*r00);
IkReal x14621=(cj2*sj1);
IkReal x14622=(cj3*gconst68);
IkReal x14623=(cj1*sj2);
IkReal x14624=((1.0)*cj0);
IkReal x14625=(r12*x14612);
IkReal x14626=(gconst67*x14613);
IkReal x14627=((1.0)*x14613);
IkReal x14628=(gconst67*x14612);
IkReal x14629=((1.0)*gconst68*x14612);
evalcond[0]=((((-1.0)*x14624))+(((-1.0)*r12*x14627)));
evalcond[1]=(((r21*x14628))+(((-1.0)*r20*x14629)));
evalcond[2]=(sj0+(((-1.0)*r00*x14629))+((r01*x14628)));
evalcond[3]=(((sj1*x14615))+(((-1.0)*x14614*x14625))+((sj0*x14623)));
evalcond[4]=(((cj1*x14615))+((cj3*x14625))+(((-1.0)*sj0*x14617)));
evalcond[5]=(((r21*x14616))+((gconst67*r20*sj3))+x14623+x14621+((cj3*r21*x14626))+(((-1.0)*gconst68*x14619*x14627)));
evalcond[6]=(((r21*x14622))+((gconst67*x14619))+(((-1.0)*x14618))+x14617+((r20*x14613*x14616))+(((-1.0)*r21*x14614*x14626)));
evalcond[7]=((((-1.0)*r01*x14614*x14626))+((cj3*x14620))+((r00*x14613*x14616))+((cj0*x14621))+((cj0*x14623))+((r01*x14622)));
evalcond[8]=(((sj3*x14620))+(((-1.0)*x14617*x14624))+((cj0*x14618))+((cj3*r01*x14626))+((r01*x14616))+(((-1.0)*r00*x14622*x14627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14631=IKPowWithIntegerCheck(r12,-1);
if(!x14631.valid){
continue;
}
IkReal x14630=x14631.value;
CheckValue<IkReal> x14632=IKPowWithIntegerCheck(sj3,-1);
if(!x14632.valid){
continue;
}
if( IKabs((x14630*(x14632.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14630)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14630*(x14632.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x14630))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14630*(x14632.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x14630));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14633=IKsin(j4);
IkReal x14634=IKcos(j4);
IkReal x14635=((1.0)*sj3);
IkReal x14636=(cj2*sj0);
IkReal x14637=(gconst68*sj3);
IkReal x14638=(sj1*sj2);
IkReal x14639=(cj1*cj2);
IkReal x14640=(cj3*r20);
IkReal x14641=(gconst67*r00);
IkReal x14642=(cj2*sj1);
IkReal x14643=(cj3*gconst68);
IkReal x14644=(cj1*sj2);
IkReal x14645=((1.0)*cj0);
IkReal x14646=(r12*x14633);
IkReal x14647=(gconst67*x14634);
IkReal x14648=((1.0)*x14634);
IkReal x14649=(gconst67*x14633);
IkReal x14650=((1.0)*gconst68*x14633);
evalcond[0]=((((-1.0)*r12*x14648))+(((-1.0)*x14645)));
evalcond[1]=(((r21*x14649))+(((-1.0)*r20*x14650)));
evalcond[2]=(sj0+((r01*x14649))+(((-1.0)*r00*x14650)));
evalcond[3]=(((sj0*x14644))+(((-1.0)*x14635*x14646))+((sj1*x14636)));
evalcond[4]=((((-1.0)*sj0*x14638))+((cj1*x14636))+((cj3*x14646)));
evalcond[5]=(((cj3*r21*x14647))+((gconst67*r20*sj3))+(((-1.0)*gconst68*x14640*x14648))+x14642+x14644+((r21*x14637)));
evalcond[6]=(((gconst67*x14640))+((r20*x14634*x14637))+((r21*x14643))+(((-1.0)*r21*x14635*x14647))+x14638+(((-1.0)*x14639)));
evalcond[7]=(((cj0*x14642))+((cj0*x14644))+((r01*x14643))+(((-1.0)*r01*x14635*x14647))+((r00*x14634*x14637))+((cj3*x14641)));
evalcond[8]=((((-1.0)*r00*x14643*x14648))+((sj3*x14641))+((cj0*x14639))+((r01*x14637))+(((-1.0)*x14638*x14645))+((cj3*r01*x14647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14651=((-1.0)*r00);
CheckValue<IkReal> x14652 = IKatan2WithCheck(IkReal(x14651),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14652.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x14652.value))));
IkReal gconst70=x14651;
IkReal gconst71=((-1.0)*r01);
CheckValue<IkReal> x14653 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14653.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14653.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14654=((-1.0)*r00);
IkReal x14655=((-1.0)*py);
CheckValue<IkReal> x14657 = IKatan2WithCheck(IkReal(x14654),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14657.valid){
continue;
}
IkReal x14656=((1.0)*(x14657.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14655);
rxp0_2=(py*r00);
rxp1_0=(r21*x14655);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x14656)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x14656)));
IkReal gconst70=x14654;
IkReal gconst71=((-1.0)*r01);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14658=((-1.0)*r00);
IkReal x14659=((-1.0)*py);
CheckValue<IkReal> x14661 = IKatan2WithCheck(IkReal(x14658),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14661.valid){
continue;
}
IkReal x14660=((1.0)*(x14661.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14659);
rxp0_2=(py*r00);
rxp1_0=(r21*x14659);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x14660)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x14660)));
IkReal gconst70=x14658;
IkReal gconst71=((-1.0)*r01);
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14662=((-1.0)*r00);
IkReal x14663=((-1.0)*py);
CheckValue<IkReal> x14665 = IKatan2WithCheck(IkReal(x14662),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x14665.valid){
continue;
}
IkReal x14664=((1.0)*(x14665.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14663);
rxp0_2=(py*r00);
rxp1_0=(r21*x14663);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x14664)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x14664)));
IkReal gconst70=x14662;
IkReal gconst71=((-1.0)*r01);
IkReal x14666=((1.0)*cj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r00*r21*x14666))+((r01*r20*x14666)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14667=(cj2*sj1);
IkReal x14668=(cj1*sj2);
IkReal x14669=((1.0)*gconst71);
CheckValue<IkReal> x14670=IKPowWithIntegerCheck(r12,-1);
if(!x14670.valid){
continue;
}
CheckValue<IkReal> x14671=IKPowWithIntegerCheck(sj3,-1);
if(!x14671.valid){
continue;
}
CheckValue<IkReal> x14672=IKPowWithIntegerCheck((((cj3*gconst70*r21))+(((-1.0)*cj3*r20*x14669))),-1);
if(!x14672.valid){
continue;
}
if( IKabs(((x14670.value)*(x14671.value)*((((sj0*x14667))+((sj0*x14668)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14672.value)*(((((-1.0)*gconst70*r20*sj3))+(((-1.0)*x14667))+(((-1.0)*x14668))+(((-1.0)*r21*sj3*x14669)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14670.value)*(x14671.value)*((((sj0*x14667))+((sj0*x14668))))))+IKsqr(((x14672.value)*(((((-1.0)*gconst70*r20*sj3))+(((-1.0)*x14667))+(((-1.0)*x14668))+(((-1.0)*r21*sj3*x14669))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14670.value)*(x14671.value)*((((sj0*x14667))+((sj0*x14668))))), ((x14672.value)*(((((-1.0)*gconst70*r20*sj3))+(((-1.0)*x14667))+(((-1.0)*x14668))+(((-1.0)*r21*sj3*x14669))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14673=IKsin(j4);
IkReal x14674=IKcos(j4);
IkReal x14675=(cj1*sj0);
IkReal x14676=(cj3*r21);
IkReal x14677=(sj1*sj2);
IkReal x14678=(gconst71*r20);
IkReal x14679=(cj3*r00);
IkReal x14680=(r21*sj3);
IkReal x14681=(cj1*cj2);
IkReal x14682=(gconst70*r20);
IkReal x14683=(cj2*sj1);
IkReal x14684=(cj3*r01);
IkReal x14685=(gconst71*r00);
IkReal x14686=(r01*sj3);
IkReal x14687=(cj1*sj2);
IkReal x14688=((1.0)*cj0);
IkReal x14689=((1.0)*x14673);
IkReal x14690=(gconst70*x14673);
IkReal x14691=(gconst70*x14674);
IkReal x14692=((1.0)*x14674);
IkReal x14693=(sj3*x14674);
evalcond[0]=((((-1.0)*x14688))+(((-1.0)*r12*x14692)));
evalcond[1]=((((-1.0)*x14678*x14689))+((r21*x14690)));
evalcond[2]=(sj0+((r01*x14690))+(((-1.0)*x14685*x14689)));
evalcond[3]=((((-1.0)*r12*sj3*x14689))+((sj0*x14683))+((sj2*x14675)));
evalcond[4]=(((cj3*r12*x14673))+(((-1.0)*sj0*x14677))+((cj2*x14675)));
evalcond[5]=(((x14676*x14691))+((sj3*x14682))+x14687+x14683+((gconst71*x14680))+(((-1.0)*cj3*x14678*x14692)));
evalcond[6]=(((cj3*x14682))+((x14678*x14693))+((gconst71*x14676))+x14677+(((-1.0)*x14680*x14691))+(((-1.0)*x14681)));
evalcond[7]=((((-1.0)*x14686*x14691))+((gconst70*x14679))+((x14685*x14693))+((gconst71*x14684))+((cj0*x14687))+((cj0*x14683)));
evalcond[8]=((((-1.0)*x14677*x14688))+((x14684*x14691))+(((-1.0)*gconst71*x14679*x14692))+((gconst70*r00*sj3))+((gconst71*x14686))+((cj0*x14681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14695=IKPowWithIntegerCheck(r12,-1);
if(!x14695.valid){
continue;
}
IkReal x14694=x14695.value;
CheckValue<IkReal> x14696=IKPowWithIntegerCheck(cj3,-1);
if(!x14696.valid){
continue;
}
if( IKabs((x14694*(x14696.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14694)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14694*(x14696.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x14694))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14694*(x14696.value)*(((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))))), ((-1.0)*cj0*x14694));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14697=IKsin(j4);
IkReal x14698=IKcos(j4);
IkReal x14699=(cj1*sj0);
IkReal x14700=(cj3*r21);
IkReal x14701=(sj1*sj2);
IkReal x14702=(gconst71*r20);
IkReal x14703=(cj3*r00);
IkReal x14704=(r21*sj3);
IkReal x14705=(cj1*cj2);
IkReal x14706=(gconst70*r20);
IkReal x14707=(cj2*sj1);
IkReal x14708=(cj3*r01);
IkReal x14709=(gconst71*r00);
IkReal x14710=(r01*sj3);
IkReal x14711=(cj1*sj2);
IkReal x14712=((1.0)*cj0);
IkReal x14713=((1.0)*x14697);
IkReal x14714=(gconst70*x14697);
IkReal x14715=(gconst70*x14698);
IkReal x14716=((1.0)*x14698);
IkReal x14717=(sj3*x14698);
evalcond[0]=((((-1.0)*x14712))+(((-1.0)*r12*x14716)));
evalcond[1]=((((-1.0)*x14702*x14713))+((r21*x14714)));
evalcond[2]=(sj0+(((-1.0)*x14709*x14713))+((r01*x14714)));
evalcond[3]=(((sj0*x14707))+((sj2*x14699))+(((-1.0)*r12*sj3*x14713)));
evalcond[4]=(((cj2*x14699))+(((-1.0)*sj0*x14701))+((cj3*r12*x14697)));
evalcond[5]=(((gconst71*x14704))+((x14700*x14715))+x14711+x14707+(((-1.0)*cj3*x14702*x14716))+((sj3*x14706)));
evalcond[6]=((((-1.0)*x14705))+((gconst71*x14700))+((x14702*x14717))+((cj3*x14706))+x14701+(((-1.0)*x14704*x14715)));
evalcond[7]=((((-1.0)*x14710*x14715))+((cj0*x14707))+((gconst71*x14708))+((gconst70*x14703))+((cj0*x14711))+((x14709*x14717)));
evalcond[8]=(((cj0*x14705))+(((-1.0)*x14701*x14712))+(((-1.0)*gconst71*x14703*x14716))+((gconst71*x14710))+((gconst70*r00*sj3))+((x14708*x14715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14719=IKPowWithIntegerCheck(r12,-1);
if(!x14719.valid){
continue;
}
IkReal x14718=x14719.value;
CheckValue<IkReal> x14720=IKPowWithIntegerCheck(sj3,-1);
if(!x14720.valid){
continue;
}
if( IKabs((x14718*(x14720.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14718)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14718*(x14720.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x14718))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14718*(x14720.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x14718));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14721=IKsin(j4);
IkReal x14722=IKcos(j4);
IkReal x14723=(cj1*sj0);
IkReal x14724=(cj3*r21);
IkReal x14725=(sj1*sj2);
IkReal x14726=(gconst71*r20);
IkReal x14727=(cj3*r00);
IkReal x14728=(r21*sj3);
IkReal x14729=(cj1*cj2);
IkReal x14730=(gconst70*r20);
IkReal x14731=(cj2*sj1);
IkReal x14732=(cj3*r01);
IkReal x14733=(gconst71*r00);
IkReal x14734=(r01*sj3);
IkReal x14735=(cj1*sj2);
IkReal x14736=((1.0)*cj0);
IkReal x14737=((1.0)*x14721);
IkReal x14738=(gconst70*x14721);
IkReal x14739=(gconst70*x14722);
IkReal x14740=((1.0)*x14722);
IkReal x14741=(sj3*x14722);
evalcond[0]=((((-1.0)*x14736))+(((-1.0)*r12*x14740)));
evalcond[1]=((((-1.0)*x14726*x14737))+((r21*x14738)));
evalcond[2]=(((r01*x14738))+sj0+(((-1.0)*x14733*x14737)));
evalcond[3]=(((sj0*x14731))+(((-1.0)*r12*sj3*x14737))+((sj2*x14723)));
evalcond[4]=((((-1.0)*sj0*x14725))+((cj3*r12*x14721))+((cj2*x14723)));
evalcond[5]=(((sj3*x14730))+x14731+x14735+((x14724*x14739))+((gconst71*x14728))+(((-1.0)*cj3*x14726*x14740)));
evalcond[6]=((((-1.0)*x14729))+(((-1.0)*x14728*x14739))+((cj3*x14730))+x14725+((x14726*x14741))+((gconst71*x14724)));
evalcond[7]=(((cj0*x14735))+((cj0*x14731))+((x14733*x14741))+((gconst70*x14727))+(((-1.0)*x14734*x14739))+((gconst71*x14732)));
evalcond[8]=(((cj0*x14729))+(((-1.0)*gconst71*x14727*x14740))+((x14732*x14739))+((gconst70*r00*sj3))+((gconst71*x14734))+(((-1.0)*x14725*x14736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14742=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14742);
rxp0_2=(py*r00);
rxp1_0=(r21*x14742);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14743=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14743);
rxp0_2=(py*r00);
rxp1_0=(r21*x14743);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14744=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14744);
rxp0_2=(py*r00);
rxp1_0=(r21*x14744);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14747=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x14747.valid){
continue;
}
IkReal x14745=x14747.value;
IkReal x14746=((1.0)*cj0*x14745);
cj4array[0]=((((-1.0)*cj1*sj2*x14746))+(((-1.0)*cj2*sj1*x14746)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14748=IKsin(j4);
IkReal x14749=IKcos(j4);
IkReal x14750=(r21*sj5);
IkReal x14751=((1.0)*x14749);
IkReal x14752=((1.0)*cj5*x14748);
evalcond[0]=((-1.0)*r12*x14748);
evalcond[1]=((((-1.0)*r12*x14751))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*r20*x14752))+((x14748*x14750)));
evalcond[3]=((((-1.0)*r00*x14752))+((r01*sj5*x14748)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14750*x14751))+((cj5*r20*x14749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14754=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x14754.valid){
continue;
}
IkReal x14753=x14754.value;
cj4array[0]=((((-1.0)*sj1*sj2*x14753))+((cj1*cj2*x14753)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14755=IKsin(j4);
IkReal x14756=IKcos(j4);
IkReal x14757=(cj5*r00);
IkReal x14758=((1.0)*x14755);
IkReal x14759=(sj5*x14755);
IkReal x14760=((1.0)*x14756);
evalcond[0]=((-1.0)*r12*x14755);
evalcond[1]=((((-1.0)*r12*x14760))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*cj5*r20*x14758))+((r21*x14759)));
evalcond[3]=((((-1.0)*x14757*x14758))+((r01*x14759)));
evalcond[4]=((((-1.0)*r01*sj5*x14760))+((x14756*x14757))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14761=IKPowWithIntegerCheck(r12,-1);
if(!x14761.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x14761.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14762=IKsin(j4);
IkReal x14763=IKcos(j4);
IkReal x14764=(cj5*r00);
IkReal x14765=(cj5*r20);
IkReal x14766=(r21*sj5);
IkReal x14767=(r01*sj5);
IkReal x14768=((1.0)*x14762);
IkReal x14769=((1.0)*x14763);
evalcond[0]=((-1.0)*r12*x14762);
evalcond[1]=(((x14762*x14766))+(((-1.0)*x14765*x14768)));
evalcond[2]=(((x14762*x14767))+(((-1.0)*x14764*x14768)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14766*x14769))+((x14763*x14765)));
evalcond[4]=(((cj0*cj2*sj1))+(((-1.0)*x14767*x14769))+((cj0*cj1*sj2))+((x14763*x14764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14770=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14770);
rxp0_2=(py*r00);
rxp1_0=(r21*x14770);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14771=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14771);
rxp0_2=(py*r00);
rxp1_0=(r21*x14771);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14772=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14772);
rxp0_2=(py*r00);
rxp1_0=(r21*x14772);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14775=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x14775.valid){
continue;
}
IkReal x14773=x14775.value;
IkReal x14774=((1.0)*cj0*x14773);
cj4array[0]=((((-1.0)*cj2*sj1*x14774))+(((-1.0)*cj1*sj2*x14774)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14776=IKsin(j4);
IkReal x14777=IKcos(j4);
IkReal x14778=(r21*sj5);
IkReal x14779=((1.0)*x14777);
IkReal x14780=((1.0)*cj5*x14776);
evalcond[0]=(r12*x14776);
evalcond[1]=((((-1.0)*r12*x14779))+(((-1.0)*cj0)));
evalcond[2]=(((x14776*x14778))+(((-1.0)*r20*x14780)));
evalcond[3]=(((r01*sj5*x14776))+(((-1.0)*r00*x14780)));
evalcond[4]=((((-1.0)*cj5*r20*x14779))+((x14777*x14778))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14782=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x14782.valid){
continue;
}
IkReal x14781=x14782.value;
cj4array[0]=(((cj1*cj2*x14781))+(((-1.0)*sj1*sj2*x14781)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14783=IKsin(j4);
IkReal x14784=IKcos(j4);
IkReal x14785=(r01*sj5);
IkReal x14786=((1.0)*cj5*r00);
evalcond[0]=(r12*x14783);
evalcond[1]=((((-1.0)*r12*x14784))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*cj5*r20*x14783))+((r21*sj5*x14783)));
evalcond[3]=((((-1.0)*x14783*x14786))+((x14783*x14785)));
evalcond[4]=((((-1.0)*x14784*x14786))+((x14784*x14785))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14787=IKPowWithIntegerCheck(r12,-1);
if(!x14787.valid){
continue;
}
cj4array[0]=((-1.0)*cj0*(x14787.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14788=IKsin(j4);
IkReal x14789=IKcos(j4);
IkReal x14790=(sj5*x14789);
IkReal x14791=(sj5*x14788);
IkReal x14792=((1.0)*cj5*x14788);
IkReal x14793=((1.0)*cj5*x14789);
evalcond[0]=(r12*x14788);
evalcond[1]=((((-1.0)*r20*x14792))+((r21*x14791)));
evalcond[2]=((((-1.0)*r00*x14792))+((r01*x14791)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x14793))+((r21*x14790)));
evalcond[4]=((((-1.0)*r00*x14793))+((r01*x14790))+((cj0*cj2*sj1))+((cj0*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14795=IKPowWithIntegerCheck(r12,-1);
if(!x14795.valid){
continue;
}
IkReal x14794=x14795.value;
CheckValue<IkReal> x14796=IKPowWithIntegerCheck(sj3,-1);
if(!x14796.valid){
continue;
}
if( IKabs((x14794*(x14796.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14794)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14794*(x14796.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x14794))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14794*(x14796.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x14794));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14797=IKsin(j4);
IkReal x14798=IKcos(j4);
IkReal x14799=(cj2*sj0);
IkReal x14800=(sj1*sj2);
IkReal x14801=(cj5*sj3);
IkReal x14802=(cj3*cj5);
IkReal x14803=(cj1*cj2);
IkReal x14804=(r21*sj5);
IkReal x14805=(r00*sj5);
IkReal x14806=(cj2*sj1);
IkReal x14807=(r01*sj5);
IkReal x14808=(r20*sj5);
IkReal x14809=(cj1*sj2);
IkReal x14810=((1.0)*cj0);
IkReal x14811=((1.0)*x14797);
IkReal x14812=(r20*x14798);
IkReal x14813=(r00*x14798);
IkReal x14814=(cj3*x14798);
IkReal x14815=((1.0)*x14798);
evalcond[0]=((((-1.0)*x14810))+(((-1.0)*r12*x14815)));
evalcond[1]=(((x14797*x14804))+(((-1.0)*cj5*r20*x14811)));
evalcond[2]=(sj0+(((-1.0)*cj5*r00*x14811))+((x14797*x14807)));
evalcond[3]=(((sj1*x14799))+(((-1.0)*r12*sj3*x14811))+((sj0*x14809)));
evalcond[4]=(((cj3*r12*x14797))+((cj1*x14799))+(((-1.0)*sj0*x14800)));
evalcond[5]=(((sj3*x14808))+((r21*x14801))+x14806+x14809+(((-1.0)*x14802*x14812))+((x14804*x14814)));
evalcond[6]=(((cj3*x14808))+((r21*x14802))+x14800+(((-1.0)*sj3*x14804*x14815))+(((-1.0)*x14803))+((x14801*x14812)));
evalcond[7]=(((cj3*x14805))+((r01*x14802))+(((-1.0)*sj3*x14807*x14815))+((cj0*x14806))+((cj0*x14809))+((x14801*x14813)));
evalcond[8]=(((sj3*x14805))+(((-1.0)*x14800*x14810))+((x14807*x14814))+(((-1.0)*x14802*x14813))+((r01*x14801))+((cj0*x14803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14816=((1.0)*sj3);
IkReal x14817=((1.0)*cj5);
CheckValue<IkReal> x14818=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x14817))),-1);
if(!x14818.valid){
continue;
}
CheckValue<IkReal> x14819=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x14817))+((cj3*r21*sj5))),-1);
if(!x14819.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x14818.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14819.value)*(((((-1.0)*r20*sj5*x14816))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x14816)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x14818.value)))+IKsqr(((x14819.value)*(((((-1.0)*r20*sj5*x14816))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x14816))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x14818.value)), ((x14819.value)*(((((-1.0)*r20*sj5*x14816))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x14816))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14820=IKsin(j4);
IkReal x14821=IKcos(j4);
IkReal x14822=(cj2*sj0);
IkReal x14823=(sj1*sj2);
IkReal x14824=(cj5*sj3);
IkReal x14825=(cj3*cj5);
IkReal x14826=(cj1*cj2);
IkReal x14827=(r21*sj5);
IkReal x14828=(r00*sj5);
IkReal x14829=(cj2*sj1);
IkReal x14830=(r01*sj5);
IkReal x14831=(r20*sj5);
IkReal x14832=(cj1*sj2);
IkReal x14833=((1.0)*cj0);
IkReal x14834=((1.0)*x14820);
IkReal x14835=(r20*x14821);
IkReal x14836=(r00*x14821);
IkReal x14837=(cj3*x14821);
IkReal x14838=((1.0)*x14821);
evalcond[0]=((((-1.0)*r12*x14838))+(((-1.0)*x14833)));
evalcond[1]=(((x14820*x14827))+(((-1.0)*cj5*r20*x14834)));
evalcond[2]=(sj0+(((-1.0)*cj5*r00*x14834))+((x14820*x14830)));
evalcond[3]=(((sj1*x14822))+(((-1.0)*r12*sj3*x14834))+((sj0*x14832)));
evalcond[4]=(((cj3*r12*x14820))+((cj1*x14822))+(((-1.0)*sj0*x14823)));
evalcond[5]=(((r21*x14824))+x14829+x14832+(((-1.0)*x14825*x14835))+((x14827*x14837))+((sj3*x14831)));
evalcond[6]=(((r21*x14825))+x14823+(((-1.0)*sj3*x14827*x14838))+((cj3*x14831))+(((-1.0)*x14826))+((x14824*x14835)));
evalcond[7]=((((-1.0)*sj3*x14830*x14838))+((cj0*x14832))+((cj3*x14828))+((r01*x14825))+((cj0*x14829))+((x14824*x14836)));
evalcond[8]=(((x14830*x14837))+((sj3*x14828))+(((-1.0)*x14825*x14836))+((r01*x14824))+((cj0*x14826))+(((-1.0)*x14823*x14833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14839=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x14839.valid){
continue;
}
CheckValue<IkReal> x14840=IKPowWithIntegerCheck(r12,-1);
if(!x14840.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x14839.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x14840.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x14839.value)))+IKsqr(((-1.0)*cj0*(x14840.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x14839.value)), ((-1.0)*cj0*(x14840.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14841=IKsin(j4);
IkReal x14842=IKcos(j4);
IkReal x14843=(cj2*sj0);
IkReal x14844=(sj1*sj2);
IkReal x14845=(cj5*sj3);
IkReal x14846=(cj3*cj5);
IkReal x14847=(cj1*cj2);
IkReal x14848=(r21*sj5);
IkReal x14849=(r00*sj5);
IkReal x14850=(cj2*sj1);
IkReal x14851=(r01*sj5);
IkReal x14852=(r20*sj5);
IkReal x14853=(cj1*sj2);
IkReal x14854=((1.0)*cj0);
IkReal x14855=((1.0)*x14841);
IkReal x14856=(r20*x14842);
IkReal x14857=(r00*x14842);
IkReal x14858=(cj3*x14842);
IkReal x14859=((1.0)*x14842);
evalcond[0]=((((-1.0)*x14854))+(((-1.0)*r12*x14859)));
evalcond[1]=((((-1.0)*cj5*r20*x14855))+((x14841*x14848)));
evalcond[2]=(((x14841*x14851))+sj0+(((-1.0)*cj5*r00*x14855)));
evalcond[3]=(((sj0*x14853))+((sj1*x14843))+(((-1.0)*r12*sj3*x14855)));
evalcond[4]=((((-1.0)*sj0*x14844))+((cj3*r12*x14841))+((cj1*x14843)));
evalcond[5]=(x14850+x14853+((sj3*x14852))+(((-1.0)*x14846*x14856))+((x14848*x14858))+((r21*x14845)));
evalcond[6]=(((x14845*x14856))+(((-1.0)*x14847))+x14844+((cj3*x14852))+(((-1.0)*sj3*x14848*x14859))+((r21*x14846)));
evalcond[7]=(((x14845*x14857))+((cj0*x14850))+((cj0*x14853))+(((-1.0)*sj3*x14851*x14859))+((cj3*x14849))+((r01*x14846)));
evalcond[8]=(((cj0*x14847))+((sj3*x14849))+(((-1.0)*x14846*x14857))+((x14851*x14858))+(((-1.0)*x14844*x14854))+((r01*x14845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14860=((1.0)*cj5);
CheckValue<IkReal> x14861 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x14860))+(((-1.0)*cj0*r00*x14860))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14861.valid){
continue;
}
CheckValue<IkReal> x14862=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14860))+(((-1.0)*r20*sj5)))),-1);
if(!x14862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14861.value)+(((1.5707963267949)*(x14862.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14863=IKsin(j4);
IkReal x14864=IKcos(j4);
IkReal x14865=(r11*sj5);
IkReal x14866=(cj2*sj0);
IkReal x14867=(cj5*r10);
IkReal x14868=(sj1*sj2);
IkReal x14869=(cj5*r01);
IkReal x14870=(cj5*r00);
IkReal x14871=(cj1*cj2);
IkReal x14872=(cj3*sj5);
IkReal x14873=(r21*sj5);
IkReal x14874=(cj5*sj3);
IkReal x14875=(sj3*sj5);
IkReal x14876=(cj2*sj1);
IkReal x14877=(r01*sj5);
IkReal x14878=(cj3*cj5);
IkReal x14879=(cj1*sj2);
IkReal x14880=((1.0)*cj0);
IkReal x14881=(cj5*r20);
IkReal x14882=((1.0)*x14864);
IkReal x14883=((1.0)*x14863);
IkReal x14884=(cj3*x14864);
IkReal x14885=(sj3*x14864);
IkReal x14886=(cj3*x14863);
evalcond[0]=((((-1.0)*r22*x14882))+((x14863*x14873))+(((-1.0)*x14881*x14883)));
evalcond[1]=((((-1.0)*r02*x14882))+sj0+((x14863*x14877))+(((-1.0)*x14870*x14883)));
evalcond[2]=((((-1.0)*x14867*x14883))+(((-1.0)*r12*x14882))+((x14863*x14865))+(((-1.0)*x14880)));
evalcond[3]=(((r22*x14886))+x14876+x14879+((r21*x14874))+(((-1.0)*r20*x14878*x14882))+((r20*x14875))+((r21*x14864*x14872)));
evalcond[4]=((((-1.0)*r22*sj3*x14883))+x14868+(((-1.0)*sj3*x14873*x14882))+((r21*x14878))+((r20*x14872))+((r20*x14864*x14874))+(((-1.0)*x14871)));
evalcond[5]=(((cj0*x14879))+((cj0*x14876))+((x14870*x14885))+(((-1.0)*r01*x14875*x14882))+((r00*x14872))+(((-1.0)*r02*sj3*x14883))+((cj3*x14869)));
evalcond[6]=(((cj0*x14871))+(((-1.0)*x14868*x14880))+((r01*x14864*x14872))+((r00*x14875))+((sj3*x14869))+(((-1.0)*cj3*x14870*x14882))+((r02*x14886)));
evalcond[7]=(((r11*x14878))+((r10*x14872))+((sj1*x14866))+((x14867*x14885))+(((-1.0)*r12*sj3*x14883))+(((-1.0)*sj3*x14865*x14882))+((sj0*x14879)));
evalcond[8]=(((r11*x14874))+((x14865*x14884))+((r10*x14875))+(((-1.0)*sj0*x14868))+((r12*x14886))+((cj1*x14866))+(((-1.0)*cj3*x14867*x14882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14887=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14887.valid){
continue;
}
CheckValue<IkReal> x14888 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14887.value)))+(x14888.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14889=IKsin(j4);
IkReal x14890=IKcos(j4);
IkReal x14891=(r11*sj5);
IkReal x14892=(cj2*sj0);
IkReal x14893=(cj5*r10);
IkReal x14894=(sj1*sj2);
IkReal x14895=(cj5*r01);
IkReal x14896=(cj5*r00);
IkReal x14897=(cj1*cj2);
IkReal x14898=(cj3*sj5);
IkReal x14899=(r21*sj5);
IkReal x14900=(cj5*sj3);
IkReal x14901=(sj3*sj5);
IkReal x14902=(cj2*sj1);
IkReal x14903=(r01*sj5);
IkReal x14904=(cj3*cj5);
IkReal x14905=(cj1*sj2);
IkReal x14906=((1.0)*cj0);
IkReal x14907=(cj5*r20);
IkReal x14908=((1.0)*x14890);
IkReal x14909=((1.0)*x14889);
IkReal x14910=(cj3*x14890);
IkReal x14911=(sj3*x14890);
IkReal x14912=(cj3*x14889);
evalcond[0]=((((-1.0)*x14907*x14909))+(((-1.0)*r22*x14908))+((x14889*x14899)));
evalcond[1]=(sj0+(((-1.0)*r02*x14908))+((x14889*x14903))+(((-1.0)*x14896*x14909)));
evalcond[2]=((((-1.0)*x14893*x14909))+(((-1.0)*r12*x14908))+((x14889*x14891))+(((-1.0)*x14906)));
evalcond[3]=(((r22*x14912))+((r21*x14900))+x14902+x14905+((r21*x14890*x14898))+((r20*x14901))+(((-1.0)*r20*x14904*x14908)));
evalcond[4]=(((r21*x14904))+x14894+(((-1.0)*r22*sj3*x14909))+(((-1.0)*sj3*x14899*x14908))+((r20*x14890*x14900))+(((-1.0)*x14897))+((r20*x14898)));
evalcond[5]=(((cj0*x14905))+((cj0*x14902))+(((-1.0)*r01*x14901*x14908))+((r00*x14898))+(((-1.0)*r02*sj3*x14909))+((cj3*x14895))+((x14896*x14911)));
evalcond[6]=(((r00*x14901))+((r01*x14890*x14898))+((r02*x14912))+(((-1.0)*x14894*x14906))+((sj3*x14895))+(((-1.0)*cj3*x14896*x14908))+((cj0*x14897)));
evalcond[7]=(((r10*x14898))+((r11*x14904))+((sj1*x14892))+(((-1.0)*sj3*x14891*x14908))+((sj0*x14905))+((x14893*x14911))+(((-1.0)*r12*sj3*x14909)));
evalcond[8]=(((r11*x14900))+((r12*x14912))+((cj1*x14892))+((x14891*x14910))+(((-1.0)*sj0*x14894))+((r10*x14901))+(((-1.0)*cj3*x14893*x14908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14913=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14913.valid){
continue;
}
CheckValue<IkReal> x14914 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14913.value)))+(x14914.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14915=IKsin(j4);
IkReal x14916=IKcos(j4);
IkReal x14917=(r11*sj5);
IkReal x14918=(cj2*sj0);
IkReal x14919=(cj5*r10);
IkReal x14920=(sj1*sj2);
IkReal x14921=(cj5*r01);
IkReal x14922=(cj5*r00);
IkReal x14923=(cj1*cj2);
IkReal x14924=(cj3*sj5);
IkReal x14925=(r21*sj5);
IkReal x14926=(cj5*sj3);
IkReal x14927=(sj3*sj5);
IkReal x14928=(cj2*sj1);
IkReal x14929=(r01*sj5);
IkReal x14930=(cj3*cj5);
IkReal x14931=(cj1*sj2);
IkReal x14932=((1.0)*cj0);
IkReal x14933=(cj5*r20);
IkReal x14934=((1.0)*x14916);
IkReal x14935=((1.0)*x14915);
IkReal x14936=(cj3*x14916);
IkReal x14937=(sj3*x14916);
IkReal x14938=(cj3*x14915);
evalcond[0]=(((x14915*x14925))+(((-1.0)*x14933*x14935))+(((-1.0)*r22*x14934)));
evalcond[1]=(sj0+((x14915*x14929))+(((-1.0)*r02*x14934))+(((-1.0)*x14922*x14935)));
evalcond[2]=((((-1.0)*x14932))+(((-1.0)*r12*x14934))+((x14915*x14917))+(((-1.0)*x14919*x14935)));
evalcond[3]=((((-1.0)*r20*x14930*x14934))+x14928+x14931+((r21*x14916*x14924))+((r21*x14926))+((r22*x14938))+((r20*x14927)));
evalcond[4]=((((-1.0)*x14923))+((r20*x14916*x14926))+x14920+(((-1.0)*r22*sj3*x14935))+(((-1.0)*sj3*x14925*x14934))+((r21*x14930))+((r20*x14924)));
evalcond[5]=((((-1.0)*r02*sj3*x14935))+((cj0*x14928))+((cj0*x14931))+((r00*x14924))+((cj3*x14921))+(((-1.0)*r01*x14927*x14934))+((x14922*x14937)));
evalcond[6]=((((-1.0)*x14920*x14932))+((cj0*x14923))+(((-1.0)*cj3*x14922*x14934))+((r00*x14927))+((sj3*x14921))+((r02*x14938))+((r01*x14916*x14924)));
evalcond[7]=(((sj0*x14931))+(((-1.0)*r12*sj3*x14935))+((r10*x14924))+(((-1.0)*sj3*x14917*x14934))+((sj1*x14918))+((r11*x14930))+((x14919*x14937)));
evalcond[8]=((((-1.0)*cj3*x14919*x14934))+((cj1*x14918))+((r10*x14927))+((r11*x14926))+((r12*x14938))+((x14917*x14936))+(((-1.0)*sj0*x14920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14939=cj5*cj5;
IkReal x14940=r21*r21;
IkReal x14941=r20*r20;
IkReal x14942=(r20*r21);
IkReal x14943=((1.0)*cj3);
IkReal x14944=((1.0)*cj5);
IkReal x14945=(cj1*sj2);
IkReal x14946=(cj5*sj5);
IkReal x14947=(sj3*sj5);
IkReal x14948=(cj2*sj1);
IkReal x14949=(r21*sj5);
CheckValue<IkReal> x14950 = IKatan2WithCheck(IkReal((((r20*r22*x14947))+((r22*x14945))+((r22*x14948))+((cj5*r21*r22*sj3)))),IkReal(((((-2.0)*sj3*x14939*x14942))+((sj3*x14940*x14946))+((x14948*x14949))+((sj3*x14942))+(((-1.0)*x14941*x14944*x14947))+(((-1.0)*r20*x14944*x14945))+(((-1.0)*r20*x14944*x14948))+((x14945*x14949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14950.valid){
continue;
}
CheckValue<IkReal> x14951=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14940*x14943))+((cj3*x14939*x14940))+(((-1.0)*x14939*x14941*x14943))+(((-1.0)*x14943*(r22*r22)))+(((2.0)*cj3*x14942*x14946)))),-1);
if(!x14951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14950.value)+(((1.5707963267949)*(x14951.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x14952=IKsin(j4);
IkReal x14953=IKcos(j4);
IkReal x14954=(cj3*r21);
IkReal x14955=(r21*sj5);
IkReal x14956=(r20*sj5);
IkReal x14957=(cj5*r20);
IkReal x14958=((1.0)*x14953);
IkReal x14959=((1.0)*x14952);
evalcond[0]=((((-1.0)*x14957*x14959))+((x14952*x14955))+(((-1.0)*r22*x14958)));
evalcond[1]=(((cj3*r22*x14952))+((cj2*sj1))+((cj5*r21*sj3))+((cj1*sj2))+((sj5*x14953*x14954))+(((-1.0)*cj3*x14957*x14958))+((sj3*x14956)));
evalcond[2]=((((-1.0)*sj3*x14955*x14958))+((cj5*x14954))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*x14959))+((sj3*x14953*x14957))+((cj3*x14956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14960=(cj5*sj4);
IkReal x14961=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x14961))+((r00*x14960))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x14961))+(((-1.0)*r10*x14960))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x14961))+((r00*x14960))+((cj4*r02))))+IKsqr((((r11*x14961))+(((-1.0)*r10*x14960))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x14961))+((r00*x14960))+((cj4*r02))), (((r11*x14961))+(((-1.0)*r10*x14960))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14962=IKcos(j0);
IkReal x14963=IKsin(j0);
IkReal x14964=(r02*sj4);
IkReal x14965=((0.1)*sj5);
IkReal x14966=(sj1*sj2);
IkReal x14967=(cj5*r11);
IkReal x14968=((1.0)*sj3);
IkReal x14969=(r12*sj4);
IkReal x14970=((1.0)*cj3);
IkReal x14971=(cj1*cj2);
IkReal x14972=(r11*sj5);
IkReal x14973=(cj3*cj4);
IkReal x14974=(cj5*r01);
IkReal x14975=(r01*sj5);
IkReal x14976=((0.425)*cj1);
IkReal x14977=(cj2*sj1);
IkReal x14978=(r00*sj5);
IkReal x14979=(cj1*sj2);
IkReal x14980=(r10*sj5);
IkReal x14981=((1.0)*cj4);
IkReal x14982=((0.392)*x14963);
IkReal x14983=(cj4*cj5*r00);
IkReal x14984=(cj4*cj5*r10);
IkReal x14985=((0.392)*x14962);
IkReal x14986=((1.0)*x14962);
IkReal x14987=((1.0)*cj5*sj4);
evalcond[0]=(((sj4*x14975))+(((-1.0)*r00*x14987))+x14963+(((-1.0)*r02*x14981)));
evalcond[1]=(((sj4*x14972))+(((-1.0)*r10*x14987))+(((-1.0)*r12*x14981))+(((-1.0)*x14986)));
evalcond[2]=((((-1.0)*x14971*x14985))+(((0.134)*x14963))+(((-0.1)*x14974))+(((-1.0)*x14962*x14976))+(((-1.0)*r00*x14965))+(((-1.0)*px))+((x14966*x14985)));
evalcond[3]=((((-1.0)*x14971*x14982))+(((-1.0)*x14963*x14976))+(((-0.134)*x14962))+(((-0.1)*x14967))+(((-1.0)*r10*x14965))+(((-1.0)*py))+((x14966*x14982)));
evalcond[4]=(((cj3*x14978))+((cj3*x14974))+((x14962*x14977))+((x14962*x14979))+(((-1.0)*cj4*x14968*x14975))+((sj3*x14983))+(((-1.0)*x14964*x14968)));
evalcond[5]=(((cj3*x14964))+(((-1.0)*x14966*x14986))+(((-1.0)*x14970*x14983))+((sj3*x14978))+((sj3*x14974))+((x14962*x14971))+((x14973*x14975)));
evalcond[6]=(((cj3*x14967))+((x14963*x14979))+((x14963*x14977))+((cj3*x14980))+(((-1.0)*x14968*x14969))+(((-1.0)*cj4*x14968*x14972))+((sj3*x14984)));
evalcond[7]=(((cj3*x14969))+(((-1.0)*x14963*x14966))+((x14963*x14971))+((sj3*x14967))+(((-1.0)*x14970*x14984))+((x14972*x14973))+((sj3*x14980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14988=cj5*cj5;
IkReal x14989=r21*r21;
IkReal x14990=r20*r20;
IkReal x14991=(r20*r21);
IkReal x14992=(sj1*sj2);
IkReal x14993=(r21*sj5);
IkReal x14994=(cj1*cj2);
IkReal x14995=(cj5*r20);
IkReal x14996=(cj5*sj5);
IkReal x14997=(cj3*r22);
IkReal x14998=(sj3*x14989);
CheckValue<IkReal> x14999=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x14991*x14996))+x14998+((sj3*x14988*x14990))+(((-1.0)*x14988*x14998)))),-1);
if(!x14999.valid){
continue;
}
CheckValue<IkReal> x15000 = IKatan2WithCheck(IkReal((((cj5*r21*x14997))+(((-1.0)*r22*x14994))+((r20*sj5*x14997))+((r22*x14992)))),IkReal(((((-1.0)*x14993*x14994))+((cj3*x14989*x14996))+((cj3*x14991))+((x14994*x14995))+(((-2.0)*cj3*x14988*x14991))+(((-1.0)*cj3*x14990*x14996))+(((-1.0)*x14992*x14995))+((x14992*x14993)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14999.value)))+(x15000.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15001=IKsin(j4);
IkReal x15002=IKcos(j4);
IkReal x15003=(cj3*r21);
IkReal x15004=(r21*sj5);
IkReal x15005=(r20*sj5);
IkReal x15006=(cj5*r20);
IkReal x15007=((1.0)*x15002);
IkReal x15008=((1.0)*x15001);
evalcond[0]=(((x15001*x15004))+(((-1.0)*r22*x15007))+(((-1.0)*x15006*x15008)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+((sj3*x15005))+((cj1*sj2))+((cj3*r22*x15001))+((sj5*x15002*x15003))+(((-1.0)*cj3*x15006*x15007)));
evalcond[2]=(((cj5*x15003))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((sj3*x15002*x15006))+((cj3*x15005))+(((-1.0)*r22*sj3*x15008))+(((-1.0)*sj3*x15004*x15007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15009=(cj5*sj4);
IkReal x15010=(sj4*sj5);
if( IKabs((((r00*x15009))+(((-1.0)*r01*x15010))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x15009))+((r11*x15010))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x15009))+(((-1.0)*r01*x15010))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x15009))+((r11*x15010))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x15009))+(((-1.0)*r01*x15010))+((cj4*r02))), ((((-1.0)*r10*x15009))+((r11*x15010))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15011=IKcos(j0);
IkReal x15012=IKsin(j0);
IkReal x15013=(r02*sj4);
IkReal x15014=((0.1)*sj5);
IkReal x15015=(sj1*sj2);
IkReal x15016=(cj5*r11);
IkReal x15017=((1.0)*sj3);
IkReal x15018=(r12*sj4);
IkReal x15019=((1.0)*cj3);
IkReal x15020=(cj1*cj2);
IkReal x15021=(r11*sj5);
IkReal x15022=(cj3*cj4);
IkReal x15023=(cj5*r01);
IkReal x15024=(r01*sj5);
IkReal x15025=((0.425)*cj1);
IkReal x15026=(cj2*sj1);
IkReal x15027=(r00*sj5);
IkReal x15028=(cj1*sj2);
IkReal x15029=(r10*sj5);
IkReal x15030=((1.0)*cj4);
IkReal x15031=((0.392)*x15012);
IkReal x15032=(cj4*cj5*r00);
IkReal x15033=(cj4*cj5*r10);
IkReal x15034=((0.392)*x15011);
IkReal x15035=((1.0)*x15011);
IkReal x15036=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r02*x15030))+x15012+((sj4*x15024))+(((-1.0)*r00*x15036)));
evalcond[1]=((((-1.0)*x15035))+((sj4*x15021))+(((-1.0)*r12*x15030))+(((-1.0)*r10*x15036)));
evalcond[2]=((((-1.0)*x15011*x15025))+(((0.134)*x15012))+(((-0.1)*x15023))+(((-1.0)*px))+((x15015*x15034))+(((-1.0)*x15020*x15034))+(((-1.0)*r00*x15014)));
evalcond[3]=((((-1.0)*r10*x15014))+(((-1.0)*py))+(((-0.1)*x15016))+(((-1.0)*x15012*x15025))+((x15015*x15031))+(((-1.0)*x15020*x15031))+(((-0.134)*x15011)));
evalcond[4]=(((sj3*x15032))+(((-1.0)*x15013*x15017))+((x15011*x15028))+((x15011*x15026))+((cj3*x15023))+((cj3*x15027))+(((-1.0)*cj4*x15017*x15024)));
evalcond[5]=((((-1.0)*x15015*x15035))+((cj3*x15013))+(((-1.0)*x15019*x15032))+((x15022*x15024))+((x15011*x15020))+((sj3*x15023))+((sj3*x15027)));
evalcond[6]=(((cj3*x15016))+((sj3*x15033))+((x15012*x15026))+((x15012*x15028))+(((-1.0)*x15017*x15018))+((cj3*x15029))+(((-1.0)*cj4*x15017*x15021)));
evalcond[7]=(((cj3*x15018))+((x15012*x15020))+(((-1.0)*x15019*x15033))+((sj3*x15016))+(((-1.0)*x15012*x15015))+((x15021*x15022))+((sj3*x15029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5 (66dd9d12af076bc9c36b7f61851b85ae)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
