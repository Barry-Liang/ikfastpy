/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2018-07-22 21:48:57.279322
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[0]);
x11=IKsin(j[4]);
x12=((0.39225)*x0);
x13=((0.2723)*x6);
x14=((0.09465)*x0);
x15=((1.0)*x6);
x16=((1.0)*x10);
x17=((0.09465)*x10);
x18=((1.0)*x0);
x19=((0.39225)*x4);
x20=((0.2723)*x5);
x21=((0.425)*x1);
x22=((1.0)*x9);
x23=((1.0)*x5);
x24=(x1*x2);
x25=(x10*x9);
x26=(x1*x4);
x27=(x2*x3);
x28=(x3*x4);
x29=(x18*x28);
x30=(x16*x28);
x31=(x26+x27);
x32=((((-1.0)*x28))+(((1.0)*x24)));
x33=(x31*x5);
x34=(x32*x6);
x35=(((x0*x24))+(((-1.0)*x29)));
x36=((((-1.0)*x30))+((x10*x24)));
x37=(x18*(((((-1.0)*x26))+(((-1.0)*x27)))));
x38=(x16*(((((-1.0)*x26))+(((-1.0)*x27)))));
x39=(x35*x5);
x40=(x36*x5);
x41=(((x32*x5))+((x6*(((((-1.0)*x26))+(((-1.0)*x27)))))));
x42=(x39+((x37*x6)));
x43=(x40+((x38*x6)));
x44=(((x37*x5))+((x6*(((((-1.0)*x18*x24))+x29)))));
x45=(((x38*x5))+((x6*(((((-1.0)*x16*x24))+x30)))));
x46=(x42*x9);
eerot[0]=(((x7*((x46+((x10*x11))))))+((x44*x8)));
eerot[1]=(((x44*x7))+((x8*(((((-1.0)*x11*x16))+(((-1.0)*x22*x42)))))));
eerot[2]=(x25+((x11*(((((-1.0)*x23*x35))+(((-1.0)*x15*x37)))))));
eetrans[0]=((((0.10915)*x10))+(((-1.0)*x0*x21))+(((-1.0)*x12*x24))+(((0.2723)*x25))+((x5*((((x14*x27))+((x14*x26))))))+((x12*x28))+((x11*(((((-1.0)*x20*x35))+(((-1.0)*x13*x37))))))+((x6*((((x14*x24))+(((-1.0)*x14*x28)))))));
eerot[3]=(((x7*(((((-1.0)*x0*x11))+((x43*x9))))))+((x45*x8)));
eerot[4]=(((x8*(((((-1.0)*x22*x43))+((x11*x18))))))+((x45*x7)));
eerot[5]=(((x11*(((((-1.0)*x23*x36))+(((-1.0)*x15*x38))))))+(((-1.0)*x18*x9)));
eetrans[1]=((((-0.39225)*x10*x24))+(((-0.2723)*x0*x9))+((x6*(((((-1.0)*x17*x28))+((x17*x24))))))+(((-0.10915)*x0))+((x11*(((((-1.0)*x20*x36))+(((-1.0)*x13*x38))))))+((x5*((((x17*x26))+((x17*x27))))))+(((-1.0)*x10*x21))+((x10*x19*x3)));
eerot[6]=(((x7*x9*((x33+x34))))+((x41*x8)));
eerot[7]=(((x41*x7))+((x8*x9*(((((-1.0)*x34))+(((-1.0)*x33)))))));
eerot[8]=(x11*(((((-1.0)*x23*x31))+(((-1.0)*x15*x32)))));
eetrans[2]=((0.089159)+(((-1.0)*x1*x19))+((x6*(((((0.09465)*x26))+(((0.09465)*x27))))))+(((-0.425)*x3))+((x11*(((((-1.0)*x20*x31))+(((-1.0)*x13*x32))))))+((x5*(((((-0.09465)*x24))+(((0.09465)*x28))))))+(((-0.39225)*x27)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.2723)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.2723)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.089159)+pz+(((-0.2723)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x47=((1.0)*px);
IkReal x48=((1.0)*pz);
IkReal x49=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x49))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x48)));
rxp0_2=((((-1.0)*r10*x47))+((py*r00)));
rxp1_0=((((-1.0)*r21*x49))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x48)));
rxp1_2=((((-1.0)*r11*x47))+((py*r01)));
rxp2_0=((((-1.0)*r22*x49))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x48))+((px*r22)));
rxp2_2=((((-1.0)*r12*x47))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x50=((0.1893)*npx);
IkReal x51=((0.1893)*npy);
IkReal x52=((0.09465)*r22);
IkReal x53=((0.09465)*r21);
IkReal x54=((-0.09465)*r20);
IkReal x55=((-1.0)*r20);
IkReal x56=((-1.0)*rxp0_2);
IkReal x57=((-0.09465)*r21);
IkReal x58=((-1.0)*r21);
IkReal x59=((-1.0)*rxp1_2);
IkReal x60=((-1.0)*npx);
IkReal x61=((-1.0)*r22);
IkReal x62=((-1.0)*npz);
matrixinvcoeffs[0]=x54;
matrixinvcoeffs[1]=x50;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x55;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x56;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x54;
matrixinvcoeffs[19]=x50;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x55;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x56;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x57;
matrixinvcoeffs[33]=x51;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x58;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x59;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x57;
matrixinvcoeffs[51]=x51;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x58;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x59;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x61;
matrixinvcoeffs[76]=x52;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x62;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x52;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x59;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x57;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x59;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x53;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x55;
matrixinvcoeffs[133]=x60;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.09465)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x55;
matrixinvcoeffs[151]=x60;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x54;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x61;
matrixinvcoeffs[165]=x62;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x52;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x61;
matrixinvcoeffs[183]=x62;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.09465)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x58;
matrixinvcoeffs[204]=x53;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x59;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x53;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x60;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x54;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x55;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x54;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x56;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x63=pz*pz;
IkReal x64=pp*pp;
IkReal x65=((0.1893)*pz);
IkReal x66=((1.7)*pz);
IkReal x67=(gclwh15_9*npx);
IkReal x68=(gclwh6_11*r21);
IkReal x69=(pp*r22);
IkReal x70=((0.00702803935125)*r21);
IkReal x71=(gclwh5_9*npz);
IkReal x72=(gclwh8_11*r20);
IkReal x73=(npy*pz);
IkReal x74=((3.60823078949063e-5)*r22);
IkReal x75=(gclwh14_3*rxp0_2);
IkReal x76=((0.000977833645875)*r20);
IkReal x77=(npz*pz);
IkReal x78=((0.000977833645875)*r21);
IkReal x79=(gclwh10_12*r22);
IkReal x80=(gclwh10_2*rxp2_2);
IkReal x81=((0.00076243651125)*rxp1_2);
IkReal x82=((0.00600991575645741)*r20);
IkReal x83=((0.154705425)*rxp1_2);
IkReal x84=((0.017917245)*r21);
IkReal x85=(gclwh6_11*rxp1_2);
IkReal x86=((0.3786)*rxp1_2);
IkReal x87=(gclwh7_0*rxp1_2);
IkReal x88=((0.7572)*rxp1_2);
IkReal x89=((0.154705425)*rxp2_2);
IkReal x90=((2.0)*gclwh11_10);
IkReal x91=(gclwh12_8*r21);
IkReal x92=((0.81725)*pp);
IkReal x93=(pp*pz);
IkReal x94=(gclwh14_2*r20);
IkReal x95=(pp*r21);
IkReal x96=((2.0)*gclwh4_11);
IkReal x97=(gclwh8_12*r20);
IkReal x98=(npx*pz);
IkReal x99=(gclwh14_8*rxp0_2);
IkReal x100=((0.1893)*rxp2_2);
IkReal x101=(gclwh5_9*rxp2_2);
IkReal x102=((0.020662095)*rxp1_2);
IkReal x103=((0.007321434238125)*r21);
IkReal x104=((1.6345)*pz);
IkReal x105=((0.0089586225)*pz);
IkReal x106=(gclwh13_0*r21);
IkReal x107=(gclwh5_9*r22);
IkReal x108=(gclwh11_10*r22);
IkReal x109=(gclwh11_13*r22);
IkReal x110=((1.0)*r21);
IkReal x111=((0.3786)*rxp0_2);
IkReal x112=(gclwh14_14*rxp0_2);
IkReal x113=(pp*r20);
IkReal x114=((0.00195566729175)*r22);
IkReal x115=(gclwh15_10*rxp0_2);
IkReal x116=(gclwh14_8*r20);
IkReal x117=(gclwh12_8*rxp1_2);
IkReal x118=((2.0)*gclwh9_10);
IkReal x119=((2.0)*gclwh15_10);
IkReal x120=(gclwh5_15*rxp2_2);
IkReal x121=((2.0)*gclwh13_10);
IkReal x122=((0.00702803935125)*r20);
IkReal x123=(gclwh13_9*r21);
IkReal x124=(gclwh5_0*r22);
IkReal x125=((0.01464286847625)*r20);
IkReal x126=(gclwh15_1*r20);
IkReal x127=((0.000977833645875)*r22);
IkReal x128=((0.0089586225)*r20);
IkReal x129=((2.0)*gclwh10_11);
IkReal x130=(gclwh5_10*r22);
IkReal x131=((2.0)*pp);
IkReal x132=(gclwh15_9*r20);
IkReal x133=(gclwh1_3*r20);
IkReal x134=((0.00195566729175)*r20);
IkReal x135=(gclwh4_3*rxp2_2);
IkReal x136=((0.2183)*gclwh13_15);
IkReal x137=((2.0)*gclwh7_10);
IkReal x138=(gclwh15_0*r20);
IkReal x139=(gclwh9_0*r20);
IkReal x140=(gclwh15_15*rxp0_2);
IkReal x141=(gclwh2_1*r21);
IkReal x142=((4.0)*gclwh11_10);
IkReal x143=((0.30941085)*rxp0_2);
IkReal x144=(gclwh9_0*rxp0_2);
IkReal x145=(gclwh5_10*rxp2_2);
IkReal x146=((0.2183)*gclwh12_14);
IkReal x147=((0.2183)*gclwh14_14);
IkReal x148=(gclwh4_2*rxp2_2);
IkReal x149=((0.03275)*pp);
IkReal x150=((0.006199575)*rxp1_2);
IkReal x151=(gclwh12_2*rxp1_2);
IkReal x152=(gclwh5_0*rxp2_2);
IkReal x153=((3.60823078949063e-5)*r21);
IkReal x154=(gclwh14_11*rxp0_2);
IkReal x155=((0.020662095)*rxp0_2);
IkReal x156=(gclwh14_8*npx);
IkReal x157=((4.0)*gclwh9_10);
IkReal x158=((0.00195566729175)*r21);
IkReal x159=(gclwh8_12*rxp0_2);
IkReal x160=((0.01464286847625)*r21);
IkReal x161=((0.3786)*rxp2_2);
IkReal x162=((0.01464286847625)*r22);
IkReal x163=(gclwh7_13*r21);
IkReal x164=((4.0)*gclwh7_10);
IkReal x165=(gclwh13_0*rxp1_2);
IkReal x166=((0.1893)*rxp1_2);
IkReal x167=(gclwh6_2*r21);
IkReal x168=(gclwh5_1*rxp2_2);
IkReal x169=(gclwh8_2*rxp0_2);
IkReal x170=(gclwh9_10*r20);
IkReal x171=((4.0)*pp);
IkReal x172=(gclwh15_1*rxp0_2);
IkReal x173=(gclwh9_13*r20);
IkReal x174=((0.0089586225)*r21);
IkReal x175=(gclwh0_0*r20);
IkReal x176=(gclwh10_11*r22);
IkReal x177=((2.0)*gclwh12_11);
IkReal x178=((0.0655)*pz);
IkReal x179=((0.006199575)*rxp2_2);
IkReal x180=(gclwh12_14*rxp1_2);
IkReal x181=(gclwh15_0*rxp0_2);
IkReal x182=((2.0)*npx);
IkReal x183=(gclwh9_13*rxp0_2);
IkReal x184=((1.0)*pp);
IkReal x185=((4.0)*gclwh10_11);
IkReal x186=(gclwh15_9*rxp0_2);
IkReal x187=((3.60823078949063e-5)*r20);
IkReal x188=((0.00702803935125)*r22);
IkReal x189=(gclwh8_2*r20);
IkReal x190=((0.2183)*gclwh5_15);
IkReal x191=(gclwh10_2*r22);
IkReal x192=(gclwh5_1*r22);
IkReal x193=(gclwh13_9*rxp1_2);
IkReal x194=((2.0)*gclwh5_10);
IkReal x195=((0.020662095)*rxp2_2);
IkReal x196=(gclwh4_8*r22);
IkReal x197=((0.017917245)*r20);
IkReal x198=(gclwh7_0*r21);
IkReal x199=((0.00600991575645741)*r21);
IkReal x200=(gclwh11_0*r22);
IkReal x201=(gclwh6_12*r21);
IkReal x202=((0.2183)*gclwh15_15);
IkReal x203=(gclwh11_0*rxp2_2);
IkReal x204=((0.2183)*gclwh4_14);
IkReal x205=(gclwh4_14*rxp2_2);
IkReal x206=(gclwh6_2*rxp1_2);
IkReal x207=((0.1893)*rxp0_2);
IkReal x208=(gclwh4_8*rxp2_2);
IkReal x209=((0.12699240901125)*rxp1_2);
IkReal x210=(gclwh14_2*rxp0_2);
IkReal x211=(gclwh4_3*r22);
IkReal x212=((0.1893)*pp);
IkReal x213=(gclwh13_15*rxp1_2);
IkReal x214=(gclwh1_2*r20);
IkReal x215=((2.0)*gclwh14_11);
IkReal x216=(gclwh4_11*r22);
IkReal x217=((0.020662095)*x112);
IkReal x218=(gclwh6_5*x78);
IkReal x219=(gclwh8_5*x76);
IkReal x220=(gclwh12_14*x102);
IkReal x221=(gclwh10_5*x127);
IkReal x222=(gclwh4_14*x195);
IkReal x223=((0.0089586225)*x68);
IkReal x224=(gclwh12_11*x166);
IkReal x225=((0.017917245)*x117);
IkReal x226=((0.017917245)*x208);
IkReal x227=(gclwh4_11*x100);
IkReal x228=((0.0089586225)*x72);
IkReal x229=((0.1893)*x154);
IkReal x230=((0.0089586225)*x176);
IkReal x231=((0.017917245)*x99);
IkReal x232=((0.017917245)*x101);
IkReal x233=((0.0089586225)*x108);
IkReal x234=((0.1893)*x115);
IkReal x235=((0.017917245)*x193);
IkReal x236=(gclwh9_10*x128);
IkReal x237=((0.017917245)*x186);
IkReal x238=(gclwh13_10*x166);
IkReal x239=(gclwh7_10*x174);
IkReal x240=(gclwh5_10*x100);
IkReal x241=((0.020662095)*x140);
IkReal x242=(gclwh7_7*x78);
IkReal x243=(gclwh9_7*x76);
IkReal x244=(gclwh13_15*x102);
IkReal x245=((0.020662095)*x120);
IkReal x246=(gclwh11_7*x127);
IkReal x247=(gclwh10_5*x195);
IkReal x248=(gclwh8_5*x155);
IkReal x249=(gclwh14_14*x76);
IkReal x250=(gclwh6_5*x102);
IkReal x251=(gclwh4_14*x127);
IkReal x252=(gclwh12_14*x78);
IkReal x253=(gclwh8_11*x207);
IkReal x254=((0.000847933619625)*x91);
IkReal x255=(gclwh12_11*x174);
IkReal x256=(gclwh10_11*x100);
IkReal x257=((0.0089586225)*x216);
IkReal x258=((0.000847933619625)*x196);
IkReal x259=((0.1893)*x85);
IkReal x260=(gclwh14_11*x128);
IkReal x261=((0.000847933619625)*x116);
IkReal x262=(gclwh9_10*x207);
IkReal x263=(gclwh13_10*x174);
IkReal x264=(gclwh11_10*x100);
IkReal x265=((0.000847933619625)*x132);
IkReal x266=((0.0089586225)*x130);
IkReal x267=((0.000847933619625)*x107);
IkReal x268=(gclwh7_10*x166);
IkReal x269=((0.000847933619625)*x123);
IkReal x270=(gclwh15_10*x128);
IkReal x271=(gclwh5_15*x127);
IkReal x272=(gclwh7_7*x102);
IkReal x273=(gclwh13_15*x78);
IkReal x274=(gclwh15_15*x76);
IkReal x275=(gclwh9_7*x155);
IkReal x276=(gclwh11_7*x195);
IkReal x277=((0.017917245)*x176);
IkReal x278=(gclwh14_11*x111);
IkReal x279=((0.017917245)*x72);
IkReal x280=((0.04132419)*x112);
IkReal x281=((0.04132419)*x180);
IkReal x282=((0.04132419)*x205);
IkReal x283=(gclwh4_11*x161);
IkReal x284=((0.017917245)*x68);
IkReal x285=(gclwh12_11*x86);
IkReal x286=((0.04132419)*x120);
IkReal x287=((0.04132419)*x213);
IkReal x288=((0.04132419)*x140);
IkReal x289=((0.017917245)*x170);
IkReal x290=(gclwh15_10*x111);
IkReal x291=((0.017917245)*x108);
IkReal x292=(gclwh7_10*x84);
IkReal x293=((0.3786)*x145);
IkReal x294=(gclwh13_10*x86);
IkReal x295=((0.3786)*x85);
IkReal x296=(gclwh14_11*x197);
IkReal x297=(gclwh14_14*x134);
IkReal x298=(gclwh4_14*x114);
IkReal x299=(gclwh12_14*x158);
IkReal x300=(gclwh14_8*x113);
IkReal x301=((2.0)*x63);
IkReal x302=((1.0)*x64);
IkReal x303=(r21*x64);
IkReal x304=((0.2183)*gclwh10_5*x77);
IkReal x305=((0.2183)*gclwh8_5*x98);
IkReal x306=((0.10915)*gclwh6_5*x95);
IkReal x307=((0.2183)*gclwh6_5*x73);
IkReal x308=((0.10915)*gclwh8_5*x113);
IkReal x309=((0.10915)*gclwh10_5*x69);
IkReal x310=(gclwh12_3*pp*x166);
IkReal x311=(x129*x77);
IkReal x312=(x105*x189);
IkReal x313=((2.0)*gclwh8_11*x98);
IkReal x314=(gclwh10_2*pz*x69);
IkReal x315=(x210*x65);
IkReal x316=(x189*x93);
IkReal x317=(gclwh4_3*pp*x100);
IkReal x318=(x105*x191);
IkReal x319=(x151*x65);
IkReal x320=((2.0)*gclwh6_11*x73);
IkReal x321=(x148*x65);
IkReal x322=(x212*x75);
IkReal x323=(x105*x167);
IkReal x324=(gclwh13_1*pp*x166);
IkReal x325=(x105*x200);
IkReal x326=(x105*x139);
IkReal x327=(gclwh5_1*pp*x100);
IkReal x328=(x181*x65);
IkReal x329=(gclwh11_0*pz*x69);
IkReal x330=(x137*x73);
IkReal x331=(x139*x93);
IkReal x332=(x77*x90);
IkReal x333=(x172*x212);
IkReal x334=(x118*x98);
IkReal x335=(x105*x198);
IkReal x336=(x165*x65);
IkReal x337=(x152*x65);
IkReal x338=((0.10915)*gclwh7_7*x95);
IkReal x339=((0.2183)*gclwh9_7*x98);
IkReal x340=((0.2183)*gclwh11_7*x77);
IkReal x341=((0.10915)*gclwh9_7*x113);
IkReal x342=((0.2183)*gclwh7_7*x73);
IkReal x343=((0.10915)*gclwh11_7*x69);
IkReal x344=((0.10915)*gclwh14_14*x113);
IkReal x345=(x204*x77);
IkReal x346=(x146*x73);
IkReal x347=((0.10915)*gclwh12_14*x95);
IkReal x348=(x147*x98);
IkReal x349=((0.10915)*gclwh4_14*x69);
IkReal x350=((0.09465)*gclwh4_8*x69);
IkReal x351=(x93*x94);
IkReal x352=(gclwh12_3*x303);
IkReal x353=(x206*x65);
IkReal x354=(gclwh3_3*x303);
IkReal x355=(x133*x64);
IkReal x356=(gclwh3_2*r21*x105);
IkReal x357=(x215*x98);
IkReal x358=(x156*x65);
IkReal x359=(x105*x94);
IkReal x360=((0.09465)*pp*x91);
IkReal x361=(x211*x64);
IkReal x362=(x105*x214);
IkReal x363=(x169*x65);
IkReal x364=(x77*x96);
IkReal x365=(gclwh4_2*r22*x105);
IkReal x366=(gclwh4_8*npz*x65);
IkReal x367=(gclwh12_2*r21*x105);
IkReal x368=(x65*x80);
IkReal x369=((0.09465)*x300);
IkReal x370=(x177*x73);
IkReal x371=(gclwh12_8*npy*x65);
IkReal x372=(x126*x64);
IkReal x373=(x65*x71);
IkReal x374=(gclwh5_0*pz*x69);
IkReal x375=(gclwh13_9*npy*x65);
IkReal x376=(x105*x124);
IkReal x377=(x106*x93);
IkReal x378=((0.09465)*gclwh15_9*x113);
IkReal x379=(x119*x98);
IkReal x380=(x105*x106);
IkReal x381=(x141*x64);
IkReal x382=(gclwh2_0*r21*x105);
IkReal x383=(x144*x65);
IkReal x384=(x203*x65);
IkReal x385=(gclwh0_1*r20*x64);
IkReal x386=(x105*x175);
IkReal x387=((0.09465)*gclwh5_9*x69);
IkReal x388=(x65*x87);
IkReal x389=((0.09465)*gclwh13_9*x95);
IkReal x390=(x105*x138);
IkReal x391=(x65*x67);
IkReal x392=(x194*x77);
IkReal x393=(x121*x73);
IkReal x394=((0.10915)*gclwh13_15*x95);
IkReal x395=((0.10915)*gclwh5_15*x69);
IkReal x396=(x202*x98);
IkReal x397=((0.10915)*gclwh15_15*x113);
IkReal x398=(x190*x77);
IkReal x399=(x136*x73);
IkReal x400=(x131*x72);
IkReal x401=(x129*x69);
IkReal x402=((4.0)*gclwh6_11*x73);
IkReal x403=((4.0)*gclwh8_11*x98);
IkReal x404=(x131*x68);
IkReal x405=(x185*x77);
IkReal x406=(x69*x90);
IkReal x407=(x164*x73);
IkReal x408=(x113*x118);
IkReal x409=(x137*x95);
IkReal x410=(x157*x98);
IkReal x411=(x142*x77);
IkReal x412=(x113*x215);
IkReal x413=((4.0)*gclwh12_11*x73);
IkReal x414=((4.0)*gclwh4_11*x77);
IkReal x415=(x113*x147);
IkReal x416=((0.4366)*gclwh12_14*x73);
IkReal x417=((0.4366)*gclwh4_14*x77);
IkReal x418=(x146*x95);
IkReal x419=((0.4366)*gclwh14_14*x98);
IkReal x420=(x204*x69);
IkReal x421=(gclwh6_2*npy*x301);
IkReal x422=(gclwh6_2*x110*x93);
IkReal x423=(gclwh10_2*npz*x301);
IkReal x424=(gclwh8_2*x182*x63);
IkReal x425=(gclwh7_0*npy*x301);
IkReal x426=(gclwh9_0*x182*x63);
IkReal x427=(gclwh11_0*npz*x301);
IkReal x428=(gclwh7_0*x110*x93);
IkReal x429=(gclwh12_2*npy*x301);
IkReal x430=(gclwh3_2*npy*x301);
IkReal x431=(gclwh1_2*x182*x63);
IkReal x432=(gclwh14_3*x182*x93);
IkReal x433=(gclwh4_2*npz*x301);
IkReal x434=(gclwh4_3*x131*x77);
IkReal x435=(gclwh12_2*x110*x93);
IkReal x436=((1.0)*x214*x93);
IkReal x437=(gclwh3_3*x131*x73);
IkReal x438=((1.0)*gclwh4_2*pz*x69);
IkReal x439=(gclwh1_3*x182*x93);
IkReal x440=(gclwh3_2*x110*x93);
IkReal x441=(gclwh12_3*x131*x73);
IkReal x442=(gclwh14_2*x182*x63);
IkReal x443=(gclwh14_3*r20*x302);
IkReal x444=(gclwh0_0*x182*x63);
IkReal x445=(gclwh2_0*npy*x301);
IkReal x446=(gclwh5_1*x131*x77);
IkReal x447=(gclwh13_1*x131*x73);
IkReal x448=(gclwh15_0*x182*x63);
IkReal x449=(gclwh2_1*x131*x73);
IkReal x450=(gclwh0_1*x182*x93);
IkReal x451=(gclwh5_0*npz*x301);
IkReal x452=(gclwh13_0*npy*x301);
IkReal x453=((1.0)*x175*x93);
IkReal x454=((1.0)*x138*x93);
IkReal x455=(gclwh2_0*x110*x93);
IkReal x456=(gclwh13_1*x110*x64);
IkReal x457=(x192*x302);
IkReal x458=(gclwh15_1*x182*x93);
IkReal x459=(x282+x281);
IkReal x460=(x287+x286);
IkReal x461=(x247+x248);
IkReal x462=(x220+x222);
IkReal x463=(x245+x244);
IkReal x464=(x276+x275);
IkReal x465=(x320+x229+x228+x230);
IkReal x466=(x330+x233+x236+x234);
IkReal x467=(x393+x392+x268+x270);
IkReal x468=(x370+x364+x259+x260);
IkReal x469=(x297+x416+x417+x415);
IkReal x470=(x306+x304+x305+x218);
IkReal x471=(x346+x344+x345+x249);
IkReal x472=(x397+x399+x398+x274);
IkReal x473=(x339+x338+x340+x242);
IkReal x474=(x379+x264+x266+x263+x262);
IkReal x475=(x357+x255+x256+x257+x253);
IkReal x476=(x311+x313+x223+x224+x227);
IkReal x477=(x332+x334+x238+x239+x240);
IkReal x478=(x347+x348+x349+x251+x252);
IkReal x479=(x395+x394+x396+x273+x271);
IkReal x480=(x342+x343+x341+x243+x246);
IkReal x481=(x298+x299+x418+x419+x420);
IkReal x482=(x295+x296+x412+x413+x414);
IkReal x483=(x308+x309+x307+x219+x221);
IkReal x484=(x285+x284+x283+x403+x405+x404);
IkReal x485=(x292+x293+x294+x409+x410+x411);
IkReal x486=(x290+x291+x289+x407+x406+x408);
IkReal x487=(x277+x278+x279+x401+x400+x402);
IkReal x488=(((x177*x95))+((x69*x96))+((gclwh12_11*x84))+(((0.017917245)*x216))+((gclwh10_11*x161))+(((4.0)*gclwh14_11*x98))+((gclwh8_11*x111)));
IkReal x489=(x321+x322+x323+x319+x231+x424+x423+x422);
IkReal x490=(x333+x337+x336+x335+x237+x428+x427+x426);
IkReal x491=(x318+x315+x314+x317+x316+x310+x312+x225+x226+x421);
IkReal x492=(x331+x324+x325+x326+x327+x328+x329+x232+x235+x425);
IkReal x493=(x387+x388+x389+x391+x390+x267+x269+x449+x458+x456+x457+x454+x455+x452+x453+x450+x451);
IkReal x494=(x351+x350+x353+x352+x355+x354+x356+x359+x358+x360+x361+x362+x258+x254+x429+x430+x431+x432+x433+x65);
IkReal x495=(x371+x368+x369+x363+x365+x366+x367+x261+x438+x439+x434+x435+x436+x437+x441+x440+x443+x442);
IkReal x496=(x386+x384+x385+x382+x383+x380+x381+x378+x377+x376+x375+x374+x373+x372+x265+x448+x445+x444+x447+x446+x65);
op[0]=((((1.6345)*gclwh10_12*x77))+(((0.154705425)*x99))+(((-1.0)*x483))+((gclwh6_12*x103))+(((-0.007321434238125)*x97))+(((-1.6345)*gclwh6_12*x73))+(((-1.0)*gclwh4_8*x89))+x462+x470+(((-1.0)*x92*x97))+(((-0.81725)*gclwh10_12*x69))+((x201*x92))+(((-1.0)*x217))+(((1.6345)*gclwh8_12*x98))+(((-0.007321434238125)*x79))+(((-1.0)*gclwh12_8*x83)));
op[1]=((((-1.0)*x489))+(((-1.0)*gclwh12_3*x209))+(((-1.0)*x476))+(((-0.12699240901125)*x135))+x491+x465+((pp*x72))+(((0.12699240901125)*x75))+((gclwh10_11*x69))+(((-1.0)*x184*x68)));
op[2]=((-0.17125635)+(((-1.0)*x484))+x487);
op[3]=(((gclwh8_2*x122))+((gclwh10_2*x188))+(((-0.160905)*x99))+(((0.7845)*gclwh8_2*x113))+(((-1.0)*gclwh6_2*x70))+(((-0.7845)*gclwh6_2*x95))+(((0.160905)*x208))+(((-0.14850585)*x148))+(((-0.14850585)*x151))+(((-1.569)*gclwh10_2*x77))+(((0.7845)*gclwh10_2*x69))+(((0.160905)*x117))+(((0.14850585)*x210))+(((-1.0)*x459))+x280+(((-1.569)*gclwh8_2*x98))+(((1.569)*gclwh6_2*x73)));
op[4]=((((-0.000293394886875)*x79))+(((-0.0655)*gclwh6_12*x73))+(((-1.0)*x483))+(((0.03275)*gclwh6_12*x95))+(((-1.0)*x462))+(((-0.03275)*gclwh10_12*x69))+(((-0.000293394886875)*x97))+((gclwh4_8*x179))+x217+x470+(((-1.0)*x149*x97))+(((0.0655)*gclwh10_12*x77))+(((0.0655)*gclwh8_12*x98))+(((0.006199575)*x117))+(((0.000293394886875)*x201))+(((-0.006199575)*x99)));
op[5]=((((-1.0)*x184*x72))+((pp*x68))+(((-1.0)*x489))+(((-1.0)*x465))+x491+x476+(((-1.0)*gclwh12_3*x81))+(((-0.00076243651125)*x135))+(((0.00076243651125)*x75))+(((-1.0)*gclwh10_11*x69)));
op[6]=((((0.12699240901125)*x172))+(((-1.0)*x490))+(((-1.0)*gclwh9_10*x113))+((gclwh7_10*x95))+(((-1.0)*gclwh13_1*x209))+(((-1.0)*gclwh11_10*x69))+(((-1.0)*x466))+x492+x477+(((-0.12699240901125)*x168)));
op[7]=(((gclwh7_13*x103))+(((-1.0)*gclwh13_9*x83))+((x163*x92))+(((-1.0)*x480))+(((0.154705425)*x186))+(((-1.0)*gclwh5_9*x89))+x463+x473+(((1.6345)*gclwh9_13*x98))+(((-1.0)*x173*x92))+(((-0.007321434238125)*x109))+(((-1.0)*x241))+(((-0.007321434238125)*x173))+(((1.6345)*gclwh11_13*x77))+(((-1.6345)*gclwh7_13*x73))+(((-0.81725)*gclwh11_13*x69)));
op[8]=((((-0.160905)*x193))+(((0.160905)*x186))+(((-1.0)*gclwh7_0*x70))+(((-0.160905)*x101))+(((0.14850585)*x181))+(((1.569)*gclwh7_0*x73))+(((0.7845)*gclwh11_0*x69))+(((-0.14850585)*x152))+(((-0.14850585)*x165))+((gclwh9_0*x122))+x460+(((-1.569)*gclwh11_0*x77))+(((-1.569)*gclwh9_0*x98))+(((-1.0)*x288))+(((-0.7845)*gclwh7_0*x95))+((gclwh11_0*x188))+(((0.7845)*gclwh9_0*x113)));
op[9]=((-0.17125635)+(((-1.0)*x485))+x486);
op[10]=((((-1.0)*x490))+(((-1.0)*gclwh7_10*x95))+(((-1.0)*x477))+x492+x466+(((0.00076243651125)*x172))+((gclwh9_10*x113))+(((-0.00076243651125)*x168))+(((-1.0)*gclwh13_1*x81))+((gclwh11_10*x69)));
op[11]=((((0.000293394886875)*x163))+(((-0.03275)*gclwh9_13*x113))+(((0.03275)*gclwh7_13*x95))+(((-0.006199575)*x186))+(((-1.0)*x480))+(((-0.0655)*gclwh7_13*x73))+(((-1.0)*x463))+((gclwh13_9*x150))+(((-0.000293394886875)*x109))+(((0.0655)*gclwh11_13*x77))+(((-0.03275)*gclwh11_13*x69))+x241+x473+(((0.0655)*gclwh9_13*x98))+(((-0.000293394886875)*x173))+(((0.006199575)*x101)));
op[12]=((((1.6345)*gclwh4_8*x77))+(((1.6345)*gclwh12_8*x73))+(((-1.6345)*gclwh14_8*x98))+(((-1.0)*x91*x92))+(((-0.007321434238125)*x91))+(((-1.0)*x471))+(((0.154705425)*x159))+((gclwh10_12*x89))+x461+x478+(((-0.81725)*gclwh4_8*x69))+(((0.007321434238125)*x116))+((x116*x92))+(((-1.0)*x250))+(((-1.0)*gclwh6_12*x83))+(((-0.007321434238125)*x196)));
op[13]=((-0.679811285)+(((1.341705325)*gclwh12_3*x73))+(((-1.0)*x495))+(((1.341705325)*gclwh4_3*x77))+(((-1.0)*gclwh12_3*x199))+(((-0.66189404)*gclwh4_3*x69))+(((-0.66189404)*gclwh12_3*x95))+(((-1.0)*x475))+((gclwh3_3*x199))+(((-0.679811285)*gclwh1_3*x113))+(((-0.679811285)*gclwh3_3*x95))+(((1.341705325)*gclwh3_3*x73))+(((-1.0)*gclwh4_11*x69))+(((1.341705325)*gclwh1_3*x98))+x494+x468+((gclwh1_3*x82))+((gclwh14_3*x82))+(((-1.341705325)*gclwh14_3*x98))+((gclwh14_11*x113))+(((-1.0)*gclwh12_11*x95))+(((-0.00600991575645741)*x211))+(((0.66189404)*gclwh14_3*x113)));
op[14]=((-0.07735732)+(((-1.0)*x488))+x482);
op[15]=((((-1.0)*gclwh4_2*x188))+(((-0.85)*x300))+(((1.569)*gclwh3_2*x73))+(((0.7845)*pp*x94))+(((-1.0)*x481))+(((-0.14850585)*x80))+((gclwh3_2*x70))+(((-0.7845)*gclwh12_2*x95))+(((-0.007614829125)*x116))+(((1.569)*gclwh12_2*x73))+(((-0.14850585)*x169))+(((0.00702803935125)*x94))+(((0.85)*pp*x91))+((x156*x66))+(((0.007614829125)*x91))+x469+(((0.007614829125)*x196))+(((-0.7845)*gclwh1_2*x113))+(((0.85)*gclwh4_8*x69))+(((1.569)*gclwh4_2*x77))+(((-0.7845)*gclwh3_2*x95))+(((-1.569)*gclwh14_2*x98))+(((-1.0)*gclwh12_2*x70))+(((1.569)*gclwh1_2*x98))+(((-1.0)*gclwh12_8*npy*x66))+((gclwh1_2*x122))+(((-1.0)*gclwh4_8*npz*x66))+(((0.14850585)*x206))+(((-0.7845)*gclwh4_2*x69)));
op[16]=((((0.0655)*gclwh14_8*x98))+(((0.03275)*gclwh4_8*x69))+(((-1.0)*gclwh6_12*x150))+(((-0.0655)*gclwh12_8*x73))+(((-0.0655)*gclwh4_8*x77))+(((-0.03275)*x300))+(((-1.0)*x478))+(((-0.000293394886875)*x116))+(((0.000293394886875)*x91))+x461+x471+(((0.006199575)*x159))+((gclwh10_12*x179))+((x149*x91))+(((0.000293394886875)*x196))+(((-1.0)*x250)));
op[17]=((0.012986285)+(((-0.00493096)*gclwh14_3*x113))+(((-1.0)*gclwh14_11*x113))+(((0.008055325)*gclwh3_3*x73))+(((-1.0)*x495))+((gclwh4_11*x69))+(((0.00493096)*gclwh4_3*x69))+(((-1.0)*x468))+(((-0.012986285)*gclwh3_3*x95))+(((0.008055325)*gclwh12_3*x73))+x494+x475+(((0.008055325)*gclwh4_3*x77))+(((-0.008055325)*gclwh14_3*x98))+((gclwh3_3*x153))+(((0.00493096)*gclwh12_3*x95))+(((3.60823078949063e-5)*x133))+(((-1.0)*gclwh4_3*x74))+(((-0.012986285)*gclwh1_3*x113))+((gclwh12_11*x95))+((gclwh14_3*x187))+(((-1.0)*gclwh12_3*x153))+(((0.008055325)*gclwh1_3*x98)));
op[18]=((0.679811285)+(((0.66189404)*gclwh5_1*x69))+(((-1.0)*x493))+(((1.341705325)*gclwh0_1*x98))+(((0.00600991575645741)*x192))+(((-0.66189404)*gclwh15_1*x113))+(((0.00600991575645741)*x141))+(((-1.0)*gclwh15_1*x82))+(((-0.679811285)*gclwh0_1*x113))+(((-1.341705325)*gclwh5_1*x77))+(((-1.0)*x474))+(((-1.341705325)*gclwh13_1*x73))+(((-1.0)*gclwh13_10*x95))+((gclwh0_1*x82))+((gclwh15_10*x113))+(((-1.0)*gclwh5_10*x69))+x496+x467+(((0.66189404)*gclwh13_1*x95))+(((1.341705325)*gclwh2_1*x73))+(((-0.679811285)*gclwh2_1*x95))+(((1.341705325)*gclwh15_1*x98))+((gclwh13_1*x199)));
op[19]=(((x104*x67))+(((-1.0)*x479))+(((-1.0)*x464))+(((-1.0)*gclwh11_13*x89))+(((-0.154705425)*x183))+x272+x472+(((-0.007321434238125)*x132))+(((-1.6345)*gclwh13_9*x73))+(((0.007321434238125)*x107))+(((-1.0)*x132*x92))+((gclwh7_13*x83))+(((0.81725)*gclwh5_9*x69))+((gclwh13_9*x103))+(((-1.0)*x104*x71))+((x123*x92)));
op[20]=((((-0.7845)*gclwh15_0*x113))+((gclwh15_15*x134))+(((-0.85)*gclwh15_9*x113))+((gclwh0_0*x122))+(((0.007614829125)*x107))+(((-0.007614829125)*x132))+(((-1.0)*x66*x71))+(((-0.14850585)*x87))+(((-0.7845)*gclwh2_0*x95))+(((0.4366)*gclwh13_15*x73))+(((0.007614829125)*x123))+(((-1.569)*gclwh5_0*x77))+(((0.7845)*gclwh5_0*x69))+(((1.569)*gclwh15_0*x98))+(((0.14850585)*x144))+(((-0.7845)*gclwh0_0*x113))+((gclwh2_0*x70))+(((-1.0)*gclwh15_0*x122))+((x113*x202))+((gclwh13_0*x70))+(((1.569)*gclwh2_0*x73))+(((1.569)*gclwh0_0*x98))+(((-1.0)*gclwh5_15*x114))+(((0.85)*gclwh5_9*x69))+(((0.4366)*gclwh5_15*x77))+(((-1.0)*gclwh13_15*x158))+(((0.85)*gclwh13_9*x95))+(((-0.4366)*gclwh15_15*x98))+(((-1.0)*x190*x69))+(((0.00702803935125)*x124))+(((-1.0)*x136*x95))+(((0.14850585)*x203))+(((-1.0)*gclwh13_9*npy*x66))+((x66*x67))+(((0.7845)*gclwh13_0*x95))+(((-1.569)*gclwh13_0*x73)));
op[21]=((-0.07735732)+(((4.0)*gclwh15_10*x98))+((gclwh11_10*x161))+(((-1.0)*x113*x119))+(((-4.0)*gclwh13_10*x73))+((x121*x95))+(((-1.0)*gclwh15_10*x197))+(((0.017917245)*x130))+((x194*x69))+((gclwh9_10*x111))+((gclwh13_10*x84))+(((-4.0)*gclwh5_10*x77))+(((-1.0)*gclwh7_10*x86)));
op[22]=((-0.012986285)+((gclwh5_1*x74))+(((0.008055325)*gclwh2_1*x73))+(((3.60823078949063e-5)*x141))+(((-1.0)*x493))+(((-1.0)*gclwh15_10*x113))+(((-0.00493096)*gclwh5_1*x69))+(((-0.012986285)*gclwh2_1*x95))+(((-0.008055325)*gclwh5_1*x77))+(((0.008055325)*gclwh15_1*x98))+(((-1.0)*x467))+(((-0.012986285)*gclwh0_1*x113))+x496+x474+((gclwh0_1*x187))+(((0.00493096)*gclwh15_1*x113))+(((-0.00493096)*gclwh13_1*x95))+(((0.008055325)*gclwh0_1*x98))+((gclwh13_10*x95))+((gclwh5_10*x69))+(((-3.60823078949063e-5)*x126))+(((-0.008055325)*gclwh13_1*x73))+((gclwh13_1*x153)));
op[23]=((((0.0655)*gclwh13_9*x73))+(((-0.006199575)*x183))+(((0.03275)*gclwh15_9*x113))+(((-0.03275)*gclwh13_9*x95))+(((-0.000293394886875)*x123))+(((-0.03275)*gclwh5_9*x69))+(((-1.0)*x178*x67))+((gclwh7_13*x150))+(((-1.0)*x472))+(((0.000293394886875)*x132))+(((-1.0)*x464))+(((-0.000293394886875)*x107))+x272+x479+((x178*x71))+(((-1.0)*gclwh11_13*x179)));
op[24]=((-0.35681135)+(((-1.0)*x484))+x487);
op[25]=((((-3.269)*gclwh8_2*x98))+((gclwh8_2*x125))+((gclwh10_2*x162))+(((-1.0)*gclwh6_2*x160))+(((3.269)*gclwh6_2*x73))+(((-3.269)*gclwh10_2*x77))+(((-1.0)*x459))+(((-0.30941085)*x151))+x280+((gclwh14_2*x143))+(((-0.30941085)*x148))+(((-1.6345)*gclwh6_2*x95))+(((1.6345)*gclwh8_2*x113))+(((1.6345)*gclwh10_2*x69)));
op[26]=((((1.569)*pp*x97))+(((0.08264838)*x112))+(((1.569)*gclwh10_12*x69))+(((-3.138)*gclwh10_12*x77))+(((0.0140560787025)*x79))+(((-0.0140560787025)*x201))+(((-1.569)*gclwh6_12*x95))+(((-0.08264838)*x180))+(((0.0140560787025)*x97))+(((-0.08264838)*x205))+(((3.138)*gclwh6_12*x73))+(((-3.138)*gclwh8_12*x98)));
op[27]=((((-0.03583449)*x72))+(((-1.0)*x185*x69))+(((0.03583449)*x68))+(((8.0)*gclwh10_11*x77))+(((0.7572)*gclwh4_11*rxp2_2))+((x171*x68))+(((-0.03583449)*x176))+(((8.0)*gclwh8_11*x98))+(((-0.7572)*x154))+(((-1.0)*x171*x72))+((gclwh12_11*x88))+(((-8.0)*gclwh6_11*x73)));
op[28]=((-0.01429865)+(((-1.0)*x487))+x484);
op[29]=((((-0.00058678977375)*x167))+(((-0.131)*gclwh8_2*x98))+(((0.00058678977375)*x191))+(((0.00058678977375)*x189))+(((0.0655)*gclwh8_2*x113))+(((0.01239915)*x210))+x459+(((-0.0655)*gclwh6_2*x95))+(((-1.0)*x280))+(((0.131)*gclwh6_2*x73))+(((-0.131)*gclwh10_2*x77))+(((-0.01239915)*x151))+(((0.0655)*gclwh10_2*x69))+(((-0.01239915)*x148)));
op[30]=((((-3.269)*gclwh9_0*x98))+(((-1.6345)*gclwh7_0*x95))+(((-0.30941085)*x165))+(((3.269)*gclwh7_0*x73))+(((-1.0)*gclwh7_0*x160))+(((-0.30941085)*x152))+(((1.6345)*gclwh9_0*x113))+((gclwh9_0*x125))+x460+(((-3.269)*gclwh11_0*x77))+(((1.6345)*gclwh11_0*x69))+((gclwh15_0*x143))+(((-1.0)*x288))+((gclwh11_0*x162)));
op[31]=((-0.35681135)+(((-1.0)*x485))+x486);
op[32]=(((x113*x157))+(((0.03583449)*x170))+(((-1.0)*gclwh13_10*x88))+(((-0.03583449)*gclwh7_10*r21))+(((-1.0)*x164*x95))+((x142*x69))+(((0.03583449)*x108))+(((-8.0)*gclwh11_10*x77))+(((8.0)*gclwh7_10*x73))+(((-0.7572)*x145))+(((0.7572)*x115))+(((-8.0)*gclwh9_10*x98)));
op[33]=((((-0.0140560787025)*x163))+(((-3.138)*gclwh11_13*x77))+(((1.569)*gclwh9_13*x113))+(((0.0140560787025)*x109))+(((-0.08264838)*x213))+(((1.569)*gclwh11_13*x69))+(((0.08264838)*x140))+(((3.138)*gclwh7_13*x73))+(((0.0140560787025)*x173))+(((-1.569)*gclwh7_13*x95))+(((-0.08264838)*x120))+(((-3.138)*gclwh9_13*x98)));
op[34]=((((-0.0655)*gclwh7_0*x95))+(((-0.00058678977375)*x198))+(((0.131)*gclwh7_0*x73))+(((-1.0)*x460))+(((0.00058678977375)*x139))+x288+(((0.0655)*gclwh11_0*x69))+(((-0.131)*gclwh11_0*x77))+(((0.0655)*gclwh9_0*x113))+(((-0.131)*gclwh9_0*x98))+(((0.00058678977375)*x200))+(((-0.01239915)*x165))+(((-0.01239915)*x152))+(((0.01239915)*x181)));
op[35]=((-0.01429865)+(((-1.0)*x486))+x485);
op[36]=((1.31196768)+(((-1.0)*x488))+x482);
op[37]=((((-1.6345)*gclwh3_2*x95))+(((-1.0)*gclwh12_2*x160))+(((3.269)*gclwh12_2*x73))+(((0.30941085)*x206))+(((-1.0)*x481))+(((-1.0)*gclwh4_2*x162))+(((-3.269)*gclwh14_2*x98))+(((-1.6345)*gclwh1_2*x113))+(((0.01464286847625)*x94))+(((3.269)*gclwh1_2*x98))+x469+(((-1.6345)*gclwh12_2*x95))+(((3.269)*gclwh3_2*x73))+(((-0.30941085)*x80))+((gclwh1_2*x125))+((gclwh3_2*x160))+(((-1.0)*gclwh8_2*x143))+(((-1.6345)*gclwh4_2*x69))+(((1.6345)*pp*x94))+(((3.269)*gclwh4_2*x77)));
IkReal x497=pz*pz;
IkReal x498=pp*pp;
IkReal x499=((0.1893)*pz);
IkReal x500=((1.7)*pz);
IkReal x501=(gclwh15_9*npx);
IkReal x502=(pp*r21);
IkReal x503=(pp*r22);
IkReal x504=((0.00702803935125)*r21);
IkReal x505=(gclwh5_9*npz);
IkReal x506=(pp*r20);
IkReal x507=(npy*pz);
IkReal x508=((4.0)*gclwh12_11);
IkReal x509=((3.60823078949063e-5)*r22);
IkReal x510=(gclwh14_3*rxp0_2);
IkReal x511=((0.000977833645875)*r20);
IkReal x512=(npz*pz);
IkReal x513=((0.000977833645875)*r21);
IkReal x514=(gclwh10_2*rxp2_2);
IkReal x515=((0.00076243651125)*rxp1_2);
IkReal x516=((0.00600991575645741)*r20);
IkReal x517=((0.154705425)*rxp1_2);
IkReal x518=((0.4366)*gclwh5_15);
IkReal x519=(gclwh6_11*rxp1_2);
IkReal x520=(gclwh7_0*rxp1_2);
IkReal x521=((0.154705425)*rxp2_2);
IkReal x522=((2.0)*gclwh11_10);
IkReal x523=((0.2970117)*rxp1_2);
IkReal x524=((0.017917245)*r21);
IkReal x525=(gclwh14_2*pz);
IkReal x526=(gclwh12_8*r21);
IkReal x527=(gclwh14_2*rxp0_2);
IkReal x528=((2.0)*gclwh4_11);
IkReal x529=((0.007321434238125)*r20);
IkReal x530=(npx*pz);
IkReal x531=((0.4366)*gclwh15_15);
IkReal x532=(gclwh10_11*rxp2_2);
IkReal x533=(gclwh5_9*rxp2_2);
IkReal x534=((0.020662095)*rxp1_2);
IkReal x535=((0.007321434238125)*r21);
IkReal x536=(gclwh0_0*r20);
IkReal x537=((0.0089586225)*r21);
IkReal x538=(gclwh13_0*pz);
IkReal x539=((1.6345)*pz);
IkReal x540=((0.007321434238125)*r22);
IkReal x541=((1.0)*pz);
IkReal x542=(gclwh14_14*rxp0_2);
IkReal x543=(gclwh4_14*r22);
IkReal x544=((0.1893)*rxp0_2);
IkReal x545=((0.00058678977375)*r22);
IkReal x546=(gclwh12_8*rxp1_2);
IkReal x547=((2.0)*gclwh9_10);
IkReal x548=((0.1893)*rxp2_2);
IkReal x549=((2.0)*gclwh15_10);
IkReal x550=((4.0)*gclwh14_11);
IkReal x551=(gclwh5_15*rxp2_2);
IkReal x552=((0.020662095)*rxp0_2);
IkReal x553=((2.0)*gclwh13_10);
IkReal x554=((0.3786)*rxp1_2);
IkReal x555=(gclwh9_0*r20);
IkReal x556=(gclwh13_9*r21);
IkReal x557=(gclwh15_1*r20);
IkReal x558=((0.000977833645875)*r22);
IkReal x559=((0.006199575)*rxp0_2);
IkReal x560=(gclwh6_2*rxp1_2);
IkReal x561=((0.0089586225)*r20);
IkReal x562=((2.0)*gclwh10_11);
IkReal x563=((2.0)*pp);
IkReal x564=((0.00058678977375)*r21);
IkReal x565=(gclwh1_3*r20);
IkReal x566=(gclwh14_14*r20);
IkReal x567=(gclwh9_0*rxp0_2);
IkReal x568=(gclwh4_3*rxp2_2);
IkReal x569=(gclwh5_0*r22);
IkReal x570=((0.03583449)*r20);
IkReal x571=((0.00058678977375)*r20);
IkReal x572=((0.2183)*gclwh13_15);
IkReal x573=((2.0)*gclwh7_10);
IkReal x574=(gclwh2_1*r21);
IkReal x575=((4.0)*gclwh15_10);
IkReal x576=((0.0089586225)*pz);
IkReal x577=((0.2183)*gclwh12_14);
IkReal x578=((0.2183)*gclwh14_14);
IkReal x579=(gclwh11_0*rxp2_2);
IkReal x580=(gclwh8_2*rxp0_2);
IkReal x581=((0.3786)*rxp2_2);
IkReal x582=(gclwh12_2*rxp1_2);
IkReal x583=(gclwh5_0*rxp2_2);
IkReal x584=((3.60823078949063e-5)*r21);
IkReal x585=(gclwh15_9*r20);
IkReal x586=((0.3786)*rxp0_2);
IkReal x587=((0.006199575)*rxp1_2);
IkReal x588=(gclwh14_8*npx);
IkReal x589=(gclwh13_15*r21);
IkReal x590=((0.017917245)*r20);
IkReal x591=(gclwh5_15*r22);
IkReal x592=((0.000293394886875)*r21);
IkReal x593=(gclwh13_0*rxp1_2);
IkReal x594=(gclwh7_10*rxp1_2);
IkReal x595=((0.000293394886875)*r22);
IkReal x596=(gclwh5_1*rxp2_2);
IkReal x597=((0.154705425)*rxp0_2);
IkReal x598=((0.4366)*gclwh13_15);
IkReal x599=((0.0089586225)*r22);
IkReal x600=((0.2970117)*rxp2_2);
IkReal x601=(gclwh5_9*r22);
IkReal x602=((0.7572)*rxp0_2);
IkReal x603=((4.0)*gclwh4_11);
IkReal x604=(gclwh15_1*rxp0_2);
IkReal x605=((0.000293394886875)*r20);
IkReal x606=((2.0)*gclwh6_11);
IkReal x607=((0.4366)*gclwh12_14);
IkReal x608=((0.017917245)*r22);
IkReal x609=(gclwh15_0*r20);
IkReal x610=(gclwh15_15*r20);
IkReal x611=((2.0)*gclwh12_11);
IkReal x612=(gclwh14_8*rxp0_2);
IkReal x613=((0.0655)*pz);
IkReal x614=((0.006199575)*rxp2_2);
IkReal x615=((0.04132419)*rxp1_2);
IkReal x616=((0.4366)*gclwh4_14);
IkReal x617=(gclwh15_0*rxp0_2);
IkReal x618=(gclwh14_8*r20);
IkReal x619=((0.03583449)*r22);
IkReal x620=((2.0)*gclwh8_11);
IkReal x621=((4.0)*gclwh13_10);
IkReal x622=(gclwh15_9*rxp0_2);
IkReal x623=((3.60823078949063e-5)*r20);
IkReal x624=((0.00702803935125)*r22);
IkReal x625=((0.2183)*gclwh5_15);
IkReal x626=(gclwh5_1*r22);
IkReal x627=((4.0)*gclwh5_10);
IkReal x628=(gclwh13_9*rxp1_2);
IkReal x629=((2.0)*gclwh5_10);
IkReal x630=((0.4366)*gclwh14_14);
IkReal x631=((0.020662095)*rxp2_2);
IkReal x632=(gclwh4_8*r22);
IkReal x633=(gclwh4_2*rxp2_2);
IkReal x634=((0.00600991575645741)*r21);
IkReal x635=((0.2183)*gclwh15_15);
IkReal x636=((0.2183)*gclwh4_14);
IkReal x637=((0.00702803935125)*r20);
IkReal x638=(gclwh12_14*r21);
IkReal x639=(gclwh4_8*rxp2_2);
IkReal x640=((0.2970117)*rxp0_2);
IkReal x641=(gclwh8_2*pz);
IkReal x642=(gclwh13_1*rxp1_2);
IkReal x643=((0.1893)*pp);
IkReal x644=(gclwh12_3*rxp1_2);
IkReal x645=((0.01464286847625)*r21);
IkReal x646=((0.1893)*rxp1_2);
IkReal x647=(gclwh4_3*r22);
IkReal x648=((2.0)*gclwh14_11);
IkReal x649=((0.03583449)*r21);
IkReal x650=((0.00195566729175)*x589);
IkReal x651=((0.00195566729175)*x591);
IkReal x652=((0.00195566729175)*x610);
IkReal x653=(gclwh15_10*x590);
IkReal x654=(gclwh7_10*x554);
IkReal x655=(gclwh5_10*x608);
IkReal x656=(gclwh9_10*x586);
IkReal x657=(gclwh13_10*x524);
IkReal x658=(gclwh11_10*x581);
IkReal x659=(gclwh12_14*x534);
IkReal x660=(gclwh6_5*x513);
IkReal x661=(gclwh4_14*x631);
IkReal x662=(gclwh8_5*x511);
IkReal x663=((0.020662095)*x542);
IkReal x664=(gclwh10_5*x558);
IkReal x665=((0.017917245)*x546);
IkReal x666=(gclwh8_11*x561);
IkReal x667=(gclwh14_11*x544);
IkReal x668=((0.017917245)*x639);
IkReal x669=(gclwh10_11*x599);
IkReal x670=(gclwh6_11*x537);
IkReal x671=(gclwh12_11*x646);
IkReal x672=(gclwh4_11*x548);
IkReal x673=((0.017917245)*x612);
IkReal x674=((0.017917245)*x533);
IkReal x675=(gclwh13_10*x646);
IkReal x676=(gclwh7_10*x537);
IkReal x677=(gclwh5_10*x548);
IkReal x678=((0.017917245)*x628);
IkReal x679=((0.017917245)*x622);
IkReal x680=(gclwh11_10*x599);
IkReal x681=(gclwh15_10*x544);
IkReal x682=(gclwh9_10*x561);
IkReal x683=(gclwh13_15*x534);
IkReal x684=((0.020662095)*x551);
IkReal x685=(gclwh7_7*x513);
IkReal x686=(gclwh9_7*x511);
IkReal x687=(gclwh15_15*x552);
IkReal x688=(gclwh11_7*x558);
IkReal x689=(gclwh12_11*x524);
IkReal x690=((0.3786)*x532);
IkReal x691=(gclwh4_11*x608);
IkReal x692=(gclwh8_11*x586);
IkReal x693=((0.00195566729175)*x543);
IkReal x694=((0.00195566729175)*x638);
IkReal x695=((0.00195566729175)*x566);
IkReal x696=((0.000977833645875)*x543);
IkReal x697=(gclwh10_5*x631);
IkReal x698=(gclwh12_14*x513);
IkReal x699=(gclwh8_5*x552);
IkReal x700=(gclwh6_5*x534);
IkReal x701=(gclwh14_14*x511);
IkReal x702=((0.000847933619625)*x526);
IkReal x703=((0.1893)*x519);
IkReal x704=(gclwh14_11*x561);
IkReal x705=((0.000847933619625)*x632);
IkReal x706=(gclwh8_11*x544);
IkReal x707=(gclwh12_11*x537);
IkReal x708=((0.1893)*x532);
IkReal x709=(gclwh4_11*x599);
IkReal x710=((0.000847933619625)*x618);
IkReal x711=((0.1893)*x594);
IkReal x712=(gclwh15_10*x561);
IkReal x713=((0.000847933619625)*x585);
IkReal x714=((0.000847933619625)*x601);
IkReal x715=(gclwh9_10*x544);
IkReal x716=(gclwh13_10*x537);
IkReal x717=((0.000847933619625)*x556);
IkReal x718=(gclwh11_10*x548);
IkReal x719=(gclwh5_10*x599);
IkReal x720=(gclwh15_15*x511);
IkReal x721=(gclwh7_7*x534);
IkReal x722=(gclwh5_15*x558);
IkReal x723=(gclwh9_7*x552);
IkReal x724=(gclwh11_7*x631);
IkReal x725=(gclwh13_15*x513);
IkReal x726=((2.0)*x497);
IkReal x727=(r21*x498);
IkReal x728=((1.0)*x498);
IkReal x729=(x502*x572);
IkReal x730=(x530*x531);
IkReal x731=(x503*x625);
IkReal x732=(x507*x598);
IkReal x733=(x506*x635);
IkReal x734=(x512*x518);
IkReal x735=(x506*x549);
IkReal x736=(x512*x627);
IkReal x737=(x507*x621);
IkReal x738=(x502*x553);
IkReal x739=(x530*x575);
IkReal x740=(x503*x629);
IkReal x741=((0.2183)*gclwh10_5*x512);
IkReal x742=((0.2183)*gclwh8_5*x530);
IkReal x743=((0.10915)*gclwh6_5*x502);
IkReal x744=((0.2183)*gclwh6_5*x507);
IkReal x745=((0.10915)*gclwh8_5*x506);
IkReal x746=((0.10915)*gclwh10_5*x503);
IkReal x747=(x643*x644);
IkReal x748=(x507*x606);
IkReal x749=(x561*x641);
IkReal x750=(gclwh10_2*pz*x503);
IkReal x751=(x499*x527);
IkReal x752=(x506*x641);
IkReal x753=(gclwh4_3*pp*x548);
IkReal x754=(gclwh10_2*r22*x576);
IkReal x755=(x499*x582);
IkReal x756=(x512*x562);
IkReal x757=(x499*x633);
IkReal x758=(x510*x643);
IkReal x759=(x530*x620);
IkReal x760=(gclwh6_2*pz*x537);
IkReal x761=(x642*x643);
IkReal x762=(x512*x522);
IkReal x763=(x530*x547);
IkReal x764=(gclwh11_0*r22*x576);
IkReal x765=(x555*x576);
IkReal x766=(gclwh5_1*pp*x548);
IkReal x767=(x499*x617);
IkReal x768=(gclwh11_0*pz*x503);
IkReal x769=(gclwh9_0*pz*x506);
IkReal x770=(gclwh15_1*pp*x544);
IkReal x771=(gclwh7_0*pz*x537);
IkReal x772=(x499*x593);
IkReal x773=(x499*x583);
IkReal x774=(x507*x573);
IkReal x775=((0.10915)*gclwh7_7*x502);
IkReal x776=((0.2183)*gclwh9_7*x530);
IkReal x777=((0.2183)*gclwh11_7*x512);
IkReal x778=((0.10915)*gclwh9_7*x506);
IkReal x779=((0.2183)*gclwh7_7*x507);
IkReal x780=((0.10915)*gclwh11_7*x503);
IkReal x781=(x503*x528);
IkReal x782=(x502*x611);
IkReal x783=(x530*x550);
IkReal x784=(x502*x577);
IkReal x785=(x530*x630);
IkReal x786=(x503*x636);
IkReal x787=(x506*x578);
IkReal x788=(x507*x607);
IkReal x789=(x512*x616);
IkReal x790=((0.10915)*gclwh12_14*x502);
IkReal x791=(x530*x578);
IkReal x792=((0.10915)*gclwh4_14*x503);
IkReal x793=((0.10915)*gclwh14_14*x506);
IkReal x794=(x512*x636);
IkReal x795=(x507*x577);
IkReal x796=((0.09465)*gclwh4_8*x503);
IkReal x797=(x506*x525);
IkReal x798=(gclwh12_3*x727);
IkReal x799=(x512*x528);
IkReal x800=(x499*x560);
IkReal x801=(gclwh3_3*x727);
IkReal x802=(x498*x565);
IkReal x803=(gclwh3_2*pz*x537);
IkReal x804=(x499*x588);
IkReal x805=(x525*x561);
IkReal x806=((0.09465)*gclwh12_8*x502);
IkReal x807=(x498*x647);
IkReal x808=(gclwh1_2*pz*x561);
IkReal x809=(x507*x611);
IkReal x810=(x499*x580);
IkReal x811=(gclwh4_2*r22*x576);
IkReal x812=(gclwh4_8*npz*x499);
IkReal x813=(gclwh12_2*pz*x537);
IkReal x814=(x499*x514);
IkReal x815=(x530*x648);
IkReal x816=((0.09465)*gclwh14_8*x506);
IkReal x817=(gclwh12_8*npy*x499);
IkReal x818=(x498*x557);
IkReal x819=(x499*x505);
IkReal x820=(gclwh5_0*pz*x503);
IkReal x821=(gclwh13_9*npy*x499);
IkReal x822=(x569*x576);
IkReal x823=(x502*x538);
IkReal x824=((0.09465)*gclwh15_9*x506);
IkReal x825=(x537*x538);
IkReal x826=(x498*x574);
IkReal x827=(x512*x629);
IkReal x828=(gclwh2_0*pz*x537);
IkReal x829=(x499*x567);
IkReal x830=(x507*x553);
IkReal x831=(x499*x579);
IkReal x832=(gclwh0_1*r20*x498);
IkReal x833=(x536*x576);
IkReal x834=((0.09465)*gclwh5_9*x503);
IkReal x835=(x499*x520);
IkReal x836=((0.09465)*gclwh13_9*x502);
IkReal x837=(gclwh15_0*pz*x561);
IkReal x838=(x499*x501);
IkReal x839=(x530*x549);
IkReal x840=((0.10915)*gclwh15_15*x506);
IkReal x841=(x512*x625);
IkReal x842=(x507*x572);
IkReal x843=((0.10915)*gclwh13_15*x502);
IkReal x844=((0.10915)*gclwh5_15*x503);
IkReal x845=(x530*x635);
IkReal x846=(gclwh6_2*npy*x726);
IkReal x847=(gclwh6_2*x502*x541);
IkReal x848=(gclwh10_2*npz*x726);
IkReal x849=(gclwh8_2*npx*x726);
IkReal x850=(gclwh7_0*npy*x726);
IkReal x851=(gclwh9_0*npx*x726);
IkReal x852=(gclwh11_0*npz*x726);
IkReal x853=(gclwh7_0*x502*x541);
IkReal x854=(gclwh12_2*npy*x726);
IkReal x855=(gclwh3_2*npy*x726);
IkReal x856=(gclwh1_2*npx*x726);
IkReal x857=(gclwh14_3*x530*x563);
IkReal x858=(gclwh4_2*npz*x726);
IkReal x859=(gclwh4_3*x512*x563);
IkReal x860=(gclwh12_2*x502*x541);
IkReal x861=(gclwh1_2*x506*x541);
IkReal x862=(gclwh3_3*x507*x563);
IkReal x863=(gclwh4_2*x503*x541);
IkReal x864=(gclwh1_3*x530*x563);
IkReal x865=(gclwh3_2*x502*x541);
IkReal x866=(gclwh12_3*x507*x563);
IkReal x867=(gclwh14_2*npx*x726);
IkReal x868=(gclwh14_3*r20*x728);
IkReal x869=(gclwh0_0*npx*x726);
IkReal x870=(gclwh2_0*npy*x726);
IkReal x871=(gclwh5_1*x512*x563);
IkReal x872=(gclwh13_1*x507*x563);
IkReal x873=(gclwh15_0*npx*x726);
IkReal x874=(gclwh2_1*x507*x563);
IkReal x875=(gclwh0_1*x530*x563);
IkReal x876=(gclwh5_0*npz*x726);
IkReal x877=(gclwh13_0*npy*x726);
IkReal x878=(gclwh0_0*x506*x541);
IkReal x879=(gclwh15_0*x506*x541);
IkReal x880=(gclwh2_0*x502*x541);
IkReal x881=((1.0)*gclwh13_1*x727);
IkReal x882=(x626*x728);
IkReal x883=(gclwh15_1*x530*x563);
IkReal x884=(x659+x661);
IkReal x885=(x697+x699);
IkReal x886=(x683+x684);
IkReal x887=(x723+x724);
IkReal x888=(x682+x681+x680+x774);
IkReal x889=(x669+x667+x666+x748);
IkReal x890=(x703+x704+x799+x809);
IkReal x891=(x711+x712+x827+x830);
IkReal x892=(x652+x734+x733+x732);
IkReal x893=(x660+x742+x743+x741);
IkReal x894=(x701+x793+x795+x794);
IkReal x895=(x695+x787+x788+x789);
IkReal x896=(x685+x777+x776+x775);
IkReal x897=(x720+x841+x840+x842);
IkReal x898=(x719+x718+x715+x716+x839);
IkReal x899=(x708+x709+x706+x707+x815);
IkReal x900=(x676+x677+x675+x762+x763);
IkReal x901=(x672+x670+x671+x756+x759);
IkReal x902=(((x512*x603))+(((0.3786)*x519))+((x506*x648))+((x507*x508))+((gclwh14_11*x590)));
IkReal x903=(x694+x693+x786+x784+x785);
IkReal x904=(x653+x654+x737+x736+x735);
IkReal x905=(x696+x698+x791+x790+x792);
IkReal x906=(x722+x725+x843+x845+x844);
IkReal x907=(x662+x664+x746+x744+x745);
IkReal x908=(x650+x651+x731+x730+x729);
IkReal x909=(x688+x686+x779+x778+x780);
IkReal x910=(x655+x656+x657+x658+x739+x738+x740);
IkReal x911=(x689+x690+x691+x692+x782+x783+x781);
IkReal x912=(x679+x773+x772+x771+x770+x852+x853+x851);
IkReal x913=(x673+x755+x757+x758+x760+x847+x849+x848);
IkReal x914=(x678+x674+x768+x769+x764+x765+x766+x767+x761+x850);
IkReal x915=(x668+x665+x754+x751+x750+x753+x752+x747+x749+x846);
IkReal x916=(x714+x717+x878+x879+x874+x875+x876+x877+x881+x880+x883+x882+x834+x835+x836+x837+x838);
IkReal x917=(x499+x702+x705+x797+x796+x798+x856+x857+x854+x855+x858+x808+x805+x804+x807+x806+x801+x800+x803+x802);
IkReal x918=(x710+x859+x868+x867+x866+x865+x864+x863+x862+x861+x860+x816+x817+x814+x812+x813+x810+x811);
IkReal x919=(x499+x713+x869+x870+x871+x872+x873+x818+x819+x829+x828+x823+x822+x821+x820+x826+x825+x824+x831+x832+x833);
op[38]=((((0.8732)*gclwh4_14*x512))+(((-0.0039113345835)*x638))+((x506*x630))+(((-1.0)*gclwh8_12*x640))+(((0.0039113345835)*x566))+(((0.8732)*gclwh12_14*x507))+(((-1.0)*x502*x607))+(((-1.0)*gclwh10_12*x600))+(((-0.0039113345835)*x543))+(((-0.8732)*gclwh14_14*x530))+((gclwh6_12*x523))+(((-1.0)*x503*x616)));
op[39]=((-0.05940486)+(((8.0)*gclwh14_11*x530))+((gclwh8_11*x602))+((x503*x603))+(((-8.0)*gclwh4_11*x512))+(((-1.0)*x506*x550))+(((0.7572)*x532))+(((-0.7572)*x519))+((x502*x508))+((gclwh12_11*x649))+(((-8.0)*gclwh12_11*x507))+(((-1.0)*gclwh14_11*x570))+((gclwh4_11*x619)));
op[40]=((0.02168232)+(((-1.0)*x902))+x911);
op[41]=(((gclwh3_2*x564))+(((-0.131)*npx*x525))+(((-1.0)*gclwh12_2*x564))+((gclwh1_2*x571))+((gclwh14_2*x571))+(((-0.0655)*gclwh1_2*x506))+(((-0.01239915)*x580))+(((-1.0)*x895))+(((0.131)*gclwh4_2*x512))+(((0.0655)*gclwh14_2*x506))+(((-0.0655)*gclwh12_2*x502))+(((0.131)*gclwh12_2*x507))+(((0.131)*gclwh1_2*x530))+(((-0.0655)*gclwh4_2*x503))+x903+(((-0.0655)*gclwh3_2*x502))+(((-0.01239915)*x514))+(((0.131)*gclwh3_2*x507))+(((0.01239915)*x560))+(((-1.0)*gclwh4_2*x545)));
op[42]=((((3.269)*gclwh15_0*x530))+(((-3.269)*gclwh13_0*x507))+(((-0.30941085)*x520))+(((-1.6345)*gclwh15_0*x506))+(((3.269)*gclwh0_0*x530))+(((0.30941085)*x567))+(((1.6345)*gclwh13_0*x502))+(((-1.0)*x908))+(((-1.6345)*gclwh0_0*x506))+(((0.30941085)*x579))+(((0.01464286847625)*x569))+((gclwh13_0*x645))+((gclwh2_0*x645))+(((-0.01464286847625)*x609))+(((0.01464286847625)*x536))+x892+(((3.269)*gclwh2_0*x507))+(((-1.6345)*gclwh2_0*x502))+(((-3.269)*gclwh5_0*x512))+(((1.6345)*gclwh5_0*x503)));
op[43]=((1.31196768)+(((-1.0)*x904))+x910);
op[44]=((0.05940486)+(((0.7572)*gclwh11_10*rxp2_2))+(((-8.0)*gclwh13_10*x507))+(((-0.7572)*x594))+(((8.0)*gclwh15_10*x530))+((x503*x627))+((gclwh13_10*x649))+((x502*x621))+((gclwh5_10*x619))+(((-1.0)*x506*x575))+((gclwh9_10*x602))+(((-8.0)*gclwh5_10*x512))+(((-1.0)*gclwh15_10*x570)));
op[45]=(((gclwh11_13*x600))+((gclwh9_13*x640))+((x503*x518))+(((0.8732)*gclwh15_15*x530))+(((-1.0)*gclwh7_13*x523))+((x502*x598))+(((0.0039113345835)*x591))+(((-0.8732)*gclwh13_15*x507))+(((-1.0)*x506*x531))+(((-0.0039113345835)*x610))+(((0.0039113345835)*x589))+(((-0.8732)*gclwh5_15*x512)));
op[46]=((((0.131)*gclwh2_0*x507))+(((0.131)*gclwh15_0*x530))+(((-1.0)*gclwh15_0*x571))+(((-0.0655)*gclwh15_0*x506))+(((-0.0655)*gclwh0_0*x506))+(((-0.131)*gclwh5_0*x512))+(((0.131)*gclwh0_0*x530))+(((0.00058678977375)*x536))+(((-0.131)*gclwh13_0*x507))+(((-0.01239915)*x520))+((gclwh5_0*x545))+(((-1.0)*x892))+(((0.01239915)*x579))+((gclwh13_0*x564))+((gclwh2_0*x564))+(((-0.0655)*gclwh2_0*x502))+(((0.0655)*gclwh13_0*x502))+x908+(((0.0655)*gclwh5_0*x503))+(((0.01239915)*x567)));
op[47]=((0.02168232)+(((-1.0)*x910))+x904);
op[48]=((((-1.0)*gclwh4_8*x521))+(((-1.0)*gclwh12_8*x517))+((gclwh10_12*x540))+((gclwh8_12*x529))+(((-1.6345)*gclwh10_12*x512))+(((-1.0)*x907))+(((0.81725)*gclwh8_12*x506))+(((-1.0)*x884))+((gclwh14_8*x597))+(((0.81725)*gclwh10_12*x503))+x663+(((-1.6345)*gclwh8_12*x530))+(((1.6345)*gclwh6_12*x507))+(((-1.0)*gclwh6_12*x535))+x893+(((-0.81725)*gclwh6_12*x502)));
op[49]=((((0.12699240901125)*x510))+(((-1.0)*gclwh10_11*x503))+(((-1.0)*x913))+(((-0.12699240901125)*x568))+(((-1.0)*x889))+(((-0.12699240901125)*x644))+((gclwh6_11*x502))+x915+x901+(((-1.0)*gclwh8_11*x506)));
op[50]=((0.17125635)+(((4.0)*gclwh10_11*x512))+((gclwh12_11*x554))+((gclwh6_11*x524))+((x502*x606))+(((4.0)*gclwh8_11*x530))+(((-4.0)*gclwh6_11*x507))+(((-1.0)*gclwh8_11*x590))+(((-1.0)*x506*x620))+(((-1.0)*gclwh14_11*x586))+(((-1.0)*x503*x562))+(((-1.0)*gclwh10_11*x608))+((gclwh4_11*x581)));
op[51]=((((0.14850585)*x582))+(((-0.160905)*x612))+(((-1.0)*gclwh8_2*x637))+(((0.160905)*x639))+(((-0.14850585)*x527))+((gclwh6_2*x504))+(((0.7845)*gclwh6_2*x502))+(((-1.0)*gclwh10_2*x624))+(((0.04132419)*gclwh4_14*rxp2_2))+(((0.160905)*x546))+(((-0.7845)*gclwh8_2*x506))+((gclwh12_14*x615))+(((0.14850585)*x633))+(((1.569)*gclwh10_2*x512))+(((1.569)*gclwh8_2*x530))+(((-1.569)*gclwh6_2*x507))+(((-0.04132419)*x542))+(((-0.7845)*gclwh10_2*x503)));
op[52]=((((-0.0655)*gclwh10_12*x512))+(((-0.0655)*gclwh8_12*x530))+(((0.0655)*gclwh6_12*x507))+(((-0.03275)*gclwh6_12*x502))+(((-1.0)*x907))+((gclwh4_8*x614))+(((0.03275)*gclwh8_12*x506))+((gclwh10_12*x595))+(((-1.0)*gclwh6_12*x592))+(((-1.0)*x663))+(((0.006199575)*x546))+(((0.03275)*gclwh10_12*x503))+(((-1.0)*gclwh14_8*x559))+x884+x893+((gclwh8_12*x605)));
op[53]=(((gclwh8_11*x506))+(((-1.0)*gclwh6_11*x502))+(((-1.0)*x901))+(((-1.0)*x913))+((gclwh10_11*x503))+(((-0.00076243651125)*x568))+x889+x915+(((0.00076243651125)*x510))+(((-1.0)*gclwh12_3*x515)));
op[54]=(((gclwh11_10*x503))+((gclwh9_10*x506))+(((-1.0)*x900))+(((-1.0)*x912))+(((-0.12699240901125)*x596))+(((-1.0)*gclwh7_10*x502))+(((-0.12699240901125)*x642))+(((0.12699240901125)*x604))+x888+x914);
op[55]=((((-1.0)*gclwh13_9*x517))+(((-1.6345)*gclwh9_13*x530))+(((0.81725)*gclwh11_13*x503))+(((0.81725)*gclwh9_13*x506))+(((-1.0)*x909))+(((-1.0)*gclwh5_9*x521))+(((-1.0)*gclwh7_13*x535))+(((-1.6345)*gclwh11_13*x512))+(((-1.0)*x886))+(((-0.81725)*gclwh7_13*x502))+(((1.6345)*gclwh7_13*x507))+x687+((gclwh11_13*x540))+((gclwh15_9*x597))+x896+((gclwh9_13*x529)));
op[56]=((((-1.0)*gclwh13_15*x615))+(((-0.7845)*gclwh11_0*x503))+(((0.14850585)*x583))+(((-0.04132419)*x551))+(((-0.00702803935125)*x555))+(((-1.569)*gclwh7_0*x507))+(((-1.0)*gclwh11_0*x624))+((gclwh7_0*x504))+(((0.160905)*x622))+(((-0.14850585)*x617))+(((1.569)*gclwh9_0*x530))+(((0.04132419)*gclwh15_15*rxp0_2))+(((-0.160905)*x628))+(((0.7845)*gclwh7_0*x502))+(((0.14850585)*x593))+(((-0.160905)*x533))+(((-0.7845)*gclwh9_0*x506))+(((1.569)*gclwh11_0*x512)));
op[57]=((0.17125635)+((gclwh5_10*x581))+((gclwh13_10*x554))+(((-1.0)*gclwh11_10*x608))+(((-1.0)*gclwh15_10*x586))+(((-1.0)*x503*x522))+((x502*x573))+(((-1.0)*x506*x547))+(((4.0)*gclwh11_10*x512))+((gclwh7_10*x524))+(((-4.0)*gclwh7_10*x507))+(((4.0)*gclwh9_10*x530))+(((-1.0)*gclwh9_10*x590)));
op[58]=((((-1.0)*gclwh11_10*x503))+((gclwh7_10*x502))+(((-1.0)*x912))+(((-1.0)*x888))+(((-1.0)*gclwh13_1*x515))+(((-1.0)*gclwh9_10*x506))+(((0.00076243651125)*x604))+x914+x900+(((-0.00076243651125)*x596)));
op[59]=((((-0.0655)*gclwh9_13*x530))+(((0.03275)*gclwh9_13*x506))+(((-1.0)*x687))+(((-0.03275)*gclwh7_13*x502))+(((-1.0)*x909))+(((-0.0655)*gclwh11_13*x512))+(((-1.0)*gclwh15_9*x559))+(((0.0655)*gclwh7_13*x507))+(((0.006199575)*x533))+(((-1.0)*gclwh7_13*x592))+x886+x896+((gclwh9_13*x605))+((gclwh13_9*x587))+((gclwh11_13*x595))+(((0.03275)*gclwh11_13*x503)));
op[60]=((((-1.0)*gclwh4_8*x540))+(((1.6345)*gclwh12_8*x507))+(((-1.0)*x905))+((gclwh6_12*x517))+(((-0.81725)*gclwh4_8*x503))+(((-0.007321434238125)*x526))+(((-1.0)*gclwh8_12*x597))+(((-1.0)*x700))+(((-0.81725)*gclwh12_8*x502))+((gclwh14_8*x529))+(((0.81725)*gclwh14_8*x506))+(((1.6345)*gclwh4_8*x512))+x885+x894+(((-1.0)*gclwh10_12*x521))+(((-1.6345)*gclwh14_8*x530)));
op[61]=((0.679811285)+((gclwh3_3*x634))+(((-0.66189404)*gclwh12_3*x502))+(((-1.0)*gclwh14_11*x506))+(((-0.00600991575645741)*x647))+(((1.341705325)*gclwh12_3*x507))+(((-1.0)*x890))+(((-1.0)*x918))+((gclwh14_3*x516))+(((0.66189404)*gclwh14_3*x506))+(((-0.66189404)*gclwh4_3*x503))+(((1.341705325)*gclwh3_3*x507))+((gclwh12_11*x502))+(((1.341705325)*gclwh1_3*x530))+x899+(((-0.679811285)*gclwh3_3*x502))+(((-1.0)*gclwh12_3*x634))+(((1.341705325)*gclwh4_3*x512))+(((-0.679811285)*gclwh1_3*x506))+(((-1.341705325)*gclwh14_3*x530))+x917+((gclwh4_11*x503))+((gclwh1_3*x516)));
op[62]=((0.07735732)+(((-1.0)*x902))+x911);
op[63]=((((-0.14850585)*x560))+(((-1.569)*gclwh12_2*x507))+(((-1.569)*gclwh1_2*x530))+(((-0.85)*gclwh14_8*x506))+(((0.7845)*gclwh12_2*x502))+(((0.14850585)*x580))+(((0.85)*gclwh4_8*x503))+(((-1.569)*gclwh4_2*x512))+(((-1.0)*gclwh12_8*npy*x500))+(((-1.0)*gclwh4_8*npz*x500))+(((-1.0)*gclwh1_2*x637))+(((0.14850585)*x514))+(((-1.0)*x895))+(((0.7845)*gclwh3_2*x502))+(((-0.7845)*gclwh14_2*x506))+((gclwh12_2*x504))+(((0.85)*gclwh12_8*x502))+(((1.569)*npx*x525))+(((0.007614829125)*x526))+(((0.7845)*gclwh1_2*x506))+((x500*x588))+(((-0.007614829125)*x618))+(((0.7845)*gclwh4_2*x503))+x903+(((0.007614829125)*x632))+(((-1.0)*gclwh14_2*x637))+(((-1.0)*gclwh3_2*x504))+((gclwh4_2*x624))+(((-1.569)*gclwh3_2*x507)));
op[64]=((((-1.0)*gclwh14_8*x605))+(((-0.0655)*gclwh4_8*x512))+(((0.0655)*gclwh14_8*x530))+(((0.000293394886875)*x526))+(((-1.0)*x894))+(((0.03275)*gclwh12_8*x502))+((gclwh4_8*x595))+(((-0.0655)*gclwh12_8*x507))+(((-1.0)*gclwh8_12*x559))+(((-1.0)*x700))+((gclwh6_12*x587))+x885+(((-0.03275)*gclwh14_8*x506))+(((-1.0)*gclwh10_12*x614))+x905+(((0.03275)*gclwh4_8*x503)));
op[65]=((-0.012986285)+(((0.008055325)*gclwh3_3*x507))+(((3.60823078949063e-5)*x565))+(((-1.0)*gclwh12_11*x502))+(((0.00493096)*gclwh12_3*x502))+((gclwh14_11*x506))+(((-1.0)*x899))+((gclwh3_3*x584))+(((-1.0)*x918))+(((-1.0)*gclwh12_3*x584))+(((-1.0)*gclwh4_11*x503))+(((-0.008055325)*gclwh14_3*x530))+(((0.008055325)*gclwh12_3*x507))+(((0.008055325)*gclwh1_3*x530))+(((-0.00493096)*gclwh14_3*x506))+(((0.00493096)*gclwh4_3*x503))+(((-1.0)*gclwh4_3*x509))+x890+(((0.008055325)*gclwh4_3*x512))+(((-0.012986285)*gclwh3_3*x502))+x917+((gclwh14_3*x623))+(((-0.012986285)*gclwh1_3*x506)));
op[66]=((-0.679811285)+((gclwh0_1*x516))+((gclwh13_1*x634))+(((1.341705325)*gclwh15_1*x530))+(((-1.0)*gclwh15_1*x516))+(((1.341705325)*gclwh0_1*x530))+(((-1.0)*x891))+(((-1.0)*gclwh15_10*x506))+(((-1.0)*x916))+(((-0.679811285)*gclwh0_1*x506))+(((0.00600991575645741)*x574))+(((-0.66189404)*gclwh15_1*x506))+(((-1.341705325)*gclwh13_1*x507))+((gclwh5_10*x503))+(((-0.679811285)*gclwh2_1*x502))+(((0.66189404)*gclwh13_1*x502))+(((-1.341705325)*gclwh5_1*x512))+x898+((gclwh13_10*x502))+x919+(((0.66189404)*gclwh5_1*x503))+(((0.00600991575645741)*x626))+(((1.341705325)*gclwh2_1*x507)));
op[67]=((((0.81725)*gclwh13_9*x502))+((gclwh9_13*x597))+(((-1.0)*x897))+(((-1.0)*x887))+((gclwh13_9*x535))+(((-1.0)*x505*x539))+(((0.81725)*gclwh5_9*x503))+(((-1.0)*gclwh15_9*x529))+((gclwh11_13*x521))+((x501*x539))+x721+(((-0.81725)*gclwh15_9*x506))+((gclwh5_9*x540))+x906+(((-1.6345)*gclwh13_9*x507))+(((-1.0)*gclwh7_13*x517)));
op[68]=((((-1.0)*gclwh13_0*x504))+(((0.85)*gclwh13_9*x502))+(((-0.14850585)*x567))+(((-0.85)*gclwh15_9*x506))+((x500*x501))+(((-1.569)*gclwh0_0*x530))+(((-1.569)*gclwh2_0*x507))+(((0.7845)*gclwh2_0*x502))+(((-1.0)*x892))+(((-0.7845)*gclwh5_0*x503))+(((1.569)*gclwh5_0*x512))+(((-1.0)*gclwh13_9*npy*x500))+(((0.007614829125)*x601))+(((0.00702803935125)*x609))+(((-0.00702803935125)*x569))+(((-0.14850585)*x579))+(((0.85)*gclwh5_9*x503))+(((0.14850585)*x520))+(((0.007614829125)*x556))+(((-1.569)*gclwh15_0*x530))+(((-0.7845)*gclwh13_0*x502))+(((0.7845)*gclwh15_0*x506))+(((-0.007614829125)*x585))+(((-1.0)*gclwh2_0*x504))+(((1.569)*gclwh13_0*x507))+(((0.7845)*gclwh0_0*x506))+x908+(((-1.0)*x500*x505))+(((-0.00702803935125)*x536)));
op[69]=((0.07735732)+(((-1.0)*x910))+x904);
op[70]=((0.012986285)+((gclwh5_1*x509))+((gclwh0_1*x623))+((gclwh13_1*x584))+(((-1.0)*gclwh5_10*x503))+(((0.008055325)*gclwh0_1*x530))+(((-1.0)*x898))+(((-1.0)*x916))+(((-0.00493096)*gclwh13_1*x502))+(((3.60823078949063e-5)*x574))+(((0.00493096)*gclwh15_1*x506))+(((-0.012986285)*gclwh0_1*x506))+(((0.008055325)*gclwh2_1*x507))+(((0.008055325)*gclwh15_1*x530))+(((-0.008055325)*gclwh5_1*x512))+(((-3.60823078949063e-5)*x557))+(((-0.00493096)*gclwh5_1*x503))+x891+(((-1.0)*gclwh13_10*x502))+(((-0.012986285)*gclwh2_1*x502))+x919+(((-0.008055325)*gclwh13_1*x507))+((gclwh15_10*x506)));
op[71]=((((-1.0)*gclwh7_13*x587))+((gclwh9_13*x559))+(((0.0655)*gclwh13_9*x507))+((gclwh11_13*x614))+(((-1.0)*x906))+(((-1.0)*x887))+(((-0.03275)*gclwh13_9*x502))+(((0.03275)*gclwh15_9*x506))+(((-1.0)*x501*x613))+(((-1.0)*gclwh5_9*x595))+(((0.000293394886875)*x585))+((x505*x613))+x721+x897+(((-0.000293394886875)*x556))+(((-0.03275)*gclwh5_9*x503)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x920=htj1*htj1;
CheckValue<IkReal> x921=IKPowWithIntegerCheck(((1.0)+x920),-1);
if(!x921.valid){
continue;
}
cj1array[numsolutions]=((x921.value)*(((1.0)+(((-1.0)*x920)))));
CheckValue<IkReal> x922=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x922.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x922.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x923=htj2*htj2;
CheckValue<IkReal> x924=IKPowWithIntegerCheck(((1.0)+x923),-1);
if(!x924.valid){
continue;
}
cj2array[numsolutions]=((x924.value)*(((1.0)+(((-1.0)*x923)))));
CheckValue<IkReal> x925=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x925.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x925.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x926=htj3*htj3;
CheckValue<IkReal> x927=IKPowWithIntegerCheck(((1.0)+x926),-1);
if(!x927.valid){
continue;
}
cj3array[numsolutions]=((x927.value)*(((1.0)+(((-1.0)*x926)))));
CheckValue<IkReal> x928=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x928.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x928.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x929=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x929);
rxp1_0=(pz*r11);
rxp1_1=(r01*x929);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x930=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x930);
rxp1_0=(pz*r11);
rxp1_1=(r01*x930);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x931=IKPowWithIntegerCheck(r22,-1);
if(!x931.valid){
continue;
}
CheckValue<IkReal> x932=IKPowWithIntegerCheck(sj3,-1);
if(!x932.valid){
continue;
}
sj4array[0]=((x931.value)*(x932.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x933=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x933);
rxp1_0=(pz*r11);
rxp1_1=(r01*x933);
IkReal x934=((16.0)*sj4);
IkReal x935=(cj1*cj2);
IkReal x936=((4.0)*sj3);
IkReal x937=((8.0)*sj4);
IkReal x938=((4.0)*cj4);
IkReal x939=(sj1*sj2);
IkReal x940=((4.0)*sj4);
IkReal x941=(cj3*r02);
IkReal x942=((16.0)*sj3);
IkReal x943=((8.0)*sj3);
IkReal x944=((12.0)*cj4);
IkReal x945=((12.0)*sj4);
IkReal x946=(cj3*r12);
IkReal x947=(r11*x936);
IkReal x948=(r01*x936);
IkReal x949=(r01*x939);
IkReal x950=(cj3*cj4*r01);
IkReal x951=(cj3*cj4*r11);
IkReal x952=(cj3*r10*x938);
IkReal x953=(x945*x946);
IkReal x954=(cj3*r00*x938);
IkReal x955=(x941*x945);
IkReal x956=(r00*x939*x940);
IkReal x957=(r02*x939*x944);
IkReal x958=(r00*x935*x940);
IkReal x959=(r02*x935*x944);
IkReal x960=(r10*x939*x940);
IkReal x961=(r12*x935*x944);
IkReal x962=(r12*x939*x944);
IkReal x963=(r10*x935*x940);
IkReal x964=(x958+x947);
IkReal x965=(x960+x948);
IkReal x966=(x956+x952);
IkReal x967=(x959+x953);
IkReal x968=(x963+x954);
IkReal x969=(x962+x955);
j5eval[0]=((((0.5)*(IKabs((x964+x957+(((-1.0)*x967))+(((-1.0)*x966)))))))+(IKabs(((((-1.0)*r00*x943))+(((-8.0)*x950))+(((-1.0)*r11*x935*x937))+((r11*x937*x939)))))+(((0.5)*(IKabs(((((-1.0)*r02*x935*x938))+((r02*x938*x939))+x964+(((-1.0)*x966))+(((-1.0)*x940*x946)))))))+(((0.5)*(IKabs((((r01*x934*x935))+(((-16.0)*x951))+(((-1.0)*r10*x942))+(((-1.0)*x934*x949)))))))+(((0.5)*(IKabs((x961+x965+(((-1.0)*x969))+(((-1.0)*x968)))))))+(((0.5)*(IKabs((x961+x968+(((-1.0)*x965))+(((-1.0)*x969)))))))+(((0.5)*(IKabs((x966+x957+(((-1.0)*x964))+(((-1.0)*x967)))))))+(((0.5)*(IKabs(((((-1.0)*r00*x942))+((r11*x934*x939))+(((-16.0)*x950))+(((-1.0)*r11*x934*x935)))))))+(((0.5)*(IKabs(((((-1.0)*r12*x938*x939))+((r12*x935*x938))+x965+(((-1.0)*x968))+(((-1.0)*x940*x941)))))))+(IKabs((((r01*x935*x937))+(((-8.0)*x951))+(((-1.0)*r10*x943))+(((-1.0)*x937*x949))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x970=(r10*sj3);
IkReal x971=(r01*sj4);
IkReal x972=(cj1*cj2);
IkReal x973=(cj3*cj4);
IkReal x974=(sj1*sj2);
IkReal x975=(cj4*r02);
IkReal x976=((4.0)*r11*sj3);
IkReal x977=(cj3*r12*sj4);
IkReal x978=((4.0)*r00*sj4);
IkReal x979=((4.0)*r10*x973);
IkReal x980=((12.0)*x977);
IkReal x981=((4.0)*x977);
IkReal x982=(x972*x978);
IkReal x983=(x974*x978);
IkReal x984=((12.0)*x974*x975);
IkReal x985=((12.0)*x972*x975);
IkReal x986=((4.0)*x974*x975);
IkReal x987=((4.0)*x972*x975);
IkReal x988=(x982+x976);
IkReal x989=(x983+x979);
IkReal x990=(x987+x981);
IkReal x991=(x985+x980);
IkReal x992=((((8.0)*x971*x972))+(((-8.0)*x970))+(((-8.0)*x971*x974))+(((-8.0)*r11*x973)));
op[0]=((((-1.0)*x989))+(((-1.0)*x990))+x988+x986);
op[1]=x992;
op[2]=((((-1.0)*x989))+(((-1.0)*x991))+x988+x984);
op[3]=((((-16.0)*r11*x973))+(((-16.0)*x970))+(((16.0)*x971*x972))+(((-16.0)*x971*x974)));
op[4]=((((-1.0)*x988))+(((-1.0)*x991))+x989+x984);
op[5]=x992;
op[6]=((((-1.0)*x988))+(((-1.0)*x990))+x989+x986);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x993=(cj1*cj2);
IkReal x994=((4.0)*cj4);
IkReal x995=(sj1*sj2);
IkReal x996=((4.0)*sj4);
IkReal x997=(r00*sj3);
IkReal x998=(cj3*r02);
IkReal x999=((4.0)*r01*sj3);
IkReal x1000=((16.0)*r11*sj4);
IkReal x1001=(cj3*cj4*r01);
IkReal x1002=((12.0)*cj4*r12);
IkReal x1003=((8.0)*r11*sj4);
IkReal x1004=(cj3*r00*x994);
IkReal x1005=((12.0)*sj4*x998);
IkReal x1006=(x996*x998);
IkReal x1007=(r10*x993*x996);
IkReal x1008=(r10*x995*x996);
IkReal x1009=(x1002*x993);
IkReal x1010=(x1002*x995);
IkReal x1011=(r12*x993*x994);
IkReal x1012=(r12*x994*x995);
IkReal x1013=(x1008+x999);
IkReal x1014=(x1007+x1004);
IkReal x1015=(x1012+x1006);
IkReal x1016=(x1010+x1005);
IkReal x1017=((((-1.0)*x1003*x993))+((x1003*x995))+(((-8.0)*x1001))+(((-8.0)*x997)));
j5evalpoly[0]=(x1014+x1011+(((-1.0)*x1015))+(((-1.0)*x1013))+(((htj5*htj5)*((x1014+x1009+(((-1.0)*x1016))+(((-1.0)*x1013))))))+(((htj5*htj5*htj5*htj5)*((x1013+x1009+(((-1.0)*x1016))+(((-1.0)*x1014))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1011+x1013+(((-1.0)*x1015))+(((-1.0)*x1014))))))+((x1017*(htj5*htj5*htj5*htj5*htj5)))+((htj5*x1017))+(((htj5*htj5*htj5)*((((x1000*x995))+(((-16.0)*x1001))+(((-16.0)*x997))+(((-1.0)*x1000*x993)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1018=(cj5*sj4);
IkReal x1019=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x1019))+((r00*x1018))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1019))+(((-1.0)*r10*x1018))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1019))+((r00*x1018))+((cj4*r02))))+IKsqr((((r11*x1019))+(((-1.0)*r10*x1018))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x1019))+((r00*x1018))+((cj4*r02))), (((r11*x1019))+(((-1.0)*r10*x1018))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1020=IKsin(j0);
IkReal x1021=IKcos(j0);
IkReal x1022=(r02*sj4);
IkReal x1023=((1.0)*sj3);
IkReal x1024=(r12*sj4);
IkReal x1025=(cj3*cj4);
IkReal x1026=((1.0)*cj5);
IkReal x1027=(r11*sj5);
IkReal x1028=(cj5*r01);
IkReal x1029=(r01*sj5);
IkReal x1030=(r00*sj5);
IkReal x1031=((0.39225)*cj2);
IkReal x1032=(cj5*r11);
IkReal x1033=((1.0)*sj2);
IkReal x1034=(r10*sj5);
IkReal x1035=((1.0)*cj4);
IkReal x1036=((0.39225)*sj1*sj2);
IkReal x1037=(cj1*x1020);
IkReal x1038=(cj4*cj5*sj3);
IkReal x1039=(cj1*x1021);
IkReal x1040=(sj1*x1021);
IkReal x1041=(sj1*x1020);
evalcond[0]=(x1020+(((-1.0)*r00*sj4*x1026))+((sj4*x1029))+(((-1.0)*r02*x1035)));
evalcond[1]=((((-1.0)*x1021))+((sj4*x1027))+(((-1.0)*r12*x1035))+(((-1.0)*r10*sj4*x1026)));
evalcond[2]=(((x1021*x1036))+(((0.10915)*x1020))+(((-1.0)*px))+(((-1.0)*x1031*x1039))+(((-0.425)*x1039))+(((-0.09465)*x1030))+(((-0.09465)*x1028)));
evalcond[3]=(((x1020*x1036))+(((-0.10915)*x1021))+(((-1.0)*py))+(((-1.0)*x1031*x1037))+(((-0.425)*x1037))+(((-0.09465)*x1034))+(((-0.09465)*x1032)));
evalcond[4]=(((r00*x1038))+((cj3*x1030))+(((-1.0)*x1022*x1023))+(((-1.0)*cj4*x1023*x1029))+((sj2*x1039))+((cj2*x1040))+((cj3*x1028)));
evalcond[5]=(((cj2*x1039))+(((-1.0)*x1033*x1040))+(((-1.0)*r00*x1025*x1026))+((sj3*x1030))+((x1025*x1029))+((sj3*x1028))+((cj3*x1022)));
evalcond[6]=(((r10*x1038))+(((-1.0)*x1023*x1024))+((cj3*x1034))+((cj3*x1032))+(((-1.0)*cj4*x1023*x1027))+((sj2*x1037))+((cj2*x1041)));
evalcond[7]=(((cj2*x1037))+(((-1.0)*x1033*x1041))+(((-1.0)*r10*x1025*x1026))+((sj3*x1032))+((sj3*x1034))+((x1025*x1027))+((cj3*x1024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1042=IKPowWithIntegerCheck(cj3,-1);
if(!x1042.valid){
continue;
}
CheckValue<IkReal> x1043=IKPowWithIntegerCheck(r22,-1);
if(!x1043.valid){
continue;
}
sj4array[0]=((-1.0)*(x1042.value)*(x1043.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1044=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1044);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1044);
IkReal x1045=((16.0)*sj4);
IkReal x1046=(cj1*cj2);
IkReal x1047=((4.0)*sj3);
IkReal x1048=((8.0)*sj4);
IkReal x1049=((4.0)*cj4);
IkReal x1050=(sj1*sj2);
IkReal x1051=((4.0)*sj4);
IkReal x1052=(cj3*r02);
IkReal x1053=((16.0)*sj3);
IkReal x1054=((8.0)*sj3);
IkReal x1055=((12.0)*cj4);
IkReal x1056=((12.0)*sj4);
IkReal x1057=(cj3*r12);
IkReal x1058=(r11*x1047);
IkReal x1059=(r01*x1047);
IkReal x1060=(r01*x1050);
IkReal x1061=(cj3*cj4*r01);
IkReal x1062=(cj3*cj4*r11);
IkReal x1063=(cj3*r10*x1049);
IkReal x1064=(x1056*x1057);
IkReal x1065=(cj3*r00*x1049);
IkReal x1066=(x1052*x1056);
IkReal x1067=(r00*x1050*x1051);
IkReal x1068=(r02*x1050*x1055);
IkReal x1069=(r00*x1046*x1051);
IkReal x1070=(r02*x1046*x1055);
IkReal x1071=(r10*x1050*x1051);
IkReal x1072=(r12*x1046*x1055);
IkReal x1073=(r12*x1050*x1055);
IkReal x1074=(r10*x1046*x1051);
IkReal x1075=(x1058+x1069);
IkReal x1076=(x1059+x1071);
IkReal x1077=(x1063+x1067);
IkReal x1078=(x1070+x1064);
IkReal x1079=(x1074+x1065);
IkReal x1080=(x1073+x1066);
j5eval[0]=((((0.5)*(IKabs((((r12*x1046*x1049))+(((-1.0)*r12*x1049*x1050))+x1076+(((-1.0)*x1079))+(((-1.0)*x1051*x1052)))))))+(((0.5)*(IKabs(((((-1.0)*r10*x1053))+(((-1.0)*x1045*x1060))+(((-16.0)*x1062))+((r01*x1045*x1046)))))))+(((0.5)*(IKabs((x1075+(((-1.0)*x1077))+((r02*x1049*x1050))+(((-1.0)*r02*x1046*x1049))+(((-1.0)*x1051*x1057)))))))+(IKabs(((((-1.0)*r00*x1054))+(((-1.0)*r11*x1046*x1048))+((r11*x1048*x1050))+(((-8.0)*x1061)))))+(((0.5)*(IKabs((x1079+x1072+(((-1.0)*x1080))+(((-1.0)*x1076)))))))+(IKabs(((((-1.0)*r10*x1054))+(((-1.0)*x1048*x1060))+((r01*x1046*x1048))+(((-8.0)*x1062)))))+(((0.5)*(IKabs(((((-1.0)*r00*x1053))+(((-1.0)*r11*x1045*x1046))+(((-16.0)*x1061))+((r11*x1045*x1050)))))))+(((0.5)*(IKabs((x1077+x1068+(((-1.0)*x1075))+(((-1.0)*x1078)))))))+(((0.5)*(IKabs((x1075+x1068+(((-1.0)*x1077))+(((-1.0)*x1078)))))))+(((0.5)*(IKabs((x1076+x1072+(((-1.0)*x1080))+(((-1.0)*x1079))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1081=(r10*sj3);
IkReal x1082=(r01*sj4);
IkReal x1083=(cj1*cj2);
IkReal x1084=(cj3*cj4);
IkReal x1085=(sj1*sj2);
IkReal x1086=(cj4*r02);
IkReal x1087=((4.0)*r11*sj3);
IkReal x1088=(cj3*r12*sj4);
IkReal x1089=((4.0)*r00*sj4);
IkReal x1090=((4.0)*r10*x1084);
IkReal x1091=((12.0)*x1088);
IkReal x1092=((4.0)*x1088);
IkReal x1093=(x1083*x1089);
IkReal x1094=(x1085*x1089);
IkReal x1095=((12.0)*x1085*x1086);
IkReal x1096=((12.0)*x1083*x1086);
IkReal x1097=((4.0)*x1085*x1086);
IkReal x1098=((4.0)*x1083*x1086);
IkReal x1099=(x1093+x1087);
IkReal x1100=(x1094+x1090);
IkReal x1101=(x1092+x1098);
IkReal x1102=(x1096+x1091);
IkReal x1103=((((-8.0)*r11*x1084))+(((-8.0)*x1082*x1085))+(((8.0)*x1082*x1083))+(((-8.0)*x1081)));
op[0]=(x1097+x1099+(((-1.0)*x1100))+(((-1.0)*x1101)));
op[1]=x1103;
op[2]=(x1095+x1099+(((-1.0)*x1100))+(((-1.0)*x1102)));
op[3]=((((-16.0)*x1081))+(((-16.0)*x1082*x1085))+(((16.0)*x1082*x1083))+(((-16.0)*r11*x1084)));
op[4]=(x1100+x1095+(((-1.0)*x1099))+(((-1.0)*x1102)));
op[5]=x1103;
op[6]=(x1100+x1097+(((-1.0)*x1099))+(((-1.0)*x1101)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1104=(cj1*cj2);
IkReal x1105=((4.0)*cj4);
IkReal x1106=(sj1*sj2);
IkReal x1107=((4.0)*sj4);
IkReal x1108=(r00*sj3);
IkReal x1109=(cj3*r02);
IkReal x1110=((4.0)*r01*sj3);
IkReal x1111=((16.0)*r11*sj4);
IkReal x1112=(cj3*cj4*r01);
IkReal x1113=((12.0)*cj4*r12);
IkReal x1114=((8.0)*r11*sj4);
IkReal x1115=(cj3*r00*x1105);
IkReal x1116=((12.0)*sj4*x1109);
IkReal x1117=(x1107*x1109);
IkReal x1118=(r10*x1104*x1107);
IkReal x1119=(r10*x1106*x1107);
IkReal x1120=(x1104*x1113);
IkReal x1121=(x1106*x1113);
IkReal x1122=(r12*x1104*x1105);
IkReal x1123=(r12*x1105*x1106);
IkReal x1124=(x1110+x1119);
IkReal x1125=(x1115+x1118);
IkReal x1126=(x1117+x1123);
IkReal x1127=(x1116+x1121);
IkReal x1128=((((-1.0)*x1104*x1114))+(((-8.0)*x1108))+(((-8.0)*x1112))+((x1106*x1114)));
j5evalpoly[0]=(((htj5*x1128))+((x1128*(htj5*htj5*htj5*htj5*htj5)))+x1122+x1125+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1122+x1124+(((-1.0)*x1126))+(((-1.0)*x1125))))))+(((htj5*htj5*htj5)*(((((-16.0)*x1112))+(((-16.0)*x1108))+(((-1.0)*x1104*x1111))+((x1106*x1111))))))+(((-1.0)*x1126))+(((-1.0)*x1124))+(((htj5*htj5)*((x1120+x1125+(((-1.0)*x1127))+(((-1.0)*x1124))))))+(((htj5*htj5*htj5*htj5)*((x1120+x1124+(((-1.0)*x1127))+(((-1.0)*x1125)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1129=(cj5*sj4);
IkReal x1130=(sj4*sj5);
if( IKabs((((r00*x1129))+(((-1.0)*r01*x1130))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1129))+((r11*x1130))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1129))+(((-1.0)*r01*x1130))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x1129))+((r11*x1130))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1129))+(((-1.0)*r01*x1130))+((cj4*r02))), ((((-1.0)*r10*x1129))+((r11*x1130))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1131=IKsin(j0);
IkReal x1132=IKcos(j0);
IkReal x1133=(r02*sj4);
IkReal x1134=((1.0)*sj3);
IkReal x1135=(r12*sj4);
IkReal x1136=(cj3*cj4);
IkReal x1137=((1.0)*cj5);
IkReal x1138=(r11*sj5);
IkReal x1139=(cj5*r01);
IkReal x1140=(r01*sj5);
IkReal x1141=(r00*sj5);
IkReal x1142=((0.39225)*cj2);
IkReal x1143=(cj5*r11);
IkReal x1144=((1.0)*sj2);
IkReal x1145=(r10*sj5);
IkReal x1146=((1.0)*cj4);
IkReal x1147=((0.39225)*sj1*sj2);
IkReal x1148=(cj1*x1131);
IkReal x1149=(cj4*cj5*sj3);
IkReal x1150=(cj1*x1132);
IkReal x1151=(sj1*x1132);
IkReal x1152=(sj1*x1131);
evalcond[0]=(((sj4*x1140))+x1131+(((-1.0)*r02*x1146))+(((-1.0)*r00*sj4*x1137)));
evalcond[1]=(((sj4*x1138))+(((-1.0)*x1132))+(((-1.0)*r12*x1146))+(((-1.0)*r10*sj4*x1137)));
evalcond[2]=((((-0.09465)*x1139))+((x1132*x1147))+(((0.10915)*x1131))+(((-1.0)*px))+(((-0.09465)*x1141))+(((-0.425)*x1150))+(((-1.0)*x1142*x1150)));
evalcond[3]=(((x1131*x1147))+(((-1.0)*py))+(((-0.10915)*x1132))+(((-0.425)*x1148))+(((-0.09465)*x1143))+(((-0.09465)*x1145))+(((-1.0)*x1142*x1148)));
evalcond[4]=(((cj3*x1139))+((cj2*x1151))+((sj2*x1150))+((cj3*x1141))+((r00*x1149))+(((-1.0)*x1133*x1134))+(((-1.0)*cj4*x1134*x1140)));
evalcond[5]=((((-1.0)*x1144*x1151))+((cj3*x1133))+((cj2*x1150))+((sj3*x1141))+((sj3*x1139))+(((-1.0)*r00*x1136*x1137))+((x1136*x1140)));
evalcond[6]=(((cj2*x1152))+(((-1.0)*cj4*x1134*x1138))+((cj3*x1143))+((cj3*x1145))+((sj2*x1148))+(((-1.0)*x1134*x1135))+((r10*x1149)));
evalcond[7]=((((-1.0)*x1144*x1152))+((cj3*x1135))+((cj2*x1148))+((x1136*x1138))+(((-1.0)*r10*x1136*x1137))+((sj3*x1143))+((sj3*x1145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1153=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1153);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1153);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1154=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1154);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1154);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1155=IKPowWithIntegerCheck(r22,-1);
if(!x1155.valid){
continue;
}
CheckValue<IkReal> x1156=IKPowWithIntegerCheck(sj3,-1);
if(!x1156.valid){
continue;
}
sj4array[0]=((x1155.value)*(x1156.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1157=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1157);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1157);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(IKabs(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1)))))))+(IKabs(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1158=((4.0)*r01);
IkReal x1159=((16.0)*r00);
IkReal x1160=(cj3*sj2);
IkReal x1161=((8.0)*r00);
IkReal x1162=(cj2*cj3);
IkReal x1163=(cj4*r01);
IkReal x1164=((16.0)*cj1);
IkReal x1165=((8.0)*sj1);
IkReal x1166=((16.0)*sj1);
IkReal x1167=((8.0)*cj1);
IkReal x1168=(cj2*sj3);
IkReal x1169=(sj2*sj3);
IkReal x1170=(sj1*x1168);
IkReal x1171=((4.0)*cj4*r00);
IkReal x1172=(cj1*x1169);
IkReal x1173=(((sj1*x1158*x1160))+((sj1*x1169*x1171))+((x1158*x1172))+((x1158*x1170)));
IkReal x1174=(((cj1*x1160*x1171))+((sj1*x1162*x1171))+((cj1*x1168*x1171))+((cj1*x1158*x1162)));
IkReal x1175=(x1173+(((-1.0)*x1174)));
IkReal x1176=(((cj1*x1161*x1162))+((x1163*x1165*x1169))+(((-1.0)*x1162*x1163*x1165))+(((-1.0)*x1163*x1167*x1168))+(((-1.0)*sj1*x1160*x1161))+(((-1.0)*x1160*x1163*x1167))+(((-1.0)*x1161*x1170))+(((-1.0)*x1161*x1172)));
IkReal x1177=(x1174+(((-1.0)*x1173)));
op[0]=x1175;
op[1]=x1176;
op[2]=x1175;
op[3]=((((-1.0)*x1159*x1170))+(((-1.0)*x1159*x1172))+(((-1.0)*x1162*x1163*x1166))+(((-1.0)*sj1*x1159*x1160))+(((-1.0)*x1163*x1164*x1168))+(((-1.0)*x1160*x1163*x1164))+((cj1*x1159*x1162))+((x1163*x1166*x1169)));
op[4]=x1177;
op[5]=x1176;
op[6]=x1177;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+((htj5*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))))))+(((4.0)*cj1*cj2*cj4*r10*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1178=((1.0)*sj4);
if( IKabs(((((-1.0)*r01*sj5*x1178))+((cj5*r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1178))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj5*x1178))+((cj5*r00*sj4))))+IKsqr(((((-1.0)*cj5*r10*x1178))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*sj5*x1178))+((cj5*r00*sj4))), ((((-1.0)*cj5*r10*x1178))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1179=IKcos(j0);
IkReal x1180=IKsin(j0);
IkReal x1181=((1.0)*cj3);
IkReal x1182=(r11*sj5);
IkReal x1183=(cj5*r01);
IkReal x1184=(cj1*cj2);
IkReal x1185=(cj5*r11);
IkReal x1186=(r01*sj5);
IkReal x1187=(cj3*cj4);
IkReal x1188=(r00*sj5);
IkReal x1189=(r10*sj5);
IkReal x1190=(cj4*cj5*r00);
IkReal x1191=(cj4*cj5*r10);
IkReal x1192=((1.0)*cj4*sj3);
IkReal x1193=(cj1*x1180);
IkReal x1194=(cj1*x1179);
IkReal x1195=(sj1*x1179);
IkReal x1196=((1.0)*cj5*sj4);
IkReal x1197=(sj1*sj2*x1180);
evalcond[0]=((((-1.0)*r00*x1196))+x1180+((sj4*x1186)));
evalcond[1]=(((sj4*x1182))+(((-1.0)*r10*x1196))+(((-1.0)*x1179)));
evalcond[2]=((((-1.0)*x1186*x1192))+((sj2*x1194))+((sj3*x1190))+((cj3*x1188))+((cj3*x1183))+((cj2*x1195)));
evalcond[3]=(((cj2*sj1*x1180))+((sj2*x1193))+((sj3*x1191))+(((-1.0)*x1182*x1192))+((cj3*x1189))+((cj3*x1185)));
evalcond[4]=(((x1186*x1187))+(((-1.0)*x1181*x1190))+((x1179*x1184))+(((-1.0)*sj2*x1195))+((sj3*x1183))+((sj3*x1188)));
evalcond[5]=((((-1.0)*x1181*x1191))+((x1182*x1187))+((x1180*x1184))+((sj3*x1185))+((sj3*x1189))+(((-1.0)*x1197)));
evalcond[6]=((((-0.09465)*x1188))+(((-0.09465)*x1183))+(((0.39225)*sj2*x1195))+(((0.10915)*x1180))+(((-0.39225)*x1179*x1184))+(((-0.425)*x1194))+(((-1.0)*px)));
evalcond[7]=((((-0.09465)*x1189))+(((-0.09465)*x1185))+(((0.39225)*x1197))+(((-0.10915)*x1179))+(((-0.39225)*x1180*x1184))+(((-0.425)*x1193))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1198=IKPowWithIntegerCheck(cj3,-1);
if(!x1198.valid){
continue;
}
CheckValue<IkReal> x1199=IKPowWithIntegerCheck(r22,-1);
if(!x1199.valid){
continue;
}
sj4array[0]=((-1.0)*(x1198.value)*(x1199.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1200=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1200);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1200);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(IKabs(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1)))))))+(IKabs(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1201=((4.0)*r01);
IkReal x1202=((16.0)*r00);
IkReal x1203=(cj3*sj2);
IkReal x1204=((8.0)*r00);
IkReal x1205=(cj2*cj3);
IkReal x1206=(cj4*r01);
IkReal x1207=((16.0)*cj1);
IkReal x1208=((8.0)*sj1);
IkReal x1209=((16.0)*sj1);
IkReal x1210=((8.0)*cj1);
IkReal x1211=(cj2*sj3);
IkReal x1212=(sj2*sj3);
IkReal x1213=(sj1*x1211);
IkReal x1214=((4.0)*cj4*r00);
IkReal x1215=(cj1*x1212);
IkReal x1216=(((x1201*x1215))+((x1201*x1213))+((sj1*x1201*x1203))+((sj1*x1212*x1214)));
IkReal x1217=(((cj1*x1211*x1214))+((cj1*x1201*x1205))+((sj1*x1205*x1214))+((cj1*x1203*x1214)));
IkReal x1218=(x1216+(((-1.0)*x1217)));
IkReal x1219=((((-1.0)*x1204*x1215))+(((-1.0)*x1204*x1213))+((cj1*x1204*x1205))+(((-1.0)*x1206*x1210*x1211))+(((-1.0)*x1205*x1206*x1208))+(((-1.0)*sj1*x1203*x1204))+(((-1.0)*x1203*x1206*x1210))+((x1206*x1208*x1212)));
IkReal x1220=(x1217+(((-1.0)*x1216)));
op[0]=x1218;
op[1]=x1219;
op[2]=x1218;
op[3]=((((-1.0)*x1205*x1206*x1209))+(((-1.0)*x1202*x1215))+(((-1.0)*x1202*x1213))+(((-1.0)*sj1*x1202*x1203))+(((-1.0)*x1206*x1207*x1211))+(((-1.0)*x1203*x1206*x1207))+((x1206*x1209*x1212))+((cj1*x1202*x1205)));
op[4]=x1220;
op[5]=x1219;
op[6]=x1220;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+((htj5*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))))))+(((4.0)*cj1*cj2*cj4*r10*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1221=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1221)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1221))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1221))))+IKsqr(((((-1.0)*cj5*r10*x1221))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1221))), ((((-1.0)*cj5*r10*x1221))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1222=IKcos(j0);
IkReal x1223=IKsin(j0);
IkReal x1224=((1.0)*cj3);
IkReal x1225=(r11*sj5);
IkReal x1226=(cj5*r01);
IkReal x1227=(cj1*cj2);
IkReal x1228=(cj5*r11);
IkReal x1229=(r01*sj5);
IkReal x1230=(cj3*cj4);
IkReal x1231=(r00*sj5);
IkReal x1232=(r10*sj5);
IkReal x1233=(cj4*cj5*r00);
IkReal x1234=(cj4*cj5*r10);
IkReal x1235=((1.0)*cj4*sj3);
IkReal x1236=(cj1*x1223);
IkReal x1237=(cj1*x1222);
IkReal x1238=(sj1*x1222);
IkReal x1239=((1.0)*cj5*sj4);
IkReal x1240=(sj1*sj2*x1223);
evalcond[0]=((((-1.0)*r00*x1239))+x1223+((sj4*x1229)));
evalcond[1]=((((-1.0)*x1222))+((sj4*x1225))+(((-1.0)*r10*x1239)));
evalcond[2]=(((cj3*x1231))+((cj3*x1226))+((cj2*x1238))+((sj3*x1233))+((sj2*x1237))+(((-1.0)*x1229*x1235)));
evalcond[3]=(((cj3*x1232))+(((-1.0)*x1225*x1235))+((cj3*x1228))+((sj3*x1234))+((sj2*x1236))+((cj2*sj1*x1223)));
evalcond[4]=(((sj3*x1231))+(((-1.0)*x1224*x1233))+((sj3*x1226))+(((-1.0)*sj2*x1238))+((x1222*x1227))+((x1229*x1230)));
evalcond[5]=(((sj3*x1232))+(((-1.0)*x1224*x1234))+((x1223*x1227))+((sj3*x1228))+(((-1.0)*x1240))+((x1225*x1230)));
evalcond[6]=((((0.39225)*sj2*x1238))+(((-0.425)*x1237))+(((-1.0)*px))+(((-0.09465)*x1231))+(((-0.09465)*x1226))+(((-0.39225)*x1222*x1227))+(((0.10915)*x1223)));
evalcond[7]=((((-0.39225)*x1223*x1227))+(((0.39225)*x1240))+(((-0.425)*x1236))+(((-1.0)*py))+(((-0.09465)*x1232))+(((-0.09465)*x1228))+(((-0.10915)*x1222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1243 = IKatan2WithCheck(IkReal(((-0.09465)*r21)),IkReal(((-0.09465)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1243.valid){
continue;
}
IkReal x1241=((1.0)*(x1243.value));
if((((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1244=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20)))))),-1);
if(!x1244.valid){
continue;
}
if( (((-1.0)*(x1244.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1244.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1242=((-1.0)*(IKasin(((-1.0)*(x1244.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2))))))));
j5array[0]=((((-1.0)*x1242))+(((-1.0)*x1241)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1241))+(((1.0)*x1242)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1245=cj5*cj5;
IkReal x1246=r21*r21;
IkReal x1247=(sj3*x1245);
IkReal x1248=(((sj3*(r22*r22)))+(((-1.0)*x1246*x1247))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((sj3*x1246))+((x1247*(r20*r20))));
j4eval[0]=x1248;
j4eval[1]=IKsign(x1248);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1249=cj5*cj5;
IkReal x1250=r21*r21;
IkReal x1251=((1.0)*cj3);
IkReal x1252=(cj3*x1249);
IkReal x1253=((((-1.0)*x1251*(r22*r22)))+(((-1.0)*x1249*x1251*(r20*r20)))+((x1250*x1252))+(((-1.0)*x1250*x1251))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1253;
j4eval[1]=IKsign(x1253);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1254=cj2*cj2;
IkReal x1255=cj1*cj1;
IkReal x1256=(cj1*sj1*sj2);
IkReal x1257=(cj2*x1255);
IkReal x1258=(x1254*x1255);
j0eval[0]=((-6.19369221392727)+(((5.74856797255738)*x1254))+(((-12.4570625281677)*x1257))+(((12.4570625281677)*x1256))+(((-11.4971359451148)*x1258))+(((-1.0)*x1255))+(((11.4971359451148)*cj2*x1256)));
j0eval[1]=IKsign(((-66309514.0)+(((-133365000.0)*x1257))+(((-10705975.0)*x1255))+(((-123088050.0)*x1258))+(((133365000.0)*x1256))+(((123088050.0)*cj2*x1256))+(((61544025.0)*x1254))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1259=((1.0)*cj5);
IkReal x1260=((1.0)*sj5);
IkReal x1261=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x1261;
j0eval[1]=IKsign(x1261);
j0eval[2]=((IKabs(((((-1.0)*r10*x1260))+(((-1.0)*r11*x1259)))))+(IKabs(((((-1.0)*r00*x1260))+(((-1.0)*r01*x1259))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1262=cj5*cj5;
IkReal x1263=r21*r21;
IkReal x1264=(sj1*sj2);
IkReal x1265=(r21*sj5);
IkReal x1266=(cj5*r20);
IkReal x1267=(cj1*cj2);
IkReal x1268=(x1263+(r22*r22)+((x1262*(r20*r20)))+(((-1.0)*x1262*x1263))+(((-2.0)*x1265*x1266)));
j4eval[0]=x1268;
j4eval[1]=IKsign(x1268);
j4eval[2]=((IKabs((((r22*x1264))+(((-1.0)*r22*x1267)))))+(IKabs((((x1264*x1265))+(((-1.0)*x1265*x1267))+(((-1.0)*x1264*x1266))+((x1266*x1267))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1269=(cj1*cj2);
IkReal x1270=(cj5*r01);
IkReal x1271=(sj1*sj2);
IkReal x1272=(r00*sj5);
IkReal x1273=((20000.0)*px);
IkReal x1274=((8500.0)*cj1);
CheckValue<IkReal> x1275=IKPowWithIntegerCheck(((((-2183.0)*x1271))+(((2183.0)*x1269))),-1);
if(!x1275.valid){
continue;
}
CheckValue<IkReal> x1276=IKPowWithIntegerCheck((x1269+(((-1.0)*x1271))),-1);
if(!x1276.valid){
continue;
}
if( IKabs(((x1275.value)*((((x1269*x1273))+(((5952.0)*x1270*x1271))+(((-1.0)*x1270*x1274))+(((5952.0)*x1271*x1272))+(((-1.0)*x1271*x1273))+(((-1.0)*x1272*x1274))+(((-5952.0)*x1269*x1272))+(((-5952.0)*x1269*x1270)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1276.value)*(((((-1.0)*x1272))+(((-1.0)*x1270)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1275.value)*((((x1269*x1273))+(((5952.0)*x1270*x1271))+(((-1.0)*x1270*x1274))+(((5952.0)*x1271*x1272))+(((-1.0)*x1271*x1273))+(((-1.0)*x1272*x1274))+(((-5952.0)*x1269*x1272))+(((-5952.0)*x1269*x1270))))))+IKsqr(((x1276.value)*(((((-1.0)*x1272))+(((-1.0)*x1270))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1275.value)*((((x1269*x1273))+(((5952.0)*x1270*x1271))+(((-1.0)*x1270*x1274))+(((5952.0)*x1271*x1272))+(((-1.0)*x1271*x1273))+(((-1.0)*x1272*x1274))+(((-5952.0)*x1269*x1272))+(((-5952.0)*x1269*x1270))))), ((x1276.value)*(((((-1.0)*x1272))+(((-1.0)*x1270))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1277=IKcos(j0);
IkReal x1278=IKsin(j0);
IkReal x1279=(cj5*r01);
IkReal x1280=(cj1*cj2);
IkReal x1281=(sj1*sj2);
IkReal x1282=((0.425)*cj1);
IkReal x1283=(r00*sj5);
IkReal x1284=(cj5*r11);
IkReal x1285=(r10*sj5);
IkReal x1286=((0.39225)*x1277);
IkReal x1287=(x1278*x1281);
evalcond[0]=(x1279+x1283+(((-1.0)*x1277*x1281))+((x1277*x1280)));
evalcond[1]=((((-1.0)*x1287))+x1285+x1284+((x1278*x1280)));
evalcond[2]=((((-0.09465)*x1279))+(((0.10915)*x1278))+(((-0.09465)*x1283))+(((-1.0)*x1277*x1282))+(((-1.0)*px))+((x1281*x1286))+(((-1.0)*x1280*x1286)));
evalcond[3]=((((0.39225)*x1287))+(((-0.39225)*x1278*x1280))+(((-0.10915)*x1277))+(((-0.09465)*x1285))+(((-0.09465)*x1284))+(((-1.0)*py))+(((-1.0)*x1278*x1282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1288=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1288;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1288);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1289=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1289;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1289);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1290=((1.0)*cj5);
IkReal x1291=((((-1.0)*r21*x1290))+(((-1.0)*r20*sj5)));
j4eval[0]=x1291;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1290))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1290))))));
j4eval[2]=IKsign(x1291);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1292=((1.0)*cj5);
CheckValue<IkReal> x1293=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1292))+(((-1.0)*r20*sj5)))),-1);
if(!x1293.valid){
continue;
}
CheckValue<IkReal> x1294 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1292))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1292)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1293.value)))+(x1294.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1295=IKsin(j4);
IkReal x1296=IKcos(j4);
IkReal x1297=(cj5*r10);
IkReal x1298=(cj2*sj1);
IkReal x1299=(r01*sj5);
IkReal x1300=(cj5*r00);
IkReal x1301=(cj5*r20);
IkReal x1302=(cj1*sj2);
IkReal x1303=((1.0)*x1296);
IkReal x1304=((1.0)*x1295);
IkReal x1305=(sj5*x1295);
evalcond[0]=((((-1.0)*r22*x1303))+((r21*x1305))+(((-1.0)*x1301*x1304)));
evalcond[1]=(sj0+((x1295*x1299))+(((-1.0)*r02*x1303))+(((-1.0)*x1300*x1304)));
evalcond[2]=((((-1.0)*x1297*x1304))+((r11*x1305))+(((-1.0)*r12*x1303))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1304))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1296*x1301))+(((-1.0)*r21*sj5*x1303)));
evalcond[4]=((((-1.0)*x1299*x1303))+(((-1.0)*r02*x1304))+((cj0*x1298))+((cj0*x1302))+((x1296*x1300)));
evalcond[5]=(((x1296*x1297))+((sj0*x1298))+(((-1.0)*r12*x1304))+(((-1.0)*r11*sj5*x1303))+((sj0*x1302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1306=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1306.valid){
continue;
}
CheckValue<IkReal> x1307 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1306.value)))+(x1307.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1308=IKsin(j4);
IkReal x1309=IKcos(j4);
IkReal x1310=(cj5*r10);
IkReal x1311=(cj2*sj1);
IkReal x1312=(r01*sj5);
IkReal x1313=(cj5*r00);
IkReal x1314=(cj5*r20);
IkReal x1315=(cj1*sj2);
IkReal x1316=((1.0)*x1309);
IkReal x1317=((1.0)*x1308);
IkReal x1318=(sj5*x1308);
evalcond[0]=((((-1.0)*r22*x1316))+(((-1.0)*x1314*x1317))+((r21*x1318)));
evalcond[1]=(sj0+(((-1.0)*x1313*x1317))+((x1308*x1312))+(((-1.0)*r02*x1316)));
evalcond[2]=(((r11*x1318))+(((-1.0)*r12*x1316))+(((-1.0)*x1310*x1317))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1317))+((x1309*x1314))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x1316)));
evalcond[4]=(((x1309*x1313))+(((-1.0)*r02*x1317))+(((-1.0)*x1312*x1316))+((cj0*x1315))+((cj0*x1311)));
evalcond[5]=(((x1309*x1310))+(((-1.0)*r12*x1317))+(((-1.0)*r11*sj5*x1316))+((sj0*x1315))+((sj0*x1311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1319=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1319.valid){
continue;
}
CheckValue<IkReal> x1320 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1319.value)))+(x1320.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1321=IKsin(j4);
IkReal x1322=IKcos(j4);
IkReal x1323=(cj5*r10);
IkReal x1324=(cj2*sj1);
IkReal x1325=(r01*sj5);
IkReal x1326=(cj5*r00);
IkReal x1327=(cj5*r20);
IkReal x1328=(cj1*sj2);
IkReal x1329=((1.0)*x1322);
IkReal x1330=((1.0)*x1321);
IkReal x1331=(sj5*x1321);
evalcond[0]=((((-1.0)*x1327*x1330))+(((-1.0)*r22*x1329))+((r21*x1331)));
evalcond[1]=((((-1.0)*x1326*x1330))+sj0+(((-1.0)*r02*x1329))+((x1321*x1325)));
evalcond[2]=(((r11*x1331))+(((-1.0)*x1323*x1330))+(((-1.0)*r12*x1329))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1330))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1322*x1327))+(((-1.0)*r21*sj5*x1329)));
evalcond[4]=(((x1322*x1326))+(((-1.0)*x1325*x1329))+(((-1.0)*r02*x1330))+((cj0*x1324))+((cj0*x1328)));
evalcond[5]=(((x1322*x1323))+(((-1.0)*r11*sj5*x1329))+(((-1.0)*r12*x1330))+((sj0*x1328))+((sj0*x1324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1332=cj5*cj5;
IkReal x1333=r21*r21;
IkReal x1334=(sj1*sj2);
IkReal x1335=(r21*sj5);
IkReal x1336=(cj1*cj2);
IkReal x1337=(cj5*r20);
CheckValue<IkReal> x1338=IKPowWithIntegerCheck(IKsign((x1333+((x1332*(r20*r20)))+(((-1.0)*x1332*x1333))+(r22*r22)+(((-2.0)*x1335*x1337)))),-1);
if(!x1338.valid){
continue;
}
CheckValue<IkReal> x1339 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1336))+((r22*x1334)))),IkReal((((x1336*x1337))+(((-1.0)*x1335*x1336))+((x1334*x1335))+(((-1.0)*x1334*x1337)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1338.value)))+(x1339.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1340=IKsin(j4);
IkReal x1341=IKcos(j4);
IkReal x1342=(r21*sj5);
IkReal x1343=(cj5*r20);
IkReal x1344=((1.0)*x1341);
IkReal x1345=((1.0)*x1340);
evalcond[0]=(((x1340*x1342))+(((-1.0)*r22*x1344))+(((-1.0)*x1343*x1345)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x1341*x1343))+(((-1.0)*r22*x1345))+(((-1.0)*x1342*x1344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1346=(cj5*sj4);
IkReal x1347=(sj4*sj5);
if( IKabs((((r00*x1346))+(((-1.0)*r01*x1347))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1346))+((r11*x1347))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1346))+(((-1.0)*r01*x1347))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x1346))+((r11*x1347))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1346))+(((-1.0)*r01*x1347))+((cj4*r02))), ((((-1.0)*r10*x1346))+((r11*x1347))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1348=IKcos(j0);
IkReal x1349=IKsin(j0);
IkReal x1350=(cj4*cj5);
IkReal x1351=(cj5*r01);
IkReal x1352=(r11*sj5);
IkReal x1353=(cj1*cj2);
IkReal x1354=((1.0)*sj4);
IkReal x1355=(r00*sj5);
IkReal x1356=(cj5*r11);
IkReal x1357=((1.0)*cj4);
IkReal x1358=(r01*sj5);
IkReal x1359=(r10*sj5);
IkReal x1360=(sj1*x1348);
IkReal x1361=(cj1*x1349);
IkReal x1362=(cj1*x1348);
IkReal x1363=(sj1*sj2*x1349);
evalcond[0]=(x1349+((sj4*x1358))+(((-1.0)*r02*x1357))+(((-1.0)*cj5*r00*x1354)));
evalcond[1]=((((-1.0)*r12*x1357))+((sj4*x1352))+(((-1.0)*cj5*r10*x1354))+(((-1.0)*x1348)));
evalcond[2]=(x1351+x1355+(((-1.0)*sj2*x1360))+((x1348*x1353)));
evalcond[3]=(x1359+x1356+(((-1.0)*x1363))+((x1349*x1353)));
evalcond[4]=((((-1.0)*r02*x1354))+((r00*x1350))+((sj2*x1362))+((cj2*x1360))+(((-1.0)*x1357*x1358)));
evalcond[5]=((((-1.0)*r12*x1354))+((r10*x1350))+(((-1.0)*x1352*x1357))+((cj2*sj1*x1349))+((sj2*x1361)));
evalcond[6]=((((-0.425)*x1362))+(((0.39225)*sj2*x1360))+(((-0.09465)*x1355))+(((-0.09465)*x1351))+(((-1.0)*px))+(((-0.39225)*x1348*x1353))+(((0.10915)*x1349)));
evalcond[7]=((((0.39225)*x1363))+(((-0.425)*x1361))+(((-0.39225)*x1349*x1353))+(((-0.09465)*x1359))+(((-0.09465)*x1356))+(((-1.0)*py))+(((-0.10915)*x1348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1364=((1.0)*cj5);
IkReal x1365=((1.0)*sj5);
CheckValue<IkReal> x1366 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1364))+(((-1.0)*r10*x1365)))),IkReal(((((-1.0)*r01*x1364))+(((-1.0)*r00*x1365)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1366.valid){
continue;
}
CheckValue<IkReal> x1367=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x1367.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1366.value)+(((1.5707963267949)*(x1367.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1368=IKcos(j0);
IkReal x1369=IKsin(j0);
IkReal x1370=(cj5*r01);
IkReal x1371=(cj1*cj2);
IkReal x1372=(sj1*sj2);
IkReal x1373=((0.425)*cj1);
IkReal x1374=(r00*sj5);
IkReal x1375=(cj5*r11);
IkReal x1376=(r10*sj5);
IkReal x1377=((0.39225)*x1368);
IkReal x1378=(x1369*x1372);
evalcond[0]=(x1370+x1374+((x1368*x1371))+(((-1.0)*x1368*x1372)));
evalcond[1]=(x1375+x1376+(((-1.0)*x1378))+((x1369*x1371)));
evalcond[2]=(((x1372*x1377))+(((0.10915)*x1369))+(((-1.0)*x1371*x1377))+(((-1.0)*px))+(((-0.09465)*x1374))+(((-0.09465)*x1370))+(((-1.0)*x1368*x1373)));
evalcond[3]=((((0.39225)*x1378))+(((-0.39225)*x1369*x1371))+(((-1.0)*py))+(((-0.10915)*x1368))+(((-0.09465)*x1376))+(((-0.09465)*x1375))+(((-1.0)*x1369*x1373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1379=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1379;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1379);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1380=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1380;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1380);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1381=((1.0)*cj5);
IkReal x1382=((((-1.0)*r21*x1381))+(((-1.0)*r20*sj5)));
j4eval[0]=x1382;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1381))+(((-1.0)*r10*sj0*x1381))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x1382);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1383=((1.0)*cj5);
CheckValue<IkReal> x1384=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1383))+(((-1.0)*r20*sj5)))),-1);
if(!x1384.valid){
continue;
}
CheckValue<IkReal> x1385 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1383))+(((-1.0)*r10*sj0*x1383))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1384.value)))+(x1385.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1386=IKsin(j4);
IkReal x1387=IKcos(j4);
IkReal x1388=(cj5*r10);
IkReal x1389=(cj2*sj1);
IkReal x1390=(r01*sj5);
IkReal x1391=(cj5*r00);
IkReal x1392=(cj5*r20);
IkReal x1393=(cj1*sj2);
IkReal x1394=((1.0)*x1387);
IkReal x1395=((1.0)*x1386);
IkReal x1396=(sj5*x1386);
evalcond[0]=((((-1.0)*x1392*x1395))+((r21*x1396))+(((-1.0)*r22*x1394)));
evalcond[1]=(sj0+(((-1.0)*r02*x1394))+(((-1.0)*x1391*x1395))+((x1386*x1390)));
evalcond[2]=((((-1.0)*r12*x1394))+(((-1.0)*x1388*x1395))+((r11*x1396))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r21*sj5*x1394))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1387*x1392))+(((-1.0)*r22*x1395)));
evalcond[4]=((((-1.0)*r02*x1395))+(((-1.0)*x1390*x1394))+((cj0*x1393))+((x1387*x1391))+((cj0*x1389)));
evalcond[5]=((((-1.0)*r12*x1395))+(((-1.0)*r11*sj5*x1394))+((sj0*x1393))+((x1387*x1388))+((sj0*x1389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1397=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1397.valid){
continue;
}
CheckValue<IkReal> x1398 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1398.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1397.value)))+(x1398.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1399=IKsin(j4);
IkReal x1400=IKcos(j4);
IkReal x1401=(cj5*r10);
IkReal x1402=(cj2*sj1);
IkReal x1403=(r01*sj5);
IkReal x1404=(cj5*r00);
IkReal x1405=(cj5*r20);
IkReal x1406=(cj1*sj2);
IkReal x1407=((1.0)*x1400);
IkReal x1408=((1.0)*x1399);
IkReal x1409=(sj5*x1399);
evalcond[0]=((((-1.0)*r22*x1407))+(((-1.0)*x1405*x1408))+((r21*x1409)));
evalcond[1]=(sj0+(((-1.0)*r02*x1407))+(((-1.0)*x1404*x1408))+((x1399*x1403)));
evalcond[2]=((((-1.0)*r12*x1407))+((r11*x1409))+(((-1.0)*x1401*x1408))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1408))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x1407))+((x1400*x1405)));
evalcond[4]=(((cj0*x1402))+((cj0*x1406))+(((-1.0)*r02*x1408))+(((-1.0)*x1403*x1407))+((x1400*x1404)));
evalcond[5]=((((-1.0)*r12*x1408))+(((-1.0)*r11*sj5*x1407))+((sj0*x1402))+((sj0*x1406))+((x1400*x1401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1410=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1410.valid){
continue;
}
CheckValue<IkReal> x1411 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1410.value)))+(x1411.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1412=IKsin(j4);
IkReal x1413=IKcos(j4);
IkReal x1414=(cj5*r10);
IkReal x1415=(cj2*sj1);
IkReal x1416=(r01*sj5);
IkReal x1417=(cj5*r00);
IkReal x1418=(cj5*r20);
IkReal x1419=(cj1*sj2);
IkReal x1420=((1.0)*x1413);
IkReal x1421=((1.0)*x1412);
IkReal x1422=(sj5*x1412);
evalcond[0]=(((r21*x1422))+(((-1.0)*x1418*x1421))+(((-1.0)*r22*x1420)));
evalcond[1]=(sj0+((x1412*x1416))+(((-1.0)*x1417*x1421))+(((-1.0)*r02*x1420)));
evalcond[2]=(((r11*x1422))+(((-1.0)*r12*x1420))+(((-1.0)*x1414*x1421))+(((-1.0)*cj0)));
evalcond[3]=(((x1413*x1418))+(((-1.0)*r21*sj5*x1420))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x1421)));
evalcond[4]=(((x1413*x1417))+(((-1.0)*x1416*x1420))+((cj0*x1419))+((cj0*x1415))+(((-1.0)*r02*x1421)));
evalcond[5]=((((-1.0)*r11*sj5*x1420))+((x1413*x1414))+(((-1.0)*r12*x1421))+((sj0*x1419))+((sj0*x1415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1423=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x1423;
j0eval[1]=IKsign(x1423);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1424=r21*r21;
IkReal x1425=cj5*cj5;
IkReal x1426=(sj1*sj2);
IkReal x1427=(r21*sj5);
IkReal x1428=(cj5*r20);
IkReal x1429=(cj1*cj2);
IkReal x1430=(((x1424*x1425))+(((2.0)*x1427*x1428))+(((-1.0)*x1425*(r20*r20)))+(((-1.0)*x1424))+(((-1.0)*(r22*r22))));
j4eval[0]=x1430;
j4eval[1]=((IKabs((((x1426*x1427))+(((-1.0)*x1427*x1429))+(((-1.0)*x1426*x1428))+((x1428*x1429)))))+(IKabs((((r22*x1426))+(((-1.0)*r22*x1429))))));
j4eval[2]=IKsign(x1430);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1431=(r00*sj5);
IkReal x1432=(cj5*r01);
IkReal x1433=(sj1*sj2);
IkReal x1434=(cj1*cj2);
IkReal x1435=((20000.0)*px);
IkReal x1436=((8500.0)*cj1);
IkReal x1437=((9738.0)*x1434);
CheckValue<IkReal> x1438=IKPowWithIntegerCheck(((((2183.0)*x1434))+(((-2183.0)*x1433))),-1);
if(!x1438.valid){
continue;
}
CheckValue<IkReal> x1439=IKPowWithIntegerCheck(((((-1.0)*x1433))+x1434),-1);
if(!x1439.valid){
continue;
}
if( IKabs(((x1438.value)*((((x1432*x1437))+((x1432*x1436))+(((-9738.0)*x1432*x1433))+(((-9738.0)*x1431*x1433))+((x1434*x1435))+(((-1.0)*x1433*x1435))+((x1431*x1437))+((x1431*x1436)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1439.value)*((x1432+x1431)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1438.value)*((((x1432*x1437))+((x1432*x1436))+(((-9738.0)*x1432*x1433))+(((-9738.0)*x1431*x1433))+((x1434*x1435))+(((-1.0)*x1433*x1435))+((x1431*x1437))+((x1431*x1436))))))+IKsqr(((x1439.value)*((x1432+x1431))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1438.value)*((((x1432*x1437))+((x1432*x1436))+(((-9738.0)*x1432*x1433))+(((-9738.0)*x1431*x1433))+((x1434*x1435))+(((-1.0)*x1433*x1435))+((x1431*x1437))+((x1431*x1436))))), ((x1439.value)*((x1432+x1431))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1440=IKcos(j0);
IkReal x1441=IKsin(j0);
IkReal x1442=(cj1*cj2);
IkReal x1443=(cj5*r11);
IkReal x1444=(sj1*sj2);
IkReal x1445=(cj5*r01);
IkReal x1446=((1.0)*sj5);
IkReal x1447=((0.09465)*sj5);
IkReal x1448=((0.425)*cj1);
IkReal x1449=((0.39225)*x1440);
IkReal x1450=(x1441*x1444);
evalcond[0]=((((-1.0)*r00*x1446))+((x1440*x1442))+(((-1.0)*x1445))+(((-1.0)*x1440*x1444)));
evalcond[1]=(((x1441*x1442))+(((-1.0)*x1450))+(((-1.0)*x1443))+(((-1.0)*r10*x1446)));
evalcond[2]=(((x1444*x1449))+(((-1.0)*r00*x1447))+(((-0.09465)*x1445))+(((-1.0)*px))+(((0.10915)*x1441))+(((-1.0)*x1442*x1449))+(((-1.0)*x1440*x1448)));
evalcond[3]=((((-0.09465)*x1443))+(((-1.0)*r10*x1447))+(((-1.0)*x1441*x1448))+(((0.39225)*x1450))+(((-1.0)*py))+(((-0.39225)*x1441*x1442))+(((-0.10915)*x1440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1451=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1451;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1451);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1452=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1452;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1452);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1453=((1.0)*cj5);
IkReal x1454=((((-1.0)*r21*x1453))+(((-1.0)*r20*sj5)));
j4eval[0]=x1454;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1453))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1453))))));
j4eval[2]=IKsign(x1454);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1455=((1.0)*cj5);
CheckValue<IkReal> x1456 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1455))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1455)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1456.valid){
continue;
}
CheckValue<IkReal> x1457=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1455))+(((-1.0)*r20*sj5)))),-1);
if(!x1457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1456.value)+(((1.5707963267949)*(x1457.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1458=IKsin(j4);
IkReal x1459=IKcos(j4);
IkReal x1460=(cj5*r00);
IkReal x1461=(cj5*r10);
IkReal x1462=(cj2*sj1);
IkReal x1463=(r21*sj5);
IkReal x1464=(cj5*r20);
IkReal x1465=(cj1*sj2);
IkReal x1466=((1.0)*x1459);
IkReal x1467=((1.0)*x1458);
IkReal x1468=(sj5*x1458);
IkReal x1469=(sj5*x1459);
evalcond[0]=((((-1.0)*r22*x1466))+(((-1.0)*x1464*x1467))+((x1458*x1463)));
evalcond[1]=(sj0+(((-1.0)*r02*x1466))+((r01*x1468))+(((-1.0)*x1460*x1467)));
evalcond[2]=(((r11*x1468))+(((-1.0)*x1461*x1467))+(((-1.0)*r12*x1466))+(((-1.0)*cj0)));
evalcond[3]=(((x1459*x1463))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x1464*x1466))+((r22*x1458)));
evalcond[4]=(((cj0*x1465))+((cj0*x1462))+((r01*x1469))+(((-1.0)*x1460*x1466))+((r02*x1458)));
evalcond[5]=(((r12*x1458))+((sj0*x1462))+((sj0*x1465))+((r11*x1469))+(((-1.0)*x1461*x1466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1470=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1470.valid){
continue;
}
CheckValue<IkReal> x1471 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1470.value)))+(x1471.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1472=IKsin(j4);
IkReal x1473=IKcos(j4);
IkReal x1474=(cj5*r00);
IkReal x1475=(cj5*r10);
IkReal x1476=(cj2*sj1);
IkReal x1477=(r21*sj5);
IkReal x1478=(cj5*r20);
IkReal x1479=(cj1*sj2);
IkReal x1480=((1.0)*x1473);
IkReal x1481=((1.0)*x1472);
IkReal x1482=(sj5*x1472);
IkReal x1483=(sj5*x1473);
evalcond[0]=(((x1472*x1477))+(((-1.0)*r22*x1480))+(((-1.0)*x1478*x1481)));
evalcond[1]=(sj0+((r01*x1482))+(((-1.0)*r02*x1480))+(((-1.0)*x1474*x1481)));
evalcond[2]=((((-1.0)*r12*x1480))+((r11*x1482))+(((-1.0)*x1475*x1481))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x1472))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1473*x1477))+(((-1.0)*x1478*x1480)));
evalcond[4]=(((r01*x1483))+((r02*x1472))+(((-1.0)*x1474*x1480))+((cj0*x1479))+((cj0*x1476)));
evalcond[5]=(((r12*x1472))+((sj0*x1476))+((sj0*x1479))+((r11*x1483))+(((-1.0)*x1475*x1480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1484=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1484.valid){
continue;
}
CheckValue<IkReal> x1485 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1485.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1484.value)))+(x1485.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1486=IKsin(j4);
IkReal x1487=IKcos(j4);
IkReal x1488=(cj5*r00);
IkReal x1489=(cj5*r10);
IkReal x1490=(cj2*sj1);
IkReal x1491=(r21*sj5);
IkReal x1492=(cj5*r20);
IkReal x1493=(cj1*sj2);
IkReal x1494=((1.0)*x1487);
IkReal x1495=((1.0)*x1486);
IkReal x1496=(sj5*x1486);
IkReal x1497=(sj5*x1487);
evalcond[0]=((((-1.0)*x1492*x1495))+((x1486*x1491))+(((-1.0)*r22*x1494)));
evalcond[1]=(sj0+((r01*x1496))+(((-1.0)*r02*x1494))+(((-1.0)*x1488*x1495)));
evalcond[2]=((((-1.0)*r12*x1494))+((r11*x1496))+(((-1.0)*cj0))+(((-1.0)*x1489*x1495)));
evalcond[3]=(((x1487*x1491))+(((-1.0)*x1492*x1494))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1486)));
evalcond[4]=(((r01*x1497))+((cj0*x1490))+((cj0*x1493))+(((-1.0)*x1488*x1494))+((r02*x1486)));
evalcond[5]=(((sj0*x1490))+((sj0*x1493))+((r12*x1486))+((r11*x1497))+(((-1.0)*x1489*x1494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1498=r21*r21;
IkReal x1499=cj5*cj5;
IkReal x1500=(sj1*sj2);
IkReal x1501=(r21*sj5);
IkReal x1502=(cj1*cj2);
IkReal x1503=(cj5*r20);
CheckValue<IkReal> x1504=IKPowWithIntegerCheck(IKsign((((x1498*x1499))+(((2.0)*x1501*x1503))+(((-1.0)*x1499*(r20*r20)))+(((-1.0)*x1498))+(((-1.0)*(r22*r22))))),-1);
if(!x1504.valid){
continue;
}
CheckValue<IkReal> x1505 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1502))+((r22*x1500)))),IkReal(((((-1.0)*x1500*x1503))+((x1500*x1501))+((x1502*x1503))+(((-1.0)*x1501*x1502)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1504.value)))+(x1505.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1506=IKsin(j4);
IkReal x1507=IKcos(j4);
IkReal x1508=(r21*sj5);
IkReal x1509=(cj5*r20);
IkReal x1510=((1.0)*x1507);
evalcond[0]=((((-1.0)*r22*x1510))+((x1506*x1508))+(((-1.0)*x1506*x1509)));
evalcond[1]=(((x1507*x1508))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1506))+(((-1.0)*x1509*x1510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1511=(cj5*sj4);
IkReal x1512=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x1512))+((r00*x1511))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1512))+(((-1.0)*r10*x1511))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1512))+((r00*x1511))+((cj4*r02))))+IKsqr((((r11*x1512))+(((-1.0)*r10*x1511))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x1512))+((r00*x1511))+((cj4*r02))), (((r11*x1512))+(((-1.0)*r10*x1511))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1513=IKcos(j0);
IkReal x1514=IKsin(j0);
IkReal x1515=(r11*sj5);
IkReal x1516=(cj1*cj2);
IkReal x1517=(cj5*r11);
IkReal x1518=((1.0)*r00);
IkReal x1519=(cj4*cj5);
IkReal x1520=(cj5*r01);
IkReal x1521=((1.0)*r10);
IkReal x1522=((0.09465)*sj5);
IkReal x1523=(cj5*sj4);
IkReal x1524=((1.0)*cj4);
IkReal x1525=(r01*sj5);
IkReal x1526=(sj1*x1513);
IkReal x1527=(cj1*x1514);
IkReal x1528=(cj1*x1513);
IkReal x1529=(sj1*sj2*x1514);
evalcond[0]=((((-1.0)*x1518*x1523))+(((-1.0)*r02*x1524))+x1514+((sj4*x1525)));
evalcond[1]=((((-1.0)*r12*x1524))+(((-1.0)*x1513))+((sj4*x1515))+(((-1.0)*x1521*x1523)));
evalcond[2]=(((x1513*x1516))+(((-1.0)*sj5*x1518))+(((-1.0)*sj2*x1526))+(((-1.0)*x1520)));
evalcond[3]=((((-1.0)*sj5*x1521))+((x1514*x1516))+(((-1.0)*x1517))+(((-1.0)*x1529)));
evalcond[4]=(((sj2*x1528))+(((-1.0)*x1518*x1519))+((cj2*x1526))+((r02*sj4))+((cj4*x1525)));
evalcond[5]=(((cj2*sj1*x1514))+((sj2*x1527))+(((-1.0)*x1519*x1521))+((cj4*x1515))+((r12*sj4)));
evalcond[6]=((((0.10915)*x1514))+(((-1.0)*r00*x1522))+(((-0.39225)*x1513*x1516))+(((-1.0)*px))+(((0.39225)*sj2*x1526))+(((-0.09465)*x1520))+(((-0.425)*x1528)));
evalcond[7]=((((-1.0)*py))+(((-0.39225)*x1514*x1516))+(((-0.10915)*x1513))+(((-1.0)*r10*x1522))+(((-0.425)*x1527))+(((-0.09465)*x1517))+(((0.39225)*x1529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1530=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x1530.valid){
continue;
}
CheckValue<IkReal> x1531 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1531.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1530.value)))+(x1531.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1532=IKcos(j0);
IkReal x1533=IKsin(j0);
IkReal x1534=(cj1*cj2);
IkReal x1535=(cj5*r11);
IkReal x1536=(sj1*sj2);
IkReal x1537=(cj5*r01);
IkReal x1538=((1.0)*sj5);
IkReal x1539=((0.09465)*sj5);
IkReal x1540=((0.425)*cj1);
IkReal x1541=((0.39225)*x1532);
IkReal x1542=(x1533*x1536);
evalcond[0]=((((-1.0)*x1537))+(((-1.0)*r00*x1538))+(((-1.0)*x1532*x1536))+((x1532*x1534)));
evalcond[1]=((((-1.0)*x1542))+(((-1.0)*x1535))+((x1533*x1534))+(((-1.0)*r10*x1538)));
evalcond[2]=((((-1.0)*r00*x1539))+((x1536*x1541))+(((-1.0)*x1532*x1540))+(((-1.0)*px))+(((-1.0)*x1534*x1541))+(((-0.09465)*x1537))+(((0.10915)*x1533)));
evalcond[3]=((((0.39225)*x1542))+(((-0.39225)*x1533*x1534))+(((-1.0)*py))+(((-1.0)*x1533*x1540))+(((-0.10915)*x1532))+(((-1.0)*r10*x1539))+(((-0.09465)*x1535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1543=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1543;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1543);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1544=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1544;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1544);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1545=((1.0)*cj5);
IkReal x1546=((((-1.0)*r21*x1545))+(((-1.0)*r20*sj5)));
j4eval[0]=x1546;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1545))+(((-1.0)*r10*sj0*x1545))+((cj0*r01*sj5)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x1546);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1547=((1.0)*cj5);
CheckValue<IkReal> x1548=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1547))+(((-1.0)*r20*sj5)))),-1);
if(!x1548.valid){
continue;
}
CheckValue<IkReal> x1549 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1547))+(((-1.0)*r10*sj0*x1547))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1548.value)))+(x1549.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1550=IKsin(j4);
IkReal x1551=IKcos(j4);
IkReal x1552=(cj5*r00);
IkReal x1553=(cj5*r10);
IkReal x1554=(cj2*sj1);
IkReal x1555=(r21*sj5);
IkReal x1556=(cj5*r20);
IkReal x1557=(cj1*sj2);
IkReal x1558=((1.0)*x1551);
IkReal x1559=((1.0)*x1550);
IkReal x1560=(sj5*x1550);
IkReal x1561=(sj5*x1551);
evalcond[0]=((((-1.0)*r22*x1558))+((x1550*x1555))+(((-1.0)*x1556*x1559)));
evalcond[1]=(sj0+(((-1.0)*x1552*x1559))+(((-1.0)*r02*x1558))+((r01*x1560)));
evalcond[2]=((((-1.0)*x1553*x1559))+((r11*x1560))+(((-1.0)*r12*x1558))+(((-1.0)*cj0)));
evalcond[3]=(((x1551*x1555))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1550))+(((-1.0)*x1556*x1558)));
evalcond[4]=((((-1.0)*x1552*x1558))+((r02*x1550))+((cj0*x1557))+((cj0*x1554))+((r01*x1561)));
evalcond[5]=((((-1.0)*x1553*x1558))+((r11*x1561))+((r12*x1550))+((sj0*x1557))+((sj0*x1554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1562=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1562.valid){
continue;
}
CheckValue<IkReal> x1563 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1562.value)))+(x1563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1564=IKsin(j4);
IkReal x1565=IKcos(j4);
IkReal x1566=(cj5*r00);
IkReal x1567=(cj5*r10);
IkReal x1568=(cj2*sj1);
IkReal x1569=(r21*sj5);
IkReal x1570=(cj5*r20);
IkReal x1571=(cj1*sj2);
IkReal x1572=((1.0)*x1565);
IkReal x1573=((1.0)*x1564);
IkReal x1574=(sj5*x1564);
IkReal x1575=(sj5*x1565);
evalcond[0]=((((-1.0)*x1570*x1573))+(((-1.0)*r22*x1572))+((x1564*x1569)));
evalcond[1]=((((-1.0)*r02*x1572))+sj0+(((-1.0)*x1566*x1573))+((r01*x1574)));
evalcond[2]=((((-1.0)*x1567*x1573))+((r11*x1574))+(((-1.0)*r12*x1572))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x1570*x1572))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1564))+((x1565*x1569)));
evalcond[4]=((((-1.0)*x1566*x1572))+((cj0*x1571))+((cj0*x1568))+((r02*x1564))+((r01*x1575)));
evalcond[5]=((((-1.0)*x1567*x1572))+((r12*x1564))+((sj0*x1571))+((sj0*x1568))+((r11*x1575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1576=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1576.valid){
continue;
}
CheckValue<IkReal> x1577 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1576.value)))+(x1577.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1578=IKsin(j4);
IkReal x1579=IKcos(j4);
IkReal x1580=(cj5*r00);
IkReal x1581=(cj5*r10);
IkReal x1582=(cj2*sj1);
IkReal x1583=(r21*sj5);
IkReal x1584=(cj5*r20);
IkReal x1585=(cj1*sj2);
IkReal x1586=((1.0)*x1579);
IkReal x1587=((1.0)*x1578);
IkReal x1588=(sj5*x1578);
IkReal x1589=(sj5*x1579);
evalcond[0]=((((-1.0)*x1584*x1587))+(((-1.0)*r22*x1586))+((x1578*x1583)));
evalcond[1]=(((r01*x1588))+(((-1.0)*x1580*x1587))+sj0+(((-1.0)*r02*x1586)));
evalcond[2]=(((r11*x1588))+(((-1.0)*x1581*x1587))+(((-1.0)*r12*x1586))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x1584*x1586))+((r22*x1578))+((x1579*x1583)));
evalcond[4]=(((r01*x1589))+(((-1.0)*x1580*x1586))+((r02*x1578))+((cj0*x1582))+((cj0*x1585)));
evalcond[5]=(((r12*x1578))+((r11*x1589))+((sj0*x1585))+((sj0*x1582))+(((-1.0)*x1581*x1586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1590=((1.0)*cj5);
IkReal x1591=((1.0)*sj5);
IkReal x1592=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x1592;
j0eval[1]=((IKabs(((((-1.0)*r10*x1591))+(((-1.0)*r11*x1590)))))+(IKabs(((((-1.0)*r00*x1591))+(((-1.0)*r01*x1590))))));
j0eval[2]=IKsign(x1592);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1593=r21*r21;
IkReal x1594=cj5*cj5;
IkReal x1595=(cj2*sj1);
IkReal x1596=(cj1*sj2);
IkReal x1597=(r21*sj5);
IkReal x1598=((1.0)*cj5*r20);
IkReal x1599=((((2.0)*cj5*r20*x1597))+((x1593*x1594))+(((-1.0)*(r22*r22)))+(((-1.0)*x1593))+(((-1.0)*x1594*(r20*r20))));
j4eval[0]=x1599;
j4eval[1]=((IKabs((((x1596*x1597))+(((-1.0)*x1595*x1598))+((x1595*x1597))+(((-1.0)*x1596*x1598)))))+(IKabs((((r22*x1595))+((r22*x1596))))));
j4eval[2]=IKsign(x1599);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1600=cj1*cj1;
IkReal x1601=(cj2*sj2);
IkReal x1602=(cj1*sj1);
j0eval[0]=((((-2.0)*x1600*x1601))+x1601+x1602+(((-2.0)*x1602*(cj2*cj2)))+(((-1.08349267049076)*cj2*x1602))+(((-1.08349267049076)*sj2*x1600)));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1603=cj1*cj1;
IkReal x1604=(cj1*sj1);
IkReal x1605=(r00*sj5);
IkReal x1606=(cj1*sj2);
IkReal x1607=(r10*sj5);
IkReal x1608=(cj5*r11);
IkReal x1609=((20000.0)*py);
IkReal x1610=(cj2*sj1);
IkReal x1611=(cj5*r01);
IkReal x1612=((1893.0)*x1610);
IkReal x1613=(sj2*x1603);
CheckValue<IkReal> x1614=IKPowWithIntegerCheck(((((-8500.0)*x1613))+(((-15690.0)*x1604*(cj2*cj2)))+(((-15690.0)*cj2*x1613))+(((7845.0)*x1604))+(((7845.0)*cj2*sj2))+(((-8500.0)*cj2*x1604))),-1);
if(!x1614.valid){
continue;
}
CheckValue<IkReal> x1615=IKPowWithIntegerCheck((x1610+x1606),-1);
if(!x1615.valid){
continue;
}
if( IKabs(((x1614.value)*(((((1893.0)*x1606*x1607))+(((1893.0)*x1606*x1608))+((x1609*x1610))+((x1608*x1612))+(((-2183.0)*x1605))+(((-2183.0)*x1611))+((x1607*x1612))+((x1606*x1609)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1615.value)*(((((-1.0)*x1611))+(((-1.0)*x1605)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1614.value)*(((((1893.0)*x1606*x1607))+(((1893.0)*x1606*x1608))+((x1609*x1610))+((x1608*x1612))+(((-2183.0)*x1605))+(((-2183.0)*x1611))+((x1607*x1612))+((x1606*x1609))))))+IKsqr(((x1615.value)*(((((-1.0)*x1611))+(((-1.0)*x1605))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1614.value)*(((((1893.0)*x1606*x1607))+(((1893.0)*x1606*x1608))+((x1609*x1610))+((x1608*x1612))+(((-2183.0)*x1605))+(((-2183.0)*x1611))+((x1607*x1612))+((x1606*x1609))))), ((x1615.value)*(((((-1.0)*x1611))+(((-1.0)*x1605))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1616=IKcos(j0);
IkReal x1617=IKsin(j0);
IkReal x1618=(cj5*r01);
IkReal x1619=(cj2*sj1);
IkReal x1620=(r00*sj5);
IkReal x1621=(cj5*r11);
IkReal x1622=((0.39225)*cj2);
IkReal x1623=(r10*sj5);
IkReal x1624=((0.39225)*sj1*sj2);
IkReal x1625=(cj1*x1616);
IkReal x1626=(cj1*x1617);
evalcond[0]=(((sj2*x1625))+x1620+x1618+((x1616*x1619)));
evalcond[1]=(((sj2*x1626))+x1623+x1621+((x1617*x1619)));
evalcond[2]=((((0.10915)*x1617))+(((-1.0)*px))+(((-0.09465)*x1620))+(((-1.0)*x1622*x1625))+(((-0.09465)*x1618))+((x1616*x1624))+(((-0.425)*x1625)));
evalcond[3]=(((x1617*x1624))+(((-0.10915)*x1616))+(((-1.0)*py))+(((-0.09465)*x1623))+(((-0.09465)*x1621))+(((-1.0)*x1622*x1626))+(((-0.425)*x1626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1627=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1627;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1627);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1628=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1628;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1628);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1629=((1.0)*cj5);
IkReal x1630=((((-1.0)*r21*x1629))+(((-1.0)*r20*sj5)));
j4eval[0]=x1630;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1629))+(((-1.0)*r10*sj0*x1629))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x1630);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1631=((1.0)*cj5);
CheckValue<IkReal> x1632 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1631))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1631)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1632.valid){
continue;
}
CheckValue<IkReal> x1633=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1631))+(((-1.0)*r20*sj5)))),-1);
if(!x1633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1632.value)+(((1.5707963267949)*(x1633.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1634=IKsin(j4);
IkReal x1635=IKcos(j4);
IkReal x1636=(cj5*r00);
IkReal x1637=(cj1*cj2);
IkReal x1638=(cj5*r10);
IkReal x1639=(r21*sj5);
IkReal x1640=(cj5*r20);
IkReal x1641=((1.0)*x1635);
IkReal x1642=((1.0)*x1634);
IkReal x1643=(sj5*x1634);
IkReal x1644=(sj5*x1635);
IkReal x1645=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x1641))+(((-1.0)*x1640*x1642))+((x1634*x1639)));
evalcond[1]=(sj0+((r01*x1643))+(((-1.0)*x1636*x1642))+(((-1.0)*r02*x1641)));
evalcond[2]=(((r11*x1643))+(((-1.0)*r12*x1641))+(((-1.0)*x1638*x1642))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x1640*x1641))+((x1635*x1639))+((r22*x1634)));
evalcond[4]=(((r02*x1634))+((r01*x1644))+((cj0*x1637))+(((-1.0)*x1636*x1641))+(((-1.0)*cj0*x1645)));
evalcond[5]=(((r11*x1644))+((sj0*x1637))+((r12*x1634))+(((-1.0)*x1638*x1641))+(((-1.0)*sj0*x1645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1646=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1646.valid){
continue;
}
CheckValue<IkReal> x1647 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1646.value)))+(x1647.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1648=IKsin(j4);
IkReal x1649=IKcos(j4);
IkReal x1650=(cj5*r00);
IkReal x1651=(cj1*cj2);
IkReal x1652=(cj5*r10);
IkReal x1653=(r21*sj5);
IkReal x1654=(cj5*r20);
IkReal x1655=((1.0)*x1649);
IkReal x1656=((1.0)*x1648);
IkReal x1657=(sj5*x1648);
IkReal x1658=(sj5*x1649);
IkReal x1659=((1.0)*sj1*sj2);
evalcond[0]=(((x1648*x1653))+(((-1.0)*x1654*x1656))+(((-1.0)*r22*x1655)));
evalcond[1]=(sj0+(((-1.0)*x1650*x1656))+((r01*x1657))+(((-1.0)*r02*x1655)));
evalcond[2]=((((-1.0)*x1652*x1656))+((r11*x1657))+(((-1.0)*r12*x1655))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x1654*x1655))+((cj1*sj2))+((x1649*x1653))+((r22*x1648)));
evalcond[4]=(((r02*x1648))+(((-1.0)*x1650*x1655))+((r01*x1658))+((cj0*x1651))+(((-1.0)*cj0*x1659)));
evalcond[5]=(((sj0*x1651))+(((-1.0)*x1652*x1655))+((r11*x1658))+((r12*x1648))+(((-1.0)*sj0*x1659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1660=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1660.valid){
continue;
}
CheckValue<IkReal> x1661 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1661.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1660.value)))+(x1661.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1662=IKsin(j4);
IkReal x1663=IKcos(j4);
IkReal x1664=(cj5*r00);
IkReal x1665=(cj1*cj2);
IkReal x1666=(cj5*r10);
IkReal x1667=(r21*sj5);
IkReal x1668=(cj5*r20);
IkReal x1669=((1.0)*x1663);
IkReal x1670=((1.0)*x1662);
IkReal x1671=(sj5*x1662);
IkReal x1672=(sj5*x1663);
IkReal x1673=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x1668*x1670))+(((-1.0)*r22*x1669))+((x1662*x1667)));
evalcond[1]=(sj0+(((-1.0)*x1664*x1670))+(((-1.0)*r02*x1669))+((r01*x1671)));
evalcond[2]=((((-1.0)*r12*x1669))+(((-1.0)*x1666*x1670))+((r11*x1671))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x1668*x1669))+((cj1*sj2))+((x1663*x1667))+((r22*x1662)));
evalcond[4]=((((-1.0)*cj0*x1673))+((r02*x1662))+((cj0*x1665))+((r01*x1672))+(((-1.0)*x1664*x1669)));
evalcond[5]=(((sj0*x1665))+((r12*x1662))+(((-1.0)*sj0*x1673))+((r11*x1672))+(((-1.0)*x1666*x1669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1674=r21*r21;
IkReal x1675=cj5*cj5;
IkReal x1676=(cj2*sj1);
IkReal x1677=(cj1*sj2);
IkReal x1678=(r21*sj5);
IkReal x1679=((1.0)*cj5*r20);
CheckValue<IkReal> x1680=IKPowWithIntegerCheck(IKsign((((x1674*x1675))+(((2.0)*cj5*r20*x1678))+(((-1.0)*(r22*r22)))+(((-1.0)*x1674))+(((-1.0)*x1675*(r20*r20))))),-1);
if(!x1680.valid){
continue;
}
CheckValue<IkReal> x1681 = IKatan2WithCheck(IkReal((((r22*x1676))+((r22*x1677)))),IkReal((((x1676*x1678))+(((-1.0)*x1677*x1679))+(((-1.0)*x1676*x1679))+((x1677*x1678)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1680.value)))+(x1681.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1682=IKsin(j4);
IkReal x1683=IKcos(j4);
IkReal x1684=(r21*sj5);
IkReal x1685=(cj5*r20);
IkReal x1686=((1.0)*x1683);
evalcond[0]=((((-1.0)*r22*x1686))+(((-1.0)*x1682*x1685))+((x1682*x1684)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*x1685*x1686))+((r22*x1682))+((cj1*sj2))+((x1683*x1684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1687=(cj5*sj4);
IkReal x1688=(sj4*sj5);
if( IKabs((((r00*x1687))+(((-1.0)*r01*x1688))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1688))+(((-1.0)*r10*x1687))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1687))+(((-1.0)*r01*x1688))+((cj4*r02))))+IKsqr((((r11*x1688))+(((-1.0)*r10*x1687))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1687))+(((-1.0)*r01*x1688))+((cj4*r02))), (((r11*x1688))+(((-1.0)*r10*x1687))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1689=IKcos(j0);
IkReal x1690=IKsin(j0);
IkReal x1691=(cj5*r01);
IkReal x1692=(r11*sj5);
IkReal x1693=(cj1*cj2);
IkReal x1694=(r00*sj5);
IkReal x1695=(cj5*r11);
IkReal x1696=((1.0)*cj4);
IkReal x1697=(r01*sj5);
IkReal x1698=(r10*sj5);
IkReal x1699=(sj1*x1689);
IkReal x1700=(cj1*x1690);
IkReal x1701=(cj5*x1696);
IkReal x1702=(cj1*x1689);
IkReal x1703=((1.0)*cj5*sj4);
IkReal x1704=(sj1*sj2*x1690);
evalcond[0]=(x1690+(((-1.0)*r02*x1696))+((sj4*x1697))+(((-1.0)*r00*x1703)));
evalcond[1]=((((-1.0)*r12*x1696))+(((-1.0)*x1689))+(((-1.0)*r10*x1703))+((sj4*x1692)));
evalcond[2]=(x1694+x1691+((sj2*x1702))+((cj2*x1699)));
evalcond[3]=(x1695+x1698+((cj2*sj1*x1690))+((sj2*x1700)));
evalcond[4]=(((cj4*x1697))+((r02*sj4))+((x1689*x1693))+(((-1.0)*r00*x1701))+(((-1.0)*sj2*x1699)));
evalcond[5]=(((x1690*x1693))+(((-1.0)*x1704))+((cj4*x1692))+(((-1.0)*r10*x1701))+((r12*sj4)));
evalcond[6]=((((-0.39225)*x1689*x1693))+(((-0.425)*x1702))+(((0.39225)*sj2*x1699))+(((0.10915)*x1690))+(((-1.0)*px))+(((-0.09465)*x1694))+(((-0.09465)*x1691)));
evalcond[7]=((((-0.425)*x1700))+(((0.39225)*x1704))+(((-1.0)*py))+(((-0.09465)*x1695))+(((-0.09465)*x1698))+(((-0.10915)*x1689))+(((-0.39225)*x1690*x1693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1705=((1.0)*cj5);
IkReal x1706=((1.0)*sj5);
CheckValue<IkReal> x1707=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x1707.valid){
continue;
}
CheckValue<IkReal> x1708 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1706))+(((-1.0)*r11*x1705)))),IkReal(((((-1.0)*r01*x1705))+(((-1.0)*r00*x1706)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1708.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1707.value)))+(x1708.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1709=IKcos(j0);
IkReal x1710=IKsin(j0);
IkReal x1711=(cj5*r01);
IkReal x1712=(cj2*sj1);
IkReal x1713=(r00*sj5);
IkReal x1714=(cj5*r11);
IkReal x1715=((0.39225)*cj2);
IkReal x1716=(r10*sj5);
IkReal x1717=((0.39225)*sj1*sj2);
IkReal x1718=(cj1*x1709);
IkReal x1719=(cj1*x1710);
evalcond[0]=(x1713+x1711+((x1709*x1712))+((sj2*x1718)));
evalcond[1]=(((x1710*x1712))+x1716+x1714+((sj2*x1719)));
evalcond[2]=((((-0.425)*x1718))+((x1709*x1717))+(((-0.09465)*x1713))+(((-0.09465)*x1711))+(((-1.0)*px))+(((-1.0)*x1715*x1718))+(((0.10915)*x1710)));
evalcond[3]=(((x1710*x1717))+(((-0.425)*x1719))+(((-0.10915)*x1709))+(((-0.09465)*x1716))+(((-0.09465)*x1714))+(((-1.0)*py))+(((-1.0)*x1715*x1719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1720=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1720;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1720);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1721=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1721;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1721);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1722=((1.0)*cj5);
IkReal x1723=((((-1.0)*r21*x1722))+(((-1.0)*r20*sj5)));
j4eval[0]=x1723;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs(((((-1.0)*r10*sj0*x1722))+((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1722))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x1723);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1724=((1.0)*cj5);
CheckValue<IkReal> x1725 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x1724))+((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1724))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1725.valid){
continue;
}
CheckValue<IkReal> x1726=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1724))+(((-1.0)*r20*sj5)))),-1);
if(!x1726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1725.value)+(((1.5707963267949)*(x1726.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1727=IKsin(j4);
IkReal x1728=IKcos(j4);
IkReal x1729=(cj5*r00);
IkReal x1730=(cj1*cj2);
IkReal x1731=(cj5*r10);
IkReal x1732=(r21*sj5);
IkReal x1733=(cj5*r20);
IkReal x1734=((1.0)*x1728);
IkReal x1735=((1.0)*x1727);
IkReal x1736=(sj5*x1727);
IkReal x1737=(sj5*x1728);
IkReal x1738=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x1733*x1735))+((x1727*x1732))+(((-1.0)*r22*x1734)));
evalcond[1]=(((r01*x1736))+sj0+(((-1.0)*x1729*x1735))+(((-1.0)*r02*x1734)));
evalcond[2]=((((-1.0)*x1731*x1735))+(((-1.0)*r12*x1734))+((r11*x1736))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x1733*x1734))+((x1728*x1732))+((cj2*sj1))+((cj1*sj2))+((r22*x1727)));
evalcond[4]=(((cj0*x1730))+((r01*x1737))+(((-1.0)*cj0*x1738))+(((-1.0)*x1729*x1734))+((r02*x1727)));
evalcond[5]=((((-1.0)*x1731*x1734))+(((-1.0)*sj0*x1738))+((sj0*x1730))+((r11*x1737))+((r12*x1727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1739=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1739.valid){
continue;
}
CheckValue<IkReal> x1740 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1739.value)))+(x1740.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1741=IKsin(j4);
IkReal x1742=IKcos(j4);
IkReal x1743=(cj5*r00);
IkReal x1744=(cj1*cj2);
IkReal x1745=(cj5*r10);
IkReal x1746=(r21*sj5);
IkReal x1747=(cj5*r20);
IkReal x1748=((1.0)*x1742);
IkReal x1749=((1.0)*x1741);
IkReal x1750=(sj5*x1741);
IkReal x1751=(sj5*x1742);
IkReal x1752=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x1748))+(((-1.0)*x1747*x1749))+((x1741*x1746)));
evalcond[1]=(sj0+((r01*x1750))+(((-1.0)*x1743*x1749))+(((-1.0)*r02*x1748)));
evalcond[2]=((((-1.0)*r12*x1748))+(((-1.0)*x1745*x1749))+((r11*x1750))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r22*x1741))+((cj1*sj2))+(((-1.0)*x1747*x1748))+((x1742*x1746)));
evalcond[4]=((((-1.0)*cj0*x1752))+((r02*x1741))+((r01*x1751))+((cj0*x1744))+(((-1.0)*x1743*x1748)));
evalcond[5]=(((r12*x1741))+(((-1.0)*sj0*x1752))+(((-1.0)*x1745*x1748))+((sj0*x1744))+((r11*x1751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1753=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1753.valid){
continue;
}
CheckValue<IkReal> x1754 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1753.value)))+(x1754.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1755=IKsin(j4);
IkReal x1756=IKcos(j4);
IkReal x1757=(cj5*r00);
IkReal x1758=(cj1*cj2);
IkReal x1759=(cj5*r10);
IkReal x1760=(r21*sj5);
IkReal x1761=(cj5*r20);
IkReal x1762=((1.0)*x1756);
IkReal x1763=((1.0)*x1755);
IkReal x1764=(sj5*x1755);
IkReal x1765=(sj5*x1756);
IkReal x1766=((1.0)*sj1*sj2);
evalcond[0]=(((x1755*x1760))+(((-1.0)*x1761*x1763))+(((-1.0)*r22*x1762)));
evalcond[1]=(sj0+(((-1.0)*r02*x1762))+((r01*x1764))+(((-1.0)*x1757*x1763)));
evalcond[2]=((((-1.0)*x1759*x1763))+((r11*x1764))+(((-1.0)*r12*x1762))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x1755))+((x1756*x1760))+(((-1.0)*x1761*x1762)));
evalcond[4]=(((r02*x1755))+((r01*x1765))+(((-1.0)*cj0*x1766))+(((-1.0)*x1757*x1762))+((cj0*x1758)));
evalcond[5]=((((-1.0)*x1759*x1762))+((r11*x1765))+((sj0*x1758))+((r12*x1755))+(((-1.0)*sj0*x1766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1767=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x1767;
j0eval[1]=IKsign(x1767);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1768=cj5*cj5;
IkReal x1769=r21*r21;
IkReal x1770=(cj2*sj1);
IkReal x1771=(cj1*sj2);
IkReal x1772=(r21*sj5);
IkReal x1773=((1.0)*cj5*r20);
IkReal x1774=(x1769+(r22*r22)+(((-1.0)*x1768*x1769))+(((-2.0)*cj5*r20*x1772))+((x1768*(r20*r20))));
j4eval[0]=x1774;
j4eval[1]=IKsign(x1774);
j4eval[2]=((IKabs((((x1771*x1772))+((x1770*x1772))+(((-1.0)*x1771*x1773))+(((-1.0)*x1770*x1773)))))+(IKabs((((r22*x1771))+((r22*x1770))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1775=cj1*cj1;
IkReal x1776=(cj2*sj2);
IkReal x1777=(cj1*sj1);
j0eval[0]=(x1777+x1776+(((-1.08349267049076)*sj2*x1775))+(((-2.0)*x1775*x1776))+(((-2.0)*x1777*(cj2*cj2)))+(((-1.08349267049076)*cj2*x1777)));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1778=cj1*cj1;
IkReal x1779=(cj1*sj1);
IkReal x1780=(r00*sj5);
IkReal x1781=(cj1*sj2);
IkReal x1782=(r10*sj5);
IkReal x1783=(cj5*r11);
IkReal x1784=(cj5*r01);
IkReal x1785=((20000.0)*py);
IkReal x1786=(cj2*sj1);
IkReal x1787=((1893.0)*x1786);
IkReal x1788=(sj2*x1778);
CheckValue<IkReal> x1789=IKPowWithIntegerCheck(((((-8500.0)*cj2*x1779))+(((7845.0)*x1779))+(((-8500.0)*x1788))+(((-15690.0)*x1779*(cj2*cj2)))+(((7845.0)*cj2*sj2))+(((-15690.0)*cj2*x1788))),-1);
if(!x1789.valid){
continue;
}
CheckValue<IkReal> x1790=IKPowWithIntegerCheck((x1781+x1786),-1);
if(!x1790.valid){
continue;
}
if( IKabs(((x1789.value)*((((x1782*x1787))+((x1783*x1787))+(((2183.0)*x1784))+(((2183.0)*x1780))+(((1893.0)*x1781*x1783))+(((1893.0)*x1781*x1782))+((x1785*x1786))+((x1781*x1785)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1790.value)*((x1780+x1784)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1789.value)*((((x1782*x1787))+((x1783*x1787))+(((2183.0)*x1784))+(((2183.0)*x1780))+(((1893.0)*x1781*x1783))+(((1893.0)*x1781*x1782))+((x1785*x1786))+((x1781*x1785))))))+IKsqr(((x1790.value)*((x1780+x1784))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1789.value)*((((x1782*x1787))+((x1783*x1787))+(((2183.0)*x1784))+(((2183.0)*x1780))+(((1893.0)*x1781*x1783))+(((1893.0)*x1781*x1782))+((x1785*x1786))+((x1781*x1785))))), ((x1790.value)*((x1780+x1784))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1791=IKcos(j0);
IkReal x1792=IKsin(j0);
IkReal x1793=(cj5*r11);
IkReal x1794=(cj5*r01);
IkReal x1795=(cj2*sj1);
IkReal x1796=((1.0)*sj5);
IkReal x1797=((0.09465)*sj5);
IkReal x1798=((0.39225)*cj2);
IkReal x1799=((0.39225)*sj1*sj2);
IkReal x1800=(cj1*x1791);
IkReal x1801=(cj1*x1792);
evalcond[0]=((((-1.0)*r00*x1796))+((sj2*x1800))+(((-1.0)*x1794))+((x1791*x1795)));
evalcond[1]=((((-1.0)*r10*x1796))+((sj2*x1801))+((x1792*x1795))+(((-1.0)*x1793)));
evalcond[2]=((((-1.0)*r00*x1797))+(((-1.0)*x1798*x1800))+(((0.10915)*x1792))+(((-0.425)*x1800))+(((-1.0)*px))+(((-0.09465)*x1794))+((x1791*x1799)));
evalcond[3]=((((-1.0)*r10*x1797))+(((-1.0)*x1798*x1801))+(((-0.425)*x1801))+(((-1.0)*py))+((x1792*x1799))+(((-0.09465)*x1793))+(((-0.10915)*x1791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1802=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1802;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1802);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1803=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1803;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1803);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1804=((1.0)*cj5);
IkReal x1805=((((-1.0)*r21*x1804))+(((-1.0)*r20*sj5)));
j4eval[0]=x1805;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1804))+(((-1.0)*r10*sj0*x1804))))));
j4eval[2]=IKsign(x1805);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1806=((1.0)*cj5);
CheckValue<IkReal> x1807=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1806))+(((-1.0)*r20*sj5)))),-1);
if(!x1807.valid){
continue;
}
CheckValue<IkReal> x1808 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1806))+(((-1.0)*r10*sj0*x1806)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1807.value)))+(x1808.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1809=IKsin(j4);
IkReal x1810=IKcos(j4);
IkReal x1811=(cj1*cj2);
IkReal x1812=(cj5*r10);
IkReal x1813=(r01*sj5);
IkReal x1814=(cj5*r00);
IkReal x1815=(cj5*r20);
IkReal x1816=((1.0)*cj0);
IkReal x1817=(sj1*sj2);
IkReal x1818=((1.0)*x1810);
IkReal x1819=((1.0)*x1809);
IkReal x1820=(sj5*x1809);
evalcond[0]=((((-1.0)*x1815*x1819))+((r21*x1820))+(((-1.0)*r22*x1818)));
evalcond[1]=(sj0+(((-1.0)*r02*x1818))+((x1809*x1813))+(((-1.0)*x1814*x1819)));
evalcond[2]=((((-1.0)*x1816))+(((-1.0)*x1812*x1819))+(((-1.0)*r12*x1818))+((r11*x1820)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x1818))+((cj1*sj2))+((x1810*x1815))+(((-1.0)*r22*x1819)));
evalcond[4]=(((cj0*x1811))+(((-1.0)*x1813*x1818))+(((-1.0)*r02*x1819))+(((-1.0)*x1816*x1817))+((x1810*x1814)));
evalcond[5]=((((-1.0)*r11*sj5*x1818))+(((-1.0)*r12*x1819))+((sj0*x1811))+(((-1.0)*sj0*x1817))+((x1810*x1812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1821=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1821.valid){
continue;
}
CheckValue<IkReal> x1822 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1821.value)))+(x1822.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1823=IKsin(j4);
IkReal x1824=IKcos(j4);
IkReal x1825=(cj1*cj2);
IkReal x1826=(cj5*r10);
IkReal x1827=(r01*sj5);
IkReal x1828=(cj5*r00);
IkReal x1829=(cj5*r20);
IkReal x1830=((1.0)*cj0);
IkReal x1831=(sj1*sj2);
IkReal x1832=((1.0)*x1824);
IkReal x1833=((1.0)*x1823);
IkReal x1834=(sj5*x1823);
evalcond[0]=(((r21*x1834))+(((-1.0)*r22*x1832))+(((-1.0)*x1829*x1833)));
evalcond[1]=(sj0+(((-1.0)*x1828*x1833))+((x1823*x1827))+(((-1.0)*r02*x1832)));
evalcond[2]=((((-1.0)*x1830))+(((-1.0)*x1826*x1833))+((r11*x1834))+(((-1.0)*r12*x1832)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x1824*x1829))+(((-1.0)*r21*sj5*x1832))+(((-1.0)*r22*x1833)));
evalcond[4]=(((cj0*x1825))+((x1824*x1828))+(((-1.0)*x1827*x1832))+(((-1.0)*r02*x1833))+(((-1.0)*x1830*x1831)));
evalcond[5]=((((-1.0)*r11*sj5*x1832))+((x1824*x1826))+(((-1.0)*sj0*x1831))+((sj0*x1825))+(((-1.0)*r12*x1833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1835=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1835.valid){
continue;
}
CheckValue<IkReal> x1836 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1836.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1835.value)))+(x1836.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1837=IKsin(j4);
IkReal x1838=IKcos(j4);
IkReal x1839=(cj1*cj2);
IkReal x1840=(cj5*r10);
IkReal x1841=(r01*sj5);
IkReal x1842=(cj5*r00);
IkReal x1843=(cj5*r20);
IkReal x1844=((1.0)*cj0);
IkReal x1845=(sj1*sj2);
IkReal x1846=((1.0)*x1838);
IkReal x1847=((1.0)*x1837);
IkReal x1848=(sj5*x1837);
evalcond[0]=((((-1.0)*x1843*x1847))+(((-1.0)*r22*x1846))+((r21*x1848)));
evalcond[1]=((((-1.0)*x1842*x1847))+sj0+((x1837*x1841))+(((-1.0)*r02*x1846)));
evalcond[2]=((((-1.0)*x1844))+(((-1.0)*r12*x1846))+(((-1.0)*x1840*x1847))+((r11*x1848)));
evalcond[3]=(((cj2*sj1))+((x1838*x1843))+(((-1.0)*r22*x1847))+((cj1*sj2))+(((-1.0)*r21*sj5*x1846)));
evalcond[4]=(((x1838*x1842))+(((-1.0)*x1841*x1846))+(((-1.0)*r02*x1847))+((cj0*x1839))+(((-1.0)*x1844*x1845)));
evalcond[5]=(((x1838*x1840))+((sj0*x1839))+(((-1.0)*r11*sj5*x1846))+(((-1.0)*r12*x1847))+(((-1.0)*sj0*x1845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1849=cj5*cj5;
IkReal x1850=r21*r21;
IkReal x1851=(cj2*sj1);
IkReal x1852=(cj1*sj2);
IkReal x1853=(r21*sj5);
IkReal x1854=((1.0)*cj5*r20);
CheckValue<IkReal> x1855=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1849*x1850))+(r22*r22)+(((-2.0)*cj5*r20*x1853))+((x1849*(r20*r20)))+x1850)),-1);
if(!x1855.valid){
continue;
}
CheckValue<IkReal> x1856 = IKatan2WithCheck(IkReal((((r22*x1851))+((r22*x1852)))),IkReal((((x1852*x1853))+((x1851*x1853))+(((-1.0)*x1852*x1854))+(((-1.0)*x1851*x1854)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1855.value)))+(x1856.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1857=IKsin(j4);
IkReal x1858=IKcos(j4);
IkReal x1859=(r21*sj5);
IkReal x1860=(cj5*r20);
IkReal x1861=((1.0)*x1858);
IkReal x1862=((1.0)*x1857);
evalcond[0]=((((-1.0)*x1860*x1862))+((x1857*x1859))+(((-1.0)*r22*x1861)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((x1858*x1860))+(((-1.0)*x1859*x1861))+(((-1.0)*r22*x1862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1863=(cj5*sj4);
IkReal x1864=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x1864))+((r00*x1863))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1864))+(((-1.0)*r10*x1863))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1864))+((r00*x1863))+((cj4*r02))))+IKsqr((((r11*x1864))+(((-1.0)*r10*x1863))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x1864))+((r00*x1863))+((cj4*r02))), (((r11*x1864))+(((-1.0)*r10*x1863))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1865=IKcos(j0);
IkReal x1866=IKsin(j0);
IkReal x1867=(cj4*cj5);
IkReal x1868=(r11*sj5);
IkReal x1869=(cj1*cj2);
IkReal x1870=(cj5*r11);
IkReal x1871=((1.0)*sj4);
IkReal x1872=(cj5*r01);
IkReal x1873=((1.0)*sj5);
IkReal x1874=((0.09465)*sj5);
IkReal x1875=((1.0)*cj4);
IkReal x1876=(sj1*x1865);
IkReal x1877=(cj1*x1866);
IkReal x1878=(cj1*x1865);
IkReal x1879=(sj1*sj2*x1866);
evalcond[0]=((((-1.0)*r02*x1875))+((r01*sj4*sj5))+x1866+(((-1.0)*cj5*r00*x1871)));
evalcond[1]=(((sj4*x1868))+(((-1.0)*cj5*r10*x1871))+(((-1.0)*r12*x1875))+(((-1.0)*x1865)));
evalcond[2]=(((sj2*x1878))+(((-1.0)*r00*x1873))+((cj2*x1876))+(((-1.0)*x1872)));
evalcond[3]=(((cj2*sj1*x1866))+((sj2*x1877))+(((-1.0)*r10*x1873))+(((-1.0)*x1870)));
evalcond[4]=((((-1.0)*r02*x1871))+(((-1.0)*cj4*r01*x1873))+((x1865*x1869))+(((-1.0)*sj2*x1876))+((r00*x1867)));
evalcond[5]=((((-1.0)*x1868*x1875))+((x1866*x1869))+(((-1.0)*r12*x1871))+((r10*x1867))+(((-1.0)*x1879)));
evalcond[6]=((((0.39225)*sj2*x1876))+(((-1.0)*r00*x1874))+(((-0.09465)*x1872))+(((-1.0)*px))+(((-0.39225)*x1865*x1869))+(((-0.425)*x1878))+(((0.10915)*x1866)));
evalcond[7]=((((-0.10915)*x1865))+(((-1.0)*r10*x1874))+(((-0.09465)*x1870))+(((-1.0)*py))+(((-0.425)*x1877))+(((0.39225)*x1879))+(((-0.39225)*x1866*x1869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1880=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x1880.valid){
continue;
}
CheckValue<IkReal> x1881 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1881.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1880.value)))+(x1881.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1882=IKcos(j0);
IkReal x1883=IKsin(j0);
IkReal x1884=(cj5*r11);
IkReal x1885=(cj5*r01);
IkReal x1886=(cj2*sj1);
IkReal x1887=((1.0)*sj5);
IkReal x1888=((0.09465)*sj5);
IkReal x1889=((0.39225)*cj2);
IkReal x1890=((0.39225)*sj1*sj2);
IkReal x1891=(cj1*x1882);
IkReal x1892=(cj1*x1883);
evalcond[0]=(((sj2*x1891))+((x1882*x1886))+(((-1.0)*x1885))+(((-1.0)*r00*x1887)));
evalcond[1]=(((sj2*x1892))+((x1883*x1886))+(((-1.0)*r10*x1887))+(((-1.0)*x1884)));
evalcond[2]=(((x1882*x1890))+(((-0.09465)*x1885))+(((0.10915)*x1883))+(((-1.0)*px))+(((-1.0)*x1889*x1891))+(((-1.0)*r00*x1888))+(((-0.425)*x1891)));
evalcond[3]=(((x1883*x1890))+(((-0.09465)*x1884))+(((-1.0)*py))+(((-1.0)*x1889*x1892))+(((-1.0)*r10*x1888))+(((-0.425)*x1892))+(((-0.10915)*x1882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1893=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1893;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1893);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1894=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1894;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1894);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1895=((1.0)*cj5);
IkReal x1896=((((-1.0)*r21*x1895))+(((-1.0)*r20*sj5)));
j4eval[0]=x1896;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1895))+(((-1.0)*cj0*r00*x1895))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x1896);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1897=((1.0)*cj5);
CheckValue<IkReal> x1898 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1897))+(((-1.0)*cj0*r00*x1897))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1898.valid){
continue;
}
CheckValue<IkReal> x1899=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1897))+(((-1.0)*r20*sj5)))),-1);
if(!x1899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1898.value)+(((1.5707963267949)*(x1899.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1900=IKsin(j4);
IkReal x1901=IKcos(j4);
IkReal x1902=(cj1*cj2);
IkReal x1903=(cj5*r10);
IkReal x1904=(r01*sj5);
IkReal x1905=(cj5*r00);
IkReal x1906=(cj5*r20);
IkReal x1907=((1.0)*cj0);
IkReal x1908=(sj1*sj2);
IkReal x1909=((1.0)*x1901);
IkReal x1910=((1.0)*x1900);
IkReal x1911=(sj5*x1900);
evalcond[0]=((((-1.0)*r22*x1909))+((r21*x1911))+(((-1.0)*x1906*x1910)));
evalcond[1]=(sj0+(((-1.0)*x1905*x1910))+((x1900*x1904))+(((-1.0)*r02*x1909)));
evalcond[2]=((((-1.0)*x1903*x1910))+((r11*x1911))+(((-1.0)*r12*x1909))+(((-1.0)*x1907)));
evalcond[3]=(((cj2*sj1))+((x1901*x1906))+(((-1.0)*r22*x1910))+((cj1*sj2))+(((-1.0)*r21*sj5*x1909)));
evalcond[4]=(((x1901*x1905))+(((-1.0)*r02*x1910))+(((-1.0)*x1907*x1908))+(((-1.0)*x1904*x1909))+((cj0*x1902)));
evalcond[5]=(((x1901*x1903))+(((-1.0)*r12*x1910))+(((-1.0)*r11*sj5*x1909))+(((-1.0)*sj0*x1908))+((sj0*x1902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1912=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1912.valid){
continue;
}
CheckValue<IkReal> x1913 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1912.value)))+(x1913.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1914=IKsin(j4);
IkReal x1915=IKcos(j4);
IkReal x1916=(cj1*cj2);
IkReal x1917=(cj5*r10);
IkReal x1918=(r01*sj5);
IkReal x1919=(cj5*r00);
IkReal x1920=(cj5*r20);
IkReal x1921=((1.0)*cj0);
IkReal x1922=(sj1*sj2);
IkReal x1923=((1.0)*x1915);
IkReal x1924=((1.0)*x1914);
IkReal x1925=(sj5*x1914);
evalcond[0]=((((-1.0)*r22*x1923))+((r21*x1925))+(((-1.0)*x1920*x1924)));
evalcond[1]=(sj0+((x1914*x1918))+(((-1.0)*x1919*x1924))+(((-1.0)*r02*x1923)));
evalcond[2]=((((-1.0)*r12*x1923))+(((-1.0)*x1917*x1924))+(((-1.0)*x1921))+((r11*x1925)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x1923))+(((-1.0)*r22*x1924))+((x1915*x1920)));
evalcond[4]=((((-1.0)*x1918*x1923))+(((-1.0)*r02*x1924))+(((-1.0)*x1921*x1922))+((cj0*x1916))+((x1915*x1919)));
evalcond[5]=((((-1.0)*r12*x1924))+(((-1.0)*r11*sj5*x1923))+((sj0*x1916))+((x1915*x1917))+(((-1.0)*sj0*x1922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1926=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1926.valid){
continue;
}
CheckValue<IkReal> x1927 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1926.value)))+(x1927.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1928=IKsin(j4);
IkReal x1929=IKcos(j4);
IkReal x1930=(cj1*cj2);
IkReal x1931=(cj5*r10);
IkReal x1932=(r01*sj5);
IkReal x1933=(cj5*r00);
IkReal x1934=(cj5*r20);
IkReal x1935=((1.0)*cj0);
IkReal x1936=(sj1*sj2);
IkReal x1937=((1.0)*x1929);
IkReal x1938=((1.0)*x1928);
IkReal x1939=(sj5*x1928);
evalcond[0]=((((-1.0)*x1934*x1938))+(((-1.0)*r22*x1937))+((r21*x1939)));
evalcond[1]=(sj0+(((-1.0)*x1933*x1938))+((x1928*x1932))+(((-1.0)*r02*x1937)));
evalcond[2]=((((-1.0)*r12*x1937))+(((-1.0)*x1931*x1938))+((r11*x1939))+(((-1.0)*x1935)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x1938))+((x1929*x1934))+(((-1.0)*r21*sj5*x1937)));
evalcond[4]=((((-1.0)*x1932*x1937))+((cj0*x1930))+((x1929*x1933))+(((-1.0)*x1935*x1936))+(((-1.0)*r02*x1938)));
evalcond[5]=((((-1.0)*r11*sj5*x1937))+(((-1.0)*sj0*x1936))+(((-1.0)*r12*x1938))+((sj0*x1930))+((x1929*x1931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1940=cj1*cj1;
IkReal x1941=cj2*cj2;
IkReal x1942=(sj1*sj2);
IkReal x1943=((156900000.0)*py);
IkReal x1944=(cj1*cj5);
IkReal x1945=((14850585.0)*cj2);
IkReal x1946=(r00*sj5);
IkReal x1947=((16090500.0)*cj1);
IkReal x1948=((4132419.0)*cj5);
IkReal x1949=(r10*sj5);
IkReal x1950=((170000000.0)*cj1);
IkReal x1951=((156900000.0)*px);
IkReal x1952=(cj1*cj2);
IkReal x1953=((14850585.0)*cj5);
CheckValue<IkReal> x1954=IKPowWithIntegerCheck(IKsign(((-66309514.0)+(((-10705975.0)*x1940))+(((-133365000.0)*cj2*x1940))+(((61544025.0)*x1941))+(((133365000.0)*cj1*x1942))+(((123088050.0)*x1942*x1952))+(((-123088050.0)*x1940*x1941)))),-1);
if(!x1954.valid){
continue;
}
CheckValue<IkReal> x1955 = IKatan2WithCheck(IkReal(((((-43660000.0)*px))+((x1943*x1952))+(((-1.0)*x1942*x1943))+((py*x1950))+(((-1.0)*r11*x1942*x1953))+(((-4132419.0)*x1946))+(((-1.0)*r01*x1948))+(((-14850585.0)*x1942*x1949))+((x1947*x1949))+(((16090500.0)*r11*x1944))+((cj1*x1945*x1949))+((r11*x1944*x1945)))),IkReal(((((-1.0)*x1942*x1951))+((r11*x1948))+(((43660000.0)*py))+((x1946*x1947))+(((-1.0)*r01*x1942*x1953))+((x1951*x1952))+((px*x1950))+(((16090500.0)*r01*x1944))+(((4132419.0)*x1949))+(((-14850585.0)*x1942*x1946))+((r01*x1944*x1945))+((cj1*x1945*x1946)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1955.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1954.value)))+(x1955.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1956=IKcos(j0);
IkReal x1957=IKsin(j0);
IkReal x1958=((0.425)*cj1);
IkReal x1959=(sj1*sj2);
IkReal x1960=(cj1*cj2);
IkReal x1961=((0.09465)*cj5);
IkReal x1962=((0.09465)*sj5);
IkReal x1963=((0.39225)*x1957);
IkReal x1964=((0.39225)*x1956);
evalcond[0]=(((x1959*x1964))+(((-1.0)*r00*x1962))+(((-1.0)*px))+(((-1.0)*r01*x1961))+(((0.10915)*x1957))+(((-1.0)*x1960*x1964))+(((-1.0)*x1956*x1958)));
evalcond[1]=(((x1959*x1963))+(((-1.0)*x1957*x1958))+(((-0.10915)*x1956))+(((-1.0)*py))+(((-1.0)*r10*x1962))+(((-1.0)*x1960*x1963))+(((-1.0)*r11*x1961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x1965=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1965;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1965);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1966=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1966;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1966);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1967=((1.0)*cj5);
IkReal x1968=((((-1.0)*r21*x1967))+(((-1.0)*r20*sj5)));
j4eval[0]=x1968;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1967))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1967)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x1968);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1969=((-1.0)*r20);
IkReal x1971 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1971)==0){
continue;
}
IkReal x1970=pow(x1971,-0.5);
CheckValue<IkReal> x1972 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1969),IKFAST_ATAN2_MAGTHRESH);
if(!x1972.valid){
continue;
}
IkReal gconst0=((-1.0)*(x1972.value));
IkReal gconst1=(r21*x1970);
IkReal gconst2=(x1969*x1970);
CheckValue<IkReal> x1973 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1973.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1973.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1974=((-1.0)*r20);
IkReal x1975=x1970;
CheckValue<IkReal> x1977 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1974),IKFAST_ATAN2_MAGTHRESH);
if(!x1977.valid){
continue;
}
IkReal x1976=((-1.0)*(x1977.value));
sj5=gconst1;
cj5=gconst2;
j5=x1976;
IkReal gconst0=x1976;
IkReal gconst1=(r21*x1975);
IkReal gconst2=(x1974*x1975);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1978=((-1.0)*r20);
IkReal x1979=x1970;
CheckValue<IkReal> x1981 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1978),IKFAST_ATAN2_MAGTHRESH);
if(!x1981.valid){
continue;
}
IkReal x1980=((-1.0)*(x1981.value));
sj5=gconst1;
cj5=gconst2;
j5=x1980;
IkReal gconst0=x1980;
IkReal gconst1=(r21*x1979);
IkReal gconst2=(x1978*x1979);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1982=((-1.0)*r20);
IkReal x1983=x1970;
CheckValue<IkReal> x1985 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1982),IKFAST_ATAN2_MAGTHRESH);
if(!x1985.valid){
continue;
}
IkReal x1984=((-1.0)*(x1985.value));
sj5=gconst1;
cj5=gconst2;
j5=x1984;
IkReal gconst0=x1984;
IkReal gconst1=(r21*x1983);
IkReal gconst2=(x1982*x1983);
IkReal x1986=r22*r22;
CheckValue<IkReal> x1990=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1986))),-1);
if(!x1990.valid){
continue;
}
IkReal x1987=x1990.value;
IkReal x1988=(sj3*x1987);
IkReal x1989=(((sj3*x1986))+((x1988*(r21*r21*r21*r21)))+((x1988*(r20*r20*r20*r20)))+(((2.0)*x1988*(r20*r20)*(r21*r21))));
j4eval[0]=x1989;
j4eval[1]=IKsign(x1989);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1991=gconst1*gconst1;
IkReal x1992=r21*r21;
IkReal x1993=gconst2*gconst2;
IkReal x1994=r20*r20;
IkReal x1995=(gconst2*r20);
IkReal x1996=(cj1*cj2);
IkReal x1997=(sj1*sj2);
IkReal x1998=(gconst1*r21);
IkReal x1999=(cj3*gconst2);
IkReal x2000=(cj3*r20);
CheckValue<IkReal> x2001 = IKatan2WithCheck(IkReal((((gconst1*r22*x2000))+((r21*r22*x1999))+(((-1.0)*r22*x1996))+((r22*x1997)))),IkReal(((((-1.0)*x1995*x1997))+(((-1.0)*r21*x1993*x2000))+((gconst1*x1992*x1999))+((x1995*x1996))+(((-1.0)*gconst1*x1994*x1999))+((r21*x1991*x2000))+(((-1.0)*x1996*x1998))+((x1997*x1998)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2001.valid){
continue;
}
CheckValue<IkReal> x2002=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x1995*x1998))+((sj3*x1991*x1992))+((sj3*x1993*x1994)))),-1);
if(!x2002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2001.value)+(((1.5707963267949)*(x2002.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2003=IKsin(j4);
IkReal x2004=IKcos(j4);
IkReal x2005=(gconst1*sj3);
IkReal x2006=(cj2*sj0);
IkReal x2007=(cj3*gconst1);
IkReal x2008=(sj1*sj2);
IkReal x2009=(cj3*gconst2);
IkReal x2010=(cj1*cj2);
IkReal x2011=(gconst2*sj3);
IkReal x2012=(cj2*sj1);
IkReal x2013=((1.0)*cj0);
IkReal x2014=(cj1*sj2);
IkReal x2015=((1.0)*x2004);
IkReal x2016=((1.0)*x2003);
IkReal x2017=(gconst1*x2003);
IkReal x2018=(cj3*x2003);
IkReal x2019=(x2004*x2011);
evalcond[0]=((((-1.0)*gconst2*r20*x2016))+((r21*x2017))+(((-1.0)*r22*x2015)));
evalcond[1]=(sj0+(((-1.0)*gconst2*r00*x2016))+((r01*x2017))+(((-1.0)*r02*x2015)));
evalcond[2]=((((-1.0)*x2013))+(((-1.0)*r12*x2015))+(((-1.0)*gconst2*r10*x2016))+((r11*x2017)));
evalcond[3]=(x2014+x2012+(((-1.0)*r20*x2009*x2015))+((r22*x2018))+((r20*x2005))+((r21*x2011))+((r21*x2004*x2007)));
evalcond[4]=(((r21*x2009))+((r20*x2019))+(((-1.0)*r22*sj3*x2016))+x2008+((r20*x2007))+(((-1.0)*r21*x2005*x2015))+(((-1.0)*x2010)));
evalcond[5]=((((-1.0)*r02*sj3*x2016))+((r01*x2009))+((r00*x2007))+((r00*x2019))+(((-1.0)*r01*x2005*x2015))+((cj0*x2014))+((cj0*x2012)));
evalcond[6]=((((-1.0)*x2008*x2013))+((r00*x2005))+((r01*x2011))+((r01*x2004*x2007))+((cj0*x2010))+((r02*x2018))+(((-1.0)*r00*x2009*x2015)));
evalcond[7]=(((r11*x2009))+((sj0*x2014))+(((-1.0)*r12*sj3*x2016))+((r10*x2007))+((r10*x2019))+((sj1*x2006))+(((-1.0)*r11*x2005*x2015)));
evalcond[8]=(((r11*x2004*x2007))+((r10*x2005))+(((-1.0)*r10*x2009*x2015))+(((-1.0)*sj0*x2008))+((r12*x2018))+((r11*x2011))+((cj1*x2006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2020=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x2020.valid){
continue;
}
CheckValue<IkReal> x2021 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2020.value)))+(x2021.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2022=IKsin(j4);
IkReal x2023=IKcos(j4);
IkReal x2024=(gconst1*sj3);
IkReal x2025=(cj2*sj0);
IkReal x2026=(cj3*gconst1);
IkReal x2027=(sj1*sj2);
IkReal x2028=(cj3*gconst2);
IkReal x2029=(cj1*cj2);
IkReal x2030=(gconst2*sj3);
IkReal x2031=(cj2*sj1);
IkReal x2032=((1.0)*cj0);
IkReal x2033=(cj1*sj2);
IkReal x2034=((1.0)*x2023);
IkReal x2035=((1.0)*x2022);
IkReal x2036=(gconst1*x2022);
IkReal x2037=(cj3*x2022);
IkReal x2038=(x2023*x2030);
evalcond[0]=(((r21*x2036))+(((-1.0)*r22*x2034))+(((-1.0)*gconst2*r20*x2035)));
evalcond[1]=(sj0+((r01*x2036))+(((-1.0)*gconst2*r00*x2035))+(((-1.0)*r02*x2034)));
evalcond[2]=((((-1.0)*gconst2*r10*x2035))+(((-1.0)*r12*x2034))+(((-1.0)*x2032))+((r11*x2036)));
evalcond[3]=(((r22*x2037))+((r21*x2030))+((r21*x2023*x2026))+x2033+x2031+(((-1.0)*r20*x2028*x2034))+((r20*x2024)));
evalcond[4]=((((-1.0)*r22*sj3*x2035))+x2027+(((-1.0)*x2029))+((r20*x2038))+((r20*x2026))+((r21*x2028))+(((-1.0)*r21*x2024*x2034)));
evalcond[5]=(((r01*x2028))+((r00*x2026))+((r00*x2038))+(((-1.0)*r02*sj3*x2035))+((cj0*x2031))+((cj0*x2033))+(((-1.0)*r01*x2024*x2034)));
evalcond[6]=((((-1.0)*r00*x2028*x2034))+((r00*x2024))+((r01*x2030))+((r01*x2023*x2026))+((cj0*x2029))+((r02*x2037))+(((-1.0)*x2027*x2032)));
evalcond[7]=((((-1.0)*r12*sj3*x2035))+((r10*x2026))+((r10*x2038))+((r11*x2028))+((sj1*x2025))+((sj0*x2033))+(((-1.0)*r11*x2024*x2034)));
evalcond[8]=(((r10*x2024))+((r11*x2023*x2026))+((r12*x2037))+(((-1.0)*r10*x2028*x2034))+(((-1.0)*sj0*x2027))+((cj1*x2025))+((r11*x2030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2039=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x2039.valid){
continue;
}
CheckValue<IkReal> x2040 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2039.value)))+(x2040.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2041=IKsin(j4);
IkReal x2042=IKcos(j4);
IkReal x2043=(gconst1*sj3);
IkReal x2044=(cj2*sj0);
IkReal x2045=(cj3*gconst1);
IkReal x2046=(sj1*sj2);
IkReal x2047=(cj3*gconst2);
IkReal x2048=(cj1*cj2);
IkReal x2049=(gconst2*sj3);
IkReal x2050=(cj2*sj1);
IkReal x2051=((1.0)*cj0);
IkReal x2052=(cj1*sj2);
IkReal x2053=((1.0)*x2042);
IkReal x2054=((1.0)*x2041);
IkReal x2055=(gconst1*x2041);
IkReal x2056=(cj3*x2041);
IkReal x2057=(x2042*x2049);
evalcond[0]=((((-1.0)*r22*x2053))+(((-1.0)*gconst2*r20*x2054))+((r21*x2055)));
evalcond[1]=(((r01*x2055))+sj0+(((-1.0)*r02*x2053))+(((-1.0)*gconst2*r00*x2054)));
evalcond[2]=((((-1.0)*gconst2*r10*x2054))+((r11*x2055))+(((-1.0)*r12*x2053))+(((-1.0)*x2051)));
evalcond[3]=(((r21*x2049))+((r22*x2056))+x2050+x2052+((r20*x2043))+((r21*x2042*x2045))+(((-1.0)*r20*x2047*x2053)));
evalcond[4]=(((r21*x2047))+(((-1.0)*r21*x2043*x2053))+x2046+((r20*x2045))+(((-1.0)*x2048))+(((-1.0)*r22*sj3*x2054))+((r20*x2057)));
evalcond[5]=((((-1.0)*r02*sj3*x2054))+((cj0*x2050))+((cj0*x2052))+((r01*x2047))+((r00*x2045))+(((-1.0)*r01*x2043*x2053))+((r00*x2057)));
evalcond[6]=(((cj0*x2048))+((r01*x2042*x2045))+(((-1.0)*x2046*x2051))+((r02*x2056))+(((-1.0)*r00*x2047*x2053))+((r01*x2049))+((r00*x2043)));
evalcond[7]=(((r10*x2057))+((r11*x2047))+(((-1.0)*r11*x2043*x2053))+((sj0*x2052))+((sj1*x2044))+((r10*x2045))+(((-1.0)*r12*sj3*x2054)));
evalcond[8]=(((r12*x2056))+(((-1.0)*sj0*x2046))+((r11*x2049))+((r11*x2042*x2045))+(((-1.0)*r10*x2047*x2053))+((r10*x2043))+((cj1*x2044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2058=((-1.0)*r21);
IkReal x2060 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2060)==0){
continue;
}
IkReal x2059=pow(x2060,-0.5);
CheckValue<IkReal> x2061 = IKatan2WithCheck(IkReal(x2058),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2061.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x2061.value))));
IkReal gconst4=(x2058*x2059);
IkReal gconst5=((1.0)*r20*x2059);
CheckValue<IkReal> x2062 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2062.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2062.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2063=((-1.0)*r21);
CheckValue<IkReal> x2066 = IKatan2WithCheck(IkReal(x2063),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2066.valid){
continue;
}
IkReal x2064=((1.0)*(x2066.value));
IkReal x2065=x2059;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2064)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2064)));
IkReal gconst4=(x2063*x2065);
IkReal gconst5=((1.0)*r20*x2065);
IkReal x2067=r22*r22;
IkReal x2068=((1.0)*x2067);
CheckValue<IkReal> x2072=IKPowWithIntegerCheck(((-1.0)+x2067),-1);
if(!x2072.valid){
continue;
}
IkReal x2069=x2072.value;
if((((1.0)+(((-1.0)*x2068)))) < -0.00001)
continue;
IkReal x2070=IKsqrt(((1.0)+(((-1.0)*x2068))));
IkReal x2071=(sj0*x2069*x2070);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2071+(((-1.0)*x2068*x2071))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2073=((-1.0)*r21);
CheckValue<IkReal> x2076 = IKatan2WithCheck(IkReal(x2073),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2076.valid){
continue;
}
IkReal x2074=((1.0)*(x2076.value));
IkReal x2075=x2059;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2074)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2074)));
IkReal gconst4=(x2073*x2075);
IkReal gconst5=((1.0)*r20*x2075);
IkReal x2077=r22*r22;
IkReal x2078=((1.0)*x2077);
CheckValue<IkReal> x2082=IKPowWithIntegerCheck(((-1.0)+x2077),-1);
if(!x2082.valid){
continue;
}
IkReal x2079=x2082.value;
if((((1.0)+(((-1.0)*x2078)))) < -0.00001)
continue;
IkReal x2080=IKsqrt(((1.0)+(((-1.0)*x2078))));
IkReal x2081=(cj0*x2079*x2080);
j4eval[0]=((IKabs(((((-1.0)*x2078*x2081))+x2081)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2083=((-1.0)*r21);
CheckValue<IkReal> x2086 = IKatan2WithCheck(IkReal(x2083),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2086.valid){
continue;
}
IkReal x2084=((1.0)*(x2086.value));
IkReal x2085=x2059;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2084)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2084)));
IkReal gconst4=(x2083*x2085);
IkReal gconst5=((1.0)*r20*x2085);
IkReal x2087=r22*r22;
IkReal x2088=(cj0*r02);
IkReal x2089=(r12*sj0);
CheckValue<IkReal> x2093=IKPowWithIntegerCheck(((-1.0)+x2087),-1);
if(!x2093.valid){
continue;
}
IkReal x2090=x2093.value;
if((((1.0)+(((-1.0)*x2087)))) < -0.00001)
continue;
IkReal x2091=IKsqrt(((1.0)+(((-1.0)*x2087))));
IkReal x2092=((1.0)*r22*x2090*x2091);
j4eval[0]=0;
j4eval[1]=((IKabs((x2088+x2089)))+(IKabs(((((-1.0)*x2089*x2092))+(((-1.0)*x2088*x2092))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2094=((1.0)*gconst5);
CheckValue<IkReal> x2095=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2094))+(((-1.0)*gconst4*r20)))),-1);
if(!x2095.valid){
continue;
}
CheckValue<IkReal> x2096 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst4*r01))+(((-1.0)*cj0*r00*x2094))+((gconst4*r11*sj0))+(((-1.0)*r10*sj0*x2094)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2095.value)))+(x2096.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2097=IKsin(j4);
IkReal x2098=IKcos(j4);
IkReal x2099=(gconst4*r11);
IkReal x2100=(cj2*sj0);
IkReal x2101=(sj1*sj2);
IkReal x2102=(gconst4*sj3);
IkReal x2103=(gconst5*r10);
IkReal x2104=(cj1*cj2);
IkReal x2105=(gconst4*r01);
IkReal x2106=(cj2*sj1);
IkReal x2107=(gconst4*r21);
IkReal x2108=(gconst5*r00);
IkReal x2109=(gconst5*sj3);
IkReal x2110=(cj3*gconst5);
IkReal x2111=(cj3*gconst4);
IkReal x2112=(cj1*sj2);
IkReal x2113=((1.0)*cj0);
IkReal x2114=((1.0)*x2098);
IkReal x2115=((1.0)*x2097);
IkReal x2116=(cj3*x2097);
IkReal x2117=(cj3*x2098);
IkReal x2118=(x2098*x2109);
evalcond[0]=(((x2097*x2107))+(((-1.0)*r22*x2114))+(((-1.0)*gconst5*r20*x2115)));
evalcond[1]=(sj0+(((-1.0)*x2108*x2115))+((x2097*x2105))+(((-1.0)*r02*x2114)));
evalcond[2]=((((-1.0)*x2103*x2115))+((x2097*x2099))+(((-1.0)*x2113))+(((-1.0)*r12*x2114)));
evalcond[3]=(((r20*x2102))+((r21*x2109))+(((-1.0)*r20*x2110*x2114))+x2112+x2106+((x2107*x2117))+((r22*x2116)));
evalcond[4]=(((r21*x2110))+x2101+((r20*x2118))+((r20*x2111))+(((-1.0)*x2104))+(((-1.0)*r21*x2102*x2114))+(((-1.0)*r22*sj3*x2115)));
evalcond[5]=(((r01*x2110))+((cj0*x2106))+(((-1.0)*r02*sj3*x2115))+((r00*x2111))+((cj0*x2112))+(((-1.0)*r01*x2102*x2114))+((sj3*x2098*x2108)));
evalcond[6]=((((-1.0)*x2101*x2113))+((cj0*x2104))+((x2105*x2117))+((r00*x2102))+((r01*x2109))+((r02*x2116))+(((-1.0)*cj3*x2108*x2114)));
evalcond[7]=((((-1.0)*sj3*x2099*x2114))+((sj0*x2112))+(((-1.0)*r12*sj3*x2115))+((sj3*x2098*x2103))+((r10*x2111))+((sj1*x2100))+((r11*x2110)));
evalcond[8]=(((r12*x2116))+(((-1.0)*sj0*x2101))+(((-1.0)*cj3*x2103*x2114))+((r11*x2109))+((r10*x2102))+((cj1*x2100))+((x2099*x2117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2119=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x2119.valid){
continue;
}
CheckValue<IkReal> x2120 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst5*r20))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2119.value)))+(x2120.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2121=IKsin(j4);
IkReal x2122=IKcos(j4);
IkReal x2123=(gconst4*r11);
IkReal x2124=(cj2*sj0);
IkReal x2125=(sj1*sj2);
IkReal x2126=(gconst4*sj3);
IkReal x2127=(gconst5*r10);
IkReal x2128=(cj1*cj2);
IkReal x2129=(gconst4*r01);
IkReal x2130=(cj2*sj1);
IkReal x2131=(gconst4*r21);
IkReal x2132=(gconst5*r00);
IkReal x2133=(gconst5*sj3);
IkReal x2134=(cj3*gconst5);
IkReal x2135=(cj3*gconst4);
IkReal x2136=(cj1*sj2);
IkReal x2137=((1.0)*cj0);
IkReal x2138=((1.0)*x2122);
IkReal x2139=((1.0)*x2121);
IkReal x2140=(cj3*x2121);
IkReal x2141=(cj3*x2122);
IkReal x2142=(x2122*x2133);
evalcond[0]=((((-1.0)*r22*x2138))+((x2121*x2131))+(((-1.0)*gconst5*r20*x2139)));
evalcond[1]=(sj0+((x2121*x2129))+(((-1.0)*x2132*x2139))+(((-1.0)*r02*x2138)));
evalcond[2]=((((-1.0)*x2137))+(((-1.0)*r12*x2138))+((x2121*x2123))+(((-1.0)*x2127*x2139)));
evalcond[3]=(((r21*x2133))+((r20*x2126))+x2136+x2130+(((-1.0)*r20*x2134*x2138))+((x2131*x2141))+((r22*x2140)));
evalcond[4]=(((r21*x2134))+((r20*x2142))+x2125+(((-1.0)*r21*x2126*x2138))+(((-1.0)*x2128))+(((-1.0)*r22*sj3*x2139))+((r20*x2135)));
evalcond[5]=(((cj0*x2130))+((cj0*x2136))+((sj3*x2122*x2132))+((r01*x2134))+((r00*x2135))+(((-1.0)*r02*sj3*x2139))+(((-1.0)*r01*x2126*x2138)));
evalcond[6]=((((-1.0)*x2125*x2137))+((r02*x2140))+((r01*x2133))+((x2129*x2141))+(((-1.0)*cj3*x2132*x2138))+((r00*x2126))+((cj0*x2128)));
evalcond[7]=((((-1.0)*sj3*x2123*x2138))+((r11*x2134))+((sj1*x2124))+((sj3*x2122*x2127))+((r10*x2135))+((sj0*x2136))+(((-1.0)*r12*sj3*x2139)));
evalcond[8]=((((-1.0)*sj0*x2125))+((r10*x2126))+((r11*x2133))+((cj1*x2124))+(((-1.0)*cj3*x2127*x2138))+((x2123*x2141))+((r12*x2140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2143=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x2143.valid){
continue;
}
CheckValue<IkReal> x2144 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst5*r20*sj0))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2143.value)))+(x2144.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2145=IKsin(j4);
IkReal x2146=IKcos(j4);
IkReal x2147=(gconst4*r11);
IkReal x2148=(cj2*sj0);
IkReal x2149=(sj1*sj2);
IkReal x2150=(gconst4*sj3);
IkReal x2151=(gconst5*r10);
IkReal x2152=(cj1*cj2);
IkReal x2153=(gconst4*r01);
IkReal x2154=(cj2*sj1);
IkReal x2155=(gconst4*r21);
IkReal x2156=(gconst5*r00);
IkReal x2157=(gconst5*sj3);
IkReal x2158=(cj3*gconst5);
IkReal x2159=(cj3*gconst4);
IkReal x2160=(cj1*sj2);
IkReal x2161=((1.0)*cj0);
IkReal x2162=((1.0)*x2146);
IkReal x2163=((1.0)*x2145);
IkReal x2164=(cj3*x2145);
IkReal x2165=(cj3*x2146);
IkReal x2166=(x2146*x2157);
evalcond[0]=(((x2145*x2155))+(((-1.0)*r22*x2162))+(((-1.0)*gconst5*r20*x2163)));
evalcond[1]=(((x2145*x2153))+sj0+(((-1.0)*x2156*x2163))+(((-1.0)*r02*x2162)));
evalcond[2]=(((x2145*x2147))+(((-1.0)*x2151*x2163))+(((-1.0)*x2161))+(((-1.0)*r12*x2162)));
evalcond[3]=(((r20*x2150))+x2160+x2154+((x2155*x2165))+((r22*x2164))+((r21*x2157))+(((-1.0)*r20*x2158*x2162)));
evalcond[4]=((((-1.0)*r22*sj3*x2163))+((r20*x2159))+x2149+((r20*x2166))+(((-1.0)*r21*x2150*x2162))+((r21*x2158))+(((-1.0)*x2152)));
evalcond[5]=((((-1.0)*r02*sj3*x2163))+(((-1.0)*r01*x2150*x2162))+((sj3*x2146*x2156))+((cj0*x2160))+((cj0*x2154))+((r00*x2159))+((r01*x2158)));
evalcond[6]=((((-1.0)*x2149*x2161))+((cj0*x2152))+(((-1.0)*cj3*x2156*x2162))+((r02*x2164))+((x2153*x2165))+((r00*x2150))+((r01*x2157)));
evalcond[7]=(((sj3*x2146*x2151))+((sj0*x2160))+(((-1.0)*r12*sj3*x2163))+(((-1.0)*sj3*x2147*x2162))+((sj1*x2148))+((r10*x2159))+((r11*x2158)));
evalcond[8]=(((cj1*x2148))+((r12*x2164))+(((-1.0)*cj3*x2151*x2162))+((x2147*x2165))+((r10*x2150))+(((-1.0)*sj0*x2149))+((r11*x2157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2168 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2168)==0){
continue;
}
IkReal x2167=pow(x2168,-0.5);
CheckValue<IkReal> x2169 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2169.valid){
continue;
}
IkReal gconst6=((-1.0)*(x2169.value));
IkReal gconst7=((-1.0)*r01*x2167);
IkReal gconst8=(r00*x2167);
CheckValue<IkReal> x2170 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2170.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2170.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2173 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2173.valid){
continue;
}
IkReal x2171=((-1.0)*(x2173.value));
IkReal x2172=x2167;
sj5=gconst7;
cj5=gconst8;
j5=x2171;
IkReal gconst6=x2171;
IkReal gconst7=((-1.0)*r01*x2172);
IkReal gconst8=(r00*x2172);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2174=((1.0)*gconst8);
CheckValue<IkReal> x2175=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2174))+(((-1.0)*gconst7*r20)))),-1);
if(!x2175.valid){
continue;
}
CheckValue<IkReal> x2176 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst7*r01))+((gconst7*r11*sj0))+(((-1.0)*cj0*r00*x2174))+(((-1.0)*r10*sj0*x2174)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2175.value)))+(x2176.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2177=IKsin(j4);
IkReal x2178=IKcos(j4);
IkReal x2179=(gconst7*sj3);
IkReal x2180=(cj3*gconst8);
IkReal x2181=(cj2*sj0);
IkReal x2182=(cj3*gconst7);
IkReal x2183=(sj1*sj2);
IkReal x2184=(cj1*cj2);
IkReal x2185=(cj2*sj1);
IkReal x2186=((1.0)*cj0);
IkReal x2187=(gconst8*sj3);
IkReal x2188=(cj1*sj2);
IkReal x2189=((1.0)*x2178);
IkReal x2190=((1.0)*x2177);
IkReal x2191=(cj3*x2177);
IkReal x2192=(gconst7*x2177);
IkReal x2193=(x2178*x2187);
evalcond[0]=((((-1.0)*gconst8*r20*x2190))+(((-1.0)*r22*x2189))+((r21*x2192)));
evalcond[1]=(sj0+(((-1.0)*r02*x2189))+(((-1.0)*gconst8*r00*x2190))+((r01*x2192)));
evalcond[2]=((((-1.0)*gconst8*r10*x2190))+(((-1.0)*x2186))+((r11*x2192))+(((-1.0)*r12*x2189)));
evalcond[3]=(((r22*x2191))+((r21*x2178*x2182))+x2185+x2188+((r21*x2187))+((r20*x2179))+(((-1.0)*r20*x2180*x2189)));
evalcond[4]=((((-1.0)*r22*sj3*x2190))+x2183+(((-1.0)*x2184))+((r20*x2182))+((r20*x2193))+((r21*x2180))+(((-1.0)*r21*x2179*x2189)));
evalcond[5]=((((-1.0)*r02*sj3*x2190))+(((-1.0)*r01*x2179*x2189))+((cj0*x2185))+((cj0*x2188))+((r01*x2180))+((r00*x2193))+((r00*x2182)));
evalcond[6]=((((-1.0)*r00*x2180*x2189))+((r00*x2179))+((cj0*x2184))+(((-1.0)*x2183*x2186))+((r02*x2191))+((r01*x2178*x2182))+((r01*x2187)));
evalcond[7]=((((-1.0)*r12*sj3*x2190))+((sj0*x2188))+(((-1.0)*r11*x2179*x2189))+((sj1*x2181))+((r11*x2180))+((r10*x2193))+((r10*x2182)));
evalcond[8]=(((cj1*x2181))+((r11*x2178*x2182))+(((-1.0)*r10*x2180*x2189))+((r10*x2179))+((r12*x2191))+((r11*x2187))+(((-1.0)*sj0*x2183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2194 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst8*r20*sj0))+((gconst7*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2194.valid){
continue;
}
CheckValue<IkReal> x2195=IKPowWithIntegerCheck(IKsign((((gconst7*r10))+((gconst8*r11)))),-1);
if(!x2195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2194.value)+(((1.5707963267949)*(x2195.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2196=IKsin(j4);
IkReal x2197=IKcos(j4);
IkReal x2198=(gconst7*sj3);
IkReal x2199=(cj3*gconst8);
IkReal x2200=(cj2*sj0);
IkReal x2201=(cj3*gconst7);
IkReal x2202=(sj1*sj2);
IkReal x2203=(cj1*cj2);
IkReal x2204=(cj2*sj1);
IkReal x2205=((1.0)*cj0);
IkReal x2206=(gconst8*sj3);
IkReal x2207=(cj1*sj2);
IkReal x2208=((1.0)*x2197);
IkReal x2209=((1.0)*x2196);
IkReal x2210=(cj3*x2196);
IkReal x2211=(gconst7*x2196);
IkReal x2212=(x2197*x2206);
evalcond[0]=((((-1.0)*gconst8*r20*x2209))+(((-1.0)*r22*x2208))+((r21*x2211)));
evalcond[1]=(((r01*x2211))+sj0+(((-1.0)*gconst8*r00*x2209))+(((-1.0)*r02*x2208)));
evalcond[2]=((((-1.0)*gconst8*r10*x2209))+(((-1.0)*x2205))+(((-1.0)*r12*x2208))+((r11*x2211)));
evalcond[3]=(x2204+x2207+(((-1.0)*r20*x2199*x2208))+((r20*x2198))+((r21*x2197*x2201))+((r21*x2206))+((r22*x2210)));
evalcond[4]=((((-1.0)*x2203))+((r20*x2212))+x2202+((r20*x2201))+((r21*x2199))+(((-1.0)*r21*x2198*x2208))+(((-1.0)*r22*sj3*x2209)));
evalcond[5]=(((r00*x2201))+((r00*x2212))+(((-1.0)*r02*sj3*x2209))+((cj0*x2204))+((cj0*x2207))+(((-1.0)*r01*x2198*x2208))+((r01*x2199)));
evalcond[6]=((((-1.0)*r00*x2199*x2208))+((r01*x2206))+((r01*x2197*x2201))+(((-1.0)*x2202*x2205))+((cj0*x2203))+((r00*x2198))+((r02*x2210)));
evalcond[7]=((((-1.0)*r11*x2198*x2208))+(((-1.0)*r12*sj3*x2209))+((r10*x2201))+((sj1*x2200))+((r11*x2199))+((r10*x2212))+((sj0*x2207)));
evalcond[8]=((((-1.0)*r10*x2199*x2208))+((r12*x2210))+((cj1*x2200))+((r11*x2206))+((r10*x2198))+((r11*x2197*x2201))+(((-1.0)*sj0*x2202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2214 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2214)==0){
continue;
}
IkReal x2213=pow(x2214,-0.5);
CheckValue<IkReal> x2215 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2215.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x2215.value))));
IkReal gconst10=((1.0)*r01*x2213);
IkReal gconst11=((-1.0)*r00*x2213);
CheckValue<IkReal> x2216 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2216.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2216.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2219 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2219.valid){
continue;
}
IkReal x2217=((1.0)*(x2219.value));
IkReal x2218=x2213;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2217)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2217)));
IkReal gconst10=((1.0)*r01*x2218);
IkReal gconst11=((-1.0)*r00*x2218);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x2222 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2222.valid){
continue;
}
IkReal x2220=((1.0)*(x2222.value));
IkReal x2221=x2213;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2220)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2220)));
IkReal gconst10=((1.0)*r01*x2221);
IkReal gconst11=((-1.0)*r00*x2221);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2225 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2225.valid){
continue;
}
IkReal x2223=((1.0)*(x2225.value));
IkReal x2224=x2213;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2223)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2223)));
IkReal gconst10=((1.0)*r01*x2224);
IkReal gconst11=((-1.0)*r00*x2224);
IkReal x2226=r02*r02;
IkReal x2227=(r12*sj0);
IkReal x2228=x2213;
IkReal x2229=(cj0*x2228);
j4eval[0]=((IKabs((x2227+((cj0*r02)))))+(IKabs((((x2226*x2229))+((r02*x2227*x2228))+(((-1.0)*x2229))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2230=((1.0)*gconst11);
CheckValue<IkReal> x2231=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2230))+(((-1.0)*gconst10*r20)))),-1);
if(!x2231.valid){
continue;
}
CheckValue<IkReal> x2232 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x2230))+((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*r10*sj0*x2230)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2231.value)))+(x2232.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2233=IKsin(j4);
IkReal x2234=IKcos(j4);
IkReal x2235=(gconst10*sj3);
IkReal x2236=(cj3*r10);
IkReal x2237=(gconst11*r20);
IkReal x2238=(gconst11*sj3);
IkReal x2239=(cj3*gconst11);
IkReal x2240=(sj1*sj2);
IkReal x2241=(cj1*cj2);
IkReal x2242=(cj2*sj1);
IkReal x2243=(cj1*sj2);
IkReal x2244=(cj3*gconst10);
IkReal x2245=((1.0)*cj0);
IkReal x2246=((1.0)*x2234);
IkReal x2247=((1.0)*x2233);
IkReal x2248=(cj3*x2233);
IkReal x2249=(gconst10*x2233);
IkReal x2250=(x2234*x2244);
evalcond[0]=((((-1.0)*x2237*x2247))+(((-1.0)*r22*x2246))+((r21*x2249)));
evalcond[1]=(sj0+(((-1.0)*r02*x2246))+(((-1.0)*gconst11*r00*x2247))+((r01*x2249)));
evalcond[2]=((((-1.0)*gconst11*r10*x2247))+((r11*x2249))+(((-1.0)*x2245))+(((-1.0)*r12*x2246)));
evalcond[3]=(x2242+x2243+((r21*x2238))+(((-1.0)*cj3*x2237*x2246))+((r20*x2235))+((r21*x2250))+((r22*x2248)));
evalcond[4]=(x2240+(((-1.0)*x2241))+((r21*x2239))+((r20*x2244))+(((-1.0)*r22*sj3*x2247))+((sj3*x2234*x2237))+(((-1.0)*r21*x2235*x2246)));
evalcond[5]=((((-1.0)*r01*x2235*x2246))+(((-1.0)*r02*sj3*x2247))+((r00*x2244))+((r00*x2234*x2238))+((r01*x2239))+((cj0*x2243))+((cj0*x2242)));
evalcond[6]=((((-1.0)*r00*x2239*x2246))+(((-1.0)*x2240*x2245))+((r01*x2250))+((r01*x2238))+((r00*x2235))+((r02*x2248))+((cj0*x2241)));
evalcond[7]=((((-1.0)*r11*x2235*x2246))+(((-1.0)*r12*sj3*x2247))+((r10*x2234*x2238))+((gconst10*x2236))+((sj0*x2243))+((sj0*x2242))+((r11*x2239)));
evalcond[8]=((((-1.0)*gconst11*x2236*x2246))+((r10*x2235))+((sj0*x2241))+(((-1.0)*sj0*x2240))+((r11*x2238))+((r12*x2248))+((r11*x2250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2251 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst11*r20))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2251.valid){
continue;
}
CheckValue<IkReal> x2252=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x2252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2251.value)+(((1.5707963267949)*(x2252.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2253=IKsin(j4);
IkReal x2254=IKcos(j4);
IkReal x2255=(gconst10*sj3);
IkReal x2256=(cj3*r10);
IkReal x2257=(gconst11*r20);
IkReal x2258=(gconst11*sj3);
IkReal x2259=(cj3*gconst11);
IkReal x2260=(sj1*sj2);
IkReal x2261=(cj1*cj2);
IkReal x2262=(cj2*sj1);
IkReal x2263=(cj1*sj2);
IkReal x2264=(cj3*gconst10);
IkReal x2265=((1.0)*cj0);
IkReal x2266=((1.0)*x2254);
IkReal x2267=((1.0)*x2253);
IkReal x2268=(cj3*x2253);
IkReal x2269=(gconst10*x2253);
IkReal x2270=(x2254*x2264);
evalcond[0]=(((r21*x2269))+(((-1.0)*x2257*x2267))+(((-1.0)*r22*x2266)));
evalcond[1]=(((r01*x2269))+sj0+(((-1.0)*r02*x2266))+(((-1.0)*gconst11*r00*x2267)));
evalcond[2]=(((r11*x2269))+(((-1.0)*gconst11*r10*x2267))+(((-1.0)*x2265))+(((-1.0)*r12*x2266)));
evalcond[3]=(((r21*x2270))+x2262+x2263+((r22*x2268))+((r20*x2255))+(((-1.0)*cj3*x2257*x2266))+((r21*x2258)));
evalcond[4]=(((sj3*x2254*x2257))+x2260+(((-1.0)*r21*x2255*x2266))+((r20*x2264))+(((-1.0)*r22*sj3*x2267))+((r21*x2259))+(((-1.0)*x2261)));
evalcond[5]=(((r00*x2264))+(((-1.0)*r02*sj3*x2267))+((r00*x2254*x2258))+((cj0*x2263))+((cj0*x2262))+(((-1.0)*r01*x2255*x2266))+((r01*x2259)));
evalcond[6]=(((r01*x2270))+(((-1.0)*r00*x2259*x2266))+(((-1.0)*x2260*x2265))+((cj0*x2261))+((r02*x2268))+((r00*x2255))+((r01*x2258)));
evalcond[7]=((((-1.0)*r11*x2255*x2266))+((sj0*x2263))+((sj0*x2262))+(((-1.0)*r12*sj3*x2267))+((gconst10*x2256))+((r10*x2254*x2258))+((r11*x2259)));
evalcond[8]=(((r10*x2255))+((sj0*x2261))+(((-1.0)*gconst11*x2256*x2266))+(((-1.0)*sj0*x2260))+((r11*x2270))+((r12*x2268))+((r11*x2258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2271=IKPowWithIntegerCheck(IKsign((((gconst10*r10))+((gconst11*r11)))),-1);
if(!x2271.valid){
continue;
}
CheckValue<IkReal> x2272 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst11*r20*sj0))+((gconst10*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2271.value)))+(x2272.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2273=IKsin(j4);
IkReal x2274=IKcos(j4);
IkReal x2275=(gconst10*sj3);
IkReal x2276=(cj3*r10);
IkReal x2277=(gconst11*r20);
IkReal x2278=(gconst11*sj3);
IkReal x2279=(cj3*gconst11);
IkReal x2280=(sj1*sj2);
IkReal x2281=(cj1*cj2);
IkReal x2282=(cj2*sj1);
IkReal x2283=(cj1*sj2);
IkReal x2284=(cj3*gconst10);
IkReal x2285=((1.0)*cj0);
IkReal x2286=((1.0)*x2274);
IkReal x2287=((1.0)*x2273);
IkReal x2288=(cj3*x2273);
IkReal x2289=(gconst10*x2273);
IkReal x2290=(x2274*x2284);
evalcond[0]=((((-1.0)*x2277*x2287))+((r21*x2289))+(((-1.0)*r22*x2286)));
evalcond[1]=((((-1.0)*r02*x2286))+sj0+(((-1.0)*gconst11*r00*x2287))+((r01*x2289)));
evalcond[2]=(((r11*x2289))+(((-1.0)*x2285))+(((-1.0)*r12*x2286))+(((-1.0)*gconst11*r10*x2287)));
evalcond[3]=(((r21*x2278))+x2282+x2283+((r21*x2290))+(((-1.0)*cj3*x2277*x2286))+((r20*x2275))+((r22*x2288)));
evalcond[4]=((((-1.0)*r22*sj3*x2287))+((r21*x2279))+x2280+((r20*x2284))+((sj3*x2274*x2277))+(((-1.0)*x2281))+(((-1.0)*r21*x2275*x2286)));
evalcond[5]=(((cj0*x2283))+((cj0*x2282))+((r01*x2279))+(((-1.0)*r01*x2275*x2286))+((r00*x2284))+(((-1.0)*r02*sj3*x2287))+((r00*x2274*x2278)));
evalcond[6]=(((cj0*x2281))+((r01*x2278))+((r00*x2275))+(((-1.0)*x2280*x2285))+(((-1.0)*r00*x2279*x2286))+((r01*x2290))+((r02*x2288)));
evalcond[7]=(((gconst10*x2276))+(((-1.0)*r12*sj3*x2287))+(((-1.0)*r11*x2275*x2286))+((sj0*x2283))+((sj0*x2282))+((r11*x2279))+((r10*x2274*x2278)));
evalcond[8]=(((r12*x2288))+((sj0*x2281))+((r10*x2275))+((r11*x2278))+(((-1.0)*gconst11*x2276*x2286))+(((-1.0)*sj0*x2280))+((r11*x2290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2291=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2291;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2291);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2292=((1.0)*cj5);
IkReal x2293=((((-1.0)*r21*x2292))+(((-1.0)*r20*sj5)));
j4eval[0]=x2293;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x2292)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2293);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2294=cj5*cj5;
IkReal x2295=(cj3*r01);
IkReal x2296=(cj5*sj5);
IkReal x2297=((1.0)*cj3);
IkReal x2298=(((cj3*r00*r21*x2296))+(((-1.0)*r21*x2295))+((r20*x2295*x2296))+((r21*x2294*x2295))+(((-1.0)*r02*r22*x2297))+(((-1.0)*r00*r20*x2294*x2297)));
j4eval[0]=x2298;
j4eval[1]=IKsign(x2298);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2299=cj5*cj5;
IkReal x2300=(cj3*r20);
IkReal x2301=(r21*sj3);
IkReal x2302=((1.0)*cj3);
IkReal x2303=(r01*r21);
IkReal x2304=(r01*sj3);
IkReal x2305=(r00*sj5);
IkReal x2306=(cj5*r01*sj5);
IkReal x2307=((1.0)*x2299);
CheckValue<IkReal> x2308 = IKatan2WithCheck(IkReal((((cj5*r22*x2304))+((r22*sj3*x2305)))),IkReal(((((-1.0)*r00*x2301*x2307))+(((-1.0)*cj5*r20*sj3*x2305))+((x2301*x2306))+((r00*x2301))+(((-1.0)*r20*x2304*x2307)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2308.valid){
continue;
}
CheckValue<IkReal> x2309=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x2302))+((x2300*x2306))+((cj3*cj5*r21*x2305))+(((-1.0)*r00*x2300*x2307))+((cj3*x2299*x2303))+(((-1.0)*x2302*x2303)))),-1);
if(!x2309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2308.value)+(((1.5707963267949)*(x2309.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2310=IKsin(j4);
IkReal x2311=IKcos(j4);
IkReal x2312=(cj2*sj1);
IkReal x2313=(cj1*sj2);
IkReal x2314=(r11*sj5);
IkReal x2315=(cj5*r10);
IkReal x2316=(sj1*sj2);
IkReal x2317=(cj5*r01);
IkReal x2318=(cj5*r00);
IkReal x2319=(cj3*sj5);
IkReal x2320=(r21*sj5);
IkReal x2321=(cj1*cj2);
IkReal x2322=(cj5*sj3);
IkReal x2323=(sj3*sj5);
IkReal x2324=(r01*sj5);
IkReal x2325=(cj3*cj5);
IkReal x2326=(cj5*r20);
IkReal x2327=((1.0)*x2311);
IkReal x2328=((1.0)*x2310);
IkReal x2329=(cj3*x2311);
IkReal x2330=(sj3*x2311);
IkReal x2331=(cj3*x2310);
IkReal x2332=(x2312+x2313);
evalcond[0]=((((-1.0)*r22*x2327))+(((-1.0)*x2326*x2328))+((x2310*x2320)));
evalcond[1]=((((-1.0)*x2315*x2328))+(((-1.0)*r12*x2327))+((x2310*x2314)));
evalcond[2]=((1.0)+(((-1.0)*x2318*x2328))+(((-1.0)*r02*x2327))+((x2310*x2324)));
evalcond[3]=(((r02*x2331))+((sj3*x2317))+((r00*x2323))+((r01*x2311*x2319))+(((-1.0)*cj3*x2318*x2327)));
evalcond[4]=(((cj3*x2317))+((x2318*x2330))+((r00*x2319))+(((-1.0)*r01*x2323*x2327))+(((-1.0)*r02*sj3*x2328)));
evalcond[5]=(x2332+((r21*x2322))+((r22*x2331))+(((-1.0)*r20*x2325*x2327))+((r21*x2311*x2319))+((r20*x2323)));
evalcond[6]=(((x2315*x2330))+((r10*x2319))+x2332+(((-1.0)*sj3*x2314*x2327))+((r11*x2325))+(((-1.0)*r12*sj3*x2328)));
evalcond[7]=(((r10*x2323))+(((-1.0)*x2316))+x2321+((r12*x2331))+((r11*x2322))+(((-1.0)*cj3*x2315*x2327))+((x2314*x2329)));
evalcond[8]=(x2316+((r21*x2325))+((r20*x2311*x2322))+((r20*x2319))+(((-1.0)*r22*sj3*x2328))+(((-1.0)*sj3*x2320*x2327))+(((-1.0)*x2321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2333=((1.0)*cj5);
CheckValue<IkReal> x2334=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2333))+(((-1.0)*r20*sj5)))),-1);
if(!x2334.valid){
continue;
}
CheckValue<IkReal> x2335 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2333))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2335.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2334.value)))+(x2335.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2336=IKsin(j4);
IkReal x2337=IKcos(j4);
IkReal x2338=(cj2*sj1);
IkReal x2339=(cj1*sj2);
IkReal x2340=(r11*sj5);
IkReal x2341=(cj5*r10);
IkReal x2342=(sj1*sj2);
IkReal x2343=(cj5*r01);
IkReal x2344=(cj5*r00);
IkReal x2345=(cj3*sj5);
IkReal x2346=(r21*sj5);
IkReal x2347=(cj1*cj2);
IkReal x2348=(cj5*sj3);
IkReal x2349=(sj3*sj5);
IkReal x2350=(r01*sj5);
IkReal x2351=(cj3*cj5);
IkReal x2352=(cj5*r20);
IkReal x2353=((1.0)*x2337);
IkReal x2354=((1.0)*x2336);
IkReal x2355=(cj3*x2337);
IkReal x2356=(sj3*x2337);
IkReal x2357=(cj3*x2336);
IkReal x2358=(x2338+x2339);
evalcond[0]=((((-1.0)*x2352*x2354))+(((-1.0)*r22*x2353))+((x2336*x2346)));
evalcond[1]=((((-1.0)*x2341*x2354))+(((-1.0)*r12*x2353))+((x2336*x2340)));
evalcond[2]=((1.0)+((x2336*x2350))+(((-1.0)*x2344*x2354))+(((-1.0)*r02*x2353)));
evalcond[3]=(((r01*x2337*x2345))+((r00*x2349))+(((-1.0)*cj3*x2344*x2353))+((sj3*x2343))+((r02*x2357)));
evalcond[4]=(((r00*x2345))+((cj3*x2343))+(((-1.0)*r01*x2349*x2353))+((x2344*x2356))+(((-1.0)*r02*sj3*x2354)));
evalcond[5]=(x2358+((r22*x2357))+((r21*x2337*x2345))+((r20*x2349))+((r21*x2348))+(((-1.0)*r20*x2351*x2353)));
evalcond[6]=(((x2341*x2356))+((r10*x2345))+(((-1.0)*sj3*x2340*x2353))+x2358+((r11*x2351))+(((-1.0)*r12*sj3*x2354)));
evalcond[7]=(((r10*x2349))+x2347+((x2340*x2355))+(((-1.0)*x2342))+((r12*x2357))+((r11*x2348))+(((-1.0)*cj3*x2341*x2353)));
evalcond[8]=(x2342+(((-1.0)*x2347))+((r20*x2345))+((r20*x2337*x2348))+(((-1.0)*r22*sj3*x2354))+((r21*x2351))+(((-1.0)*sj3*x2346*x2353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2359 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2359.valid){
continue;
}
CheckValue<IkReal> x2360=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2359.value)+(((1.5707963267949)*(x2360.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2361=IKsin(j4);
IkReal x2362=IKcos(j4);
IkReal x2363=(cj2*sj1);
IkReal x2364=(cj1*sj2);
IkReal x2365=(r11*sj5);
IkReal x2366=(cj5*r10);
IkReal x2367=(sj1*sj2);
IkReal x2368=(cj5*r01);
IkReal x2369=(cj5*r00);
IkReal x2370=(cj3*sj5);
IkReal x2371=(r21*sj5);
IkReal x2372=(cj1*cj2);
IkReal x2373=(cj5*sj3);
IkReal x2374=(sj3*sj5);
IkReal x2375=(r01*sj5);
IkReal x2376=(cj3*cj5);
IkReal x2377=(cj5*r20);
IkReal x2378=((1.0)*x2362);
IkReal x2379=((1.0)*x2361);
IkReal x2380=(cj3*x2362);
IkReal x2381=(sj3*x2362);
IkReal x2382=(cj3*x2361);
IkReal x2383=(x2364+x2363);
evalcond[0]=((((-1.0)*x2377*x2379))+((x2361*x2371))+(((-1.0)*r22*x2378)));
evalcond[1]=(((x2361*x2365))+(((-1.0)*r12*x2378))+(((-1.0)*x2366*x2379)));
evalcond[2]=((1.0)+(((-1.0)*r02*x2378))+(((-1.0)*x2369*x2379))+((x2361*x2375)));
evalcond[3]=((((-1.0)*cj3*x2369*x2378))+((sj3*x2368))+((r02*x2382))+((r00*x2374))+((r01*x2362*x2370)));
evalcond[4]=((((-1.0)*r01*x2374*x2378))+(((-1.0)*r02*sj3*x2379))+((x2369*x2381))+((cj3*x2368))+((r00*x2370)));
evalcond[5]=(((r20*x2374))+x2383+(((-1.0)*r20*x2376*x2378))+((r21*x2362*x2370))+((r22*x2382))+((r21*x2373)));
evalcond[6]=((((-1.0)*sj3*x2365*x2378))+x2383+(((-1.0)*r12*sj3*x2379))+((r10*x2370))+((x2366*x2381))+((r11*x2376)));
evalcond[7]=(x2372+((r10*x2374))+((x2365*x2380))+(((-1.0)*x2367))+(((-1.0)*cj3*x2366*x2378))+((r12*x2382))+((r11*x2373)));
evalcond[8]=(((r20*x2370))+(((-1.0)*r22*sj3*x2379))+x2367+(((-1.0)*x2372))+(((-1.0)*sj3*x2371*x2378))+((r20*x2362*x2373))+((r21*x2376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2384=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2384;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2384);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2385=((1.0)*cj5);
IkReal x2386=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2385)));
j4eval[0]=x2386;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2385))))));
j4eval[2]=IKsign(x2386);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2387=cj5*cj5;
IkReal x2388=(cj3*r01);
IkReal x2389=(cj5*sj5);
IkReal x2390=((1.0)*cj3);
IkReal x2391=((((-1.0)*r00*r20*x2387*x2390))+((r20*x2388*x2389))+(((-1.0)*r21*x2388))+((r21*x2387*x2388))+(((-1.0)*r02*r22*x2390))+((cj3*r00*r21*x2389)));
j4eval[0]=x2391;
j4eval[1]=IKsign(x2391);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2392=cj5*cj5;
IkReal x2393=(cj3*r20);
IkReal x2394=(r21*sj3);
IkReal x2395=((1.0)*cj3);
IkReal x2396=(r01*r21);
IkReal x2397=(r01*sj3);
IkReal x2398=(r00*sj5);
IkReal x2399=(cj5*r01*sj5);
IkReal x2400=((1.0)*x2392);
CheckValue<IkReal> x2401 = IKatan2WithCheck(IkReal((((cj5*r22*x2397))+((r22*sj3*x2398)))),IkReal(((((-1.0)*r20*x2397*x2400))+((r00*x2394))+((x2394*x2399))+(((-1.0)*cj5*r20*sj3*x2398))+(((-1.0)*r00*x2394*x2400)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2401.valid){
continue;
}
CheckValue<IkReal> x2402=IKPowWithIntegerCheck(IKsign((((cj3*cj5*r21*x2398))+((cj3*x2392*x2396))+((x2393*x2399))+(((-1.0)*r00*x2393*x2400))+(((-1.0)*r02*r22*x2395))+(((-1.0)*x2395*x2396)))),-1);
if(!x2402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2401.value)+(((1.5707963267949)*(x2402.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2403=IKsin(j4);
IkReal x2404=IKcos(j4);
IkReal x2405=(sj1*sj2);
IkReal x2406=(r11*sj5);
IkReal x2407=(cj5*r10);
IkReal x2408=(cj5*r01);
IkReal x2409=(cj5*r00);
IkReal x2410=((1.0)*cj1);
IkReal x2411=(cj3*sj5);
IkReal x2412=(r21*sj5);
IkReal x2413=(cj5*sj3);
IkReal x2414=(sj3*sj5);
IkReal x2415=(cj2*sj1);
IkReal x2416=(r01*sj5);
IkReal x2417=(cj3*cj5);
IkReal x2418=(cj5*r20);
IkReal x2419=(cj2*x2410);
IkReal x2420=((1.0)*x2404);
IkReal x2421=((1.0)*x2403);
IkReal x2422=(cj3*x2404);
IkReal x2423=(sj3*x2404);
IkReal x2424=(cj3*x2403);
evalcond[0]=((((-1.0)*r22*x2420))+(((-1.0)*x2418*x2421))+((x2403*x2412)));
evalcond[1]=(((x2403*x2406))+(((-1.0)*r12*x2420))+(((-1.0)*x2407*x2421)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x2420))+(((-1.0)*x2409*x2421))+((x2403*x2416)));
evalcond[3]=(((r01*x2404*x2411))+((r00*x2414))+(((-1.0)*cj3*x2409*x2420))+((sj3*x2408))+((r02*x2424)));
evalcond[4]=((((-1.0)*r02*sj3*x2421))+((r00*x2411))+(((-1.0)*r01*x2414*x2420))+((cj3*x2408))+((x2409*x2423)));
evalcond[5]=(((r22*x2424))+x2415+((r21*x2413))+((r21*x2404*x2411))+((cj1*sj2))+((r20*x2414))+(((-1.0)*r20*x2417*x2420)));
evalcond[6]=(x2405+((r11*x2413))+((r10*x2414))+((x2406*x2422))+(((-1.0)*cj3*x2407*x2420))+(((-1.0)*x2419))+((r12*x2424)));
evalcond[7]=(x2405+((r21*x2417))+(((-1.0)*sj3*x2412*x2420))+(((-1.0)*r22*sj3*x2421))+(((-1.0)*x2419))+((r20*x2411))+((r20*x2404*x2413)));
evalcond[8]=(((r11*x2417))+((r10*x2411))+((x2407*x2423))+(((-1.0)*x2415))+(((-1.0)*sj3*x2406*x2420))+(((-1.0)*r12*sj3*x2421))+(((-1.0)*sj2*x2410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2425=((1.0)*cj5);
CheckValue<IkReal> x2426=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2425)))),-1);
if(!x2426.valid){
continue;
}
CheckValue<IkReal> x2427 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2425)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2427.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2426.value)))+(x2427.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2428=IKsin(j4);
IkReal x2429=IKcos(j4);
IkReal x2430=(sj1*sj2);
IkReal x2431=(r11*sj5);
IkReal x2432=(cj5*r10);
IkReal x2433=(cj5*r01);
IkReal x2434=(cj5*r00);
IkReal x2435=((1.0)*cj1);
IkReal x2436=(cj3*sj5);
IkReal x2437=(r21*sj5);
IkReal x2438=(cj5*sj3);
IkReal x2439=(sj3*sj5);
IkReal x2440=(cj2*sj1);
IkReal x2441=(r01*sj5);
IkReal x2442=(cj3*cj5);
IkReal x2443=(cj5*r20);
IkReal x2444=(cj2*x2435);
IkReal x2445=((1.0)*x2429);
IkReal x2446=((1.0)*x2428);
IkReal x2447=(cj3*x2429);
IkReal x2448=(sj3*x2429);
IkReal x2449=(cj3*x2428);
evalcond[0]=((((-1.0)*x2443*x2446))+((x2428*x2437))+(((-1.0)*r22*x2445)));
evalcond[1]=(((x2428*x2431))+(((-1.0)*r12*x2445))+(((-1.0)*x2432*x2446)));
evalcond[2]=((-1.0)+((x2428*x2441))+(((-1.0)*x2434*x2446))+(((-1.0)*r02*x2445)));
evalcond[3]=(((r02*x2449))+((r00*x2439))+(((-1.0)*cj3*x2434*x2445))+((sj3*x2433))+((r01*x2429*x2436)));
evalcond[4]=(((r00*x2436))+(((-1.0)*r02*sj3*x2446))+(((-1.0)*r01*x2439*x2445))+((cj3*x2433))+((x2434*x2448)));
evalcond[5]=(x2440+((r22*x2449))+((r20*x2439))+((cj1*sj2))+(((-1.0)*r20*x2442*x2445))+((r21*x2429*x2436))+((r21*x2438)));
evalcond[6]=(x2430+((r11*x2438))+((x2431*x2447))+(((-1.0)*cj3*x2432*x2445))+((r12*x2449))+(((-1.0)*x2444))+((r10*x2439)));
evalcond[7]=(x2430+((r20*x2436))+(((-1.0)*r22*sj3*x2446))+(((-1.0)*sj3*x2437*x2445))+(((-1.0)*x2444))+((r20*x2429*x2438))+((r21*x2442)));
evalcond[8]=(((x2432*x2448))+(((-1.0)*sj2*x2435))+(((-1.0)*x2440))+(((-1.0)*r12*sj3*x2446))+((r11*x2442))+(((-1.0)*sj3*x2431*x2445))+((r10*x2436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2450=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2450.valid){
continue;
}
CheckValue<IkReal> x2451 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2450.value)))+(x2451.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2452=IKsin(j4);
IkReal x2453=IKcos(j4);
IkReal x2454=(sj1*sj2);
IkReal x2455=(r11*sj5);
IkReal x2456=(cj5*r10);
IkReal x2457=(cj5*r01);
IkReal x2458=(cj5*r00);
IkReal x2459=((1.0)*cj1);
IkReal x2460=(cj3*sj5);
IkReal x2461=(r21*sj5);
IkReal x2462=(cj5*sj3);
IkReal x2463=(sj3*sj5);
IkReal x2464=(cj2*sj1);
IkReal x2465=(r01*sj5);
IkReal x2466=(cj3*cj5);
IkReal x2467=(cj5*r20);
IkReal x2468=(cj2*x2459);
IkReal x2469=((1.0)*x2453);
IkReal x2470=((1.0)*x2452);
IkReal x2471=(cj3*x2453);
IkReal x2472=(sj3*x2453);
IkReal x2473=(cj3*x2452);
evalcond[0]=((((-1.0)*r22*x2469))+(((-1.0)*x2467*x2470))+((x2452*x2461)));
evalcond[1]=(((x2452*x2455))+(((-1.0)*r12*x2469))+(((-1.0)*x2456*x2470)));
evalcond[2]=((-1.0)+((x2452*x2465))+(((-1.0)*x2458*x2470))+(((-1.0)*r02*x2469)));
evalcond[3]=(((sj3*x2457))+((r01*x2453*x2460))+((r02*x2473))+(((-1.0)*cj3*x2458*x2469))+((r00*x2463)));
evalcond[4]=(((cj3*x2457))+(((-1.0)*r01*x2463*x2469))+((x2458*x2472))+(((-1.0)*r02*sj3*x2470))+((r00*x2460)));
evalcond[5]=(x2464+((r21*x2453*x2460))+((r20*x2463))+((cj1*sj2))+((r21*x2462))+(((-1.0)*r20*x2466*x2469))+((r22*x2473)));
evalcond[6]=(((r12*x2473))+x2454+(((-1.0)*cj3*x2456*x2469))+((r11*x2462))+(((-1.0)*x2468))+((x2455*x2471))+((r10*x2463)));
evalcond[7]=((((-1.0)*r22*sj3*x2470))+x2454+((r20*x2453*x2462))+((r20*x2460))+((r21*x2466))+(((-1.0)*x2468))+(((-1.0)*sj3*x2461*x2469)));
evalcond[8]=(((x2456*x2472))+(((-1.0)*x2464))+((r11*x2466))+(((-1.0)*r12*sj3*x2470))+(((-1.0)*sj3*x2455*x2469))+((r10*x2460))+(((-1.0)*sj2*x2459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2475 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2475)==0){
continue;
}
IkReal x2474=pow(x2475,-0.5);
CheckValue<IkReal> x2476 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2476.valid){
continue;
}
IkReal gconst12=((-1.0)*(x2476.value));
IkReal gconst13=((-1.0)*r11*x2474);
IkReal gconst14=(r10*x2474);
CheckValue<IkReal> x2477 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2477.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2477.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2480 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2480.valid){
continue;
}
IkReal x2478=((-1.0)*(x2480.value));
IkReal x2479=x2474;
sj5=gconst13;
cj5=gconst14;
j5=x2478;
IkReal gconst12=x2478;
IkReal gconst13=((-1.0)*r11*x2479);
IkReal gconst14=(r10*x2479);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2481=((1.0)*gconst14);
CheckValue<IkReal> x2482=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2481))+(((-1.0)*gconst13*r20)))),-1);
if(!x2482.valid){
continue;
}
CheckValue<IkReal> x2483 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2481))+(((-1.0)*cj0*r00*x2481))+((cj0*gconst13*r01))+((gconst13*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2482.value)))+(x2483.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2484=IKsin(j4);
IkReal x2485=IKcos(j4);
IkReal x2486=((1.0)*r22);
IkReal x2487=((1.0)*r12);
IkReal x2488=(cj2*sj0);
IkReal x2489=(gconst13*sj3);
IkReal x2490=(gconst13*r01);
IkReal x2491=(sj1*sj2);
IkReal x2492=(gconst14*sj3);
IkReal x2493=(cj1*cj2);
IkReal x2494=((1.0)*gconst14);
IkReal x2495=(cj3*gconst13);
IkReal x2496=(cj3*gconst14);
IkReal x2497=(cj2*sj1);
IkReal x2498=((1.0)*r02);
IkReal x2499=(cj1*sj2);
IkReal x2500=((1.0)*cj0);
IkReal x2501=(sj3*x2484);
IkReal x2502=(cj3*x2485);
IkReal x2503=(cj3*x2484);
IkReal x2504=(gconst13*x2484);
IkReal x2505=((1.0)*x2485);
evalcond[0]=((((-1.0)*r20*x2484*x2494))+(((-1.0)*x2485*x2486))+((r21*x2504)));
evalcond[1]=(sj0+(((-1.0)*r00*x2484*x2494))+((x2484*x2490))+(((-1.0)*x2485*x2498)));
evalcond[2]=((((-1.0)*x2500))+(((-1.0)*r10*x2484*x2494))+(((-1.0)*x2485*x2487))+((r11*x2504)));
evalcond[3]=(((r21*x2485*x2495))+x2499+x2497+((r22*x2503))+(((-1.0)*r20*x2494*x2502))+((r21*x2492))+((r20*x2489)));
evalcond[4]=((((-1.0)*r21*x2489*x2505))+x2491+(((-1.0)*x2493))+((r20*x2485*x2492))+(((-1.0)*x2486*x2501))+((r21*x2496))+((r20*x2495)));
evalcond[5]=(((r00*x2495))+(((-1.0)*x2498*x2501))+(((-1.0)*r01*x2489*x2505))+((r00*x2485*x2492))+((cj0*x2497))+((cj0*x2499))+((r01*x2496)));
evalcond[6]=(((r02*x2503))+((x2490*x2502))+(((-1.0)*r00*x2494*x2502))+((cj0*x2493))+(((-1.0)*x2491*x2500))+((r01*x2492))+((r00*x2489)));
evalcond[7]=(((r11*x2496))+(((-1.0)*x2487*x2501))+(((-1.0)*r11*x2489*x2505))+((r10*x2485*x2492))+((r10*x2495))+((sj1*x2488))+((sj0*x2499)));
evalcond[8]=(((cj1*x2488))+((r12*x2503))+(((-1.0)*r10*x2494*x2502))+((r11*x2492))+(((-1.0)*sj0*x2491))+((r10*x2489))+((r11*x2485*x2495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2506 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst13*r21))+(((-1.0)*cj0*gconst14*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2506.valid){
continue;
}
CheckValue<IkReal> x2507=IKPowWithIntegerCheck(IKsign((((gconst14*r01))+((gconst13*r00)))),-1);
if(!x2507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2506.value)+(((1.5707963267949)*(x2507.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2508=IKsin(j4);
IkReal x2509=IKcos(j4);
IkReal x2510=((1.0)*r22);
IkReal x2511=((1.0)*r12);
IkReal x2512=(cj2*sj0);
IkReal x2513=(gconst13*sj3);
IkReal x2514=(gconst13*r01);
IkReal x2515=(sj1*sj2);
IkReal x2516=(gconst14*sj3);
IkReal x2517=(cj1*cj2);
IkReal x2518=((1.0)*gconst14);
IkReal x2519=(cj3*gconst13);
IkReal x2520=(cj3*gconst14);
IkReal x2521=(cj2*sj1);
IkReal x2522=((1.0)*r02);
IkReal x2523=(cj1*sj2);
IkReal x2524=((1.0)*cj0);
IkReal x2525=(sj3*x2508);
IkReal x2526=(cj3*x2509);
IkReal x2527=(cj3*x2508);
IkReal x2528=(gconst13*x2508);
IkReal x2529=((1.0)*x2509);
evalcond[0]=((((-1.0)*x2509*x2510))+((r21*x2528))+(((-1.0)*r20*x2508*x2518)));
evalcond[1]=(sj0+(((-1.0)*x2509*x2522))+(((-1.0)*r00*x2508*x2518))+((x2508*x2514)));
evalcond[2]=((((-1.0)*r10*x2508*x2518))+((r11*x2528))+(((-1.0)*x2509*x2511))+(((-1.0)*x2524)));
evalcond[3]=(((r22*x2527))+x2521+x2523+((r21*x2516))+(((-1.0)*r20*x2518*x2526))+((r20*x2513))+((r21*x2509*x2519)));
evalcond[4]=(x2515+(((-1.0)*r21*x2513*x2529))+((r20*x2509*x2516))+(((-1.0)*x2517))+(((-1.0)*x2510*x2525))+((r21*x2520))+((r20*x2519)));
evalcond[5]=(((r00*x2509*x2516))+(((-1.0)*r01*x2513*x2529))+((r01*x2520))+(((-1.0)*x2522*x2525))+((cj0*x2523))+((cj0*x2521))+((r00*x2519)));
evalcond[6]=(((cj0*x2517))+((r02*x2527))+(((-1.0)*x2515*x2524))+((x2514*x2526))+((r01*x2516))+((r00*x2513))+(((-1.0)*r00*x2518*x2526)));
evalcond[7]=((((-1.0)*x2511*x2525))+((r10*x2519))+((r11*x2520))+((sj1*x2512))+(((-1.0)*r11*x2513*x2529))+((r10*x2509*x2516))+((sj0*x2523)));
evalcond[8]=(((r11*x2516))+((r10*x2513))+((r12*x2527))+((cj1*x2512))+((r11*x2509*x2519))+(((-1.0)*r10*x2518*x2526))+(((-1.0)*sj0*x2515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2531 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2531)==0){
continue;
}
IkReal x2530=pow(x2531,-0.5);
CheckValue<IkReal> x2532 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2532.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x2532.value))));
IkReal gconst16=((1.0)*r11*x2530);
IkReal gconst17=((-1.0)*r10*x2530);
CheckValue<IkReal> x2533 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2533.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2533.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2536 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2536.valid){
continue;
}
IkReal x2534=((1.0)*(x2536.value));
IkReal x2535=x2530;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2534)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2534)));
IkReal gconst16=((1.0)*r11*x2535);
IkReal gconst17=((-1.0)*r10*x2535);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2539 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2539.valid){
continue;
}
IkReal x2537=((1.0)*(x2539.value));
IkReal x2538=x2530;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2537)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2537)));
IkReal gconst16=((1.0)*r11*x2538);
IkReal gconst17=((-1.0)*r10*x2538);
IkReal x2540=r12*r12;
IkReal x2541=(cj0*r02);
IkReal x2542=x2530;
IkReal x2543=(sj0*x2542);
j4eval[0]=((IKabs(((((-1.0)*x2543))+((x2540*x2543))+((r12*x2541*x2542)))))+(IKabs((x2541+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x2546 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2546.valid){
continue;
}
IkReal x2544=((1.0)*(x2546.value));
IkReal x2545=x2530;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2544)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2544)));
IkReal gconst16=((1.0)*r11*x2545);
IkReal gconst17=((-1.0)*r10*x2545);
IkReal x2547=((1.0)*cj3);
CheckValue<IkReal> x2552=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x2552.valid){
continue;
}
IkReal x2548=x2552.value;
IkReal x2549=(cj3*x2548);
IkReal x2550=(x2547*x2548);
IkReal x2551=((((-1.0)*x2547*(r22*r22)))+(((-1.0)*x2550*(r10*r10)*(r20*r20)))+(((-1.0)*x2550*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x2549)));
j4eval[0]=x2551;
j4eval[1]=IKsign(x2551);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2553=r21*r21;
IkReal x2554=gconst16*gconst16;
IkReal x2555=r20*r20;
IkReal x2556=gconst17*gconst17;
IkReal x2557=(gconst16*r21);
IkReal x2558=(cj1*sj2);
IkReal x2559=(cj2*sj1);
IkReal x2560=(gconst17*r20);
IkReal x2561=(gconst16*sj3);
IkReal x2562=(r21*sj3);
IkReal x2563=((1.0)*cj3);
CheckValue<IkReal> x2564 = IKatan2WithCheck(IkReal((((r22*x2558))+((r22*x2559))+((gconst17*r22*x2562))+((r20*r22*x2561)))),IkReal((((r20*x2554*x2562))+(((-1.0)*x2558*x2560))+((gconst17*x2553*x2561))+((x2557*x2558))+((x2557*x2559))+(((-1.0)*x2559*x2560))+(((-1.0)*r20*x2556*x2562))+(((-1.0)*gconst17*x2555*x2561)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2564.valid){
continue;
}
CheckValue<IkReal> x2565=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2553*x2554*x2563))+(((-1.0)*x2555*x2556*x2563))+(((2.0)*cj3*x2557*x2560))+(((-1.0)*x2563*(r22*r22))))),-1);
if(!x2565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2564.value)+(((1.5707963267949)*(x2565.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2566=IKsin(j4);
IkReal x2567=IKcos(j4);
IkReal x2568=(cj3*gconst17);
IkReal x2569=(gconst16*r21);
IkReal x2570=(gconst17*sj3);
IkReal x2571=(gconst16*r20);
IkReal x2572=(sj1*sj2);
IkReal x2573=(cj1*cj2);
IkReal x2574=(gconst16*r10);
IkReal x2575=(cj2*sj1);
IkReal x2576=(gconst16*sj3);
IkReal x2577=(cj1*sj2);
IkReal x2578=((1.0)*cj0);
IkReal x2579=((1.0)*x2567);
IkReal x2580=(gconst16*x2566);
IkReal x2581=(cj3*x2567);
IkReal x2582=(cj3*x2566);
IkReal x2583=((1.0)*gconst17*x2566);
IkReal x2584=((1.0)*sj3*x2566);
evalcond[0]=((((-1.0)*r20*x2583))+((x2566*x2569))+(((-1.0)*r22*x2579)));
evalcond[1]=(((r01*x2580))+(((-1.0)*r00*x2583))+sj0+(((-1.0)*r02*x2579)));
evalcond[2]=((((-1.0)*r12*x2579))+((r11*x2580))+(((-1.0)*x2578))+(((-1.0)*r10*x2583)));
evalcond[3]=(((r21*x2570))+((r22*x2582))+x2577+x2575+((x2569*x2581))+((sj3*x2571))+(((-1.0)*r20*x2568*x2579)));
evalcond[4]=(x2572+((cj3*x2571))+(((-1.0)*x2573))+(((-1.0)*sj3*x2569*x2579))+((r20*x2567*x2570))+((r21*x2568))+(((-1.0)*r22*x2584)));
evalcond[5]=(((r01*x2568))+(((-1.0)*r02*x2584))+(((-1.0)*r01*x2576*x2579))+((r00*x2567*x2570))+((cj0*x2575))+((cj0*x2577))+((cj3*gconst16*r00)));
evalcond[6]=(((r01*x2570))+((r00*x2576))+((gconst16*r01*x2581))+(((-1.0)*x2572*x2578))+((cj0*x2573))+((r02*x2582))+(((-1.0)*r00*x2568*x2579)));
evalcond[7]=(((cj3*x2574))+(((-1.0)*r11*x2576*x2579))+((r10*x2567*x2570))+((r11*x2568))+((sj0*x2575))+((sj0*x2577))+(((-1.0)*r12*x2584)));
evalcond[8]=((((-1.0)*r10*x2568*x2579))+((r11*x2570))+(((-1.0)*sj0*x2572))+((sj3*x2574))+((r12*x2582))+((gconst16*r11*x2581))+((sj0*x2573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2585=((1.0)*gconst17);
CheckValue<IkReal> x2586 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst16*r11*sj0))+(((-1.0)*r10*sj0*x2585))+(((-1.0)*cj0*r00*x2585))+((cj0*gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2586.valid){
continue;
}
CheckValue<IkReal> x2587=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x2585)))),-1);
if(!x2587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2586.value)+(((1.5707963267949)*(x2587.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2588=IKsin(j4);
IkReal x2589=IKcos(j4);
IkReal x2590=(cj3*gconst17);
IkReal x2591=(gconst16*r21);
IkReal x2592=(gconst17*sj3);
IkReal x2593=(gconst16*r20);
IkReal x2594=(sj1*sj2);
IkReal x2595=(cj1*cj2);
IkReal x2596=(gconst16*r10);
IkReal x2597=(cj2*sj1);
IkReal x2598=(gconst16*sj3);
IkReal x2599=(cj1*sj2);
IkReal x2600=((1.0)*cj0);
IkReal x2601=((1.0)*x2589);
IkReal x2602=(gconst16*x2588);
IkReal x2603=(cj3*x2589);
IkReal x2604=(cj3*x2588);
IkReal x2605=((1.0)*gconst17*x2588);
IkReal x2606=((1.0)*sj3*x2588);
evalcond[0]=((((-1.0)*r22*x2601))+((x2588*x2591))+(((-1.0)*r20*x2605)));
evalcond[1]=(sj0+(((-1.0)*r02*x2601))+((r01*x2602))+(((-1.0)*r00*x2605)));
evalcond[2]=((((-1.0)*r10*x2605))+(((-1.0)*r12*x2601))+(((-1.0)*x2600))+((r11*x2602)));
evalcond[3]=(x2597+x2599+((sj3*x2593))+((x2591*x2603))+(((-1.0)*r20*x2590*x2601))+((r22*x2604))+((r21*x2592)));
evalcond[4]=((((-1.0)*sj3*x2591*x2601))+x2594+((r20*x2589*x2592))+((cj3*x2593))+(((-1.0)*x2595))+(((-1.0)*r22*x2606))+((r21*x2590)));
evalcond[5]=(((r01*x2590))+((r00*x2589*x2592))+((cj0*x2599))+((cj0*x2597))+(((-1.0)*r02*x2606))+((cj3*gconst16*r00))+(((-1.0)*r01*x2598*x2601)));
evalcond[6]=(((gconst16*r01*x2603))+((r00*x2598))+((r01*x2592))+((cj0*x2595))+((r02*x2604))+(((-1.0)*x2594*x2600))+(((-1.0)*r00*x2590*x2601)));
evalcond[7]=(((cj3*x2596))+(((-1.0)*r12*x2606))+(((-1.0)*r11*x2598*x2601))+((r11*x2590))+((sj0*x2597))+((sj0*x2599))+((r10*x2589*x2592)));
evalcond[8]=(((gconst16*r11*x2603))+((sj3*x2596))+(((-1.0)*sj0*x2594))+((r11*x2592))+((r12*x2604))+(((-1.0)*r10*x2590*x2601))+((sj0*x2595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2607=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x2607.valid){
continue;
}
CheckValue<IkReal> x2608 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2607.value)))+(x2608.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2609=IKsin(j4);
IkReal x2610=IKcos(j4);
IkReal x2611=(cj3*gconst17);
IkReal x2612=(gconst16*r21);
IkReal x2613=(gconst17*sj3);
IkReal x2614=(gconst16*r20);
IkReal x2615=(sj1*sj2);
IkReal x2616=(cj1*cj2);
IkReal x2617=(gconst16*r10);
IkReal x2618=(cj2*sj1);
IkReal x2619=(gconst16*sj3);
IkReal x2620=(cj1*sj2);
IkReal x2621=((1.0)*cj0);
IkReal x2622=((1.0)*x2610);
IkReal x2623=(gconst16*x2609);
IkReal x2624=(cj3*x2610);
IkReal x2625=(cj3*x2609);
IkReal x2626=((1.0)*gconst17*x2609);
IkReal x2627=((1.0)*sj3*x2609);
evalcond[0]=((((-1.0)*r22*x2622))+((x2609*x2612))+(((-1.0)*r20*x2626)));
evalcond[1]=(((r01*x2623))+(((-1.0)*r00*x2626))+sj0+(((-1.0)*r02*x2622)));
evalcond[2]=((((-1.0)*r12*x2622))+(((-1.0)*r10*x2626))+((r11*x2623))+(((-1.0)*x2621)));
evalcond[3]=((((-1.0)*r20*x2611*x2622))+((x2612*x2624))+((r22*x2625))+((r21*x2613))+x2618+x2620+((sj3*x2614)));
evalcond[4]=((((-1.0)*x2616))+((cj3*x2614))+(((-1.0)*r22*x2627))+(((-1.0)*sj3*x2612*x2622))+((r20*x2610*x2613))+((r21*x2611))+x2615);
evalcond[5]=(((r01*x2611))+(((-1.0)*r01*x2619*x2622))+(((-1.0)*r02*x2627))+((cj0*x2620))+((cj3*gconst16*r00))+((cj0*x2618))+((r00*x2610*x2613)));
evalcond[6]=(((r00*x2619))+((r01*x2613))+((r02*x2625))+(((-1.0)*r00*x2611*x2622))+(((-1.0)*x2615*x2621))+((gconst16*r01*x2624))+((cj0*x2616)));
evalcond[7]=((((-1.0)*r12*x2627))+((cj3*x2617))+(((-1.0)*r11*x2619*x2622))+((r10*x2610*x2613))+((r11*x2611))+((sj0*x2620))+((sj0*x2618)));
evalcond[8]=(((gconst16*r11*x2624))+(((-1.0)*r10*x2611*x2622))+((r11*x2613))+((r12*x2625))+((sj0*x2616))+(((-1.0)*sj0*x2615))+((sj3*x2617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2628=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2628;
j4eval[1]=IKsign(x2628);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2629=((1.0)*cj5);
IkReal x2630=((((-1.0)*r21*x2629))+(((-1.0)*r20*sj5)));
j4eval[0]=x2630;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x2629))+((r01*sj5))))));
j4eval[2]=IKsign(x2630);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2631=cj5*cj5;
IkReal x2632=(cj3*r21);
IkReal x2633=(cj5*sj5);
IkReal x2634=((1.0)*cj3);
IkReal x2635=((((-1.0)*r10*r20*x2631*x2634))+(((-1.0)*r11*x2632))+((r11*x2631*x2632))+((r10*x2632*x2633))+((cj3*r11*r20*x2633))+(((-1.0)*r12*r22*x2634)));
j4eval[0]=x2635;
j4eval[1]=IKsign(x2635);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2636=cj5*cj5;
IkReal x2637=((1.0)*cj3);
IkReal x2638=(r10*r21);
IkReal x2639=(cj5*sj5);
IkReal x2640=(r11*r21);
IkReal x2641=(r11*r20);
IkReal x2642=(r22*sj3);
IkReal x2643=(r10*r20);
IkReal x2644=((1.0)*sj3*x2636);
CheckValue<IkReal> x2645=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2637*x2640))+((cj3*x2636*x2640))+(((-1.0)*x2636*x2637*x2643))+((cj3*x2639*x2641))+((cj3*x2638*x2639))+(((-1.0)*r12*r22*x2637)))),-1);
if(!x2645.valid){
continue;
}
CheckValue<IkReal> x2646 = IKatan2WithCheck(IkReal((((r10*sj5*x2642))+((cj5*r11*x2642)))),IkReal(((((-1.0)*sj3*x2639*x2643))+((sj3*x2639*x2640))+((sj3*x2638))+(((-1.0)*x2641*x2644))+(((-1.0)*x2638*x2644)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2645.value)))+(x2646.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2647=IKsin(j4);
IkReal x2648=IKcos(j4);
IkReal x2649=(cj2*sj1);
IkReal x2650=(cj1*sj2);
IkReal x2651=(cj5*sj3);
IkReal x2652=(cj5*r10);
IkReal x2653=(r00*sj5);
IkReal x2654=(sj1*sj2);
IkReal x2655=(r11*sj5);
IkReal x2656=(cj3*cj5);
IkReal x2657=(cj3*sj5);
IkReal x2658=(r21*sj5);
IkReal x2659=(cj1*cj2);
IkReal x2660=(sj3*sj5);
IkReal x2661=(r01*sj5);
IkReal x2662=((1.0)*x2648);
IkReal x2663=((1.0)*x2647);
IkReal x2664=(cj3*x2647);
IkReal x2665=(cj3*x2648);
IkReal x2666=(x2649+x2650);
evalcond[0]=((((-1.0)*cj5*r20*x2663))+((x2647*x2658))+(((-1.0)*r22*x2662)));
evalcond[1]=((((-1.0)*r02*x2662))+(((-1.0)*cj5*r00*x2663))+((x2647*x2661)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x2662))+(((-1.0)*x2652*x2663))+((x2647*x2655)));
evalcond[3]=(((r11*x2651))+((r12*x2664))+(((-1.0)*cj3*x2652*x2662))+((x2655*x2665))+((r10*x2660)));
evalcond[4]=((((-1.0)*sj3*x2655*x2662))+(((-1.0)*r12*sj3*x2663))+((r11*x2656))+((r10*x2657))+((r10*x2648*x2651)));
evalcond[5]=(((r21*x2651))+(((-1.0)*r20*x2656*x2662))+((r22*x2664))+((r21*x2648*x2657))+((r20*x2660))+x2666);
evalcond[6]=(((r00*x2648*x2651))+((r01*x2656))+(((-1.0)*r01*x2660*x2662))+((cj3*x2653))+x2666+(((-1.0)*r02*sj3*x2663)));
evalcond[7]=(((r02*x2664))+((r01*x2648*x2657))+((r01*x2651))+(((-1.0)*r00*x2656*x2662))+((sj3*x2653))+(((-1.0)*x2654))+x2659);
evalcond[8]=(((r21*x2656))+(((-1.0)*sj3*x2658*x2662))+((r20*x2648*x2651))+(((-1.0)*r22*sj3*x2663))+(((-1.0)*x2659))+x2654+((r20*x2657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2667=((1.0)*cj5);
CheckValue<IkReal> x2668 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2667)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2668.valid){
continue;
}
CheckValue<IkReal> x2669=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2667))+(((-1.0)*r20*sj5)))),-1);
if(!x2669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2668.value)+(((1.5707963267949)*(x2669.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2670=IKsin(j4);
IkReal x2671=IKcos(j4);
IkReal x2672=(cj2*sj1);
IkReal x2673=(cj1*sj2);
IkReal x2674=(cj5*sj3);
IkReal x2675=(cj5*r10);
IkReal x2676=(r00*sj5);
IkReal x2677=(sj1*sj2);
IkReal x2678=(r11*sj5);
IkReal x2679=(cj3*cj5);
IkReal x2680=(cj3*sj5);
IkReal x2681=(r21*sj5);
IkReal x2682=(cj1*cj2);
IkReal x2683=(sj3*sj5);
IkReal x2684=(r01*sj5);
IkReal x2685=((1.0)*x2671);
IkReal x2686=((1.0)*x2670);
IkReal x2687=(cj3*x2670);
IkReal x2688=(cj3*x2671);
IkReal x2689=(x2673+x2672);
evalcond[0]=(((x2670*x2681))+(((-1.0)*cj5*r20*x2686))+(((-1.0)*r22*x2685)));
evalcond[1]=((((-1.0)*r02*x2685))+((x2670*x2684))+(((-1.0)*cj5*r00*x2686)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x2685))+(((-1.0)*x2675*x2686))+((x2670*x2678)));
evalcond[3]=((((-1.0)*cj3*x2675*x2685))+((r10*x2683))+((x2678*x2688))+((r12*x2687))+((r11*x2674)));
evalcond[4]=(((r10*x2680))+(((-1.0)*sj3*x2678*x2685))+((r10*x2671*x2674))+(((-1.0)*r12*sj3*x2686))+((r11*x2679)));
evalcond[5]=((((-1.0)*r20*x2679*x2685))+((r21*x2674))+((r21*x2671*x2680))+((r22*x2687))+((r20*x2683))+x2689);
evalcond[6]=((((-1.0)*r02*sj3*x2686))+((r00*x2671*x2674))+((cj3*x2676))+((r01*x2679))+(((-1.0)*r01*x2683*x2685))+x2689);
evalcond[7]=(((r02*x2687))+(((-1.0)*x2677))+(((-1.0)*r00*x2679*x2685))+((r01*x2671*x2680))+((sj3*x2676))+((r01*x2674))+x2682);
evalcond[8]=(((r21*x2679))+(((-1.0)*r22*sj3*x2686))+(((-1.0)*sj3*x2681*x2685))+((r20*x2671*x2674))+(((-1.0)*x2682))+((r20*x2680))+x2677);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2690 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2690.valid){
continue;
}
CheckValue<IkReal> x2691=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2690.value)+(((1.5707963267949)*(x2691.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2692=IKsin(j4);
IkReal x2693=IKcos(j4);
IkReal x2694=(cj2*sj1);
IkReal x2695=(cj1*sj2);
IkReal x2696=(cj5*sj3);
IkReal x2697=(cj5*r10);
IkReal x2698=(r00*sj5);
IkReal x2699=(sj1*sj2);
IkReal x2700=(r11*sj5);
IkReal x2701=(cj3*cj5);
IkReal x2702=(cj3*sj5);
IkReal x2703=(r21*sj5);
IkReal x2704=(cj1*cj2);
IkReal x2705=(sj3*sj5);
IkReal x2706=(r01*sj5);
IkReal x2707=((1.0)*x2693);
IkReal x2708=((1.0)*x2692);
IkReal x2709=(cj3*x2692);
IkReal x2710=(cj3*x2693);
IkReal x2711=(x2695+x2694);
evalcond[0]=((((-1.0)*r22*x2707))+(((-1.0)*cj5*r20*x2708))+((x2692*x2703)));
evalcond[1]=((((-1.0)*r02*x2707))+(((-1.0)*cj5*r00*x2708))+((x2692*x2706)));
evalcond[2]=((-1.0)+(((-1.0)*x2697*x2708))+(((-1.0)*r12*x2707))+((x2692*x2700)));
evalcond[3]=(((r12*x2709))+((r10*x2705))+(((-1.0)*cj3*x2697*x2707))+((x2700*x2710))+((r11*x2696)));
evalcond[4]=(((r11*x2701))+(((-1.0)*sj3*x2700*x2707))+((r10*x2702))+(((-1.0)*r12*sj3*x2708))+((r10*x2693*x2696)));
evalcond[5]=(x2711+((r22*x2709))+((r21*x2693*x2702))+((r20*x2705))+((r21*x2696))+(((-1.0)*r20*x2701*x2707)));
evalcond[6]=(x2711+((r01*x2701))+(((-1.0)*r01*x2705*x2707))+((r00*x2693*x2696))+(((-1.0)*r02*sj3*x2708))+((cj3*x2698)));
evalcond[7]=(x2704+((r01*x2693*x2702))+(((-1.0)*r00*x2701*x2707))+((r01*x2696))+((sj3*x2698))+(((-1.0)*x2699))+((r02*x2709)));
evalcond[8]=((((-1.0)*sj3*x2703*x2707))+((r20*x2693*x2696))+((r20*x2702))+(((-1.0)*r22*sj3*x2708))+((r21*x2701))+(((-1.0)*x2704))+x2699);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2712=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2712;
j4eval[1]=IKsign(x2712);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2713=((1.0)*cj5);
IkReal x2714=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2713)));
j4eval[0]=x2714;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x2713))+((r21*sj5))))));
j4eval[2]=IKsign(x2714);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2715=cj5*cj5;
IkReal x2716=(cj3*r21);
IkReal x2717=(cj5*sj5);
IkReal x2718=((1.0)*cj3);
IkReal x2719=(((cj3*r11*r20*x2717))+(((-1.0)*r11*x2716))+((r10*x2716*x2717))+(((-1.0)*r12*r22*x2718))+(((-1.0)*r10*r20*x2715*x2718))+((r11*x2715*x2716)));
j4eval[0]=x2719;
j4eval[1]=IKsign(x2719);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2720=cj5*cj5;
IkReal x2721=((1.0)*cj3);
IkReal x2722=(r10*r21);
IkReal x2723=(cj5*sj5);
IkReal x2724=(r11*r21);
IkReal x2725=(r11*r20);
IkReal x2726=(r22*sj3);
IkReal x2727=(r10*r20);
IkReal x2728=((1.0)*sj3*x2720);
CheckValue<IkReal> x2729 = IKatan2WithCheck(IkReal((((cj5*r11*x2726))+((r10*sj5*x2726)))),IkReal(((((-1.0)*x2725*x2728))+((sj3*x2723*x2724))+(((-1.0)*x2722*x2728))+(((-1.0)*sj3*x2723*x2727))+((sj3*x2722)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2729.valid){
continue;
}
CheckValue<IkReal> x2730=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x2721))+((cj3*x2720*x2724))+(((-1.0)*x2721*x2724))+(((-1.0)*x2720*x2721*x2727))+((cj3*x2723*x2725))+((cj3*x2722*x2723)))),-1);
if(!x2730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2729.value)+(((1.5707963267949)*(x2730.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2731=IKsin(j4);
IkReal x2732=IKcos(j4);
IkReal x2733=(sj1*sj2);
IkReal x2734=(cj5*sj3);
IkReal x2735=(cj5*r10);
IkReal x2736=(r00*sj5);
IkReal x2737=(r11*sj5);
IkReal x2738=(cj3*cj5);
IkReal x2739=((1.0)*cj1);
IkReal x2740=(cj3*sj5);
IkReal x2741=(r21*sj5);
IkReal x2742=(cj2*sj1);
IkReal x2743=(sj3*sj5);
IkReal x2744=(r01*sj5);
IkReal x2745=(cj2*x2739);
IkReal x2746=((1.0)*x2732);
IkReal x2747=((1.0)*x2731);
IkReal x2748=(cj3*x2731);
IkReal x2749=(cj3*x2732);
evalcond[0]=(((x2731*x2741))+(((-1.0)*cj5*r20*x2747))+(((-1.0)*r22*x2746)));
evalcond[1]=(((x2731*x2744))+(((-1.0)*cj5*r00*x2747))+(((-1.0)*r02*x2746)));
evalcond[2]=((1.0)+((x2731*x2737))+(((-1.0)*x2735*x2747))+(((-1.0)*r12*x2746)));
evalcond[3]=((((-1.0)*cj3*x2735*x2746))+((r12*x2748))+((r10*x2743))+((x2737*x2749))+((r11*x2734)));
evalcond[4]=(((r10*x2740))+((r10*x2732*x2734))+(((-1.0)*r12*sj3*x2747))+(((-1.0)*sj3*x2737*x2746))+((r11*x2738)));
evalcond[5]=(x2742+((r22*x2748))+((cj1*sj2))+((r21*x2734))+((r20*x2743))+((r21*x2732*x2740))+(((-1.0)*r20*x2738*x2746)));
evalcond[6]=(x2733+((sj3*x2736))+((r01*x2734))+(((-1.0)*r00*x2738*x2746))+(((-1.0)*x2745))+((r01*x2732*x2740))+((r02*x2748)));
evalcond[7]=(x2733+((r20*x2732*x2734))+(((-1.0)*sj3*x2741*x2746))+((r21*x2738))+((r20*x2740))+(((-1.0)*r22*sj3*x2747))+(((-1.0)*x2745)));
evalcond[8]=((((-1.0)*sj2*x2739))+((r00*x2732*x2734))+((r01*x2738))+(((-1.0)*r02*sj3*x2747))+((cj3*x2736))+(((-1.0)*x2742))+(((-1.0)*r01*x2743*x2746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2750=((1.0)*cj5);
CheckValue<IkReal> x2751 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2750)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2751.valid){
continue;
}
CheckValue<IkReal> x2752=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2750))+(((-1.0)*r00*sj5)))),-1);
if(!x2752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2751.value)+(((1.5707963267949)*(x2752.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2753=IKsin(j4);
IkReal x2754=IKcos(j4);
IkReal x2755=(sj1*sj2);
IkReal x2756=(cj5*sj3);
IkReal x2757=(cj5*r10);
IkReal x2758=(r00*sj5);
IkReal x2759=(r11*sj5);
IkReal x2760=(cj3*cj5);
IkReal x2761=((1.0)*cj1);
IkReal x2762=(cj3*sj5);
IkReal x2763=(r21*sj5);
IkReal x2764=(cj2*sj1);
IkReal x2765=(sj3*sj5);
IkReal x2766=(r01*sj5);
IkReal x2767=(cj2*x2761);
IkReal x2768=((1.0)*x2754);
IkReal x2769=((1.0)*x2753);
IkReal x2770=(cj3*x2753);
IkReal x2771=(cj3*x2754);
evalcond[0]=((((-1.0)*cj5*r20*x2769))+((x2753*x2763))+(((-1.0)*r22*x2768)));
evalcond[1]=((((-1.0)*r02*x2768))+(((-1.0)*cj5*r00*x2769))+((x2753*x2766)));
evalcond[2]=((1.0)+((x2753*x2759))+(((-1.0)*r12*x2768))+(((-1.0)*x2757*x2769)));
evalcond[3]=(((r11*x2756))+(((-1.0)*cj3*x2757*x2768))+((r10*x2765))+((r12*x2770))+((x2759*x2771)));
evalcond[4]=((((-1.0)*sj3*x2759*x2768))+((r10*x2754*x2756))+((r10*x2762))+(((-1.0)*r12*sj3*x2769))+((r11*x2760)));
evalcond[5]=(x2764+((r22*x2770))+((r21*x2756))+((r21*x2754*x2762))+((cj1*sj2))+((r20*x2765))+(((-1.0)*r20*x2760*x2768)));
evalcond[6]=(x2755+((sj3*x2758))+(((-1.0)*x2767))+((r01*x2754*x2762))+((r01*x2756))+((r02*x2770))+(((-1.0)*r00*x2760*x2768)));
evalcond[7]=(x2755+(((-1.0)*sj3*x2763*x2768))+((r20*x2762))+(((-1.0)*x2767))+((r21*x2760))+(((-1.0)*r22*sj3*x2769))+((r20*x2754*x2756)));
evalcond[8]=((((-1.0)*r01*x2765*x2768))+(((-1.0)*x2764))+((r01*x2760))+((cj3*x2758))+((r00*x2754*x2756))+(((-1.0)*sj2*x2761))+(((-1.0)*r02*sj3*x2769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2772=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2772.valid){
continue;
}
CheckValue<IkReal> x2773 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2772.value)))+(x2773.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2774=IKsin(j4);
IkReal x2775=IKcos(j4);
IkReal x2776=(sj1*sj2);
IkReal x2777=(cj5*sj3);
IkReal x2778=(cj5*r10);
IkReal x2779=(r00*sj5);
IkReal x2780=(r11*sj5);
IkReal x2781=(cj3*cj5);
IkReal x2782=((1.0)*cj1);
IkReal x2783=(cj3*sj5);
IkReal x2784=(r21*sj5);
IkReal x2785=(cj2*sj1);
IkReal x2786=(sj3*sj5);
IkReal x2787=(r01*sj5);
IkReal x2788=(cj2*x2782);
IkReal x2789=((1.0)*x2775);
IkReal x2790=((1.0)*x2774);
IkReal x2791=(cj3*x2774);
IkReal x2792=(cj3*x2775);
evalcond[0]=((((-1.0)*r22*x2789))+((x2774*x2784))+(((-1.0)*cj5*r20*x2790)));
evalcond[1]=(((x2774*x2787))+(((-1.0)*cj5*r00*x2790))+(((-1.0)*r02*x2789)));
evalcond[2]=((1.0)+(((-1.0)*r12*x2789))+(((-1.0)*x2778*x2790))+((x2774*x2780)));
evalcond[3]=(((x2780*x2792))+(((-1.0)*cj3*x2778*x2789))+((r11*x2777))+((r12*x2791))+((r10*x2786)));
evalcond[4]=((((-1.0)*sj3*x2780*x2789))+((r10*x2775*x2777))+((r11*x2781))+(((-1.0)*r12*sj3*x2790))+((r10*x2783)));
evalcond[5]=(x2785+((r21*x2775*x2783))+(((-1.0)*r20*x2781*x2789))+((cj1*sj2))+((r22*x2791))+((r21*x2777))+((r20*x2786)));
evalcond[6]=((((-1.0)*x2788))+x2776+((r01*x2777))+(((-1.0)*r00*x2781*x2789))+((r02*x2791))+((r01*x2775*x2783))+((sj3*x2779)));
evalcond[7]=((((-1.0)*x2788))+x2776+((r21*x2781))+(((-1.0)*r22*sj3*x2790))+(((-1.0)*sj3*x2784*x2789))+((r20*x2783))+((r20*x2775*x2777)));
evalcond[8]=((((-1.0)*r02*sj3*x2790))+(((-1.0)*sj2*x2782))+((r01*x2781))+((r00*x2775*x2777))+(((-1.0)*x2785))+((cj3*x2779))+(((-1.0)*r01*x2786*x2789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x2793=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2793);
rxp0_2=(py*r00);
rxp1_0=(r21*x2793);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2794=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2794);
rxp0_2=(py*r00);
rxp1_0=(r21*x2794);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x2795=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x2795)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x2795)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2796=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2796);
rxp0_2=(py*r00);
rxp1_0=(r21*x2796);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2798=IKPowWithIntegerCheck(r12,-1);
if(!x2798.valid){
continue;
}
IkReal x2797=x2798.value;
CheckValue<IkReal> x2799=IKPowWithIntegerCheck(sj3,-1);
if(!x2799.valid){
continue;
}
if( IKabs((x2797*(x2799.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x2797)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2797*(x2799.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x2797))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x2797*(x2799.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x2797));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2800=IKsin(j4);
IkReal x2801=IKcos(j4);
IkReal x2802=(cj2*sj0);
IkReal x2803=(sj1*sj2);
IkReal x2804=(cj5*sj3);
IkReal x2805=(cj3*cj5);
IkReal x2806=(cj1*cj2);
IkReal x2807=(r21*sj5);
IkReal x2808=(r00*sj5);
IkReal x2809=(cj2*sj1);
IkReal x2810=(r01*sj5);
IkReal x2811=(r20*sj5);
IkReal x2812=(cj1*sj2);
IkReal x2813=((1.0)*cj0);
IkReal x2814=((1.0)*x2800);
IkReal x2815=(r20*x2801);
IkReal x2816=(r00*x2801);
IkReal x2817=(cj3*x2801);
IkReal x2818=((1.0)*x2801);
evalcond[0]=((((-1.0)*r12*x2818))+(((-1.0)*x2813)));
evalcond[1]=((((-1.0)*cj5*r20*x2814))+((x2800*x2807)));
evalcond[2]=(sj0+(((-1.0)*cj5*r00*x2814))+((x2800*x2810)));
evalcond[3]=(((sj1*x2802))+((sj0*x2812))+(((-1.0)*r12*sj3*x2814)));
evalcond[4]=(((cj1*x2802))+(((-1.0)*sj0*x2803))+((cj3*r12*x2800)));
evalcond[5]=((((-1.0)*x2805*x2815))+((r21*x2804))+x2809+x2812+((x2807*x2817))+((sj3*x2811)));
evalcond[6]=((((-1.0)*x2806))+((x2804*x2815))+(((-1.0)*sj3*x2807*x2818))+((cj3*x2811))+((r21*x2805))+x2803);
evalcond[7]=((((-1.0)*sj3*x2810*x2818))+((x2804*x2816))+((cj0*x2809))+((cj3*x2808))+((cj0*x2812))+((r01*x2805)));
evalcond[8]=(((x2810*x2817))+(((-1.0)*x2805*x2816))+((sj3*x2808))+((cj0*x2806))+((r01*x2804))+(((-1.0)*x2803*x2813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2819=((1.0)*sj3);
IkReal x2820=((1.0)*cj5);
CheckValue<IkReal> x2821=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x2820))),-1);
if(!x2821.valid){
continue;
}
CheckValue<IkReal> x2822=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x2820))),-1);
if(!x2822.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x2821.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2822.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x2819))+(((-1.0)*r20*sj5*x2819)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x2821.value)))+IKsqr(((x2822.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x2819))+(((-1.0)*r20*sj5*x2819))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x2821.value)), ((x2822.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x2819))+(((-1.0)*r20*sj5*x2819))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2823=IKsin(j4);
IkReal x2824=IKcos(j4);
IkReal x2825=(cj2*sj0);
IkReal x2826=(sj1*sj2);
IkReal x2827=(cj5*sj3);
IkReal x2828=(cj3*cj5);
IkReal x2829=(cj1*cj2);
IkReal x2830=(r21*sj5);
IkReal x2831=(r00*sj5);
IkReal x2832=(cj2*sj1);
IkReal x2833=(r01*sj5);
IkReal x2834=(r20*sj5);
IkReal x2835=(cj1*sj2);
IkReal x2836=((1.0)*cj0);
IkReal x2837=((1.0)*x2823);
IkReal x2838=(r20*x2824);
IkReal x2839=(r00*x2824);
IkReal x2840=(cj3*x2824);
IkReal x2841=((1.0)*x2824);
evalcond[0]=((((-1.0)*x2836))+(((-1.0)*r12*x2841)));
evalcond[1]=(((x2823*x2830))+(((-1.0)*cj5*r20*x2837)));
evalcond[2]=(sj0+(((-1.0)*cj5*r00*x2837))+((x2823*x2833)));
evalcond[3]=(((sj0*x2835))+((sj1*x2825))+(((-1.0)*r12*sj3*x2837)));
evalcond[4]=(((cj3*r12*x2823))+(((-1.0)*sj0*x2826))+((cj1*x2825)));
evalcond[5]=((((-1.0)*x2828*x2838))+((r21*x2827))+((sj3*x2834))+((x2830*x2840))+x2835+x2832);
evalcond[6]=((((-1.0)*x2829))+((x2827*x2838))+((r21*x2828))+x2826+((cj3*x2834))+(((-1.0)*sj3*x2830*x2841)));
evalcond[7]=(((x2827*x2839))+((r01*x2828))+(((-1.0)*sj3*x2833*x2841))+((cj0*x2835))+((cj0*x2832))+((cj3*x2831)));
evalcond[8]=((((-1.0)*x2826*x2836))+(((-1.0)*x2828*x2839))+((sj3*x2831))+((r01*x2827))+((x2833*x2840))+((cj0*x2829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2842=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x2842.valid){
continue;
}
CheckValue<IkReal> x2843=IKPowWithIntegerCheck(r12,-1);
if(!x2843.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x2842.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x2843.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x2842.value)))+IKsqr(((-1.0)*cj0*(x2843.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x2842.value)), ((-1.0)*cj0*(x2843.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2844=IKsin(j4);
IkReal x2845=IKcos(j4);
IkReal x2846=(cj2*sj0);
IkReal x2847=(sj1*sj2);
IkReal x2848=(cj5*sj3);
IkReal x2849=(cj3*cj5);
IkReal x2850=(cj1*cj2);
IkReal x2851=(r21*sj5);
IkReal x2852=(r00*sj5);
IkReal x2853=(cj2*sj1);
IkReal x2854=(r01*sj5);
IkReal x2855=(r20*sj5);
IkReal x2856=(cj1*sj2);
IkReal x2857=((1.0)*cj0);
IkReal x2858=((1.0)*x2844);
IkReal x2859=(r20*x2845);
IkReal x2860=(r00*x2845);
IkReal x2861=(cj3*x2845);
IkReal x2862=((1.0)*x2845);
evalcond[0]=((((-1.0)*r12*x2862))+(((-1.0)*x2857)));
evalcond[1]=(((x2844*x2851))+(((-1.0)*cj5*r20*x2858)));
evalcond[2]=(sj0+(((-1.0)*cj5*r00*x2858))+((x2844*x2854)));
evalcond[3]=(((sj0*x2856))+((sj1*x2846))+(((-1.0)*r12*sj3*x2858)));
evalcond[4]=((((-1.0)*sj0*x2847))+((cj1*x2846))+((cj3*r12*x2844)));
evalcond[5]=(((x2851*x2861))+((r21*x2848))+((sj3*x2855))+x2853+x2856+(((-1.0)*x2849*x2859)));
evalcond[6]=(((r21*x2849))+((cj3*x2855))+(((-1.0)*sj3*x2851*x2862))+((x2848*x2859))+(((-1.0)*x2850))+x2847);
evalcond[7]=(((cj3*x2852))+(((-1.0)*sj3*x2854*x2862))+((cj0*x2853))+((cj0*x2856))+((r01*x2849))+((x2848*x2860)));
evalcond[8]=(((x2854*x2861))+(((-1.0)*x2849*x2860))+((sj3*x2852))+((cj0*x2850))+((r01*x2848))+(((-1.0)*x2847*x2857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2863=((1.0)*cj5);
CheckValue<IkReal> x2864=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2863))+(((-1.0)*r20*sj5)))),-1);
if(!x2864.valid){
continue;
}
CheckValue<IkReal> x2865 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x2863))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x2863)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2864.value)))+(x2865.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2866=IKsin(j4);
IkReal x2867=IKcos(j4);
IkReal x2868=(r11*sj5);
IkReal x2869=(cj2*sj0);
IkReal x2870=(cj5*r10);
IkReal x2871=(sj1*sj2);
IkReal x2872=(cj5*r01);
IkReal x2873=(cj5*r00);
IkReal x2874=(cj1*cj2);
IkReal x2875=(cj3*sj5);
IkReal x2876=(r21*sj5);
IkReal x2877=(cj5*sj3);
IkReal x2878=(sj3*sj5);
IkReal x2879=(cj2*sj1);
IkReal x2880=(r01*sj5);
IkReal x2881=(cj3*cj5);
IkReal x2882=(cj1*sj2);
IkReal x2883=((1.0)*cj0);
IkReal x2884=(cj5*r20);
IkReal x2885=((1.0)*x2867);
IkReal x2886=((1.0)*x2866);
IkReal x2887=(cj3*x2867);
IkReal x2888=(sj3*x2867);
IkReal x2889=(cj3*x2866);
evalcond[0]=((((-1.0)*r22*x2885))+((x2866*x2876))+(((-1.0)*x2884*x2886)));
evalcond[1]=((((-1.0)*x2873*x2886))+sj0+((x2866*x2880))+(((-1.0)*r02*x2885)));
evalcond[2]=((((-1.0)*x2870*x2886))+((x2866*x2868))+(((-1.0)*x2883))+(((-1.0)*r12*x2885)));
evalcond[3]=((((-1.0)*r20*x2881*x2885))+((r22*x2889))+((r21*x2877))+((r21*x2867*x2875))+((r20*x2878))+x2882+x2879);
evalcond[4]=((((-1.0)*x2874))+((r21*x2881))+(((-1.0)*sj3*x2876*x2885))+(((-1.0)*r22*sj3*x2886))+((r20*x2867*x2877))+((r20*x2875))+x2871);
evalcond[5]=(((cj0*x2879))+((r00*x2875))+((cj0*x2882))+(((-1.0)*r02*sj3*x2886))+((x2873*x2888))+((cj3*x2872))+(((-1.0)*r01*x2878*x2885)));
evalcond[6]=(((r01*x2867*x2875))+((cj0*x2874))+((r00*x2878))+(((-1.0)*x2871*x2883))+((r02*x2889))+(((-1.0)*cj3*x2873*x2885))+((sj3*x2872)));
evalcond[7]=((((-1.0)*r12*sj3*x2886))+((r10*x2875))+((r11*x2881))+((sj0*x2882))+((sj1*x2869))+(((-1.0)*sj3*x2868*x2885))+((x2870*x2888)));
evalcond[8]=((((-1.0)*sj0*x2871))+(((-1.0)*cj3*x2870*x2885))+((r10*x2878))+((cj1*x2869))+((x2868*x2887))+((r11*x2877))+((r12*x2889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2890=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2890.valid){
continue;
}
CheckValue<IkReal> x2891 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2890.value)))+(x2891.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2892=IKsin(j4);
IkReal x2893=IKcos(j4);
IkReal x2894=(r11*sj5);
IkReal x2895=(cj2*sj0);
IkReal x2896=(cj5*r10);
IkReal x2897=(sj1*sj2);
IkReal x2898=(cj5*r01);
IkReal x2899=(cj5*r00);
IkReal x2900=(cj1*cj2);
IkReal x2901=(cj3*sj5);
IkReal x2902=(r21*sj5);
IkReal x2903=(cj5*sj3);
IkReal x2904=(sj3*sj5);
IkReal x2905=(cj2*sj1);
IkReal x2906=(r01*sj5);
IkReal x2907=(cj3*cj5);
IkReal x2908=(cj1*sj2);
IkReal x2909=((1.0)*cj0);
IkReal x2910=(cj5*r20);
IkReal x2911=((1.0)*x2893);
IkReal x2912=((1.0)*x2892);
IkReal x2913=(cj3*x2893);
IkReal x2914=(sj3*x2893);
IkReal x2915=(cj3*x2892);
evalcond[0]=((((-1.0)*x2910*x2912))+((x2892*x2902))+(((-1.0)*r22*x2911)));
evalcond[1]=(sj0+(((-1.0)*x2899*x2912))+(((-1.0)*r02*x2911))+((x2892*x2906)));
evalcond[2]=(((x2892*x2894))+(((-1.0)*r12*x2911))+(((-1.0)*x2909))+(((-1.0)*x2896*x2912)));
evalcond[3]=(((r21*x2903))+(((-1.0)*r20*x2907*x2911))+((r21*x2893*x2901))+((r20*x2904))+((r22*x2915))+x2905+x2908);
evalcond[4]=(((r20*x2893*x2903))+((r21*x2907))+(((-1.0)*r22*sj3*x2912))+((r20*x2901))+(((-1.0)*x2900))+x2897+(((-1.0)*sj3*x2902*x2911)));
evalcond[5]=((((-1.0)*r01*x2904*x2911))+((r00*x2901))+((cj0*x2905))+((cj0*x2908))+((cj3*x2898))+(((-1.0)*r02*sj3*x2912))+((x2899*x2914)));
evalcond[6]=(((sj3*x2898))+((r00*x2904))+((cj0*x2900))+(((-1.0)*x2897*x2909))+(((-1.0)*cj3*x2899*x2911))+((r02*x2915))+((r01*x2893*x2901)));
evalcond[7]=(((r10*x2901))+(((-1.0)*r12*sj3*x2912))+((x2896*x2914))+(((-1.0)*sj3*x2894*x2911))+((sj1*x2895))+((r11*x2907))+((sj0*x2908)));
evalcond[8]=(((r10*x2904))+((r12*x2915))+(((-1.0)*cj3*x2896*x2911))+((x2894*x2913))+((cj1*x2895))+((r11*x2903))+(((-1.0)*sj0*x2897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2916=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2916.valid){
continue;
}
CheckValue<IkReal> x2917 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2916.value)))+(x2917.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2918=IKsin(j4);
IkReal x2919=IKcos(j4);
IkReal x2920=(r11*sj5);
IkReal x2921=(cj2*sj0);
IkReal x2922=(cj5*r10);
IkReal x2923=(sj1*sj2);
IkReal x2924=(cj5*r01);
IkReal x2925=(cj5*r00);
IkReal x2926=(cj1*cj2);
IkReal x2927=(cj3*sj5);
IkReal x2928=(r21*sj5);
IkReal x2929=(cj5*sj3);
IkReal x2930=(sj3*sj5);
IkReal x2931=(cj2*sj1);
IkReal x2932=(r01*sj5);
IkReal x2933=(cj3*cj5);
IkReal x2934=(cj1*sj2);
IkReal x2935=((1.0)*cj0);
IkReal x2936=(cj5*r20);
IkReal x2937=((1.0)*x2919);
IkReal x2938=((1.0)*x2918);
IkReal x2939=(cj3*x2919);
IkReal x2940=(sj3*x2919);
IkReal x2941=(cj3*x2918);
evalcond[0]=((((-1.0)*x2936*x2938))+((x2918*x2928))+(((-1.0)*r22*x2937)));
evalcond[1]=(sj0+((x2918*x2932))+(((-1.0)*x2925*x2938))+(((-1.0)*r02*x2937)));
evalcond[2]=((((-1.0)*x2935))+((x2918*x2920))+(((-1.0)*r12*x2937))+(((-1.0)*x2922*x2938)));
evalcond[3]=((((-1.0)*r20*x2933*x2937))+((r21*x2919*x2927))+((r21*x2929))+((r22*x2941))+((r20*x2930))+x2934+x2931);
evalcond[4]=(((r21*x2933))+((r20*x2919*x2929))+((r20*x2927))+(((-1.0)*r22*sj3*x2938))+x2923+(((-1.0)*x2926))+(((-1.0)*sj3*x2928*x2937)));
evalcond[5]=((((-1.0)*r01*x2930*x2937))+(((-1.0)*r02*sj3*x2938))+((cj0*x2934))+((cj0*x2931))+((r00*x2927))+((x2925*x2940))+((cj3*x2924)));
evalcond[6]=((((-1.0)*x2923*x2935))+((sj3*x2924))+((r00*x2930))+((r02*x2941))+((cj0*x2926))+((r01*x2919*x2927))+(((-1.0)*cj3*x2925*x2937)));
evalcond[7]=(((sj1*x2921))+((r10*x2927))+(((-1.0)*r12*sj3*x2938))+(((-1.0)*sj3*x2920*x2937))+((x2922*x2940))+((sj0*x2934))+((r11*x2933)));
evalcond[8]=(((x2920*x2939))+((r10*x2930))+(((-1.0)*cj3*x2922*x2937))+(((-1.0)*sj0*x2923))+((r12*x2941))+((r11*x2929))+((cj1*x2921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2942=cj5*cj5;
IkReal x2943=r21*r21;
IkReal x2944=r20*r20;
IkReal x2945=(r20*r21);
IkReal x2946=((1.0)*cj3);
IkReal x2947=((1.0)*cj5);
IkReal x2948=(cj1*sj2);
IkReal x2949=(cj5*sj5);
IkReal x2950=(sj3*sj5);
IkReal x2951=(cj2*sj1);
IkReal x2952=(r21*sj5);
CheckValue<IkReal> x2953 = IKatan2WithCheck(IkReal((((r22*x2951))+((cj5*r21*r22*sj3))+((r22*x2948))+((r20*r22*x2950)))),IkReal(((((-1.0)*x2944*x2947*x2950))+((x2951*x2952))+((x2948*x2952))+(((-1.0)*r20*x2947*x2948))+(((-1.0)*r20*x2947*x2951))+((sj3*x2945))+(((-2.0)*sj3*x2942*x2945))+((sj3*x2943*x2949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2953.valid){
continue;
}
CheckValue<IkReal> x2954=IKPowWithIntegerCheck(IKsign((((cj3*x2942*x2943))+(((-1.0)*x2946*(r22*r22)))+(((-1.0)*x2943*x2946))+(((2.0)*cj3*x2945*x2949))+(((-1.0)*x2942*x2944*x2946)))),-1);
if(!x2954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2953.value)+(((1.5707963267949)*(x2954.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2955=IKsin(j4);
IkReal x2956=IKcos(j4);
IkReal x2957=(cj3*r21);
IkReal x2958=(r21*sj5);
IkReal x2959=(r20*sj5);
IkReal x2960=(cj5*r20);
IkReal x2961=((1.0)*x2956);
IkReal x2962=((1.0)*x2955);
evalcond[0]=((((-1.0)*r22*x2961))+(((-1.0)*x2960*x2962))+((x2955*x2958)));
evalcond[1]=(((cj2*sj1))+((cj3*r22*x2955))+(((-1.0)*cj3*x2960*x2961))+((cj5*r21*sj3))+((cj1*sj2))+((sj3*x2959))+((sj5*x2956*x2957)));
evalcond[2]=((((-1.0)*r22*sj3*x2962))+(((-1.0)*sj3*x2958*x2961))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((cj5*x2957))+((sj3*x2956*x2960))+((cj3*x2959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2963=(cj5*sj4);
IkReal x2964=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x2964))+((r00*x2963))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x2964))+(((-1.0)*r10*x2963))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x2964))+((r00*x2963))+((cj4*r02))))+IKsqr((((r11*x2964))+(((-1.0)*r10*x2963))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x2964))+((r00*x2963))+((cj4*r02))), (((r11*x2964))+(((-1.0)*r10*x2963))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2965=IKsin(j0);
IkReal x2966=IKcos(j0);
IkReal x2967=(r02*sj4);
IkReal x2968=((1.0)*sj3);
IkReal x2969=(r12*sj4);
IkReal x2970=(cj3*cj4);
IkReal x2971=((1.0)*cj5);
IkReal x2972=(r11*sj5);
IkReal x2973=(cj5*r01);
IkReal x2974=(r01*sj5);
IkReal x2975=(r00*sj5);
IkReal x2976=((0.39225)*cj2);
IkReal x2977=(cj5*r11);
IkReal x2978=((1.0)*sj2);
IkReal x2979=(r10*sj5);
IkReal x2980=((1.0)*cj4);
IkReal x2981=((0.39225)*sj1*sj2);
IkReal x2982=(cj1*x2965);
IkReal x2983=(cj4*cj5*sj3);
IkReal x2984=(cj1*x2966);
IkReal x2985=(sj1*x2966);
IkReal x2986=(sj1*x2965);
evalcond[0]=(((sj4*x2974))+(((-1.0)*r00*sj4*x2971))+(((-1.0)*r02*x2980))+x2965);
evalcond[1]=(((sj4*x2972))+(((-1.0)*x2966))+(((-1.0)*r12*x2980))+(((-1.0)*r10*sj4*x2971)));
evalcond[2]=((((-0.09465)*x2975))+(((-0.09465)*x2973))+(((-0.425)*x2984))+(((-1.0)*x2976*x2984))+(((0.10915)*x2965))+((x2966*x2981))+(((-1.0)*px)));
evalcond[3]=((((-0.09465)*x2977))+(((-0.09465)*x2979))+(((-0.425)*x2982))+(((-1.0)*x2976*x2982))+(((-1.0)*py))+(((-0.10915)*x2966))+((x2965*x2981)));
evalcond[4]=(((cj2*x2985))+(((-1.0)*cj4*x2968*x2974))+((sj2*x2984))+(((-1.0)*x2967*x2968))+((r00*x2983))+((cj3*x2973))+((cj3*x2975)));
evalcond[5]=(((x2970*x2974))+(((-1.0)*x2978*x2985))+((cj2*x2984))+(((-1.0)*r00*x2970*x2971))+((cj3*x2967))+((sj3*x2973))+((sj3*x2975)));
evalcond[6]=(((cj2*x2986))+(((-1.0)*cj4*x2968*x2972))+((sj2*x2982))+(((-1.0)*x2968*x2969))+((cj3*x2979))+((cj3*x2977))+((r10*x2983)));
evalcond[7]=(((x2970*x2972))+(((-1.0)*x2978*x2986))+(((-1.0)*r10*x2970*x2971))+((cj2*x2982))+((cj3*x2969))+((sj3*x2979))+((sj3*x2977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2987=cj5*cj5;
IkReal x2988=r21*r21;
IkReal x2989=r20*r20;
IkReal x2990=(r20*r21);
IkReal x2991=(sj1*sj2);
IkReal x2992=(r21*sj5);
IkReal x2993=(cj1*cj2);
IkReal x2994=(cj5*r20);
IkReal x2995=(cj5*sj5);
IkReal x2996=(cj3*r22);
IkReal x2997=(sj3*x2988);
CheckValue<IkReal> x2998 = IKatan2WithCheck(IkReal((((cj5*r21*x2996))+(((-1.0)*r22*x2993))+((r20*sj5*x2996))+((r22*x2991)))),IkReal((((cj3*x2988*x2995))+((cj3*x2990))+(((-2.0)*cj3*x2987*x2990))+((x2991*x2992))+((x2993*x2994))+(((-1.0)*cj3*x2989*x2995))+(((-1.0)*x2991*x2994))+(((-1.0)*x2992*x2993)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2998.valid){
continue;
}
CheckValue<IkReal> x2999=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x2987*x2989))+(((-1.0)*x2987*x2997))+(((-2.0)*sj3*x2990*x2995))+x2997)),-1);
if(!x2999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2998.value)+(((1.5707963267949)*(x2999.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x3000=IKsin(j4);
IkReal x3001=IKcos(j4);
IkReal x3002=(cj3*r21);
IkReal x3003=(r21*sj5);
IkReal x3004=(r20*sj5);
IkReal x3005=(cj5*r20);
IkReal x3006=((1.0)*x3001);
IkReal x3007=((1.0)*x3000);
evalcond[0]=((((-1.0)*r22*x3006))+((x3000*x3003))+(((-1.0)*x3005*x3007)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*cj3*x3005*x3006))+((cj5*r21*sj3))+((cj1*sj2))+((cj3*r22*x3000))+((sj3*x3004))+((sj5*x3001*x3002)));
evalcond[2]=((((-1.0)*r22*sj3*x3007))+((cj5*x3002))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((cj3*x3004))+(((-1.0)*sj3*x3003*x3006))+((sj3*x3001*x3005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3008=(cj5*sj4);
IkReal x3009=(sj4*sj5);
if( IKabs((((r00*x3008))+(((-1.0)*r01*x3009))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x3009))+(((-1.0)*r10*x3008))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x3008))+(((-1.0)*r01*x3009))+((cj4*r02))))+IKsqr((((r11*x3009))+(((-1.0)*r10*x3008))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x3008))+(((-1.0)*r01*x3009))+((cj4*r02))), (((r11*x3009))+(((-1.0)*r10*x3008))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x3010=IKsin(j0);
IkReal x3011=IKcos(j0);
IkReal x3012=(r02*sj4);
IkReal x3013=((1.0)*sj3);
IkReal x3014=(r12*sj4);
IkReal x3015=(cj3*cj4);
IkReal x3016=((1.0)*cj5);
IkReal x3017=(r11*sj5);
IkReal x3018=(cj5*r01);
IkReal x3019=(r01*sj5);
IkReal x3020=(r00*sj5);
IkReal x3021=((0.39225)*cj2);
IkReal x3022=(cj5*r11);
IkReal x3023=((1.0)*sj2);
IkReal x3024=(r10*sj5);
IkReal x3025=((1.0)*cj4);
IkReal x3026=((0.39225)*sj1*sj2);
IkReal x3027=(cj1*x3010);
IkReal x3028=(cj4*cj5*sj3);
IkReal x3029=(cj1*x3011);
IkReal x3030=(sj1*x3011);
IkReal x3031=(sj1*x3010);
evalcond[0]=(x3010+(((-1.0)*r00*sj4*x3016))+(((-1.0)*r02*x3025))+((sj4*x3019)));
evalcond[1]=((((-1.0)*r12*x3025))+(((-1.0)*r10*sj4*x3016))+(((-1.0)*x3011))+((sj4*x3017)));
evalcond[2]=((((-1.0)*x3021*x3029))+(((-0.09465)*x3020))+(((-1.0)*px))+((x3011*x3026))+(((-0.09465)*x3018))+(((0.10915)*x3010))+(((-0.425)*x3029)));
evalcond[3]=((((-1.0)*x3021*x3027))+(((-0.10915)*x3011))+(((-0.09465)*x3024))+(((-0.09465)*x3022))+(((-1.0)*py))+((x3010*x3026))+(((-0.425)*x3027)));
evalcond[4]=(((sj2*x3029))+((cj2*x3030))+((cj3*x3020))+((cj3*x3018))+((r00*x3028))+(((-1.0)*cj4*x3013*x3019))+(((-1.0)*x3012*x3013)));
evalcond[5]=(((sj3*x3020))+((x3015*x3019))+((cj2*x3029))+((cj3*x3012))+((sj3*x3018))+(((-1.0)*r00*x3015*x3016))+(((-1.0)*x3023*x3030)));
evalcond[6]=(((r10*x3028))+((sj2*x3027))+((cj2*x3031))+((cj3*x3024))+((cj3*x3022))+(((-1.0)*cj4*x3013*x3017))+(((-1.0)*x3013*x3014)));
evalcond[7]=(((sj3*x3022))+((sj3*x3024))+((x3015*x3017))+((cj2*x3027))+(((-1.0)*r10*x3015*x3016))+((cj3*x3014))+(((-1.0)*x3023*x3031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5 (5bc609e7d55fb279393b4dd0d7737b99)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
